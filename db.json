{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid-mod/source/img/apple-touch-icon.png","path":"img/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/img/loading.svg","path":"img/loading.svg","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/js/post.js","path":"js/post.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/anchor/anchor.min.js","path":"lib/anchor/anchor.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/backstretch/jquery.backstretch.min.js","path":"lib/backstretch/jquery.backstretch.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/fancybox/jquery.fancybox.min.css","path":"lib/fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/fancybox/jquery.fancybox.min.js","path":"lib/fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/github-markdown/github-markdown.min.css","path":"lib/github-markdown/github-markdown.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/katex/katex.min.css","path":"lib/katex/katex.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mathjax/MathJax.js","path":"lib/mathjax/MathJax.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/prettify/github-v2.min.css","path":"lib/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/prettify/prettify.min.js","path":"lib/prettify/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/prettify/tomorrow-night-eighties.min.css","path":"lib/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/prettify/tomorrow-night.min.css","path":"lib/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/prettify/tomorrow.min.css","path":"lib/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/prettify/tranquil-heart.min.css","path":"lib/prettify/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/popper/popper.min.js","path":"lib/popper/popper.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/smooth-scroll/SmoothScroll.min.js","path":"lib/smooth-scroll/SmoothScroll.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/tocbot/tocbot.min.js","path":"lib/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/typed/typed.min.js","path":"lib/typed/typed.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/bootstrap/css/bootstrap.min.css","path":"lib/bootstrap/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/bootstrap/js/bootstrap.min.js","path":"lib/bootstrap/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/css/mdb.min.css","path":"lib/mdbootstrap/css/mdb.min.css","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/js/mdb.min.js","path":"lib/mdbootstrap/js/mdb.min.js","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"source/ByteDanceVerify.html","path":"ByteDanceVerify.html","modified":0,"renderable":0},{"_id":"source/Icon_1.png","path":"Icon_1.png","modified":0,"renderable":0},{"_id":"source/favicon_1.ico","path":"favicon_1.ico","modified":0,"renderable":0},{"_id":"source/favicon_2.ico","path":"favicon_2.ico","modified":0,"renderable":0},{"_id":"source/icon_2.png","path":"icon_2.png","modified":0,"renderable":0},{"_id":"source/static/images/avatar.jpg","path":"static/images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-8o77d1.jpg","path":"static/images/wallhaven-8o77d1.jpg","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-21u9a7.jpg","path":"static/images/wallhaven-21u9a7.jpg","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-e7rw8r.png","path":"static/images/wallhaven-e7rw8r.png","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-m9q6e9.jpg","path":"static/images/wallhaven-m9q6e9.jpg","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-96w8e8.png","path":"static/images/wallhaven-96w8e8.png","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-pk5259.png","path":"static/images/wallhaven-pk5259.png","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-8opx8k.jpg","path":"static/images/wallhaven-8opx8k.jpg","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-r2ze21.jpg","path":"static/images/wallhaven-r2ze21.jpg","modified":0,"renderable":0},{"_id":"source/static/images/wallhaven-y8w8vl.jpg","path":"static/images/wallhaven-y8w8vl.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/ByteDanceVerify.html","hash":"473e07c0439fd6ad7c3df6147090be2c8172846e","modified":1640986632000},{"_id":"source/Icon_1.png","hash":"76bd2dc8c74c99d9b82057dc033b35dfab5a7093","modified":1643616510515},{"_id":"source/favicon_1.ico","hash":"e989c86af82c66414b63b6f189101723b2e27467","modified":1643616603393},{"_id":"source/favicon_2.ico","hash":"3358faee6fe793772e6df3bfabb21acc488e5726","modified":1643616627749},{"_id":"source/icon_2.png","hash":"2b7801042f80886655c1fa683222b639ea3f0be4","modified":1643616505833},{"_id":"source/_data/fluid_config.yml","hash":"79946df86639de2b0bc0dfcf49384e96e8b2ed2a","modified":1645338683781},{"_id":"source/_data/fluid_static_prefix.yml","hash":"b6fd0253b5958677349c64b1e3221e9add4a0b9c","modified":1640986632000},{"_id":"source/about/about.md","hash":"19a431ff03330ce6ef1cbce376a47c0b62950e2f","modified":1643972044784},{"_id":"source/_data/melody.yml","hash":"03ef6eb600d9231c9f93c01d99346b31f562c09c","modified":1640986632000},{"_id":"source/_posts/杂七杂八/GitHub 博客.md","hash":"75ccb91a561e497bbe1a4e46d938a6dfc66fbeed","modified":1643974905626},{"_id":"source/_posts/杂七杂八/时光余热.md","hash":"d64c0e4d6b9972ca942640f0b8f3c1d6871d188f","modified":1643967953722},{"_id":"source/_posts/软件测试/测试用例设计.md","hash":"c5e124b03cb0b4781b15e1dd998b631ee4123b42","modified":1643967953729},{"_id":"source/_posts/软件测试/软件测试起步.md","hash":"cca1a655e8682c8953af749039d57cd76905ea47","modified":1643967953730},{"_id":"source/_posts/软件测试/软件测试面试总结.md","hash":"c9d87ce574e1b51c5b219006bdb38fe476dd0691","modified":1643967953731},{"_id":"source/_posts/软件测试/软件测试面试题目.md","hash":"6ae2e2e775cb9dd0249146a3ed1f8eceef4718f2","modified":1643967953733},{"_id":"source/_posts/头脑风暴/头脑风暴.md","hash":"923a71926bda0257990d32809433b90741e8d405","modified":1643967953673},{"_id":"source/static/images/avatar.jpg","hash":"a052eba3ae821bc4768c9494f132572715147058","modified":1643536206565},{"_id":"source/_posts/工具流/Charles/charles.md","hash":"c732f272c923eb7961bbe1fb637453d551456e45","modified":1643967953714},{"_id":"source/_posts/前沿技术/Docker/Docker.md","hash":"9a0923e04115ff965a894dfb38292a728d6babbd","modified":1643967953255},{"_id":"source/_posts/操作系统/Linux/Linux.md","hash":"743c1dd0b94c22207fb6eca98d87a9022d9deb2c","modified":1643967953715},{"_id":"source/_posts/操作系统/Linux/Linux常用命令.md","hash":"febdd80c32ac06d8428a2b80a6ead7eeee0c59bc","modified":1643967953717},{"_id":"source/_posts/操作系统/Linux/测试环境搭建.md","hash":"e26389beb24b0c30d0a5a65de5ad5461e7accec7","modified":1643967953718},{"_id":"source/_posts/操作系统/Windows/winbase.md","hash":"2092c6b564387a4ba624a71d707a616ef18ac8d0","modified":1643967953719},{"_id":"source/_posts/操作系统/MacOS/macOS.md","hash":"d45880fe0aa80275f5f07fe75e357adc4ec9ff20","modified":1643967953719},{"_id":"source/_posts/软件测试/性能测试/Locust.md","hash":"6df1c252785d7b0014bed5a344cb80c2f1aab2e9","modified":1643967953737},{"_id":"source/_posts/软件测试/性能测试/性能测试基础.md","hash":"6ee31386731a144d17641a6d929bb05f7539cc91","modified":1643967953741},{"_id":"source/_posts/软件测试/移动端测试/Adb 常用命令.md","hash":"498de744ca5101d13fb2e606c4aa1a2f5166f18f","modified":1643967953736},{"_id":"source/_posts/软件测试/自动化测试/Robot Framework .md","hash":"3f1f8913db4a0cc865816bdafada02eed5d2b25c","modified":1643967953735},{"_id":"source/_posts/软考2022/信息系统项目管理师/信息系统项目管理.md","hash":"2048796fa508c4267449e059e2d28f47708e3514","modified":1643967953747},{"_id":"source/_posts/前端领域/小专栏/页面布局/圣杯布局和双飞翼布局.md","hash":"ff78d434c090390f86b9952154d50e0125cac68b","modified":1643967953639},{"_id":"source/_posts/前端领域/小专栏/页面布局/主流-CSS-布局.md","hash":"2bd3c02ada39a6db9e5729bac78a818bf19100fa","modified":1643967953261},{"_id":"source/_posts/前端领域/小专栏/页面布局/全屏布局.md","hash":"21cfc36c45bf274ffce3ddc56bc98436fa31484e","modified":1643967953667},{"_id":"source/_posts/前端领域/小专栏/页面布局/多列布局.md","hash":"aba8215564f95bef1f49868909395d37748b4edd","modified":1643967953683},{"_id":"source/_posts/前端领域/小专栏/页面布局/布局总结.md","hash":"c523e8ba5041fedf260948b7fd9e1957ca8a22e2","modified":1643967953691},{"_id":"source/_posts/前端领域/小专栏/页面布局/CSS3-多列布局.md","hash":"7537a0cb841d45724aedd301038f2a77aa6804f0","modified":1643967953259},{"_id":"source/_posts/前端领域/小专栏/页面布局/等分布局与等高布局.md","hash":"f6987ec30c7b17a724c6556c42dca805ca960060","modified":1643967953701},{"_id":"source/_posts/后端领域/编程语言/Python/Python 基础.md","hash":"1ba99c0b2fc110bb841473519d0a438ac58293f5","modified":1643969543203},{"_id":"source/_posts/后端领域/编程语言/Python/零基础 Python.md","hash":"4e81035871fb383a41646e04e78b4aad3cd28e28","modified":1643969571677},{"_id":"source/_posts/后端领域/编程语言/shell/shell 编程.md","hash":"3c3c505e22c93ecd7337b60a38d0a2b1c1bf75eb","modified":1643973802470},{"_id":"source/_posts/后端领域/数据库/MySQL/MySQL 基础.md","hash":"85cb8e77c7ba6a1a02f0b14694a2daf0009ff434","modified":1643967953705},{"_id":"source/_posts/后端领域/数据库/MySQL/MySQL 刷题.md","hash":"c9ac5ad86beb2695d3a4be03d831187d0be47a7e","modified":1643969477571},{"_id":"source/_posts/后端领域/数据库/MySQL/MySQL 经典.md","hash":"433f6c8cc6d2eb80490aa6627073bc9eef57d32b","modified":1643967953707},{"_id":"themes/fluid-mod/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_functions/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/_archive/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640986632000},{"_id":"themes/fluid-mod/Changelog.md","hash":"074cee20a1dd80aa4412f0f98e3903997acc2659","modified":1640986632000},{"_id":"themes/fluid-mod/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1640986632000},{"_id":"themes/fluid-mod/LICENSE","hash":"77259cff2096bcf2974d2091a28302511b9103f4","modified":1640986632000},{"_id":"themes/fluid-mod/README.md","hash":"c7dd917d689a7a4b56377682a2e6bd37d0a50755","modified":1640986632000},{"_id":"themes/fluid-mod/README_en.md","hash":"601584c4fb7ee891071108f2ab7c74217f7f35f2","modified":1640986632000},{"_id":"themes/fluid-mod/_config.yml","hash":"5e55d9d65b32b908f4a71592f3da4a6253dd8a31","modified":1643720274289},{"_id":"themes/fluid-mod/_static_prefix.yml","hash":"5cf6c5e83fd99e0d838e987338553861e9f678a4","modified":1640986632000},{"_id":"themes/fluid-mod/languages/en.yml","hash":"f3bdf6ba47d0f1be51456a330a95190efb63924b","modified":1640986632000},{"_id":"themes/fluid-mod/languages/ja.yml","hash":"f8733edfb1401672953cec096b3cfa6c5571ef2b","modified":1640986632000},{"_id":"themes/fluid-mod/languages/zh-CN.yml","hash":"509b55bdcca735e225d2b8247b09f64df9b823a2","modified":1640986632000},{"_id":"themes/fluid-mod/layout/404.ejs","hash":"383ac27283f76517955b83a22ef93a8e8359ff52","modified":1640986632000},{"_id":"themes/fluid-mod/layout/about.ejs","hash":"f76a8db47d6a0d7a50b20328e87a759043fb5385","modified":1640986632000},{"_id":"themes/fluid-mod/layout/archive.ejs","hash":"ed39c0a0facd2e746276e061a27ae38867f7b71c","modified":1640986632000},{"_id":"themes/fluid-mod/layout/categories.ejs","hash":"84deaa65d080cadf65abf8e4728217d2e29f0d08","modified":1640986632000},{"_id":"themes/fluid-mod/layout/category.ejs","hash":"26c1486149bcec74db59bd60f53c8f7d7f700854","modified":1640986632000},{"_id":"themes/fluid-mod/layout/layout.ejs","hash":"a031a89d127a1021d99f7340831316ba9c5bbb0b","modified":1640986632000},{"_id":"themes/fluid-mod/layout/index.ejs","hash":"13114c6b2a6b5b12b0d5c2ada464c3432f2fc3ce","modified":1640986632000},{"_id":"themes/fluid-mod/layout/links.ejs","hash":"09b3002f820086325976ee6733d690191c7c023d","modified":1640986632000},{"_id":"themes/fluid-mod/layout/post.ejs","hash":"2cbd76443a2fbf95eeb48f632a2a028be756c3b8","modified":1643727033115},{"_id":"themes/fluid-mod/layout/tag.ejs","hash":"7dd0cde09e80317d72985c3059e7a7fe641ca232","modified":1640986632000},{"_id":"themes/fluid-mod/layout/tags.ejs","hash":"716769e91a69014cefffdddb137098bb2ed99297","modified":1640986632000},{"_id":"themes/fluid-mod/pages/about.md","hash":"5b7b3c4b62c21329c6de51b2a66258f4a503c995","modified":1640986632000},{"_id":"themes/fluid-mod/pages/local-search.xml","hash":"92a17bc2f08c3f27bb744479fe923cc9c91888f8","modified":1640986632000},{"_id":"themes/fluid-mod/scripts/helpers.js","hash":"33d5af823268efe4109b8c2816e291955e7ac536","modified":1640986632000},{"_id":"themes/fluid-mod/scripts/lazyload.js","hash":"ffd43678282d8c2f41d2ea6b051dad4c3d0f00d7","modified":1640986632000},{"_id":"themes/fluid-mod/scripts/local-search.js","hash":"cadf9fdbecae04058b0b6b6fc0727e8c95990a30","modified":1640986632000},{"_id":"themes/fluid-mod/scripts/pages.js","hash":"b62aa2783da3dd81f54a826b1171447b45dba479","modified":1640986632000},{"_id":"themes/fluid-mod/scripts/merge-configs.js","hash":"bd4054f57c504a41fcac12d67052d814955bda64","modified":1643601686925},{"_id":"themes/fluid-mod/layout/_partial/head.ejs","hash":"1f9cb3476e94a415fbcc716a468841ef7cb0c1d4","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/css.ejs","hash":"3e4a1b1cfe8be1e9041ee7d1aaaa7777d6970f42","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/footer.ejs","hash":"c4bcbd274871f9d1ee104e5c210dc45ffd60b8a8","modified":1643980571940},{"_id":"themes/fluid-mod/layout/_partial/analytics.ejs","hash":"480682dcaa3df757e7158064fda9042ea16e050f","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/nav.ejs","hash":"92cbde349e8125b7e095741be391aff804f08c0b","modified":1643875391949},{"_id":"themes/fluid-mod/layout/_partial/scripts.ejs","hash":"bf89bf2c5dab04a979ccf546c4bf81eb59bbe624","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/paginator.ejs","hash":"b8adf88b2659eef6a45f1d7bd876d5d2ec6aba61","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/sidebar.ejs","hash":"34afb05907efa61c9162f08dcc5521c0aa89564e","modified":1643977482572},{"_id":"themes/fluid-mod/layout/_partial/toc.ejs","hash":"cf92de031c5abc74f4938d86cc5f4b1e64bc19e0","modified":1643732319937},{"_id":"themes/fluid-mod/scripts/utils/join-path.js","hash":"818aa1166f5aeb2fa3712e11481d3c65bc211524","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/apple-touch-icon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/loading.svg","hash":"229649fd6181fd3d257a6f6b00f92a23c9c9e09b","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640986632000},{"_id":"themes/fluid-mod/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/main.styl","hash":"3039219560e9512b64e73e97b1202af46b26bd4c","modified":1640986632000},{"_id":"themes/fluid-mod/source/js/lazyload.js","hash":"bb11c0a419de1fc4ce1ef633574ce0f9b91e1441","modified":1640986632000},{"_id":"themes/fluid-mod/source/js/local-search.js","hash":"08f98c6f945c663579cb5f1d401fb8da0ef96d2c","modified":1640986632000},{"_id":"themes/fluid-mod/source/js/main.js","hash":"3170c95eb938c06556cbd521e7835187f175836e","modified":1640986632000},{"_id":"themes/fluid-mod/source/js/post.js","hash":"b57bfcaff78e913b50486d708d00d56c840b9a09","modified":1643729463795},{"_id":"themes/fluid-mod/layout/_partial/comments/livere.ejs","hash":"9f04506e9e18c682e7006496ad5594a80f7b93b5","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/comments/gitalk.ejs","hash":"f2c5c7840f41fbae23fe26d8b39cf112a8fa76a2","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/comments/changyan.ejs","hash":"4edfc9e370f168a5355bad0fc2d1380ee22e719b","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/comments/disqus.ejs","hash":"d26bcbd01e69d813f1d5ae1bf47af802ad076f82","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/comments/utterances.ejs","hash":"2cfd1e0cbf0b71d74de2760fd2303bb90afedc42","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/comments/valine.ejs","hash":"9675b8f965e0bff99277a869c07097fb3b23974a","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/anchor.ejs","hash":"ba2ab7c2a65dac22c67cc9e9ea162202efca59a4","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/comments/waline.ejs","hash":"ccc428139affe6881cf37d8d3b1108ebf5a79d88","modified":1643978793310},{"_id":"themes/fluid-mod/layout/_partial/plugins/busuanzi.ejs","hash":"ad8d4de63e6057f304626f7104ba7e2fc4a0cbf3","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/daovoice.ejs","hash":"326f0b94c7e9f7a2aa332b11b160f481758d7e04","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/fancybox.ejs","hash":"54ce3d59005cb589c70ea1e3be6315aa7aa3711a","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/hitokoto.ejs","hash":"1ea6fa4e07571390e8bd8163244148f7a4fd1df3","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/math.ejs","hash":"df532a5834c2ba74e49ec1a32f02eda8e0287825","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/local-search.ejs","hash":"2fcc9d4e90dca9a2b70f40d223a7a1d813da5270","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/prettify.ejs","hash":"718da09140d3f4207cbea0c17404ca6b97647499","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/mouse-click.ejs","hash":"2c0eda43dff1d4939b5f1ce572d2ff8b2560b578","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/random_img.ejs","hash":"d2e58d1bed9c080f20323f88afb448b3c1e28648","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/smooth_scroll.ejs","hash":"148c5a80940d88a7d385ac627fbda926161391c4","modified":1640986632000},{"_id":"themes/fluid-mod/layout/_partial/plugins/typed.ejs","hash":"20759d6fe80e49580d14aa1fcbc73a1d96dca0af","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_functions/base.styl","hash":"271abbfef0414cb6d854a0278f8348e3f6fc70b1","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/pages.styl","hash":"feaec85499e2972bafaeba8a9967bba21685b2d0","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_custom/custom.styl","hash":"fd9c0b4ad23864139be3bba3ff66806986ce1325","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_mixins/base.styl","hash":"68caf7cc73fa6211f9802b69293a2a38d7322de7","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_variables/base.styl","hash":"1f651c4138049d505519aa43ddb90a6ee39cf206","modified":1643717832814},{"_id":"themes/fluid-mod/source/lib/anchor/anchor.min.js","hash":"0996588202bd062dad6f592615cb4791e1f8be91","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/backstretch/jquery.backstretch.min.js","hash":"ebe0f47f84d88d8eddc5edf5ac0e6cbf90e84f9a","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/github-markdown/github-markdown.min.css","hash":"23ec6f05c5b69aa8ffb12c59c9bf1325ee5a26d1","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/katex/katex.min.css","hash":"f29c27f5b804ec30acdebb8ec0488fc4a9e1538a","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mathjax/MathJax.js","hash":"3d924a2ceb24820e86e0426b64ecee7d44e62f95","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/prettify/github-v2.min.css","hash":"da1b8e6d4df1f044d12f461880e677d65dbbf2d3","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/prettify/prettify.min.js","hash":"03044b62cdb1c300537c14dcf424333fcf4c9110","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/prettify/tomorrow-night-eighties.min.css","hash":"a5f2102fc148359a92435b170f3bfb25e1221837","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/prettify/tomorrow-night.min.css","hash":"535256d676d247d3282e9a8ae2777c6f7df4fdc6","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/prettify/tomorrow.min.css","hash":"ea61879c64ca73a5ea233b1315faf7f2fdfebca9","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/prettify/tranquil-heart.min.css","hash":"0a8b26b4cbf19225b8766d80005664d42180f6b0","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/popper/popper.min.js","hash":"27d61a7e89d12ce0744f34fa804230eeb13ff128","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/smooth-scroll/SmoothScroll.min.js","hash":"ee5dea9ea4c5edb110f30a277e5fca7993f948b5","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/tocbot/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/typed/typed.min.js","hash":"38b792348023d55caabd7f888ae477ee143e6abe","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/_about/about.styl","hash":"c8640101f16d3c9ef71d6e753b9ed55d5c5a4b17","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/_category/categories.styl","hash":"43f49545fe2581338d971ecdf848942cc519e378","modified":1643717273121},{"_id":"themes/fluid-mod/source/css/_pages/_base/base.styl","hash":"5037cb00da1862b3e1f66458fb7f4bf8dbc670cc","modified":1643873415902},{"_id":"themes/fluid-mod/source/css/_pages/_index/index.styl","hash":"8c1d33e3f38d13f56bf1d5b028b6ef7cf8a17169","modified":1640986632000},{"_id":"themes/fluid-mod/source/css/_pages/_post/post.styl","hash":"143a105568e9826b295886ca890d54af47ea4f27","modified":1643733432777},{"_id":"themes/fluid-mod/source/css/_pages/_tag/tags.styl","hash":"ed9268c7a4ba135437ec30adfe4724cf2719e1cc","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/bootstrap/js/bootstrap.min.js","hash":"8260ff4bf54350c075bc10d18e349d158e1a4af1","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/css/all.min.css","hash":"6f4095f66e56d39ef0adefbe85a1dcfc13bd133b","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"2e97930b520222ec3c2e4188ce07cc1904beba48","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"5eb58f4263f87c543388bf66dec7d1f0b7c5b32c","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"8b356dc021032d9380af47f7608a6b62a9b6f363","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"38e6bd17442bb34e0e13a2c9bcbc5299f68be173","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"453e71a65f2958480b74fdb75a53d41068699dbf","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"3fbe9822118e91350912f51f3080ce4aa9b3ec38","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"2417fe03c7330a5160f070d6ab747a2bc4bbd41b","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"9465c5894ca2f93655fa5767b820b762aff6b518","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"5d5d1448b199c38f1b39a49b1e9b3f1381a26cad","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"d378644ff0f7549fa6f217a08dfd2566a770638e","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/bootstrap/css/bootstrap.min.css","hash":"3665a5389b7a20dd3b2fe9cb0ed3d80bec1cf2a3","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"f9583bce6740a4125e14d0628ffbd946b7ddfdda","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"2b0ebea58a0bc895400dffe8c5e434c8b12338e3","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"7b280debee5800806092e35a6bc2c6fd9c51cf63","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/js/mdb.min.js","hash":"fef8d611bbc14ad31ca9ec9e2990bfde4d873bb1","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/mdbootstrap/css/mdb.min.css","hash":"62818e7755b098a1c3b503425356570a2c7474d9","modified":1640986632000},{"_id":"source/static/images/wallhaven-8o77d1.jpg","hash":"071c62176b211ba39f5a73b3bd5baca1fb13ebe7","modified":1643530728631},{"_id":"source/static/images/wallhaven-8opx8k.jpg","hash":"297e43e77415a2d30ba44109b002762397472090","modified":1643532050358},{"_id":"source/static/images/wallhaven-21u9a7.jpg","hash":"8d6a8444cb71d65cb3981c1aa16604eb715387f5","modified":1643529988130},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"fcac55c6f9e9993cea6e2ecc729fffc36c7009b2","modified":1640986632000},{"_id":"themes/fluid-mod/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3d24b0004b9dac32a46622cefa72cb3173b13115","modified":1640986632000},{"_id":"source/static/images/wallhaven-e7rw8r.png","hash":"e7a8305e4af97b8256a8f55e6de9c1cc9077d1b8","modified":1643530970534},{"_id":"source/static/images/wallhaven-y8w8vl.jpg","hash":"e4fc0cc770a6e9522a8f3ed4931ecd9fdcf44201","modified":1643531962305},{"_id":"source/static/images/wallhaven-96w8e8.png","hash":"a416480cab88b35b310768d7a3a07262d1c3c533","modified":1643532040119},{"_id":"source/static/images/wallhaven-r2ze21.jpg","hash":"013d948f245aa568ab8e288eac76d286e05d55e8","modified":1643530702886},{"_id":"source/static/images/wallhaven-pk5259.png","hash":"1cc46424b5bc17070ac44ac8811eb48c3039e2d2","modified":1643530925742},{"_id":"source/static/images/wallhaven-m9q6e9.jpg","hash":"33b1fc333ea11f39caaeff1b4dff4c46a08ae4b5","modified":1643530617844},{"_id":"public/atom.xml","hash":"4b5eda6a8a80bc513aa4277c855a9484a7e9e996","modified":1646306765825},{"_id":"public/sitemap.xml","hash":"80bbe8510c874e222644f67139b3004216f4387e","modified":1646306765825},{"_id":"public/local-search.xml","hash":"a043d37ef66061becd07a459d18ed93f451ee870","modified":1646306765825},{"_id":"public/about/about.html","hash":"9647ddc1b4ce3cb9b39760ad24fcbf3c3d2e7ebf","modified":1646306765825},{"_id":"public/archives/2019/index.html","hash":"91c3d275bdf0cf9827100f17b9e0d58d6e155dd3","modified":1646306765825},{"_id":"public/archives/2020/index.html","hash":"2acbd949282de23a10a5e3778ce78226d085822b","modified":1646306765825},{"_id":"public/archives/2021/index.html","hash":"1777c3e3f12afbacf511c7fc84fb866b9a1ffaec","modified":1646306765825},{"_id":"public/archives/2022/index.html","hash":"432d84d1b98d48cab6bd19ce76a54d5ed2215907","modified":1646306765825},{"_id":"public/categories/博客搭建/index.html","hash":"787e8fd03acdcee10e8820ac4d71f0c57ecedd5b","modified":1646306765825},{"_id":"public/categories/杂七杂八/index.html","hash":"8516ffc35f6237a61c9bdacbb95926f8925d8dda","modified":1646306765825},{"_id":"public/categories/软件测试/index.html","hash":"285f3727bcddd5b9b99dd53ca629c4d7e9bdce00","modified":1646306765825},{"_id":"public/categories/头脑风暴/index.html","hash":"a03378df33812ff9c6992316478d8a75200a6c5d","modified":1646306765825},{"_id":"public/categories/工具流/index.html","hash":"116cbead6735b0b6bc5e0e372f66718eaecae062","modified":1646306765825},{"_id":"public/categories/前沿技术/index.html","hash":"b036e5ad65197bd60b5fd15cf65b3aabf0e3746a","modified":1646306765825},{"_id":"public/categories/操作系统/index.html","hash":"edaf72bd131cb6020a9b9ec967082e69d5acabfc","modified":1646306765825},{"_id":"public/categories/软件测试/性能测试/index.html","hash":"1a6509cf74f82911901e25b481dcf431603c014e","modified":1646306765825},{"_id":"public/categories/软件测试/移动端测试/index.html","hash":"31dcf21728b406b6e85147b39a75fa93cf373e7e","modified":1646306765825},{"_id":"public/categories/软件测试/自动化测试/index.html","hash":"898b2c7b2db216e51827d83d2234ca4ebbf2e17b","modified":1646306765825},{"_id":"public/categories/软考-2022/index.html","hash":"e340058383cbe30307f4b92aa21c2115cba98d13","modified":1646306765825},{"_id":"public/categories/工具流/Charles/index.html","hash":"0e2e05faf6090ea6dac0e15baaa6de20cc9d2fe0","modified":1646306765825},{"_id":"public/categories/前端领域/index.html","hash":"bc93e4d0d3620142d4148f792901eaf0a04ba0eb","modified":1646306765825},{"_id":"public/categories/前沿技术/Docker/index.html","hash":"78ff43f12c358fdf0ce9eb063b4eb5f3a1c968ae","modified":1646306765825},{"_id":"public/categories/操作系统/Linux/index.html","hash":"063fef6a976ccc38c8a92243dc5ceb3b9276c4e6","modified":1646306765825},{"_id":"public/categories/后端领域/index.html","hash":"666e9f9a07068eb289585c7cf2968c8bc0f9730f","modified":1646306765825},{"_id":"public/categories/操作系统/Windows/index.html","hash":"2825e7c97d15002d1191ae8a9adaa0d0bacaeb75","modified":1646306765825},{"_id":"public/categories/操作系统/MacOS/index.html","hash":"aab4dd12b52ea7bc8638ee087fac6437156df271","modified":1646306765825},{"_id":"public/categories/软考-2022/信息系统项目管理师/index.html","hash":"8e981781a08c97b7500673899b7171e623a893d6","modified":1646306765825},{"_id":"public/categories/前端领域/小专栏/index.html","hash":"3f76e3691e8d6203323203a5f2141fc0205858cd","modified":1646306765825},{"_id":"public/categories/后端领域/编程语言/index.html","hash":"bd0587ea3c21f331c13b2df0ca0ff75092426cfa","modified":1646306765825},{"_id":"public/categories/前端领域/小专栏/布局方式/index.html","hash":"75252679fd42409cc4e226d66e362a957b9d23d4","modified":1646306765825},{"_id":"public/categories/后端领域/编程语言/python/index.html","hash":"206f37719b8b57b6d0a3ebaf1fc75871f3d3ef87","modified":1646306765825},{"_id":"public/categories/后端领域/编程语言/shell/index.html","hash":"4560aa50f5b986d8d561c115cc8ca1742ecf42b4","modified":1646306765825},{"_id":"public/categories/后端领域/数据库/index.html","hash":"e39dd5e616252215c9084c59a1b9235a097e621f","modified":1646306765825},{"_id":"public/categories/后端领域/数据库/MySQL/index.html","hash":"bbed76aba1832871ca04739a7f75dbd788a761cf","modified":1646306765825},{"_id":"public/tags/github/index.html","hash":"2625a63cf179d5b06998b52bf0e75dd7535c5507","modified":1646306765825},{"_id":"public/tags/hexo/index.html","hash":"bfae9770b2bbb6e609979a23d731dbedf4e34dda","modified":1646306765825},{"_id":"public/tags/github-博客/index.html","hash":"46653d335ff18fcc97a11c3cce1de8897ae52a02","modified":1646306765825},{"_id":"public/tags/随笔/index.html","hash":"bfb91c0c70d8f9a2bfeb849a8d50bbff3cdc636b","modified":1646306765825},{"_id":"public/tags/软件测试/index.html","hash":"816ec01f07769b7fc986d941ed76b1e6b348c61c","modified":1646306765825},{"_id":"public/tags/测试用例/index.html","hash":"0878dd21e12709e02477e14ce8070140962535fa","modified":1646306765825},{"_id":"public/tags/头脑风暴/index.html","hash":"81f53a6b881de6eb6028e18f15e49ce22bf0f290","modified":1646306765825},{"_id":"public/tags/工具/index.html","hash":"6a033d4d35a800706ba2f924e3a427a6c7892b09","modified":1646306765825},{"_id":"public/tags/Charles/index.html","hash":"77a9820597fc12ac75f85dd0bc065573814ceb08","modified":1646306765825},{"_id":"public/tags/docker/index.html","hash":"b944dab7ad99d9ae6ea6b3b08bc86b70b3eaa79d","modified":1646306765825},{"_id":"public/tags/容器/index.html","hash":"e96684d366e25600b0281cc8aea61d1dc8a24bf9","modified":1646306765825},{"_id":"public/tags/linux/index.html","hash":"9cf2c8acdc50a61a07c21b26ffe6afa1721a7b29","modified":1646306765825},{"_id":"public/tags/问题总结/index.html","hash":"9fa7229777004c08abd1bf972f0022dcb36d746b","modified":1646306765825},{"_id":"public/tags/linux-命令/index.html","hash":"814660c5306c5442e27f5832f4ccd06de87a51f6","modified":1646306765825},{"_id":"public/tags/环境搭建/index.html","hash":"6481f24e6922b88df1bc3de983d1f6a6e376c7ff","modified":1646306765825},{"_id":"public/tags/windows-问题总结/index.html","hash":"27e2b71d5004d96d7a8d3aa97e5b44220be6f840","modified":1646306765825},{"_id":"public/tags/MacOS-问题总结/index.html","hash":"9d6c54394d6bb13bcd9571c52b4cb88f89d28bac","modified":1646306765825},{"_id":"public/tags/性能测试/index.html","hash":"fb639ba9bffa7b99ae3d0add01ad2401b3a5d4d1","modified":1646306765825},{"_id":"public/tags/locust/index.html","hash":"9f465010017e9d11c1a288ffc0f49a265e96cc77","modified":1646306765825},{"_id":"public/tags/移动端测试/index.html","hash":"8d22987dea5a7d30a4cf52c1c8066d81c6dedb28","modified":1646306765825},{"_id":"public/tags/adb/index.html","hash":"63c2deadac07351c8bb1af7b7afad677b1a8b087","modified":1646306765825},{"_id":"public/tags/自动化测试，Robot-Framework/index.html","hash":"89b14bc21b996c90f15749a71b8f97f1178b84c6","modified":1646306765825},{"_id":"public/tags/软考/index.html","hash":"df10a3704f38a79df77def596c0de24e1efb74b2","modified":1646306765825},{"_id":"public/tags/信息系统项目管理/index.html","hash":"639ca83e65bfa41afd3f4a78640aaaf23b12f1e5","modified":1646306765825},{"_id":"public/tags/css/index.html","hash":"119c462b8b6b7d243a162ae48e991ffb403f00bd","modified":1646306765825},{"_id":"public/tags/css-布局/index.html","hash":"b21b947a644325a53d83d66c497ff3263b28b09e","modified":1646306765825},{"_id":"public/tags/web/index.html","hash":"9095f004c1f26925a6102845a75ff9c4cad31dfb","modified":1646306765825},{"_id":"public/tags/python-零基础/index.html","hash":"517686327d08a36c59db53bd594afa610b4dcc9c","modified":1646306765825},{"_id":"public/tags/极客时间/index.html","hash":"36af8246ad7098b4dd9f625e5141dad61016b146","modified":1646306765825},{"_id":"public/tags/python/index.html","hash":"cb11e4a78f897124a803b58b341a1b877cce8b20","modified":1646306765825},{"_id":"public/tags/shell/index.html","hash":"f603c99d4d802e93f47533c71a4ac445c87eae6f","modified":1646306765825},{"_id":"public/tags/mysql/index.html","hash":"d8bbc8027c55e20e8acc4a4b3051190da87c3aec","modified":1646306765825},{"_id":"public/tags/leetcode/index.html","hash":"d1a0e45731ff04812e790623612521c60240f1ec","modified":1646306765825},{"_id":"public/tags/牛客/index.html","hash":"c706a11723ecdc545a131fb514d66585d05b422f","modified":1646306765825},{"_id":"public/404.html","hash":"b52a8365eed8971ae27a58d7fcec5626db9200bc","modified":1646306765825},{"_id":"public/about/index.html","hash":"c02fbb5141dce467baf6d72d27d2ce20de34c9bf","modified":1646306765825},{"_id":"public/post/1759737362/index.html","hash":"d03c44cab5808fc4cf4a53b868d6e5de6d40bca8","modified":1646306765825},{"_id":"public/post/1613536721/index.html","hash":"f254a77b113d2ba8e258d22790e1e88cd7d813a9","modified":1646306765825},{"_id":"public/post/2482852438/index.html","hash":"3c7e9562f04b209e06dc2e2066ac0f6b3c9618ea","modified":1646306765825},{"_id":"public/post/4178019943/index.html","hash":"7cf4c8bff3e091695fe008b152a86b3dce2e2e78","modified":1646306765825},{"_id":"public/post/2949196864/index.html","hash":"0166febe3604a684d3d92a7be1700df3f79fd1be","modified":1646306765825},{"_id":"public/post/3467120238/index.html","hash":"0e49fc53f86f75149c2db5341e5421b56a8870a2","modified":1646306765825},{"_id":"public/post/2237793324/index.html","hash":"a8847f63e595cf3d830b3fb4eb67888ca27d2d1a","modified":1646306765825},{"_id":"public/post/624053898/index.html","hash":"29a459dab5d05de225f21f990aea8eb2336414eb","modified":1646306765825},{"_id":"public/post/1992094617/index.html","hash":"bc7042ed7f2f6b5fca4dfc13144fd0ef031a9456","modified":1646306765825},{"_id":"public/post/3308975195/index.html","hash":"c943703d89898e73f627c2446c19041e078849a8","modified":1646306765825},{"_id":"public/post/4046588353/index.html","hash":"1abccc51d9127f6fdec8bfb01c50a5928abe794c","modified":1646306765825},{"_id":"public/post/2562162005/index.html","hash":"dfd78b94d10fd7924f5b6264665b45a41a930603","modified":1646306765825},{"_id":"public/post/519960898/index.html","hash":"a9af5760825094ebae0d3c2abf0c31839343811b","modified":1646306765825},{"_id":"public/post/3113662073/index.html","hash":"545b3d62f76e5ac80f4701371528b1f96d87fdeb","modified":1646306765825},{"_id":"public/post/3888393026/index.html","hash":"3985c04edd6f4eb625de802fc9399f979f6f9a8d","modified":1646306765825},{"_id":"public/post/3157456672/index.html","hash":"fef31e0d0ecbed55c75a4e0d8fd8646a353979e8","modified":1646306765825},{"_id":"public/post/1564283385/index.html","hash":"2919e70a4f9355b3ca4d7667e540f69cd7f13bef","modified":1646306765825},{"_id":"public/post/4065722285/index.html","hash":"2c2268ebc51b7feef3fd409378b6ec6628803480","modified":1646306765825},{"_id":"public/post/2689587330/index.html","hash":"df6bc222c8b0150fd996c96c8eee0a772a78b8a7","modified":1646306765825},{"_id":"public/post/4225305543/index.html","hash":"aadeb8bbbe7d6295803508f31a2aebf4f5bcbea8","modified":1646306765825},{"_id":"public/post/1206568676/index.html","hash":"a6594f0cea966d2a40e71aacb101e732dc7b4aca","modified":1646306765825},{"_id":"public/post/2030954057/index.html","hash":"250c2267f773d047cd8dfdb1ae43f6b3aa9b5917","modified":1646306765825},{"_id":"public/post/108766007/index.html","hash":"67c7c44035fe937ca497a9f77f16486ee79c9e32","modified":1646306765825},{"_id":"public/post/2734300636/index.html","hash":"71f7a28bedd1a544f284dad1baba59a8337e7962","modified":1646306765825},{"_id":"public/post/4261055596/index.html","hash":"b3a4c915df61d9721a909620f80eaa66406cb706","modified":1646306765825},{"_id":"public/post/1718216264/index.html","hash":"628fff3db8b45aa705f4a0b6baca93fbbf5e8f61","modified":1646306765825},{"_id":"public/post/1679852539/index.html","hash":"5bd46a1659da1232e390d3304866d9cc9882e818","modified":1646306765825},{"_id":"public/post/635713354/index.html","hash":"b820ec8808e5c6ec1c03e3850e370d412c004283","modified":1646306765825},{"_id":"public/post/3225661351/index.html","hash":"42cdf893298936ed87beed31dcddebe153b90a74","modified":1646306765825},{"_id":"public/post/3630208258/index.html","hash":"0ad8fad328de424dbea6a3ad1e431036fdb5eb5a","modified":1646306765825},{"_id":"public/post/2560017432/index.html","hash":"6696f6b0c830a1033d840f698d2c597674509a2f","modified":1646306765825},{"_id":"public/post/1051762681/index.html","hash":"1879a287f6aad560618845996614fdeb00b0ba7c","modified":1646306765825},{"_id":"public/archives/index.html","hash":"e80f9f8ab6320450c3838a8ea9a48c1307691e11","modified":1646306765825},{"_id":"public/archives/page/2/index.html","hash":"957b316f7cdfa5058a6291c4684ce3d0fe5a66e8","modified":1646306765825},{"_id":"public/index.html","hash":"1f4e56673d5d077f2ae9b8cd167ec649caab3f87","modified":1646306765825},{"_id":"public/page/2/index.html","hash":"3f0f3b576c80fcdf6cabd300125edf45eac579f2","modified":1646306765825},{"_id":"public/page/3/index.html","hash":"29567e9909902038e1db336da4bb65b2de6933cd","modified":1646306765825},{"_id":"public/page/4/index.html","hash":"f82570b1e351110858e41438ae3b7f6d28c11a36","modified":1646306765825},{"_id":"public/tags/index.html","hash":"85c4387fd1f96601c38eebac68788d9d0cb7eec5","modified":1646306765825},{"_id":"public/categories/index.html","hash":"958ad951d07ae5ca7f3f151760537fc69a9655ac","modified":1646306765825},{"_id":"public/links/index.html","hash":"d522aaf52668ec4722d52afb030736f4253b4321","modified":1646306765825},{"_id":"public/img/apple-touch-icon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1643980559360},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1643980559360},{"_id":"public/img/loading.svg","hash":"229649fd6181fd3d257a6f6b00f92a23c9c9e09b","modified":1643980559360},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1643980559360},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1643980559360},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1643980559360},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"2e97930b520222ec3c2e4188ce07cc1904beba48","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"5eb58f4263f87c543388bf66dec7d1f0b7c5b32c","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"38e6bd17442bb34e0e13a2c9bcbc5299f68be173","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"8b356dc021032d9380af47f7608a6b62a9b6f363","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1643980559360},{"_id":"public/ByteDanceVerify.html","hash":"473e07c0439fd6ad7c3df6147090be2c8172846e","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1643980559360},{"_id":"public/icon_2.png","hash":"2b7801042f80886655c1fa683222b639ea3f0be4","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1643980559360},{"_id":"public/favicon_1.ico","hash":"e989c86af82c66414b63b6f189101723b2e27467","modified":1643980559360},{"_id":"public/favicon_2.ico","hash":"3358faee6fe793772e6df3bfabb21acc488e5726","modified":1643980559360},{"_id":"public/Icon_1.png","hash":"76bd2dc8c74c99d9b82057dc033b35dfab5a7093","modified":1643980559360},{"_id":"public/static/images/avatar.jpg","hash":"a052eba3ae821bc4768c9494f132572715147058","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"453e71a65f2958480b74fdb75a53d41068699dbf","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"3fbe9822118e91350912f51f3080ce4aa9b3ec38","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"2417fe03c7330a5160f070d6ab747a2bc4bbd41b","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"9465c5894ca2f93655fa5767b820b762aff6b518","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"5d5d1448b199c38f1b39a49b1e9b3f1381a26cad","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"d378644ff0f7549fa6f217a08dfd2566a770638e","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1643980559360},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1643980559360},{"_id":"public/css/main.css","hash":"960a536217b62d4d17f1eda171f566984564ceea","modified":1643980559360},{"_id":"public/js/lazyload.js","hash":"bb11c0a419de1fc4ce1ef633574ce0f9b91e1441","modified":1643980559360},{"_id":"public/js/local-search.js","hash":"08f98c6f945c663579cb5f1d401fb8da0ef96d2c","modified":1643980559360},{"_id":"public/js/main.js","hash":"3170c95eb938c06556cbd521e7835187f175836e","modified":1643980559360},{"_id":"public/js/post.js","hash":"b57bfcaff78e913b50486d708d00d56c840b9a09","modified":1643980559360},{"_id":"public/lib/anchor/anchor.min.js","hash":"0996588202bd062dad6f592615cb4791e1f8be91","modified":1643980559360},{"_id":"public/lib/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1643980559360},{"_id":"public/lib/github-markdown/github-markdown.min.css","hash":"23ec6f05c5b69aa8ffb12c59c9bf1325ee5a26d1","modified":1643980559360},{"_id":"public/lib/prettify/github-v2.min.css","hash":"da1b8e6d4df1f044d12f461880e677d65dbbf2d3","modified":1643980559360},{"_id":"public/lib/prettify/tomorrow-night-eighties.min.css","hash":"a5f2102fc148359a92435b170f3bfb25e1221837","modified":1643980559360},{"_id":"public/lib/prettify/prettify.min.js","hash":"03044b62cdb1c300537c14dcf424333fcf4c9110","modified":1643980559360},{"_id":"public/lib/prettify/tomorrow-night.min.css","hash":"535256d676d247d3282e9a8ae2777c6f7df4fdc6","modified":1643980559360},{"_id":"public/lib/prettify/tomorrow.min.css","hash":"ea61879c64ca73a5ea233b1315faf7f2fdfebca9","modified":1643980559360},{"_id":"public/lib/prettify/tranquil-heart.min.css","hash":"0a8b26b4cbf19225b8766d80005664d42180f6b0","modified":1643980559360},{"_id":"public/lib/smooth-scroll/SmoothScroll.min.js","hash":"ee5dea9ea4c5edb110f30a277e5fca7993f948b5","modified":1643980559360},{"_id":"public/lib/typed/typed.min.js","hash":"38b792348023d55caabd7f888ae477ee143e6abe","modified":1643980559360},{"_id":"public/lib/tocbot/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1643980559360},{"_id":"public/lib/backstretch/jquery.backstretch.min.js","hash":"ebe0f47f84d88d8eddc5edf5ac0e6cbf90e84f9a","modified":1643980559360},{"_id":"public/lib/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1643980559360},{"_id":"public/lib/katex/katex.min.css","hash":"f29c27f5b804ec30acdebb8ec0488fc4a9e1538a","modified":1643980559360},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1643980559360},{"_id":"public/lib/mathjax/MathJax.js","hash":"3d924a2ceb24820e86e0426b64ecee7d44e62f95","modified":1643980559360},{"_id":"public/lib/popper/popper.min.js","hash":"27d61a7e89d12ce0744f34fa804230eeb13ff128","modified":1643980559360},{"_id":"public/lib/bootstrap/js/bootstrap.min.js","hash":"8260ff4bf54350c075bc10d18e349d158e1a4af1","modified":1643980559360},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"6f4095f66e56d39ef0adefbe85a1dcfc13bd133b","modified":1643980559360},{"_id":"public/lib/bootstrap/css/bootstrap.min.css","hash":"3665a5389b7a20dd3b2fe9cb0ed3d80bec1cf2a3","modified":1643980559360},{"_id":"public/lib/mdbootstrap/css/mdb.min.css","hash":"62818e7755b098a1c3b503425356570a2c7474d9","modified":1643980559360},{"_id":"public/lib/mdbootstrap/js/mdb.min.js","hash":"fef8d611bbc14ad31ca9ec9e2990bfde4d873bb1","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"f9583bce6740a4125e14d0628ffbd946b7ddfdda","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"2b0ebea58a0bc895400dffe8c5e434c8b12338e3","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"7b280debee5800806092e35a6bc2c6fd9c51cf63","modified":1643980559360},{"_id":"public/static/images/wallhaven-8o77d1.jpg","hash":"071c62176b211ba39f5a73b3bd5baca1fb13ebe7","modified":1643980559360},{"_id":"public/static/images/wallhaven-8opx8k.jpg","hash":"297e43e77415a2d30ba44109b002762397472090","modified":1643980559360},{"_id":"public/static/images/wallhaven-21u9a7.jpg","hash":"8d6a8444cb71d65cb3981c1aa16604eb715387f5","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"fcac55c6f9e9993cea6e2ecc729fffc36c7009b2","modified":1643980559360},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3d24b0004b9dac32a46622cefa72cb3173b13115","modified":1643980559360},{"_id":"public/static/images/wallhaven-e7rw8r.png","hash":"e7a8305e4af97b8256a8f55e6de9c1cc9077d1b8","modified":1643980559360},{"_id":"public/static/images/wallhaven-y8w8vl.jpg","hash":"e4fc0cc770a6e9522a8f3ed4931ecd9fdcf44201","modified":1643980559360},{"_id":"public/static/images/wallhaven-96w8e8.png","hash":"a416480cab88b35b310768d7a3a07262d1c3c533","modified":1643980559360},{"_id":"public/static/images/wallhaven-r2ze21.jpg","hash":"013d948f245aa568ab8e288eac76d286e05d55e8","modified":1643980559360},{"_id":"public/static/images/wallhaven-pk5259.png","hash":"1cc46424b5bc17070ac44ac8811eb48c3039e2d2","modified":1643980559360},{"_id":"public/static/images/wallhaven-m9q6e9.jpg","hash":"33b1fc333ea11f39caaeff1b4dff4c46a08ae4b5","modified":1643980559360},{"_id":"source/_posts/语雀/aagoit.md","hash":"10d6467fee2a2d5156384b8835c9db1095a2f621","modified":1646306767552},{"_id":"source/_posts/语雀/about_me.md","hash":"e256ad0a3b911d4ae5f0969df2156ff9d3551e54","modified":1646306767555},{"_id":"source/_posts/语雀/aq3d2d.md","hash":"4d07cef078815793f4a19605586fe920db6d6583","modified":1646306767557},{"_id":"source/_posts/语雀/aekcz3.md","hash":"6b17da5e45cc47c4940a2224bcb2520e660bb52f","modified":1646306767556},{"_id":"source/_posts/语雀/awf89w.md","hash":"07e8dba7fc37e0bb199633f0b27a92b48f0de8e0","modified":1646306767560},{"_id":"source/_posts/语雀/been08.md","hash":"84cf2f5738ee6b9c785a844a4f3d64ca1a47aadc","modified":1646306767561},{"_id":"source/_posts/语雀/bhgqvs.md","hash":"6aaf8ff66bd317cd6275fb20ebecc9c7cdfc6406","modified":1646306767562},{"_id":"source/_posts/语雀/bhxv7a.md","hash":"954e416d0c8896bfeb76ac0f14acad169012b601","modified":1646306767562},{"_id":"source/_posts/语雀/ci0ey2.md","hash":"8357affd9bb7c50d6c90f75e1c359ac5a686c69f","modified":1646306767563},{"_id":"source/_posts/语雀/dc9q37.md","hash":"f252c73ad07d12ed9e5f9b0d1e1e947e606a460e","modified":1646306767564},{"_id":"source/_posts/语雀/crulaf.md","hash":"f1bf24c3feb6fb7ab5a96dfe9fac405b075b290e","modified":1646306767565},{"_id":"source/_posts/语雀/eq68ci.md","hash":"36cb1c52a7d1719c3e86a57eaced230aee7b0265","modified":1646306767566},{"_id":"source/_posts/语雀/dt1rmw.md","hash":"7a5f3ab5b43a4a2be6fc5f28b96f19082f2f0f7b","modified":1646306767566},{"_id":"source/_posts/语雀/fyu9hw.md","hash":"717b59a6b0b3358729877b7d2ed881a1102bd4a3","modified":1646306767567},{"_id":"source/_posts/语雀/ga4ask.md","hash":"544fbe6ec9512fd74bcb37bd88ea8b751ea84e09","modified":1646306767568},{"_id":"source/_posts/语雀/gbkr03.md","hash":"eecb4827e1b8302826161785e0b4e16d5e603910","modified":1646306767569},{"_id":"source/_posts/语雀/ggv5iz.md","hash":"9784807a2e1d8b1a4416da1a97722c4ad8c20194","modified":1646306767570},{"_id":"source/_posts/语雀/gnpi26.md","hash":"ea33d33df1f97bb9bbc9c69a017a6f16495c0f76","modified":1646306767571},{"_id":"source/_posts/语雀/grwmka.md","hash":"1c9f333f5fea9b6bc894fbd8b438087dfaf5575f","modified":1646306767572},{"_id":"source/_posts/语雀/iqxdsc.md","hash":"28c764778ecd09f485156d8d7942ac4970c6b361","modified":1646306767573},{"_id":"source/_posts/语雀/id7zrz.md","hash":"0f9c2f4083f7251dfe28ba3c8dff31bc18fc6f6c","modified":1646306767573},{"_id":"source/_posts/语雀/js.md","hash":"00dae50f0c3bb5089d432073b281af5da6632acb","modified":1646306767576},{"_id":"source/_posts/语雀/irdcbg.md","hash":"4c01463c9a1e6c3d3f5178b30c8873c0c6d34cc2","modified":1646306767574},{"_id":"source/_posts/语雀/lfqmon.md","hash":"f1dc4c62391f34f04aa294c107038c01faf960ab","modified":1646306767575},{"_id":"source/_posts/语雀/kg8m6l.md","hash":"c8150b73c86201d38d497b469891935e856e782c","modified":1646306767577},{"_id":"source/_posts/语雀/llu1ig.md","hash":"6d3c3cb9c5904a702a7643d46b151f7550157467","modified":1646306767578},{"_id":"source/_posts/语雀/mp3qrl.md","hash":"83230df4e10714e5c3600c845b664cf20304b7ea","modified":1646306767579},{"_id":"source/_posts/语雀/me6f4v.md","hash":"0cac6948ab60164b3a13ada29221edf6ee71df3a","modified":1646306767578},{"_id":"source/_posts/语雀/nl9rau.md","hash":"3c555436f2ae6dfbab26d0f3622ed4c758114aa9","modified":1646306767580},{"_id":"source/_posts/语雀/mvuz6u.md","hash":"cde138ebf6d53d43f1d867c62c60ca7e870108ad","modified":1646306767581},{"_id":"source/_posts/语雀/nsgd8q.md","hash":"c3688b8bd557c8bf161d0568ae6c1baa6eb67e75","modified":1646306767581},{"_id":"source/_posts/语雀/nu3r7c.md","hash":"38c00c62a3518e1b067bec62710a52ab081cae5a","modified":1646306767582},{"_id":"source/_posts/语雀/pz9rgu.md","hash":"38f3d2dd84504a5d3c65c9685a4bc11a04b59c93","modified":1646306767583},{"_id":"source/_posts/语雀/rugw85.md","hash":"09d76c0db837ec18ec3254bb7e8e04bfec05bffa","modified":1646306767583},{"_id":"source/_posts/语雀/rxbxg6.md","hash":"f9f37a65f5d82ad010a4c877fa329df6b62f2fcd","modified":1646306767584},{"_id":"source/_posts/语雀/sftyat.md","hash":"4f977025426d852a8ea4caa28e4c279289c1557a","modified":1646306767585},{"_id":"source/_posts/语雀/sovqbi.md","hash":"77f7c3a64b9fc7f16779be500887453a95b3b97b","modified":1646306767585},{"_id":"source/_posts/语雀/sv9yd8.md","hash":"df7bdf01507e94d516d9a567a3110baae032e2c3","modified":1646306767586},{"_id":"source/_posts/语雀/thnyp2.md","hash":"a633f620fb041099dbd48dd3493bf04fbe4acf9e","modified":1646306767587},{"_id":"source/_posts/语雀/srtl9u.md","hash":"9ed540c22509cfc809b7106f3cab4eda1497bcd6","modified":1646306767587},{"_id":"source/_posts/语雀/uauyy8.md","hash":"dfcb65e1c587a69466bd75c78686ab205204e3b5","modified":1646306767588},{"_id":"source/_posts/语雀/ugpswt.md","hash":"90962e29e6c402fec93a3d8756c836626740e665","modified":1646306767591},{"_id":"source/_posts/语雀/ucu8ug.md","hash":"826cad578030d9c6074f3cae89941b457cd2f812","modified":1646306767593},{"_id":"source/_posts/语雀/uvkzfv.md","hash":"6e1b53a3b2c0a940e24b71af2ad8afa535a2ce64","modified":1646306767594},{"_id":"source/_posts/语雀/vrkyau.md","hash":"d10eb09ca349d48188f860190889883f428d832d","modified":1646306767595},{"_id":"source/_posts/语雀/wkyy7o.md","hash":"7e85b101a0791d736e321830252aa10b5b735e89","modified":1646306767596},{"_id":"source/_posts/语雀/xl0on9.md","hash":"3ebabb5817b797c71fe5c65a41492e12b13f19a1","modified":1646306767597},{"_id":"source/_posts/语雀/xsqekz.md","hash":"9ccd19d394b310b26f5129c8fef80c7762989973","modified":1646306767599},{"_id":"source/_posts/语雀/xu5sbv.md","hash":"fe347600936e5429e74f679149ae41ababc91170","modified":1646306767598},{"_id":"source/_posts/语雀/ye5emo.md","hash":"d486b9dfce833c3271b50c8191615471c6e6909c","modified":1646306767599},{"_id":"source/_posts/语雀/ymoqfk.md","hash":"47dcfffaee3c6fa608cb75d9050c6322400e789d","modified":1646306767600},{"_id":"source/_posts/语雀/zphhiu.md","hash":"faabe16bf481084354a5899bd04ff785147fb53f","modified":1646306767601},{"_id":"public/post/287494289/index.html","hash":"64e605fc92358e7f4fc0c8b62e9ceec516f73073","modified":1646306765825},{"_id":"public/post/283132771/index.html","hash":"2aa59af98daca93461a9a4280e85ab9f7c8633ee","modified":1646306765825},{"_id":"public/post/1397355175/index.html","hash":"04e465dc4256fd88e19100dd5cf1ca0d05558690","modified":1646306765825},{"_id":"public/post/1339964916/index.html","hash":"f090cd6e905c33d5fe363935a7696926300b6191","modified":1646306765825},{"_id":"public/post/2639296491/index.html","hash":"24d341e030dbc9f7f97f62a5d8599be673f681e1","modified":1646306765825},{"_id":"public/post/2281554507/index.html","hash":"258a500764974211f8114e903462f7f890f5548c","modified":1646306765825},{"_id":"public/post/526984142/index.html","hash":"da58cbbbbe109bb343496b877e02c081bfa00733","modified":1646306765825},{"_id":"public/post/405347457/index.html","hash":"1782041f44a58deb5172207ee2bb5398b25f2410","modified":1646306765825},{"_id":"public/archives/page/5/index.html","hash":"36521b41bda162c80a31c0c7e101c701f4fdd667","modified":1646306765825},{"_id":"public/archives/2020/page/3/index.html","hash":"922f2500882723dda16fecfd96f8cc31023dfc46","modified":1646306765825},{"_id":"public/post/4126800539/index.html","hash":"d12a96d8609de15455aab862c9cc01910502822f","modified":1646306765825},{"_id":"public/post/1138972641/index.html","hash":"ae474253e9b05f6293479f11f585d7038cda3fd9","modified":1646306765825},{"_id":"public/post/1369736042/index.html","hash":"5645b6aad32e507434f2b0730636715158f777c9","modified":1646306765825},{"_id":"public/post/744143879/index.html","hash":"b70cb1f1aafc37fb95666ba38db6252978959e57","modified":1646306765825},{"_id":"public/post/2860160904/index.html","hash":"00e5658d68a7a93c5a31150481bb3cae3d3ac807","modified":1646306765825},{"_id":"public/post/717872510/index.html","hash":"14dc8e4c16640e5f2ff1c97f30a24133d9573962","modified":1646306765825},{"_id":"public/post/163128104/index.html","hash":"8f176206fc484a289fb49b2350f4a1855a7c8966","modified":1646306765825},{"_id":"public/post/1896924112/index.html","hash":"bea4924dddf0e648fac593e5e57870ab5fb41a00","modified":1646306765825},{"_id":"public/post/496996022/index.html","hash":"c6b4ac4f805d145b82b11b08edae01a516577834","modified":1646306765825},{"_id":"public/post/1505698396/index.html","hash":"5cbeb35b9377f8968eed6aa329d8ed06ac5bee5d","modified":1646306765825},{"_id":"public/post/1901669330/index.html","hash":"eb3a747e86120436657f9c47b12dcd070d0a1dbc","modified":1646306765825},{"_id":"public/post/2252031482/index.html","hash":"8d3d8d27e044fa1d705f2a94d6ba972ff6d59db0","modified":1646306765825},{"_id":"public/post/734607008/index.html","hash":"e00314979d6b5b857fd1983416421000c54a3cad","modified":1646306765825},{"_id":"public/post/3285629319/index.html","hash":"915e45609699d64b6845ae64be233e67bcdee9b2","modified":1646306765825},{"_id":"public/post/1848810804/index.html","hash":"cbd27cdd352f23f55235b7c530c5319f7649222a","modified":1646306765825},{"_id":"public/post/486558920/index.html","hash":"0f29b64b4424f6b1e1e710f661f20bba3de1a7a7","modified":1646306765825},{"_id":"public/post/2172419458/index.html","hash":"b30410031660e5795b7bb97710a5fc6822931a76","modified":1646306765825},{"_id":"public/post/2616650365/index.html","hash":"0b2d025c3603ad58e63770875ff518ed01f54e6c","modified":1646306765825},{"_id":"public/post/2683804451/index.html","hash":"df86b5ad507f04c9fa79c8410e96557078273eb8","modified":1646306765825},{"_id":"public/post/2224364838/index.html","hash":"42a85f4994a0dea8e2e0d83d6b6b750dda0e7423","modified":1646306765825},{"_id":"public/post/734787424/index.html","hash":"d3ffcdbb25ce065c2eac7f319859e652469dc4a2","modified":1646306765825},{"_id":"public/post/325141448/index.html","hash":"25cbf1371c1075ebd0adb5a04a48c10103173b25","modified":1646306765825},{"_id":"public/post/149806809/index.html","hash":"2530d8e09fa4de8e8e6dc50fa9525e2ee7bf6d82","modified":1646306765825},{"_id":"public/post/1069000005/index.html","hash":"6eccc3e67d5de43b752451756267ff34734e2d2f","modified":1646306765825},{"_id":"public/post/115789008/index.html","hash":"3e35a90b99ca8e9f025913935f2697b934104e28","modified":1646306765825},{"_id":"public/post/462816702/index.html","hash":"215c319e106b259fc385f3c3ae3631c8a67388c3","modified":1646306765825},{"_id":"public/post/2096731031/index.html","hash":"89445d9b9d0742fb0a08bebb32ff11d520c80398","modified":1646306765825},{"_id":"public/post/150899557/index.html","hash":"7e2a261a425b03a35db050e88acff04ef0ed8535","modified":1646306765825},{"_id":"public/post/1781628791/index.html","hash":"56cf1fc03484e4cb1de5a4d15ab9809d720b3102","modified":1646306765825},{"_id":"public/post/3336896154/index.html","hash":"9d9eb787a8be060aa8cfed9988a1db0f08058faa","modified":1646306765825},{"_id":"public/post/1148559875/index.html","hash":"2ee2d48d23068734186a06f3e0646dedde083ead","modified":1646306765825},{"_id":"public/post/1819133539/index.html","hash":"7f42724b7d7c810cde727327d4785b3139a6426c","modified":1646306765825},{"_id":"public/post/25823144/index.html","hash":"c325fc16d590df277d09e378d117bab763f9c8f8","modified":1646306765825},{"_id":"public/post/1510613147/index.html","hash":"59105db25c262ccbecc934eac61b40e37a0d91d5","modified":1646306765825},{"_id":"public/post/3807719240/index.html","hash":"9bef18eacd19d1d8925a3ec585c42637057479f6","modified":1646306765825},{"_id":"public/post/4130118625/index.html","hash":"84fcd83e4918b093b253a02ffcb5766fa69858fe","modified":1646306765825},{"_id":"public/post/1553366290/index.html","hash":"976d27decc44c2c7bc749f4a91f114076ae44c96","modified":1646306765825},{"_id":"public/post/286740215/index.html","hash":"bb2c9604de19267261ea6bf39e903a08f2a36657","modified":1646306765825},{"_id":"public/post/812704106/index.html","hash":"170a54749c1f7b3ba7c5f1163ab8264cdf7b29ce","modified":1646306765825},{"_id":"public/post/1672364730/index.html","hash":"cfceadaf94db689d770d5ceda0d21fee2be36253","modified":1646306765825},{"_id":"public/post/2359691599/index.html","hash":"2cb930a79cdb3103ca093f21c4518e45224cb08b","modified":1646306765825},{"_id":"public/archives/page/3/index.html","hash":"45d934aaceb80c49d9779c364c48a8badc52a759","modified":1646306765825},{"_id":"public/archives/page/4/index.html","hash":"eee33435659528409359077dcf58de1f8b6e4b08","modified":1646306765825},{"_id":"public/archives/2020/page/2/index.html","hash":"cd14656fb0738cbe00b2774a5d8738e66502b839","modified":1646306765825},{"_id":"public/page/5/index.html","hash":"95300f26c916da9e1f5ba3c21dc496b4ae518aab","modified":1646306765825},{"_id":"public/page/7/index.html","hash":"07065b995372fe6939e07f2c79e6e12cce53f479","modified":1646306765825},{"_id":"public/page/6/index.html","hash":"b73a5acf948fd6a44e503670e2d8102b154785f1","modified":1646306765825},{"_id":"public/page/8/index.html","hash":"2011d6785fce9555348937495cbee4a8d4a2a47e","modified":1646306765825},{"_id":"public/page/9/index.html","hash":"7ae161b6b33c4cd4e1c8f413878fa477294f5825","modified":1646306765825}],"Category":[{"name":"博客搭建","_id":"ckz8fkvb10005zc1b2hsndoqi"},{"name":"杂七杂八","_id":"ckz8fkvb40009zc1bdowg6q1m"},{"name":"软件测试","_id":"ckz8fkvb7000dzc1b62a3280m"},{"name":"头脑风暴","_id":"ckz8fkvbe000vzc1b9pug6d5e"},{"name":"工具流","_id":"ckz8fkvbm0017zc1beh5ofibm"},{"name":"前沿技术","_id":"ckz8fkvbp001ezc1baw9xh7ci"},{"name":"操作系统","_id":"ckz8fkvbu001kzc1b6szb3iyl"},{"name":"性能测试","parent":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc10025zc1b4mwy3dqh"},{"name":"移动端测试","parent":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc2002bzc1b0s4n5qfz"},{"name":"自动化测试","parent":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc2002gzc1b9aw48uvh"},{"name":"软考 2022","_id":"ckz8fkvc3002lzc1bafpva6qf"},{"name":"Charles","parent":"ckz8fkvbm0017zc1beh5ofibm","_id":"ckz8fkvc4002qzc1baapz1c5g"},{"name":"前端领域","_id":"ckz8fkvc5002vzc1b81xj7yu7"},{"name":"Docker","parent":"ckz8fkvbp001ezc1baw9xh7ci","_id":"ckz8fkvc60034zc1bh2bq16u1"},{"name":"Linux","parent":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvc8003ezc1b6gp5egle"},{"name":"后端领域","_id":"ckz8fkvcb003yzc1b1fhn9igl"},{"name":"Windows","parent":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvce004czc1b5qvz5e6a"},{"name":"MacOS","parent":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvcf004fzc1b02lv6gmz"},{"name":"信息系统项目管理师","parent":"ckz8fkvc3002lzc1bafpva6qf","_id":"ckz8fkvcg004jzc1be04y2odu"},{"name":"小专栏","parent":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvch004ozc1b2jn3a5a8"},{"name":"编程语言","parent":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvcm005ezc1bex3jbg0g"},{"name":"布局方式","parent":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvcp005nzc1b8nkf3qaa"},{"name":"python","parent":"ckz8fkvcm005ezc1bex3jbg0g","_id":"ckz8fkvcy006izc1bejbmbd5h"},{"name":"shell","parent":"ckz8fkvcm005ezc1bex3jbg0g","_id":"ckz8fkvd1006szc1b22431s3v"},{"name":"数据库","parent":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd5007ezc1b1tj31fgm"},{"name":"MySQL","parent":"ckz8fkvd5007ezc1b1tj31fgm","_id":"ckz8fkvd8007lzc1b9l6o7dp7"}],"Data":[{"_id":"fluid_static_prefix","data":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"}},{"_id":"fluid_config","data":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}}},{"_id":"melody","data":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}],"Page":[{"_content":"\n---\n  Hi, 远方的朋友，很高兴能在这里与你相遇。\n  我是 张小剩。 一个代码小白～\n  毕业于某不知名大学\n  热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。\n\n  喜欢猫猫… 更喜欢安静\n  喧闹真令人头痛！\n\n---\n","source":"about/about.md","raw":"\n---\n  Hi, 远方的朋友，很高兴能在这里与你相遇。\n  我是 张小剩。 一个代码小白～\n  毕业于某不知名大学\n  热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。\n\n  喜欢猫猫… 更喜欢安静\n  喧闹真令人头痛！\n\n---\n","date":"2022-02-04T10:54:04.784Z","updated":"2022-02-04T10:54:04.784Z","path":"about/about.html","title":"","comments":1,"layout":"page","_id":"ckz8fkvas0000zc1b9idfh2wj","content":"<hr>\n<p>  Hi, 远方的朋友，很高兴能在这里与你相遇。<br>  我是 张小剩。 一个代码小白～<br>  毕业于某不知名大学<br>  热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。</p>\n<p>  喜欢猫猫… 更喜欢安静<br>  喧闹真令人头痛！</p>\n<hr>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<hr>\n<p>  Hi, 远方的朋友，很高兴能在这里与你相遇。<br>  我是 张小剩。 一个代码小白～<br>  毕业于某不知名大学<br>  热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。</p>\n<p>  喜欢猫猫… 更喜欢安静<br>  喧闹真令人头痛！</p>\n<hr>\n"}],"Post":[{"title":"github + hexo 搭建个人博客","comments":1,"abbrlink":1613536721,"date":"2022-01-27T16:00:00.000Z","_content":"\n## 安装 Node.js\n\n首先下载稳定版\n\n[下载 Node.js](https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi)\n\n我这里给的是64位的。\n\n安装选项全部默认，一路点击`Next`。\n\n最后安装好之后，按`Win+R`打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n## 安装 Git\n\n为了把本地的网页文件上传到 github 上面去，我们需要用到分布式版本控制工具————Git\n\n[下载 Git](https://git-scm.com/download/win)\n\n安装选项还是全部默认，只不过最后一步添加路径时选择`Use Git from the Windows Command Prompt`，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入`git --version`验证是否安装成功。\n\n## 注册 Github 账号\n\n接下来就去注册一个 github 账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n\n打开 [ github ]([GitHub](https://github.com/)), 新建一个项目，输入自己的项目名字，README 初始化也要勾上。\n\n然后项目就建成了，点击`Settings`，向下拉到最后有个`GitHub Pages`，点击`Choose a theme`选择一个主题。然后等一会儿，再回到`GitHub Pages`，\n\n点击那个链接，就会出现自己的网页啦\n\n\n\n## 安装 Hexo\n\n\n\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:\\study\\program\\blog`目录下。\n\n在该目录下右键点击`Git Bash Here`，打开 git 的控制台窗口，以后我们所有的操作都在 git 控制台进行，就不要用 Windows 自带的控制台了。\n\n定位到该目录下，输入`npm i hexo-cli -g` 安装 Hexo。会有几个报错，无视它就行。\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n然后就要初始化我们的网站，输入`hexo init`初始化文件夹，接着输入`npm install`安装必备的组件。\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/)，就可以看到我们的博客啦\n\n按`ctrl+c`关闭本地服务器。\n\n官网： https://hexo.io/zh-cn/docs/\n\n## 连接 Github 与本地\n\n首先右键打开 git bash，然后输入下面命令：\n\n```bash\ngit config --global user.name \"alwayscn\"\ngit config --global user.email \"123@yeah.net\"\n\n```\n\n用户名和邮箱根据你注册 github 的信息自行修改。\n\n然后生成密钥 SSH key：\n\n```bash\nssh-keygen -t rsa -C \"123@yeah.net\"\n\n```\n\n打开 [github](https://github.com)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash 中输入\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，如果如下图所示，出现你的用户名，那就成功了。\n\n打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n\n修改配置：\n\n```bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://alwayscn.github.io/alwaysblog/\nroot: /\n\n\ndeploy: \n  type: git \n  repository: git@github.com:alwayscn/alwaysblog.git\n  branch: main\n```\n\nrepository 修改为你自己的 github 项目地址。\n\n## 写文章、发布文章\n\n首先在博客根目录下右键打开 git bash，安装一个扩展`npm i hexo-deployer-git`。\n\n然后输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`D:\\study\\program\\blog\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完 markdown 文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到 github 上。这时打开你的主页就能看到发布的文章啦。\n\n\n\n## 备份博客源文件\n\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到 github 上面。\n\n首先在 github 博客仓库下新建一个分支`hexo`，然后`git clone`到本地，把`.git`文件夹拿出来，放在博客根目录下。\n\n然后`git branch -b hexo`切换到`hexo`分支，然后`git add .`，然后`git commit -m \"xxx\"`，最后`git push origin hexo`提交就行了。\n","source":"_posts/杂七杂八/GitHub 博客.md","raw":"---\ntitle: github + hexo 搭建个人博客\ncomments: true\ntags:\n  - github\n  - hexo\n  - github 博客\ncategories:\n  - - 博客搭建\nabbrlink: 1613536721\ndate: 2022-01-28 00:00:00\n---\n\n## 安装 Node.js\n\n首先下载稳定版\n\n[下载 Node.js](https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi)\n\n我这里给的是64位的。\n\n安装选项全部默认，一路点击`Next`。\n\n最后安装好之后，按`Win+R`打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n## 安装 Git\n\n为了把本地的网页文件上传到 github 上面去，我们需要用到分布式版本控制工具————Git\n\n[下载 Git](https://git-scm.com/download/win)\n\n安装选项还是全部默认，只不过最后一步添加路径时选择`Use Git from the Windows Command Prompt`，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入`git --version`验证是否安装成功。\n\n## 注册 Github 账号\n\n接下来就去注册一个 github 账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n\n打开 [ github ]([GitHub](https://github.com/)), 新建一个项目，输入自己的项目名字，README 初始化也要勾上。\n\n然后项目就建成了，点击`Settings`，向下拉到最后有个`GitHub Pages`，点击`Choose a theme`选择一个主题。然后等一会儿，再回到`GitHub Pages`，\n\n点击那个链接，就会出现自己的网页啦\n\n\n\n## 安装 Hexo\n\n\n\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:\\study\\program\\blog`目录下。\n\n在该目录下右键点击`Git Bash Here`，打开 git 的控制台窗口，以后我们所有的操作都在 git 控制台进行，就不要用 Windows 自带的控制台了。\n\n定位到该目录下，输入`npm i hexo-cli -g` 安装 Hexo。会有几个报错，无视它就行。\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n然后就要初始化我们的网站，输入`hexo init`初始化文件夹，接着输入`npm install`安装必备的组件。\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/)，就可以看到我们的博客啦\n\n按`ctrl+c`关闭本地服务器。\n\n官网： https://hexo.io/zh-cn/docs/\n\n## 连接 Github 与本地\n\n首先右键打开 git bash，然后输入下面命令：\n\n```bash\ngit config --global user.name \"alwayscn\"\ngit config --global user.email \"123@yeah.net\"\n\n```\n\n用户名和邮箱根据你注册 github 的信息自行修改。\n\n然后生成密钥 SSH key：\n\n```bash\nssh-keygen -t rsa -C \"123@yeah.net\"\n\n```\n\n打开 [github](https://github.com)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash 中输入\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，如果如下图所示，出现你的用户名，那就成功了。\n\n打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n\n修改配置：\n\n```bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://alwayscn.github.io/alwaysblog/\nroot: /\n\n\ndeploy: \n  type: git \n  repository: git@github.com:alwayscn/alwaysblog.git\n  branch: main\n```\n\nrepository 修改为你自己的 github 项目地址。\n\n## 写文章、发布文章\n\n首先在博客根目录下右键打开 git bash，安装一个扩展`npm i hexo-deployer-git`。\n\n然后输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`D:\\study\\program\\blog\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完 markdown 文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到 github 上。这时打开你的主页就能看到发布的文章啦。\n\n\n\n## 备份博客源文件\n\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到 github 上面。\n\n首先在 github 博客仓库下新建一个分支`hexo`，然后`git clone`到本地，把`.git`文件夹拿出来，放在博客根目录下。\n\n然后`git branch -b hexo`切换到`hexo`分支，然后`git add .`，然后`git commit -m \"xxx\"`，最后`git push origin hexo`提交就行了。\n","slug":"杂七杂八/GitHub 博客","published":1,"updated":"2022-02-04T11:41:45.626Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvav0001zc1bdd836v20","content":"<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>首先下载稳定版</p>\n<p><a href=\"https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi\" rel=\"external nofollow noreferrer\">下载 Node.js</a></p>\n<p>我这里给的是64位的。</p>\n<p>安装选项全部默认，一路点击<code>Next</code>。</p>\n<p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>\n<pre><code class=\"bash\">npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><p>为了把本地的网页文件上传到 github 上面去，我们需要用到分布式版本控制工具————Git</p>\n<p><a href=\"https://git-scm.com/download/win\" rel=\"external nofollow noreferrer\">下载 Git</a></p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>\n<h2 id=\"注册-Github-账号\"><a href=\"#注册-Github-账号\" class=\"headerlink\" title=\"注册 Github 账号\"></a>注册 Github 账号</h2><p>接下来就去注册一个 github 账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p>\n<p>打开 <a href=\"%5BGitHub%5D(https://github.com/)\"> github </a>, 新建一个项目，输入自己的项目名字，README 初始化也要勾上。</p>\n<p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，</p>\n<p>点击那个链接，就会出现自己的网页啦</p>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\\study\\program\\blog</code>目录下。</p>\n<p>在该目录下右键点击<code>Git Bash Here</code>，打开 git 的控制台窗口，以后我们所有的操作都在 git 控制台进行，就不要用 Windows 自带的控制台了。</p>\n<p>定位到该目录下，输入<code>npm i hexo-cli -g</code> 安装 Hexo。会有几个报错，无视它就行。</p>\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\" rel=\"external nofollow noreferrer\">http://localhost:4000/</a>，就可以看到我们的博客啦</p>\n<p>按<code>ctrl+c</code>关闭本地服务器。</p>\n<p>官网： <a href=\"https://hexo.io/zh-cn/docs/\" rel=\"external nofollow noreferrer\">https://hexo.io/zh-cn/docs/</a></p>\n<h2 id=\"连接-Github-与本地\"><a href=\"#连接-Github-与本地\" class=\"headerlink\" title=\"连接 Github 与本地\"></a>连接 Github 与本地</h2><p>首先右键打开 git bash，然后输入下面命令：</p>\n<pre><code class=\"bash\">git config --global user.name &quot;alwayscn&quot;\ngit config --global user.email &quot;123@yeah.net&quot;\n</code></pre>\n<p>用户名和邮箱根据你注册 github 的信息自行修改。</p>\n<p>然后生成密钥 SSH key：</p>\n<pre><code class=\"bash\">ssh-keygen -t rsa -C &quot;123@yeah.net&quot;\n</code></pre>\n<p>打开 <a href=\"https://github.com/\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash 中输入</p>\n<pre><code class=\"bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p>\n<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>\n<p>修改配置：</p>\n<pre><code class=\"bash\"># URL\n## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;\nurl: https://alwayscn.github.io/alwaysblog/\nroot: /\n\n\ndeploy: \n  type: git \n  repository: git@github.com:alwayscn/alwaysblog.git\n  branch: main\n</code></pre>\n<p>repository 修改为你自己的 github 项目地址。</p>\n<h2 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开 git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>\n<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>D:\\study\\program\\blog\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完 markdown 文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到 github 上。这时打开你的主页就能看到发布的文章啦。</p>\n<h2 id=\"备份博客源文件\"><a href=\"#备份博客源文件\" class=\"headerlink\" title=\"备份博客源文件\"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到 github 上面。</p>\n<p>首先在 github 博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p>\n<p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>首先下载稳定版</p>\n<p><a href=\"https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi\">下载 Node.js</a></p>\n<p>我这里给的是64位的。</p>\n<p>安装选项全部默认，一路点击<code>Next</code>。</p>\n<p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>\n<pre><code class=\"bash\">npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><p>为了把本地的网页文件上传到 github 上面去，我们需要用到分布式版本控制工具————Git</p>\n<p><a href=\"https://git-scm.com/download/win\">下载 Git</a></p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>\n<h2 id=\"注册-Github-账号\"><a href=\"#注册-Github-账号\" class=\"headerlink\" title=\"注册 Github 账号\"></a>注册 Github 账号</h2><p>接下来就去注册一个 github 账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p>\n<p>打开 <a href=\"%5BGitHub%5D(https://github.com/)\"> github </a>, 新建一个项目，输入自己的项目名字，README 初始化也要勾上。</p>\n<p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，</p>\n<p>点击那个链接，就会出现自己的网页啦</p>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\\study\\program\\blog</code>目录下。</p>\n<p>在该目录下右键点击<code>Git Bash Here</code>，打开 git 的控制台窗口，以后我们所有的操作都在 git 控制台进行，就不要用 Windows 自带的控制台了。</p>\n<p>定位到该目录下，输入<code>npm i hexo-cli -g</code> 安装 Hexo。会有几个报错，无视它就行。</p>\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a>，就可以看到我们的博客啦</p>\n<p>按<code>ctrl+c</code>关闭本地服务器。</p>\n<p>官网： <a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></p>\n<h2 id=\"连接-Github-与本地\"><a href=\"#连接-Github-与本地\" class=\"headerlink\" title=\"连接 Github 与本地\"></a>连接 Github 与本地</h2><p>首先右键打开 git bash，然后输入下面命令：</p>\n<pre><code class=\"bash\">git config --global user.name &quot;alwayscn&quot;\ngit config --global user.email &quot;123@yeah.net&quot;\n</code></pre>\n<p>用户名和邮箱根据你注册 github 的信息自行修改。</p>\n<p>然后生成密钥 SSH key：</p>\n<pre><code class=\"bash\">ssh-keygen -t rsa -C &quot;123@yeah.net&quot;\n</code></pre>\n<p>打开 <a href=\"https://github.com/\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash 中输入</p>\n<pre><code class=\"bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p>\n<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>\n<p>修改配置：</p>\n<pre><code class=\"bash\"># URL\n## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;\nurl: https://alwayscn.github.io/alwaysblog/\nroot: /\n\n\ndeploy: \n  type: git \n  repository: git@github.com:alwayscn/alwaysblog.git\n  branch: main\n</code></pre>\n<p>repository 修改为你自己的 github 项目地址。</p>\n<h2 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开 git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>\n<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>D:\\study\\program\\blog\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完 markdown 文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到 github 上。这时打开你的主页就能看到发布的文章啦。</p>\n<h2 id=\"备份博客源文件\"><a href=\"#备份博客源文件\" class=\"headerlink\" title=\"备份博客源文件\"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到 github 上面。</p>\n<p>首先在 github 博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p>\n<p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</p>\n"},{"title":"时光余热","comments":1,"abbrlink":1759737362,"date":"2022-01-21T16:00:00.000Z","_content":"\n## 练字总结\n\n### 字帖选择\n\n1. 行楷：**吴玉生**， **荆霄鹏**，田英章\n2. 正楷：卢中南，庞中华\n3. 古贴： 正楷行楷练好，字的框架搭好再去临纂古贴， 古贴要求有观帖能力，推荐 灵飞经， 兰亭集序， 赤壁赋\n\n","source":"_posts/杂七杂八/时光余热.md","raw":"---\ntitle: 时光余热\ncomments: true\ntags:\n  - 随笔\ncategories:\n  - - 杂七杂八\nabbrlink: 1759737362\ndate: 2022-01-22 00:00:00\n---\n\n## 练字总结\n\n### 字帖选择\n\n1. 行楷：**吴玉生**， **荆霄鹏**，田英章\n2. 正楷：卢中南，庞中华\n3. 古贴： 正楷行楷练好，字的框架搭好再去临纂古贴， 古贴要求有观帖能力，推荐 灵飞经， 兰亭集序， 赤壁赋\n\n","slug":"杂七杂八/时光余热","published":1,"updated":"2022-02-04T09:45:53.722Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvay0002zc1bhoh48stm","content":"<h2 id=\"练字总结\"><a href=\"#练字总结\" class=\"headerlink\" title=\"练字总结\"></a>练字总结</h2><h3 id=\"字帖选择\"><a href=\"#字帖选择\" class=\"headerlink\" title=\"字帖选择\"></a>字帖选择</h3><ol>\n<li>行楷：<strong>吴玉生</strong>， <strong>荆霄鹏</strong>，田英章</li>\n<li>正楷：卢中南，庞中华</li>\n<li>古贴： 正楷行楷练好，字的框架搭好再去临纂古贴， 古贴要求有观帖能力，推荐 灵飞经， 兰亭集序， 赤壁赋</li>\n</ol>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"练字总结\"><a href=\"#练字总结\" class=\"headerlink\" title=\"练字总结\"></a>练字总结</h2><h3 id=\"字帖选择\"><a href=\"#字帖选择\" class=\"headerlink\" title=\"字帖选择\"></a>字帖选择</h3><ol>\n<li>行楷：<strong>吴玉生</strong>， <strong>荆霄鹏</strong>，田英章</li>\n<li>正楷：卢中南，庞中华</li>\n<li>古贴： 正楷行楷练好，字的框架搭好再去临纂古贴， 古贴要求有观帖能力，推荐 灵飞经， 兰亭集序， 赤壁赋</li>\n</ol>\n"},{"title":"测试用例设计","comments":1,"abbrlink":3157456672,"date":"2021-01-11T16:00:00.000Z","_content":"\n\n\n## 测试用例设计\n\n### qq⽂件传输测试⽤例\n\n- 传输成功\n\n1. ⽂件直接拖到对话框，点击发送\n2. 点击传送⽂件按钮，选择⽂件，点击发送\n3. 传送汇总显示进度条\n4. 传送显示⽂件名字，以及⽂件⼤⼩\n5. 给⼀个⽤户传输多个⽂件\n6. 同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)\n7. 本地打开的时候，可以传送⽂件\n8. 接收成功的默认路径\n9. ⽂件接收后，是否正常\n10. 是否可以更改保存路径\n11. ⽂件传输时，不影响其他功能\n12. 接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）\n\n- 传输失败\n\n1. 点击取消，可以取消⽂件发送\n2. 接收⽅，拒绝接收\n3. 直接关闭对话框，有提示，有⽂件在传输\n4. ⽂件-⽂件夹，⽂件夹多层，空⽂件\n5. ⽂件⼤⼩的边界值\n\n- ⽂件名称\n\n1. 普通⽂件\n2. 含有特殊符号的⽂件\n3. ⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号\n\n- ⽂件格式\n\n1. exe⽂件，txt，doc，pdf等\n2. 图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件\n\n- 界⾯测试\n\n1. 界⾯美观、易⽤\n2. 按钮位置符合规范以及正确\n3. 提示语是否正确\n\n- 其他测试\n\n1. 弱⽹情况传输\n2. 上传中断⽹\n3. 上传⽂件，把源⽂件删除\n\n### 一个有广告的纸杯子，请设计测试用例？\n\n- 测试项目：杯子\n- 需求测试：查看杯子使用说明书\n- 界面测试：查看杯子外观\n- 功能度：用水杯装水看漏不漏；水能不能被喝到\n- 安全性：杯子有没有毒或细菌\n- 可靠性：杯子从不同高度落下的损坏程度\n- 可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用\n- 兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等\n- 易用性：杯子是否烫手、是否有防滑措施、是否方便饮用\n- 用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述\n- 疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等\n- 压力测试：用根针并在针上面不断加重量，看压强多大时会穿透\n- 跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损\n- 震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输\n- 硬度：是否达到设计标准。\n    + 装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。\n    + 装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。\n- 界面测试（UI 测试）。\n    + 看其形状、大小设计是否适合人方便拿起。\n    + 外观是否吸引人（广告嘛），赏心悦目。 \n    + 带广告的图案沾水受是否掉色、模糊。\n- 易用性测试。\n    + 看其形状、大小设计是否适合人方便拿起。\n    + 残疾人士用此杯去喝水的容程度。\n    + 杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。\n- 稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。\n- 安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。\n- 本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。\n- 对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。\n\n### 一个身份证号码输入框，怎么设计用例？\n\n- 校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码\n- 校验 15 位身份证号和 18 位身份正好都是可用的\n- 校验末位是 X 的情况\n- 校验不足 15 位、16-17 位和大于 18 位的情况\n- 如果是必输项，校验不输入的时候会不会有正确的提示\n- 如果不是必输项，则要校验不输入的时候流程能否正常进行\n- 校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）\n- 校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）\n\n### 登录功能怎么设计测试用例？\n\n具体需求：\n有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。\n\n**[ 考察目的：]**\n\n1. 了解需求（测什么都是从了解需求开始）；\n2. 是否有设计 Test Case 的能力\n3. 是否熟悉各种测试方法；\n4. 是否有丰富的 Web 测试经验；\n5. 是否了解 Web 开发；\n\n**[ 了解需求：]**\n\n1、登录界面应该是弹出窗口式的，还是直接在网页里面；\n2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；\n3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；\n4、····\n\n**[ 用例设计：]**\n\n- 功能测试\n    + 输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）\n    + 输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）\n    + 登录成功后能否跳转到正确的页面（低）\n    + 账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）\n    + 账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）\n    + 记住账号的功能\n    + 登录失败后，不能记录密码的功能\n    + 账号和密码前后有空格的处理\n    + 密码是否加密显示（星号圆点等）\n    + 牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用\n    + 登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确\n    + 输入密码的时候，大写键盘开启的时候要有提示信息。\n    + 什么都不输入，点击提交按钮，看提示信息。（非空检查）\n- 界面测试\n    + 布局是否合理，2 个 Testbox 和一个按钮是否对齐\n    + Testbox 和按钮的长度，高度是否复合要求\n    + 界面的设计风格是否与 UI 的设计风格统一\n    + 界面中的文字简洁易懂，没有错别字。\n- 性能测试(Performance Test)\n    + 打开登录页面，需要几秒\n    + 输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒\n- 安全性测试(Security Test)\n    + 登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)\n    + 账号和密码是否通过加密的方式，发送给 Web 服务器\n    + 账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证\n    + 账号和密码的输入框，应该屏蔽 SQL 注入攻击\n    + 账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）\n    + 错误登录的次数限制（防止暴力破解）\n    + 考虑是否支持多用户在同一机器上登录；\n    + 考虑一用户在多台机器上登录\n- 可用性测试(Usability Test)\n    + 是否可以全用键盘操作，是否有快捷键\n    + 输入账号，密码后按回车，是否可以登录\n    + 输入框是否可以以 Tab 键切换\n- 兼容性测试（Compatibility Test）\n    + 主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）\n    + 不同的平台是否能正常工作，比如 Windows, Mac\n    + 移动设备上是否正常工作，比如 iPhone, Android\n    + 不同的分辨率\n\n### 假如有一个预约口罩的功能\n\n- 每天只能预约一次；\n- 每天晚上 8 点公布前一天的预约结果；\n- 每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好\n\n **预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证**\n\n2. 比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\n\n- 如果是新功能开发的测试阶段，肯定是需要点点点\n- 如果是老功能做回归测试，则需要做自动化测试\n\n3. \n","source":"_posts/软件测试/测试用例设计.md","raw":"---\ntitle: 测试用例设计\ncomments: true\ntags:\n  - 软件测试\n  - 测试用例\ncategories:\n  - - 软件测试\nabbrlink: 3157456672\ndate: 2021-01-12 00:00:00\n---\n\n\n\n## 测试用例设计\n\n### qq⽂件传输测试⽤例\n\n- 传输成功\n\n1. ⽂件直接拖到对话框，点击发送\n2. 点击传送⽂件按钮，选择⽂件，点击发送\n3. 传送汇总显示进度条\n4. 传送显示⽂件名字，以及⽂件⼤⼩\n5. 给⼀个⽤户传输多个⽂件\n6. 同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)\n7. 本地打开的时候，可以传送⽂件\n8. 接收成功的默认路径\n9. ⽂件接收后，是否正常\n10. 是否可以更改保存路径\n11. ⽂件传输时，不影响其他功能\n12. 接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）\n\n- 传输失败\n\n1. 点击取消，可以取消⽂件发送\n2. 接收⽅，拒绝接收\n3. 直接关闭对话框，有提示，有⽂件在传输\n4. ⽂件-⽂件夹，⽂件夹多层，空⽂件\n5. ⽂件⼤⼩的边界值\n\n- ⽂件名称\n\n1. 普通⽂件\n2. 含有特殊符号的⽂件\n3. ⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号\n\n- ⽂件格式\n\n1. exe⽂件，txt，doc，pdf等\n2. 图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件\n\n- 界⾯测试\n\n1. 界⾯美观、易⽤\n2. 按钮位置符合规范以及正确\n3. 提示语是否正确\n\n- 其他测试\n\n1. 弱⽹情况传输\n2. 上传中断⽹\n3. 上传⽂件，把源⽂件删除\n\n### 一个有广告的纸杯子，请设计测试用例？\n\n- 测试项目：杯子\n- 需求测试：查看杯子使用说明书\n- 界面测试：查看杯子外观\n- 功能度：用水杯装水看漏不漏；水能不能被喝到\n- 安全性：杯子有没有毒或细菌\n- 可靠性：杯子从不同高度落下的损坏程度\n- 可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用\n- 兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等\n- 易用性：杯子是否烫手、是否有防滑措施、是否方便饮用\n- 用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述\n- 疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等\n- 压力测试：用根针并在针上面不断加重量，看压强多大时会穿透\n- 跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损\n- 震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输\n- 硬度：是否达到设计标准。\n    + 装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。\n    + 装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。\n- 界面测试（UI 测试）。\n    + 看其形状、大小设计是否适合人方便拿起。\n    + 外观是否吸引人（广告嘛），赏心悦目。 \n    + 带广告的图案沾水受是否掉色、模糊。\n- 易用性测试。\n    + 看其形状、大小设计是否适合人方便拿起。\n    + 残疾人士用此杯去喝水的容程度。\n    + 杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。\n- 稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。\n- 安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。\n- 本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。\n- 对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。\n\n### 一个身份证号码输入框，怎么设计用例？\n\n- 校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码\n- 校验 15 位身份证号和 18 位身份正好都是可用的\n- 校验末位是 X 的情况\n- 校验不足 15 位、16-17 位和大于 18 位的情况\n- 如果是必输项，校验不输入的时候会不会有正确的提示\n- 如果不是必输项，则要校验不输入的时候流程能否正常进行\n- 校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）\n- 校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）\n\n### 登录功能怎么设计测试用例？\n\n具体需求：\n有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。\n\n**[ 考察目的：]**\n\n1. 了解需求（测什么都是从了解需求开始）；\n2. 是否有设计 Test Case 的能力\n3. 是否熟悉各种测试方法；\n4. 是否有丰富的 Web 测试经验；\n5. 是否了解 Web 开发；\n\n**[ 了解需求：]**\n\n1、登录界面应该是弹出窗口式的，还是直接在网页里面；\n2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；\n3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；\n4、····\n\n**[ 用例设计：]**\n\n- 功能测试\n    + 输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）\n    + 输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）\n    + 登录成功后能否跳转到正确的页面（低）\n    + 账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）\n    + 账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）\n    + 记住账号的功能\n    + 登录失败后，不能记录密码的功能\n    + 账号和密码前后有空格的处理\n    + 密码是否加密显示（星号圆点等）\n    + 牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用\n    + 登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确\n    + 输入密码的时候，大写键盘开启的时候要有提示信息。\n    + 什么都不输入，点击提交按钮，看提示信息。（非空检查）\n- 界面测试\n    + 布局是否合理，2 个 Testbox 和一个按钮是否对齐\n    + Testbox 和按钮的长度，高度是否复合要求\n    + 界面的设计风格是否与 UI 的设计风格统一\n    + 界面中的文字简洁易懂，没有错别字。\n- 性能测试(Performance Test)\n    + 打开登录页面，需要几秒\n    + 输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒\n- 安全性测试(Security Test)\n    + 登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)\n    + 账号和密码是否通过加密的方式，发送给 Web 服务器\n    + 账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证\n    + 账号和密码的输入框，应该屏蔽 SQL 注入攻击\n    + 账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）\n    + 错误登录的次数限制（防止暴力破解）\n    + 考虑是否支持多用户在同一机器上登录；\n    + 考虑一用户在多台机器上登录\n- 可用性测试(Usability Test)\n    + 是否可以全用键盘操作，是否有快捷键\n    + 输入账号，密码后按回车，是否可以登录\n    + 输入框是否可以以 Tab 键切换\n- 兼容性测试（Compatibility Test）\n    + 主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）\n    + 不同的平台是否能正常工作，比如 Windows, Mac\n    + 移动设备上是否正常工作，比如 iPhone, Android\n    + 不同的分辨率\n\n### 假如有一个预约口罩的功能\n\n- 每天只能预约一次；\n- 每天晚上 8 点公布前一天的预约结果；\n- 每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好\n\n **预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证**\n\n2. 比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\n\n- 如果是新功能开发的测试阶段，肯定是需要点点点\n- 如果是老功能做回归测试，则需要做自动化测试\n\n3. \n","slug":"软件测试/测试用例设计","published":1,"updated":"2022-02-04T09:45:53.729Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb10004zc1b4dj014kc","content":"<h2 id=\"测试用例设计\"><a href=\"#测试用例设计\" class=\"headerlink\" title=\"测试用例设计\"></a>测试用例设计</h2><h3 id=\"qq⽂件传输测试⽤例\"><a href=\"#qq⽂件传输测试⽤例\" class=\"headerlink\" title=\"qq⽂件传输测试⽤例\"></a>qq⽂件传输测试⽤例</h3><ul>\n<li>传输成功</li>\n</ul>\n<ol>\n<li>⽂件直接拖到对话框，点击发送</li>\n<li>点击传送⽂件按钮，选择⽂件，点击发送</li>\n<li>传送汇总显示进度条</li>\n<li>传送显示⽂件名字，以及⽂件⼤⼩</li>\n<li>给⼀个⽤户传输多个⽂件</li>\n<li>同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)</li>\n<li>本地打开的时候，可以传送⽂件</li>\n<li>接收成功的默认路径</li>\n<li>⽂件接收后，是否正常</li>\n<li>是否可以更改保存路径</li>\n<li>⽂件传输时，不影响其他功能</li>\n<li>接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）</li>\n</ol>\n<ul>\n<li>传输失败</li>\n</ul>\n<ol>\n<li>点击取消，可以取消⽂件发送</li>\n<li>接收⽅，拒绝接收</li>\n<li>直接关闭对话框，有提示，有⽂件在传输</li>\n<li>⽂件-⽂件夹，⽂件夹多层，空⽂件</li>\n<li>⽂件⼤⼩的边界值</li>\n</ol>\n<ul>\n<li>⽂件名称</li>\n</ul>\n<ol>\n<li>普通⽂件</li>\n<li>含有特殊符号的⽂件</li>\n<li>⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号</li>\n</ol>\n<ul>\n<li>⽂件格式</li>\n</ul>\n<ol>\n<li>exe⽂件，txt，doc，pdf等</li>\n<li>图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件</li>\n</ol>\n<ul>\n<li>界⾯测试</li>\n</ul>\n<ol>\n<li>界⾯美观、易⽤</li>\n<li>按钮位置符合规范以及正确</li>\n<li>提示语是否正确</li>\n</ol>\n<ul>\n<li>其他测试</li>\n</ul>\n<ol>\n<li>弱⽹情况传输</li>\n<li>上传中断⽹</li>\n<li>上传⽂件，把源⽂件删除</li>\n</ol>\n<h3 id=\"一个有广告的纸杯子，请设计测试用例？\"><a href=\"#一个有广告的纸杯子，请设计测试用例？\" class=\"headerlink\" title=\"一个有广告的纸杯子，请设计测试用例？\"></a>一个有广告的纸杯子，请设计测试用例？</h3><ul>\n<li>测试项目：杯子</li>\n<li>需求测试：查看杯子使用说明书</li>\n<li>界面测试：查看杯子外观</li>\n<li>功能度：用水杯装水看漏不漏；水能不能被喝到</li>\n<li>安全性：杯子有没有毒或细菌</li>\n<li>可靠性：杯子从不同高度落下的损坏程度</li>\n<li>可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用</li>\n<li>兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等</li>\n<li>易用性：杯子是否烫手、是否有防滑措施、是否方便饮用</li>\n<li>用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述</li>\n<li>疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等</li>\n<li>压力测试：用根针并在针上面不断加重量，看压强多大时会穿透</li>\n<li>跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损</li>\n<li>震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输</li>\n<li>硬度：是否达到设计标准。<ul>\n<li>装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。</li>\n<li>装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。</li>\n</ul>\n</li>\n<li>界面测试（UI 测试）。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>外观是否吸引人（广告嘛），赏心悦目。 </li>\n<li>带广告的图案沾水受是否掉色、模糊。</li>\n</ul>\n</li>\n<li>易用性测试。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>残疾人士用此杯去喝水的容程度。</li>\n<li>杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。</li>\n</ul>\n</li>\n<li>稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。</li>\n<li>安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。</li>\n<li>本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。</li>\n<li>对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。</li>\n</ul>\n<h3 id=\"一个身份证号码输入框，怎么设计用例？\"><a href=\"#一个身份证号码输入框，怎么设计用例？\" class=\"headerlink\" title=\"一个身份证号码输入框，怎么设计用例？\"></a>一个身份证号码输入框，怎么设计用例？</h3><ul>\n<li>校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码</li>\n<li>校验 15 位身份证号和 18 位身份正好都是可用的</li>\n<li>校验末位是 X 的情况</li>\n<li>校验不足 15 位、16-17 位和大于 18 位的情况</li>\n<li>如果是必输项，校验不输入的时候会不会有正确的提示</li>\n<li>如果不是必输项，则要校验不输入的时候流程能否正常进行</li>\n<li>校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）</li>\n<li>校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）</li>\n</ul>\n<h3 id=\"登录功能怎么设计测试用例？\"><a href=\"#登录功能怎么设计测试用例？\" class=\"headerlink\" title=\"登录功能怎么设计测试用例？\"></a>登录功能怎么设计测试用例？</h3><p>具体需求：<br>有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。</p>\n<p><strong>[ 考察目的：]</strong></p>\n<ol>\n<li>了解需求（测什么都是从了解需求开始）；</li>\n<li>是否有设计 Test Case 的能力</li>\n<li>是否熟悉各种测试方法；</li>\n<li>是否有丰富的 Web 测试经验；</li>\n<li>是否了解 Web 开发；</li>\n</ol>\n<p><strong>[ 了解需求：]</strong></p>\n<p>1、登录界面应该是弹出窗口式的，还是直接在网页里面；<br>2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；<br>3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；<br>4、····</p>\n<p><strong>[ 用例设计：]</strong></p>\n<ul>\n<li>功能测试<ul>\n<li>输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）</li>\n<li>输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）</li>\n<li>登录成功后能否跳转到正确的页面（低）</li>\n<li>账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）</li>\n<li>账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）</li>\n<li>记住账号的功能</li>\n<li>登录失败后，不能记录密码的功能</li>\n<li>账号和密码前后有空格的处理</li>\n<li>密码是否加密显示（星号圆点等）</li>\n<li>牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用</li>\n<li>登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确</li>\n<li>输入密码的时候，大写键盘开启的时候要有提示信息。</li>\n<li>什么都不输入，点击提交按钮，看提示信息。（非空检查）</li>\n</ul>\n</li>\n<li>界面测试<ul>\n<li>布局是否合理，2 个 Testbox 和一个按钮是否对齐</li>\n<li>Testbox 和按钮的长度，高度是否复合要求</li>\n<li>界面的设计风格是否与 UI 的设计风格统一</li>\n<li>界面中的文字简洁易懂，没有错别字。</li>\n</ul>\n</li>\n<li>性能测试(Performance Test)<ul>\n<li>打开登录页面，需要几秒</li>\n<li>输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒</li>\n</ul>\n</li>\n<li>安全性测试(Security Test)<ul>\n<li>登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)</li>\n<li>账号和密码是否通过加密的方式，发送给 Web 服务器</li>\n<li>账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证</li>\n<li>账号和密码的输入框，应该屏蔽 SQL 注入攻击</li>\n<li>账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）</li>\n<li>错误登录的次数限制（防止暴力破解）</li>\n<li>考虑是否支持多用户在同一机器上登录；</li>\n<li>考虑一用户在多台机器上登录</li>\n</ul>\n</li>\n<li>可用性测试(Usability Test)<ul>\n<li>是否可以全用键盘操作，是否有快捷键</li>\n<li>输入账号，密码后按回车，是否可以登录</li>\n<li>输入框是否可以以 Tab 键切换</li>\n</ul>\n</li>\n<li>兼容性测试（Compatibility Test）<ul>\n<li>主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）</li>\n<li>不同的平台是否能正常工作，比如 Windows, Mac</li>\n<li>移动设备上是否正常工作，比如 iPhone, Android</li>\n<li>不同的分辨率</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"假如有一个预约口罩的功能\"><a href=\"#假如有一个预约口罩的功能\" class=\"headerlink\" title=\"假如有一个预约口罩的功能\"></a>假如有一个预约口罩的功能</h3><ul>\n<li>每天只能预约一次；</li>\n<li>每天晚上 8 点公布前一天的预约结果；</li>\n<li>每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好</li>\n</ul>\n<p> <strong>预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证</strong></p>\n<ol start=\"2\">\n<li>比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？</li>\n</ol>\n<ul>\n<li>如果是新功能开发的测试阶段，肯定是需要点点点</li>\n<li>如果是老功能做回归测试，则需要做自动化测试</li>\n</ul>\n<ol start=\"3\">\n<li></li>\n</ol>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"测试用例设计\"><a href=\"#测试用例设计\" class=\"headerlink\" title=\"测试用例设计\"></a>测试用例设计</h2><h3 id=\"qq⽂件传输测试⽤例\"><a href=\"#qq⽂件传输测试⽤例\" class=\"headerlink\" title=\"qq⽂件传输测试⽤例\"></a>qq⽂件传输测试⽤例</h3><ul>\n<li>传输成功</li>\n</ul>\n<ol>\n<li>⽂件直接拖到对话框，点击发送</li>\n<li>点击传送⽂件按钮，选择⽂件，点击发送</li>\n<li>传送汇总显示进度条</li>\n<li>传送显示⽂件名字，以及⽂件⼤⼩</li>\n<li>给⼀个⽤户传输多个⽂件</li>\n<li>同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)</li>\n<li>本地打开的时候，可以传送⽂件</li>\n<li>接收成功的默认路径</li>\n<li>⽂件接收后，是否正常</li>\n<li>是否可以更改保存路径</li>\n<li>⽂件传输时，不影响其他功能</li>\n<li>接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）</li>\n</ol>\n<ul>\n<li>传输失败</li>\n</ul>\n<ol>\n<li>点击取消，可以取消⽂件发送</li>\n<li>接收⽅，拒绝接收</li>\n<li>直接关闭对话框，有提示，有⽂件在传输</li>\n<li>⽂件-⽂件夹，⽂件夹多层，空⽂件</li>\n<li>⽂件⼤⼩的边界值</li>\n</ol>\n<ul>\n<li>⽂件名称</li>\n</ul>\n<ol>\n<li>普通⽂件</li>\n<li>含有特殊符号的⽂件</li>\n<li>⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号</li>\n</ol>\n<ul>\n<li>⽂件格式</li>\n</ul>\n<ol>\n<li>exe⽂件，txt，doc，pdf等</li>\n<li>图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件</li>\n</ol>\n<ul>\n<li>界⾯测试</li>\n</ul>\n<ol>\n<li>界⾯美观、易⽤</li>\n<li>按钮位置符合规范以及正确</li>\n<li>提示语是否正确</li>\n</ol>\n<ul>\n<li>其他测试</li>\n</ul>\n<ol>\n<li>弱⽹情况传输</li>\n<li>上传中断⽹</li>\n<li>上传⽂件，把源⽂件删除</li>\n</ol>\n<h3 id=\"一个有广告的纸杯子，请设计测试用例？\"><a href=\"#一个有广告的纸杯子，请设计测试用例？\" class=\"headerlink\" title=\"一个有广告的纸杯子，请设计测试用例？\"></a>一个有广告的纸杯子，请设计测试用例？</h3><ul>\n<li>测试项目：杯子</li>\n<li>需求测试：查看杯子使用说明书</li>\n<li>界面测试：查看杯子外观</li>\n<li>功能度：用水杯装水看漏不漏；水能不能被喝到</li>\n<li>安全性：杯子有没有毒或细菌</li>\n<li>可靠性：杯子从不同高度落下的损坏程度</li>\n<li>可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用</li>\n<li>兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等</li>\n<li>易用性：杯子是否烫手、是否有防滑措施、是否方便饮用</li>\n<li>用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述</li>\n<li>疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等</li>\n<li>压力测试：用根针并在针上面不断加重量，看压强多大时会穿透</li>\n<li>跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损</li>\n<li>震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输</li>\n<li>硬度：是否达到设计标准。<ul>\n<li>装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。</li>\n<li>装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。</li>\n</ul>\n</li>\n<li>界面测试（UI 测试）。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>外观是否吸引人（广告嘛），赏心悦目。 </li>\n<li>带广告的图案沾水受是否掉色、模糊。</li>\n</ul>\n</li>\n<li>易用性测试。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>残疾人士用此杯去喝水的容程度。</li>\n<li>杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。</li>\n</ul>\n</li>\n<li>稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。</li>\n<li>安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。</li>\n<li>本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。</li>\n<li>对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。</li>\n</ul>\n<h3 id=\"一个身份证号码输入框，怎么设计用例？\"><a href=\"#一个身份证号码输入框，怎么设计用例？\" class=\"headerlink\" title=\"一个身份证号码输入框，怎么设计用例？\"></a>一个身份证号码输入框，怎么设计用例？</h3><ul>\n<li>校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码</li>\n<li>校验 15 位身份证号和 18 位身份正好都是可用的</li>\n<li>校验末位是 X 的情况</li>\n<li>校验不足 15 位、16-17 位和大于 18 位的情况</li>\n<li>如果是必输项，校验不输入的时候会不会有正确的提示</li>\n<li>如果不是必输项，则要校验不输入的时候流程能否正常进行</li>\n<li>校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）</li>\n<li>校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）</li>\n</ul>\n<h3 id=\"登录功能怎么设计测试用例？\"><a href=\"#登录功能怎么设计测试用例？\" class=\"headerlink\" title=\"登录功能怎么设计测试用例？\"></a>登录功能怎么设计测试用例？</h3><p>具体需求：<br>有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。</p>\n<p><strong>[ 考察目的：]</strong></p>\n<ol>\n<li>了解需求（测什么都是从了解需求开始）；</li>\n<li>是否有设计 Test Case 的能力</li>\n<li>是否熟悉各种测试方法；</li>\n<li>是否有丰富的 Web 测试经验；</li>\n<li>是否了解 Web 开发；</li>\n</ol>\n<p><strong>[ 了解需求：]</strong></p>\n<p>1、登录界面应该是弹出窗口式的，还是直接在网页里面；<br>2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；<br>3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；<br>4、····</p>\n<p><strong>[ 用例设计：]</strong></p>\n<ul>\n<li>功能测试<ul>\n<li>输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）</li>\n<li>输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）</li>\n<li>登录成功后能否跳转到正确的页面（低）</li>\n<li>账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）</li>\n<li>账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）</li>\n<li>记住账号的功能</li>\n<li>登录失败后，不能记录密码的功能</li>\n<li>账号和密码前后有空格的处理</li>\n<li>密码是否加密显示（星号圆点等）</li>\n<li>牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用</li>\n<li>登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确</li>\n<li>输入密码的时候，大写键盘开启的时候要有提示信息。</li>\n<li>什么都不输入，点击提交按钮，看提示信息。（非空检查）</li>\n</ul>\n</li>\n<li>界面测试<ul>\n<li>布局是否合理，2 个 Testbox 和一个按钮是否对齐</li>\n<li>Testbox 和按钮的长度，高度是否复合要求</li>\n<li>界面的设计风格是否与 UI 的设计风格统一</li>\n<li>界面中的文字简洁易懂，没有错别字。</li>\n</ul>\n</li>\n<li>性能测试(Performance Test)<ul>\n<li>打开登录页面，需要几秒</li>\n<li>输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒</li>\n</ul>\n</li>\n<li>安全性测试(Security Test)<ul>\n<li>登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)</li>\n<li>账号和密码是否通过加密的方式，发送给 Web 服务器</li>\n<li>账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证</li>\n<li>账号和密码的输入框，应该屏蔽 SQL 注入攻击</li>\n<li>账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）</li>\n<li>错误登录的次数限制（防止暴力破解）</li>\n<li>考虑是否支持多用户在同一机器上登录；</li>\n<li>考虑一用户在多台机器上登录</li>\n</ul>\n</li>\n<li>可用性测试(Usability Test)<ul>\n<li>是否可以全用键盘操作，是否有快捷键</li>\n<li>输入账号，密码后按回车，是否可以登录</li>\n<li>输入框是否可以以 Tab 键切换</li>\n</ul>\n</li>\n<li>兼容性测试（Compatibility Test）<ul>\n<li>主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）</li>\n<li>不同的平台是否能正常工作，比如 Windows, Mac</li>\n<li>移动设备上是否正常工作，比如 iPhone, Android</li>\n<li>不同的分辨率</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"假如有一个预约口罩的功能\"><a href=\"#假如有一个预约口罩的功能\" class=\"headerlink\" title=\"假如有一个预约口罩的功能\"></a>假如有一个预约口罩的功能</h3><ul>\n<li>每天只能预约一次；</li>\n<li>每天晚上 8 点公布前一天的预约结果；</li>\n<li>每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好</li>\n</ul>\n<p> <strong>预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证</strong></p>\n<ol start=\"2\">\n<li>比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？</li>\n</ol>\n<ul>\n<li>如果是新功能开发的测试阶段，肯定是需要点点点</li>\n<li>如果是老功能做回归测试，则需要做自动化测试</li>\n</ul>\n<ol start=\"3\">\n<li></li>\n</ol>\n"},{"title":"软件测试面试总结","comments":1,"abbrlink":108766007,"date":"2020-06-19T16:00:00.000Z","_content":"\n## 第一家\n\n1. 主要是做功能测试吗？\n2. 在工作中用到些什么工具？\n3. 印象比较深刻的项目？是一个人测试的吗？\n4. 协助开发搭建环境，简单说一下是怎么做的？\n5. 接口测试的话你是怎么做一个参数化的？接口测试里面有做过关联吗？用的是哪个元件？正则表达式提取器有用过吗？\n6. 有没有遇到过印象深刻的 bug？\n7. 项目有需求分析这个环节吗？需求评审的时候，有没有总结过产品经常会漏掉些什么功能，需求文档会出现什么 bug，你有没有去总结一下？比如哪里的逆向的思维没有考虑到，数据显示有问题，没有换行这样子\n8. 有用 fiddler 抓包做测试吗？\n9.  你这个项目有做过性能测试吗？性能测试的基本流程是怎样的？\n10. 你不用去了解一下哪些地方需要做压测吗？哪些地方是有压力点的？\n11. 并发数我们要怎么确定呢？\n12. 你平时通过上面渠道去学 python？\n13. python 主要数据类型有哪些？\n14. 假如有一个预约口罩的功能，\n\n- 每天只能预约一次；\n- 每天晚上 8 点公布前一天的预约结果；\n- 每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好\n\n **预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证**\n\n15.  SQL 注入\n\n## 第二家\n\n1. 左连接和右连接的区别？\n2. 什么情况下使用索引？\n3. 索引有哪些？\n4. 不同索引的使用场景？\n5. 使用索引之后的查询速度比不使用索引的查询速度要快，是这样吗？\n6. 什么时候使用索引会查询的快？\n7. 工作中有遇到过哪些让你有成就感的事情，可以说个两三件吗？\n8. 说说你在开发或者测试工作中遇到过哪些困难？\n9. 你平时的测试是点点点还是借助某些工具去测试还是说纯写测试脚本代码的？\n10. 比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\n\n- 如果是新功能开发的测试阶段，肯定是需要点点点\n- 如果是老功能做回归测试，则需要做自动化测试\n\n1.  个人规划是怎么样的？\n2.  你们公司主要有哪些功能模块？\n3.  对加班和出差怎么看？\n\n## 第三家\n\n1. 上家公司做什么的？\n2. 上家公司的测试流程？\n3. 用例评审是哪些人员参与的？\n4. 常见的状态码？\n5. fiddler 的原理？能抓 https 的包吗？\n\n- Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。\n  \n1. http 和 https 的区别？\n2. 一般用到什么方法来写测试用例？\n3. 怎么区分 bug 是前端还是后端？\n4. 可以用 loaderrunner 做什么？\n5. 怎么用 jmeter 来做测试的？\n6. 你可以说说 jmeter 里的进程和线程吗？\n7. jmeter 里怎么看报错的？\n8. 你说说聚合报告是个什么东西？\n9. 性能测试的流程？\n10. 实际没有达到预想的性能测试指标值，你怎么办？有哪些因素可能会造成这样？\n11. 你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\n12. 你以前的工作中的 jenkins 起到什么作用？\n13. py 中 init 方法和 new 方法有什么作用？\n14. 怎么定位网页上的元素的？\n15. 有没有用过 django 框架？\n16. 你知道深拷贝和浅拷贝的区别吗？\n17. 你知道什么是装饰器吗？\n18. git 是干嘛的？git 和 svn 有什么区别？\n19. 一张表里有很多数据，为什么查询张三这个数据很慢？索引的本质或者原理是什么？\n20. 一个测试需要具备什么素质？\n21. 你自身的优势在哪里？\n22. 说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\n\n## （正式面试）\n\n- 网络协议怎么理解\n\n- http 和 https 的区别\n- tcp/ip 协议\n- html css js 在页面中充当什么角色\n- html css js 各会出现什么样的 bug\n- 测试流程\n- 你平常用 linux 做什么操作\n- 怎么搭建环境\n- 怎么自动化搭建环境\n- 怎么做自动化接口测试\n- 你在项目中做的接口测试的占比\n- 平常你们的项目是怎么开展的\n- 你在迭代过程中的每个时间段都做什么？\n- 怎么和同事分享你所知道的新的技术\n- 上级给你一个方案，但是你有更好的解决方案，你会怎么做？\n\n","source":"_posts/软件测试/软件测试面试总结.md","raw":"---\ntitle: 软件测试面试总结\ncomments: true\ntags:\n  - 软件测试\ncategories:\n  - - 软件测试\nabbrlink: 108766007\ndate: 2020-06-20 00:00:00\n---\n\n## 第一家\n\n1. 主要是做功能测试吗？\n2. 在工作中用到些什么工具？\n3. 印象比较深刻的项目？是一个人测试的吗？\n4. 协助开发搭建环境，简单说一下是怎么做的？\n5. 接口测试的话你是怎么做一个参数化的？接口测试里面有做过关联吗？用的是哪个元件？正则表达式提取器有用过吗？\n6. 有没有遇到过印象深刻的 bug？\n7. 项目有需求分析这个环节吗？需求评审的时候，有没有总结过产品经常会漏掉些什么功能，需求文档会出现什么 bug，你有没有去总结一下？比如哪里的逆向的思维没有考虑到，数据显示有问题，没有换行这样子\n8. 有用 fiddler 抓包做测试吗？\n9.  你这个项目有做过性能测试吗？性能测试的基本流程是怎样的？\n10. 你不用去了解一下哪些地方需要做压测吗？哪些地方是有压力点的？\n11. 并发数我们要怎么确定呢？\n12. 你平时通过上面渠道去学 python？\n13. python 主要数据类型有哪些？\n14. 假如有一个预约口罩的功能，\n\n- 每天只能预约一次；\n- 每天晚上 8 点公布前一天的预约结果；\n- 每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好\n\n **预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证**\n\n15.  SQL 注入\n\n## 第二家\n\n1. 左连接和右连接的区别？\n2. 什么情况下使用索引？\n3. 索引有哪些？\n4. 不同索引的使用场景？\n5. 使用索引之后的查询速度比不使用索引的查询速度要快，是这样吗？\n6. 什么时候使用索引会查询的快？\n7. 工作中有遇到过哪些让你有成就感的事情，可以说个两三件吗？\n8. 说说你在开发或者测试工作中遇到过哪些困难？\n9. 你平时的测试是点点点还是借助某些工具去测试还是说纯写测试脚本代码的？\n10. 比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\n\n- 如果是新功能开发的测试阶段，肯定是需要点点点\n- 如果是老功能做回归测试，则需要做自动化测试\n\n1.  个人规划是怎么样的？\n2.  你们公司主要有哪些功能模块？\n3.  对加班和出差怎么看？\n\n## 第三家\n\n1. 上家公司做什么的？\n2. 上家公司的测试流程？\n3. 用例评审是哪些人员参与的？\n4. 常见的状态码？\n5. fiddler 的原理？能抓 https 的包吗？\n\n- Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。\n  \n1. http 和 https 的区别？\n2. 一般用到什么方法来写测试用例？\n3. 怎么区分 bug 是前端还是后端？\n4. 可以用 loaderrunner 做什么？\n5. 怎么用 jmeter 来做测试的？\n6. 你可以说说 jmeter 里的进程和线程吗？\n7. jmeter 里怎么看报错的？\n8. 你说说聚合报告是个什么东西？\n9. 性能测试的流程？\n10. 实际没有达到预想的性能测试指标值，你怎么办？有哪些因素可能会造成这样？\n11. 你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\n12. 你以前的工作中的 jenkins 起到什么作用？\n13. py 中 init 方法和 new 方法有什么作用？\n14. 怎么定位网页上的元素的？\n15. 有没有用过 django 框架？\n16. 你知道深拷贝和浅拷贝的区别吗？\n17. 你知道什么是装饰器吗？\n18. git 是干嘛的？git 和 svn 有什么区别？\n19. 一张表里有很多数据，为什么查询张三这个数据很慢？索引的本质或者原理是什么？\n20. 一个测试需要具备什么素质？\n21. 你自身的优势在哪里？\n22. 说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\n\n## （正式面试）\n\n- 网络协议怎么理解\n\n- http 和 https 的区别\n- tcp/ip 协议\n- html css js 在页面中充当什么角色\n- html css js 各会出现什么样的 bug\n- 测试流程\n- 你平常用 linux 做什么操作\n- 怎么搭建环境\n- 怎么自动化搭建环境\n- 怎么做自动化接口测试\n- 你在项目中做的接口测试的占比\n- 平常你们的项目是怎么开展的\n- 你在迭代过程中的每个时间段都做什么？\n- 怎么和同事分享你所知道的新的技术\n- 上级给你一个方案，但是你有更好的解决方案，你会怎么做？\n\n","slug":"软件测试/软件测试面试总结","published":1,"updated":"2022-02-04T09:45:53.731Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb20006zc1bhjxi42rb","content":"<h2 id=\"第一家\"><a href=\"#第一家\" class=\"headerlink\" title=\"第一家\"></a>第一家</h2><ol>\n<li>主要是做功能测试吗？</li>\n<li>在工作中用到些什么工具？</li>\n<li>印象比较深刻的项目？是一个人测试的吗？</li>\n<li>协助开发搭建环境，简单说一下是怎么做的？</li>\n<li>接口测试的话你是怎么做一个参数化的？接口测试里面有做过关联吗？用的是哪个元件？正则表达式提取器有用过吗？</li>\n<li>有没有遇到过印象深刻的 bug？</li>\n<li>项目有需求分析这个环节吗？需求评审的时候，有没有总结过产品经常会漏掉些什么功能，需求文档会出现什么 bug，你有没有去总结一下？比如哪里的逆向的思维没有考虑到，数据显示有问题，没有换行这样子</li>\n<li>有用 fiddler 抓包做测试吗？</li>\n<li> 你这个项目有做过性能测试吗？性能测试的基本流程是怎样的？</li>\n<li>你不用去了解一下哪些地方需要做压测吗？哪些地方是有压力点的？</li>\n<li>并发数我们要怎么确定呢？</li>\n<li>你平时通过上面渠道去学 python？</li>\n<li>python 主要数据类型有哪些？</li>\n<li>假如有一个预约口罩的功能，</li>\n</ol>\n<ul>\n<li>每天只能预约一次；</li>\n<li>每天晚上 8 点公布前一天的预约结果；</li>\n<li>每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好</li>\n</ul>\n<p> <strong>预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证</strong></p>\n<ol start=\"15\">\n<li> SQL 注入</li>\n</ol>\n<h2 id=\"第二家\"><a href=\"#第二家\" class=\"headerlink\" title=\"第二家\"></a>第二家</h2><ol>\n<li>左连接和右连接的区别？</li>\n<li>什么情况下使用索引？</li>\n<li>索引有哪些？</li>\n<li>不同索引的使用场景？</li>\n<li>使用索引之后的查询速度比不使用索引的查询速度要快，是这样吗？</li>\n<li>什么时候使用索引会查询的快？</li>\n<li>工作中有遇到过哪些让你有成就感的事情，可以说个两三件吗？</li>\n<li>说说你在开发或者测试工作中遇到过哪些困难？</li>\n<li>你平时的测试是点点点还是借助某些工具去测试还是说纯写测试脚本代码的？</li>\n<li>比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？</li>\n</ol>\n<ul>\n<li>如果是新功能开发的测试阶段，肯定是需要点点点</li>\n<li>如果是老功能做回归测试，则需要做自动化测试</li>\n</ul>\n<ol>\n<li> 个人规划是怎么样的？</li>\n<li> 你们公司主要有哪些功能模块？</li>\n<li> 对加班和出差怎么看？</li>\n</ol>\n<h2 id=\"第三家\"><a href=\"#第三家\" class=\"headerlink\" title=\"第三家\"></a>第三家</h2><ol>\n<li>上家公司做什么的？</li>\n<li>上家公司的测试流程？</li>\n<li>用例评审是哪些人员参与的？</li>\n<li>常见的状态码？</li>\n<li>fiddler 的原理？能抓 https 的包吗？</li>\n</ol>\n<ul>\n<li>Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。</li>\n</ul>\n<ol>\n<li>http 和 https 的区别？</li>\n<li>一般用到什么方法来写测试用例？</li>\n<li>怎么区分 bug 是前端还是后端？</li>\n<li>可以用 loaderrunner 做什么？</li>\n<li>怎么用 jmeter 来做测试的？</li>\n<li>你可以说说 jmeter 里的进程和线程吗？</li>\n<li>jmeter 里怎么看报错的？</li>\n<li>你说说聚合报告是个什么东西？</li>\n<li>性能测试的流程？</li>\n<li>实际没有达到预想的性能测试指标值，你怎么办？有哪些因素可能会造成这样？</li>\n<li>你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？</li>\n<li>你以前的工作中的 jenkins 起到什么作用？</li>\n<li>py 中 init 方法和 new 方法有什么作用？</li>\n<li>怎么定位网页上的元素的？</li>\n<li>有没有用过 django 框架？</li>\n<li>你知道深拷贝和浅拷贝的区别吗？</li>\n<li>你知道什么是装饰器吗？</li>\n<li>git 是干嘛的？git 和 svn 有什么区别？</li>\n<li>一张表里有很多数据，为什么查询张三这个数据很慢？索引的本质或者原理是什么？</li>\n<li>一个测试需要具备什么素质？</li>\n<li>你自身的优势在哪里？</li>\n<li>说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？</li>\n</ol>\n<h2 id=\"（正式面试）\"><a href=\"#（正式面试）\" class=\"headerlink\" title=\"（正式面试）\"></a>（正式面试）</h2><ul>\n<li><p>网络协议怎么理解</p>\n</li>\n<li><p>http 和 https 的区别</p>\n</li>\n<li><p>tcp/ip 协议</p>\n</li>\n<li><p>html css js 在页面中充当什么角色</p>\n</li>\n<li><p>html css js 各会出现什么样的 bug</p>\n</li>\n<li><p>测试流程</p>\n</li>\n<li><p>你平常用 linux 做什么操作</p>\n</li>\n<li><p>怎么搭建环境</p>\n</li>\n<li><p>怎么自动化搭建环境</p>\n</li>\n<li><p>怎么做自动化接口测试</p>\n</li>\n<li><p>你在项目中做的接口测试的占比</p>\n</li>\n<li><p>平常你们的项目是怎么开展的</p>\n</li>\n<li><p>你在迭代过程中的每个时间段都做什么？</p>\n</li>\n<li><p>怎么和同事分享你所知道的新的技术</p>\n</li>\n<li><p>上级给你一个方案，但是你有更好的解决方案，你会怎么做？</p>\n</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"第一家\"><a href=\"#第一家\" class=\"headerlink\" title=\"第一家\"></a>第一家</h2><ol>\n<li>主要是做功能测试吗？</li>\n<li>在工作中用到些什么工具？</li>\n<li>印象比较深刻的项目？是一个人测试的吗？</li>\n<li>协助开发搭建环境，简单说一下是怎么做的？</li>\n<li>接口测试的话你是怎么做一个参数化的？接口测试里面有做过关联吗？用的是哪个元件？正则表达式提取器有用过吗？</li>\n<li>有没有遇到过印象深刻的 bug？</li>\n<li>项目有需求分析这个环节吗？需求评审的时候，有没有总结过产品经常会漏掉些什么功能，需求文档会出现什么 bug，你有没有去总结一下？比如哪里的逆向的思维没有考虑到，数据显示有问题，没有换行这样子</li>\n<li>有用 fiddler 抓包做测试吗？</li>\n<li> 你这个项目有做过性能测试吗？性能测试的基本流程是怎样的？</li>\n<li>你不用去了解一下哪些地方需要做压测吗？哪些地方是有压力点的？</li>\n<li>并发数我们要怎么确定呢？</li>\n<li>你平时通过上面渠道去学 python？</li>\n<li>python 主要数据类型有哪些？</li>\n<li>假如有一个预约口罩的功能，</li>\n</ol>\n<ul>\n<li>每天只能预约一次；</li>\n<li>每天晚上 8 点公布前一天的预约结果；</li>\n<li>每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好</li>\n</ul>\n<p> <strong>预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证</strong></p>\n<ol start=\"15\">\n<li> SQL 注入</li>\n</ol>\n<h2 id=\"第二家\"><a href=\"#第二家\" class=\"headerlink\" title=\"第二家\"></a>第二家</h2><ol>\n<li>左连接和右连接的区别？</li>\n<li>什么情况下使用索引？</li>\n<li>索引有哪些？</li>\n<li>不同索引的使用场景？</li>\n<li>使用索引之后的查询速度比不使用索引的查询速度要快，是这样吗？</li>\n<li>什么时候使用索引会查询的快？</li>\n<li>工作中有遇到过哪些让你有成就感的事情，可以说个两三件吗？</li>\n<li>说说你在开发或者测试工作中遇到过哪些困难？</li>\n<li>你平时的测试是点点点还是借助某些工具去测试还是说纯写测试脚本代码的？</li>\n<li>比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？</li>\n</ol>\n<ul>\n<li>如果是新功能开发的测试阶段，肯定是需要点点点</li>\n<li>如果是老功能做回归测试，则需要做自动化测试</li>\n</ul>\n<ol>\n<li> 个人规划是怎么样的？</li>\n<li> 你们公司主要有哪些功能模块？</li>\n<li> 对加班和出差怎么看？</li>\n</ol>\n<h2 id=\"第三家\"><a href=\"#第三家\" class=\"headerlink\" title=\"第三家\"></a>第三家</h2><ol>\n<li>上家公司做什么的？</li>\n<li>上家公司的测试流程？</li>\n<li>用例评审是哪些人员参与的？</li>\n<li>常见的状态码？</li>\n<li>fiddler 的原理？能抓 https 的包吗？</li>\n</ol>\n<ul>\n<li>Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。</li>\n</ul>\n<ol>\n<li>http 和 https 的区别？</li>\n<li>一般用到什么方法来写测试用例？</li>\n<li>怎么区分 bug 是前端还是后端？</li>\n<li>可以用 loaderrunner 做什么？</li>\n<li>怎么用 jmeter 来做测试的？</li>\n<li>你可以说说 jmeter 里的进程和线程吗？</li>\n<li>jmeter 里怎么看报错的？</li>\n<li>你说说聚合报告是个什么东西？</li>\n<li>性能测试的流程？</li>\n<li>实际没有达到预想的性能测试指标值，你怎么办？有哪些因素可能会造成这样？</li>\n<li>你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？</li>\n<li>你以前的工作中的 jenkins 起到什么作用？</li>\n<li>py 中 init 方法和 new 方法有什么作用？</li>\n<li>怎么定位网页上的元素的？</li>\n<li>有没有用过 django 框架？</li>\n<li>你知道深拷贝和浅拷贝的区别吗？</li>\n<li>你知道什么是装饰器吗？</li>\n<li>git 是干嘛的？git 和 svn 有什么区别？</li>\n<li>一张表里有很多数据，为什么查询张三这个数据很慢？索引的本质或者原理是什么？</li>\n<li>一个测试需要具备什么素质？</li>\n<li>你自身的优势在哪里？</li>\n<li>说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？</li>\n</ol>\n<h2 id=\"（正式面试）\"><a href=\"#（正式面试）\" class=\"headerlink\" title=\"（正式面试）\"></a>（正式面试）</h2><ul>\n<li><p>网络协议怎么理解</p>\n</li>\n<li><p>http 和 https 的区别</p>\n</li>\n<li><p>tcp/ip 协议</p>\n</li>\n<li><p>html css js 在页面中充当什么角色</p>\n</li>\n<li><p>html css js 各会出现什么样的 bug</p>\n</li>\n<li><p>测试流程</p>\n</li>\n<li><p>你平常用 linux 做什么操作</p>\n</li>\n<li><p>怎么搭建环境</p>\n</li>\n<li><p>怎么自动化搭建环境</p>\n</li>\n<li><p>怎么做自动化接口测试</p>\n</li>\n<li><p>你在项目中做的接口测试的占比</p>\n</li>\n<li><p>平常你们的项目是怎么开展的</p>\n</li>\n<li><p>你在迭代过程中的每个时间段都做什么？</p>\n</li>\n<li><p>怎么和同事分享你所知道的新的技术</p>\n</li>\n<li><p>上级给你一个方案，但是你有更好的解决方案，你会怎么做？</p>\n</li>\n</ul>\n"},{"title":"软件测试理论","comments":1,"abbrlink":4261055596,"date":"2020-05-19T16:00:00.000Z","_content":"\n## 什么是软件测试\n\n在规定的条件下，对程序进行操作，从而发现错误，对软件质量进行评估的过程。\n\n## 软件测试的目的\n\n以最少的人力、物力、时间找到软件的缺陷，并修改从而规避商业风险。\n\n## 软件测试的定义\n\n使用人工和自动手段来运行和测试某个系统的过程，目的在于检验是否满足了需求。\n\n## 软件测试的原则\n\n- 所有的测试都应该追朔到用户需求\n- 尽早和不断的测试\n- 测试工作都应该由独立的专业的软件测试机构来完成\n- pareto 原则，测试发现的错误中 80% 很可能起源于 20% 的模块中（20% 指的是应用中出现的新模块，开发人员第一次开发，故会出现较多错误）\n- 设计测试用例时，应该考虑各种情况\n  - 测试用例： 测什么？怎么测？\n- **对测试出的错误结果一定要有一个确认的过程（描述缺陷报告）**\n  - 书写错误文档\n- 指定严格的测试计划\n- **完全测试是不可能的，测试需要终止**\n- 注意回归测试的的关联性\n  - 回归测试：指开发人员修改了旧代码后，我们需要重新进行测试，以确认修改没有有引入新的错误，或导致其他代码产生错误。\n- 妥善保存一切测试过程文档\n\n## 软件产品质量模型（ISO / IEC 9126）\n\n- 功能性：提供满足明确和隐含要求的功能的能力\n- 可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力\n  - 设备最好不要出故障\n  - 社保出故障了，不要影响主要的功能和业务\n  - 如果影响了主要功能和业务，系统可以尽快定位并恢复\n- 易用性：易懂、易学、易用、漂亮好看（用户体验好）\n- 效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）\n- 可维持性：产品可以被修改的能力。可以增加功能，可以更新。\n- 可移植性：跨越不同系统平台\n\n## 软件质量模型保证（SQA）\n\n[ 目的 ]\n\n    使软件制作的过程对于领导层是可见的。\n\n[ 目标 ]\n\n- 保证工作是有计划进行的\n- 客观的验证软件项目产品和工作是否遵循恰当的标准，步骤和需求。\n- 保证工作及结果及时通知给相关人员\n- 高管可以接触到项目内部\n- 软件质量需要测试工作来保证\n\n[ QC（检验产品的质量）]\n\n找出产品存在的问题，进行质量控制，向管理层反馈质量信息。\n\n[ QA（审计产品过程的质量）]\n\n来确认项目按照要求进行，审计的内容主要是过程； QA 则确保 QC 按照过程进行质量控制活动，按照过程将检查结果向管理层汇报。\n\n## 软件测试的基本流程\n\n- 需求分析\n- 编写测试用例（测什么？怎么测？）\n- 评审测试用例\n- 搭建测试环境\n- 等待开发提供测试包\n- 部署测试包\n- 冒烟测试（对软件主体的基本功能进行基本测试）\n- 执行测试用例\n- BUG 跟踪处理（提交及回归 BUG）\n- N 轮之后符合需求\n- 测试结束\n\n## 测试用例编写\n\n#### 测试需求\n\n<div align=\"center\">\n\n![测试需求](https://ftp.bmp.ovh/imgs/2020/04/44d5789a21365530.png)\n\n</div>\n\n#### 测试要点和测试点\n\n<div align=\"center\">\n\n![测试要点和测试点](https://ftp.bmp.ovh/imgs/2020/04/4a83c3b61ceeafa8.png)\n\n</div>\n\n## 开发模型\n\n### 瀑布模型\n\n### 快速原型模型\n\n### V 模型\n\n<div align=\"center\">\n\n![V模型](https://ftp.bmp.ovh/imgs/2020/05/0d7cbc216f388880.png)\n\n</div>\n\n**开发和测试阶段划分比较清晰**\n\n- 需求分析\n- 概要设计\n- 详细设计\n- 编码\n- 单元测试（独立的模块测试）\n- 集成测试（模块联调）\n- 系统测试（整体流程）\n- 验收测试（验证是否满足需求）\n\n[ 优点 ]\n\n- 包含底层测试（单元测试）和高层测试（系统测试）\n- 阶段划分清晰，方便工作的整体把控\n\n[ 缺点 ]\n\n- 测试阶段比较靠后，之前的问题已经产生，修改不方便\n- V 模型就是瀑布模型的变种，如果需求发生变化必然返工\n\n### W 模型（双 V 模型）\n\n<div align=\"center\">\n\n![W 模型](https://ftp.bmp.ovh/imgs/2020/05/7d4ee17a2197ece6.png)\n\n</div>\n\n**开发一个 V, 测试一个 V，开发和测试并行**\n\n- 开发 V (需求分析、概要设计、详细设计、编码、集成、实施、交付)\n- 测试 V (系统测试设计、集成测试设计、单元测试设计、单元测试、集成测试、系统测试、验收测试)\n\n[ 优点 ]\n\n- 开发伴随着测试并行，需求和设计一样要进行测试\n- 尽早的介入测试，会更早的发现问题，降低修复成本\n- 阶段依然明显，方便整体流程把控\n\n[ 缺点 ]\n\n- 代码依然在测试之前，不方便代码的测试工作\n- 如果没有文档，根本无法进行 W 模型，对人员要求较高\n\n## 软件测试分类\n\n<div align=\"center\">\n\n![软件测试分类](https://ftp.bmp.ovh/imgs/2020/05/c3f48210f76d2c81.png)\n\n</div>\n\n## 系统测试\n\n### 什么是系统测试\n\n  系统测试是一个全面的测试，包括单元、集成测试，\n\n### 系统测试的方法是什么\n\n- 功能测试\n  + 概念：根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格\n  + 考察特性： 功能是否有遗漏，功能是否准确\n  + 测试思路/步骤：\n    1. 确定功能需求列表\n    2. 分析功能测试得出测试子项\n    3. 根据测试子项分析\n    4. 采用测试用例方法设计用例\n  + 测试点： 根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格，满足用户显性和隐形的需求\n- 性能测试\n  + 概念：验证系统在不同的业务场景下的响应时间和资源利用率等性能指标是否符合预期的标准\n  + 测试思路： \n    1. 压力测试：调查系统在其资源超负荷的情况下的表现，尤其是这些对系统的处理时间有什么影响\n    2. 容量测试：面向与数据。使系统承受超额的数据容量来发现它是否可以处理数据容量\n    3. 负载测试：在一定负载的情况下系统的性能表现（不关注稳定性，也就是说不关注长时间运行，只是得到不同负载相关性能指标即可）\n- 安全性测试: \n  + 概念：用来验证集成在系统内的保护机制是否能够在实际的情况中不受到非法的侵入\n  + 测试点：\n    1. 权限管理（注册登录才可以查看、注册信息符合要求、密码后台加密）\n    2. 信息保存（log、日志、cookie）\n    3. 数据库（默认的用户名和密码）\n    4. 协议(http协议)\n  + 安全性测试策略：层层剥离法\n  + 工具：\n  + 书籍：白帽子讲 web 安全\n- 异常测试：\n  + 概念：又叫系统容错和可恢复性测试\n  + 可靠性：指标\n  + 可靠性设计方法：\n    1. 避开错误（主动避开错误，针对可以预见的错误进行主动处理。试点：故意构测造无效数据、边界条件、压力测试） \n    2. 容错技术（主动断电强制进入新的设备、构造数据库瘫痪、构造数据死锁、构造数据的不完整事物、构造出错的时间点：断网、短信号）\n- GUI 测试内容\n  + 界面实现与界面设计的吻合情况\n  + 确认界面处理的正确性\n- 易用性测试\n- 安装测试\n- 配置测试\n- 兼容测试\n\n## 测试用例设计方法\n\n### 等价类划分法\n\n**把无法穷举的数据分类书写**\n\n- 按需求写出有效等价类\n- 按需求取反无效等价类\n- 找到特殊情况的无效等价类（中文、英文、空格、空、符号等）\n\n[ 细节 ]\n\n- 输入长度\n- 组成规则\n- 输入类型\n- 是否为空\n- 是否去除空格\n- 是否区分大小写\n\n### 边界值测试\n\n- 找到测试数据的边界点进行测试，也就是有效等价类和无效等价类的边界点\n- 一般情况下需要对边界值以及边界值两边的的值分别进行测试（如：0-100，需要测试 0， 100， -1，1，99，101）\n\n### 因果图制作判定表\n\n- 找到所有的输入条件和预期结果，把所有的输入条件和输出条件填写进去\n- 得到初始表格，根据实际需求进行简化\n\n### 场景法\n\n- 基本流：正确的业务流程\n- 备选流：有问题的业务流程\n\n测试用例书写：需求文档的每一个需求\n\n### 流程法\n\n测试用例必须包含所有的分支条件，每一个分支条件就是一条测试用例。\n\n### 错误推测法\n\n- 时间急，任务紧，测试时间少，考虑使用错误推断法，根据测试人员以往的项目经验进行设计\n- 已经经过几轮测试后，可以使用错误推测法进行测试用例的补充\n\n### 正交排列法\n\n当要测试的内容，需要排列组合的情况非常多的时候，我们考虑使用科学的方法来减少测试用例的个数，即正交表。\n\n**特点：均匀分散，齐整可比，所有的情况都应该被均匀的测试过一次**\n\n- 因素：控件的个数\n- 水平：控件里面的可选项个数\n\n[ 步骤 ]\n\n- 先确定几因素，几水平\n- 在“常用正交表”中找到合适的表格\n- 复制找到的表格到自己的表格中\n- 写一个对照表（所有的控件和对应的选项列出来）\n- 把复制过来的表格和对照表实现映射关系\n\n**如果没有找到合适的正交表，选用多一些的正交表，把多余的内容删除**\n\n### 混合正交表\n\n步骤：\n\n- 制作取值表\n\n- 复制取值表的数据，放到文本文档中保存\n\n- 把文本文档放在 allpairs.文件夹中\n\n- WIN+R 键进入 cmd 控制台\n\n- 进入 allpairs 文件夹\n\n- 在制台中入 allpairs 的文件路径如 F:allpairs/allpairs.exe test1.txt>test2.txt(其中 test1 是你放进 allpairs 文件夹中的文件，test2 填你要生成的文件名)\n\n[ 获取方式 ]\n\n- 链接: https://pan.baidu.com/s/1yQ7lrZSeR6lnvyYeXLzEdw?pwd=tap5 \n\n- 提取码: tap5 \n\n    \n\n## 测试用例的设计\n\n### 测试用例设计综合策略\n\n1. 在任何情况下都必须使用边界值分析方法，经验表明用这种方法设计出测试用例发现程序错误的能力最强。\n\n2. 必要时用等价类划分方法补充一些测试用例。\n\n3. 用错误推测法再追加一些测试用例。\n\n4. 对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到要求的覆盖标准，应当再补充足够的测试用例。\n\n5. 如果程序的功能说明中含有输入条件的组合情况，则一开始就可选用因果图法。 \n\n### 测试用例的设计步骤\n\n1. 构造根据设计规格得出的基本功能测试用例。\n\n2. 边界值测试用例\n\n3. 状态转换测试用例。\n\n4. 错误猜测测试用例。\n\n5. 异常测试用例。 \n\n## 软件缺陷\n\n### 缺陷状态\n\n| 编号 | 缺陷状态 | 描述                                                             |\n| ---- | -------- | ---------------------------------------------------------------- |\n| 1    | 提交     | 已提交的缺陷                                                     |\n| 2    | 打开     | 确认提交的缺陷，等待处理                                         |\n| 3    | 拒绝     | 拒绝提交的缺陷，不需要修复或不是缺陷、重复缺陷、无法重现         |\n| 4    | 修复     | 缺陷被修复（开发人员自认为修改对了）                             |\n| 5    | 关闭     | 确认修复的缺陷，将其关闭（测试人员进行回归复测，确认已经没问题） |\n| 6    | 推迟     | 可在以后解决，但要确定修复日期和版本                             |\n\n[ 禅道 ]\n\n- 激活\n- 已解决\n- 已关闭\n\n### 缺陷程度划分\n\n1. 表面错误\n2. 影响独立模块、断断续续的问题、特定条件下发生、与产品要求不一致。\n3. 功能点没有实现、数据丢失\n4. 影响了系统或者出现了严重的计算错误\n\n### 缺陷的优先级\n\n| 优先级别   | 描述                                                                                |\n| ---------- | ----------------------------------------------------------------------------------- |\n| 5-urgent   | 最高优先级 在这个错误影响下，系统几乎不可用                                         |\n| 4-veryHigh | 高优先级 错误对系统的功能产生严重的影响                                             |\n| 3-high     | 中优先级 错误会制约开发和测试的活动进行，如果先前没有修复他，那么需要在发布前修复他       |\n| 2-medium   | 低优先级 不会延迟发布，但是会在以后修正这个错误                                     |\n| 1-low      | 最低优先级 时间和资源允许时修正                                                 |\n\n**优先级和严重程度不是绝对的正比关系**\n\n### 缺陷类型\n\n- 系统缺陷\n- 数据缺陷\n- 数据库缺陷\n- 接口缺陷\n- 功能缺陷\n- 安全性缺陷\n- 兼容性缺陷\n- 性能缺陷\n- 界面缺陷（删除操作未给出提示）\n- 建议（功能建议、操作建议）\n\n### 缺陷报告注意事项\n\n- 尽量确保缺陷可以重现\n- 简洁、准确、完整\n- 一个缺陷一个报告\n- 复现缺陷的步骤清晰（一个编号一个步骤）\n- 描述结果和期望结果（结果就是 BUG 出现结果）\n- 使用术语描述问题\n\n### 缺陷统计\n\n- 对软件问题的功能域分布进行分析，找出系统的薄弱环节\n  + 要详细采集每个功能模块或系统构件的缺陷数据，并按功能、错误类型、严重程度等分类\n  + 二八定理：80% 的软件问题总发生在大约 20% 的功能模块中\n- 对缺陷的注入阶段进行分析，并于历史数据相比较\n- 应对软件缺陷类型进行分析，以便针对各自特点，先修复严重缺陷\n- 动态采集每个测试周期中发现的缺陷数，并有效的控制缺陷的修复率\n- 密切观察缺陷的状态，并及时跟踪其状态的变化，以检查测试和开发人员的工作情况\n\n## SVN 使用\n\n- 创建版本库\n- 检出 （获取版本库最新版本，只有检出操作后才能提交更新操作）\n- 提交（把此文件夹中的内容提交到版本库）\n- 更新（把最新的版本库中的内容，更新到此文件夹中）\n\n## 接口测试\n\n### 接口优点\n\n- 责任划分清晰\n- 缩短研发周期\n- 可扩展性强\n\n### 接口测试流程\n\n- 接口的功能测试（先保证接口是正确的）\n- 测试接口的数据（传递一些特殊的数据，保证接口没有问题）\n- 自动化测试脚本的编辑\n- 接口的性能、压力测试\n\n> - HTTP: 超文本传输协议，浏览器和服务器之间通信的规则\n> - URL: 统一资源定位符，协议://主机地址/路径\n> - GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET\n> - POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST\n\n### restful 风格（API 文档规则，非强制要求，软要求）\n\n- 查\n  - 方法: GET\n  - 响应码: 200 + 查询数据\n- 增\n  - 方法: POST\n  - 响应码: 201 + 新增的数据\n- 改\n  - 方法: PUT\n  - 响应码: 200/201 + 修改后的数据\n- 删\n  - 方法: DELETE\n  - 响应码: 204 + 无\n\n### 接口请求的四大要素\n\n- 接口 URL 地址\n- 请求方法\n- 请求头\n- 请求参数\n\n\n\n","source":"_posts/软件测试/软件测试起步.md","raw":"---\ntitle: 软件测试理论\ncomments: true\ntags:\n  - 软件测试\ncategories:\n  - - 软件测试\nabbrlink: 4261055596\ndate: 2020-05-20 00:00:00\n---\n\n## 什么是软件测试\n\n在规定的条件下，对程序进行操作，从而发现错误，对软件质量进行评估的过程。\n\n## 软件测试的目的\n\n以最少的人力、物力、时间找到软件的缺陷，并修改从而规避商业风险。\n\n## 软件测试的定义\n\n使用人工和自动手段来运行和测试某个系统的过程，目的在于检验是否满足了需求。\n\n## 软件测试的原则\n\n- 所有的测试都应该追朔到用户需求\n- 尽早和不断的测试\n- 测试工作都应该由独立的专业的软件测试机构来完成\n- pareto 原则，测试发现的错误中 80% 很可能起源于 20% 的模块中（20% 指的是应用中出现的新模块，开发人员第一次开发，故会出现较多错误）\n- 设计测试用例时，应该考虑各种情况\n  - 测试用例： 测什么？怎么测？\n- **对测试出的错误结果一定要有一个确认的过程（描述缺陷报告）**\n  - 书写错误文档\n- 指定严格的测试计划\n- **完全测试是不可能的，测试需要终止**\n- 注意回归测试的的关联性\n  - 回归测试：指开发人员修改了旧代码后，我们需要重新进行测试，以确认修改没有有引入新的错误，或导致其他代码产生错误。\n- 妥善保存一切测试过程文档\n\n## 软件产品质量模型（ISO / IEC 9126）\n\n- 功能性：提供满足明确和隐含要求的功能的能力\n- 可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力\n  - 设备最好不要出故障\n  - 社保出故障了，不要影响主要的功能和业务\n  - 如果影响了主要功能和业务，系统可以尽快定位并恢复\n- 易用性：易懂、易学、易用、漂亮好看（用户体验好）\n- 效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）\n- 可维持性：产品可以被修改的能力。可以增加功能，可以更新。\n- 可移植性：跨越不同系统平台\n\n## 软件质量模型保证（SQA）\n\n[ 目的 ]\n\n    使软件制作的过程对于领导层是可见的。\n\n[ 目标 ]\n\n- 保证工作是有计划进行的\n- 客观的验证软件项目产品和工作是否遵循恰当的标准，步骤和需求。\n- 保证工作及结果及时通知给相关人员\n- 高管可以接触到项目内部\n- 软件质量需要测试工作来保证\n\n[ QC（检验产品的质量）]\n\n找出产品存在的问题，进行质量控制，向管理层反馈质量信息。\n\n[ QA（审计产品过程的质量）]\n\n来确认项目按照要求进行，审计的内容主要是过程； QA 则确保 QC 按照过程进行质量控制活动，按照过程将检查结果向管理层汇报。\n\n## 软件测试的基本流程\n\n- 需求分析\n- 编写测试用例（测什么？怎么测？）\n- 评审测试用例\n- 搭建测试环境\n- 等待开发提供测试包\n- 部署测试包\n- 冒烟测试（对软件主体的基本功能进行基本测试）\n- 执行测试用例\n- BUG 跟踪处理（提交及回归 BUG）\n- N 轮之后符合需求\n- 测试结束\n\n## 测试用例编写\n\n#### 测试需求\n\n<div align=\"center\">\n\n![测试需求](https://ftp.bmp.ovh/imgs/2020/04/44d5789a21365530.png)\n\n</div>\n\n#### 测试要点和测试点\n\n<div align=\"center\">\n\n![测试要点和测试点](https://ftp.bmp.ovh/imgs/2020/04/4a83c3b61ceeafa8.png)\n\n</div>\n\n## 开发模型\n\n### 瀑布模型\n\n### 快速原型模型\n\n### V 模型\n\n<div align=\"center\">\n\n![V模型](https://ftp.bmp.ovh/imgs/2020/05/0d7cbc216f388880.png)\n\n</div>\n\n**开发和测试阶段划分比较清晰**\n\n- 需求分析\n- 概要设计\n- 详细设计\n- 编码\n- 单元测试（独立的模块测试）\n- 集成测试（模块联调）\n- 系统测试（整体流程）\n- 验收测试（验证是否满足需求）\n\n[ 优点 ]\n\n- 包含底层测试（单元测试）和高层测试（系统测试）\n- 阶段划分清晰，方便工作的整体把控\n\n[ 缺点 ]\n\n- 测试阶段比较靠后，之前的问题已经产生，修改不方便\n- V 模型就是瀑布模型的变种，如果需求发生变化必然返工\n\n### W 模型（双 V 模型）\n\n<div align=\"center\">\n\n![W 模型](https://ftp.bmp.ovh/imgs/2020/05/7d4ee17a2197ece6.png)\n\n</div>\n\n**开发一个 V, 测试一个 V，开发和测试并行**\n\n- 开发 V (需求分析、概要设计、详细设计、编码、集成、实施、交付)\n- 测试 V (系统测试设计、集成测试设计、单元测试设计、单元测试、集成测试、系统测试、验收测试)\n\n[ 优点 ]\n\n- 开发伴随着测试并行，需求和设计一样要进行测试\n- 尽早的介入测试，会更早的发现问题，降低修复成本\n- 阶段依然明显，方便整体流程把控\n\n[ 缺点 ]\n\n- 代码依然在测试之前，不方便代码的测试工作\n- 如果没有文档，根本无法进行 W 模型，对人员要求较高\n\n## 软件测试分类\n\n<div align=\"center\">\n\n![软件测试分类](https://ftp.bmp.ovh/imgs/2020/05/c3f48210f76d2c81.png)\n\n</div>\n\n## 系统测试\n\n### 什么是系统测试\n\n  系统测试是一个全面的测试，包括单元、集成测试，\n\n### 系统测试的方法是什么\n\n- 功能测试\n  + 概念：根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格\n  + 考察特性： 功能是否有遗漏，功能是否准确\n  + 测试思路/步骤：\n    1. 确定功能需求列表\n    2. 分析功能测试得出测试子项\n    3. 根据测试子项分析\n    4. 采用测试用例方法设计用例\n  + 测试点： 根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格，满足用户显性和隐形的需求\n- 性能测试\n  + 概念：验证系统在不同的业务场景下的响应时间和资源利用率等性能指标是否符合预期的标准\n  + 测试思路： \n    1. 压力测试：调查系统在其资源超负荷的情况下的表现，尤其是这些对系统的处理时间有什么影响\n    2. 容量测试：面向与数据。使系统承受超额的数据容量来发现它是否可以处理数据容量\n    3. 负载测试：在一定负载的情况下系统的性能表现（不关注稳定性，也就是说不关注长时间运行，只是得到不同负载相关性能指标即可）\n- 安全性测试: \n  + 概念：用来验证集成在系统内的保护机制是否能够在实际的情况中不受到非法的侵入\n  + 测试点：\n    1. 权限管理（注册登录才可以查看、注册信息符合要求、密码后台加密）\n    2. 信息保存（log、日志、cookie）\n    3. 数据库（默认的用户名和密码）\n    4. 协议(http协议)\n  + 安全性测试策略：层层剥离法\n  + 工具：\n  + 书籍：白帽子讲 web 安全\n- 异常测试：\n  + 概念：又叫系统容错和可恢复性测试\n  + 可靠性：指标\n  + 可靠性设计方法：\n    1. 避开错误（主动避开错误，针对可以预见的错误进行主动处理。试点：故意构测造无效数据、边界条件、压力测试） \n    2. 容错技术（主动断电强制进入新的设备、构造数据库瘫痪、构造数据死锁、构造数据的不完整事物、构造出错的时间点：断网、短信号）\n- GUI 测试内容\n  + 界面实现与界面设计的吻合情况\n  + 确认界面处理的正确性\n- 易用性测试\n- 安装测试\n- 配置测试\n- 兼容测试\n\n## 测试用例设计方法\n\n### 等价类划分法\n\n**把无法穷举的数据分类书写**\n\n- 按需求写出有效等价类\n- 按需求取反无效等价类\n- 找到特殊情况的无效等价类（中文、英文、空格、空、符号等）\n\n[ 细节 ]\n\n- 输入长度\n- 组成规则\n- 输入类型\n- 是否为空\n- 是否去除空格\n- 是否区分大小写\n\n### 边界值测试\n\n- 找到测试数据的边界点进行测试，也就是有效等价类和无效等价类的边界点\n- 一般情况下需要对边界值以及边界值两边的的值分别进行测试（如：0-100，需要测试 0， 100， -1，1，99，101）\n\n### 因果图制作判定表\n\n- 找到所有的输入条件和预期结果，把所有的输入条件和输出条件填写进去\n- 得到初始表格，根据实际需求进行简化\n\n### 场景法\n\n- 基本流：正确的业务流程\n- 备选流：有问题的业务流程\n\n测试用例书写：需求文档的每一个需求\n\n### 流程法\n\n测试用例必须包含所有的分支条件，每一个分支条件就是一条测试用例。\n\n### 错误推测法\n\n- 时间急，任务紧，测试时间少，考虑使用错误推断法，根据测试人员以往的项目经验进行设计\n- 已经经过几轮测试后，可以使用错误推测法进行测试用例的补充\n\n### 正交排列法\n\n当要测试的内容，需要排列组合的情况非常多的时候，我们考虑使用科学的方法来减少测试用例的个数，即正交表。\n\n**特点：均匀分散，齐整可比，所有的情况都应该被均匀的测试过一次**\n\n- 因素：控件的个数\n- 水平：控件里面的可选项个数\n\n[ 步骤 ]\n\n- 先确定几因素，几水平\n- 在“常用正交表”中找到合适的表格\n- 复制找到的表格到自己的表格中\n- 写一个对照表（所有的控件和对应的选项列出来）\n- 把复制过来的表格和对照表实现映射关系\n\n**如果没有找到合适的正交表，选用多一些的正交表，把多余的内容删除**\n\n### 混合正交表\n\n步骤：\n\n- 制作取值表\n\n- 复制取值表的数据，放到文本文档中保存\n\n- 把文本文档放在 allpairs.文件夹中\n\n- WIN+R 键进入 cmd 控制台\n\n- 进入 allpairs 文件夹\n\n- 在制台中入 allpairs 的文件路径如 F:allpairs/allpairs.exe test1.txt>test2.txt(其中 test1 是你放进 allpairs 文件夹中的文件，test2 填你要生成的文件名)\n\n[ 获取方式 ]\n\n- 链接: https://pan.baidu.com/s/1yQ7lrZSeR6lnvyYeXLzEdw?pwd=tap5 \n\n- 提取码: tap5 \n\n    \n\n## 测试用例的设计\n\n### 测试用例设计综合策略\n\n1. 在任何情况下都必须使用边界值分析方法，经验表明用这种方法设计出测试用例发现程序错误的能力最强。\n\n2. 必要时用等价类划分方法补充一些测试用例。\n\n3. 用错误推测法再追加一些测试用例。\n\n4. 对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到要求的覆盖标准，应当再补充足够的测试用例。\n\n5. 如果程序的功能说明中含有输入条件的组合情况，则一开始就可选用因果图法。 \n\n### 测试用例的设计步骤\n\n1. 构造根据设计规格得出的基本功能测试用例。\n\n2. 边界值测试用例\n\n3. 状态转换测试用例。\n\n4. 错误猜测测试用例。\n\n5. 异常测试用例。 \n\n## 软件缺陷\n\n### 缺陷状态\n\n| 编号 | 缺陷状态 | 描述                                                             |\n| ---- | -------- | ---------------------------------------------------------------- |\n| 1    | 提交     | 已提交的缺陷                                                     |\n| 2    | 打开     | 确认提交的缺陷，等待处理                                         |\n| 3    | 拒绝     | 拒绝提交的缺陷，不需要修复或不是缺陷、重复缺陷、无法重现         |\n| 4    | 修复     | 缺陷被修复（开发人员自认为修改对了）                             |\n| 5    | 关闭     | 确认修复的缺陷，将其关闭（测试人员进行回归复测，确认已经没问题） |\n| 6    | 推迟     | 可在以后解决，但要确定修复日期和版本                             |\n\n[ 禅道 ]\n\n- 激活\n- 已解决\n- 已关闭\n\n### 缺陷程度划分\n\n1. 表面错误\n2. 影响独立模块、断断续续的问题、特定条件下发生、与产品要求不一致。\n3. 功能点没有实现、数据丢失\n4. 影响了系统或者出现了严重的计算错误\n\n### 缺陷的优先级\n\n| 优先级别   | 描述                                                                                |\n| ---------- | ----------------------------------------------------------------------------------- |\n| 5-urgent   | 最高优先级 在这个错误影响下，系统几乎不可用                                         |\n| 4-veryHigh | 高优先级 错误对系统的功能产生严重的影响                                             |\n| 3-high     | 中优先级 错误会制约开发和测试的活动进行，如果先前没有修复他，那么需要在发布前修复他       |\n| 2-medium   | 低优先级 不会延迟发布，但是会在以后修正这个错误                                     |\n| 1-low      | 最低优先级 时间和资源允许时修正                                                 |\n\n**优先级和严重程度不是绝对的正比关系**\n\n### 缺陷类型\n\n- 系统缺陷\n- 数据缺陷\n- 数据库缺陷\n- 接口缺陷\n- 功能缺陷\n- 安全性缺陷\n- 兼容性缺陷\n- 性能缺陷\n- 界面缺陷（删除操作未给出提示）\n- 建议（功能建议、操作建议）\n\n### 缺陷报告注意事项\n\n- 尽量确保缺陷可以重现\n- 简洁、准确、完整\n- 一个缺陷一个报告\n- 复现缺陷的步骤清晰（一个编号一个步骤）\n- 描述结果和期望结果（结果就是 BUG 出现结果）\n- 使用术语描述问题\n\n### 缺陷统计\n\n- 对软件问题的功能域分布进行分析，找出系统的薄弱环节\n  + 要详细采集每个功能模块或系统构件的缺陷数据，并按功能、错误类型、严重程度等分类\n  + 二八定理：80% 的软件问题总发生在大约 20% 的功能模块中\n- 对缺陷的注入阶段进行分析，并于历史数据相比较\n- 应对软件缺陷类型进行分析，以便针对各自特点，先修复严重缺陷\n- 动态采集每个测试周期中发现的缺陷数，并有效的控制缺陷的修复率\n- 密切观察缺陷的状态，并及时跟踪其状态的变化，以检查测试和开发人员的工作情况\n\n## SVN 使用\n\n- 创建版本库\n- 检出 （获取版本库最新版本，只有检出操作后才能提交更新操作）\n- 提交（把此文件夹中的内容提交到版本库）\n- 更新（把最新的版本库中的内容，更新到此文件夹中）\n\n## 接口测试\n\n### 接口优点\n\n- 责任划分清晰\n- 缩短研发周期\n- 可扩展性强\n\n### 接口测试流程\n\n- 接口的功能测试（先保证接口是正确的）\n- 测试接口的数据（传递一些特殊的数据，保证接口没有问题）\n- 自动化测试脚本的编辑\n- 接口的性能、压力测试\n\n> - HTTP: 超文本传输协议，浏览器和服务器之间通信的规则\n> - URL: 统一资源定位符，协议://主机地址/路径\n> - GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET\n> - POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST\n\n### restful 风格（API 文档规则，非强制要求，软要求）\n\n- 查\n  - 方法: GET\n  - 响应码: 200 + 查询数据\n- 增\n  - 方法: POST\n  - 响应码: 201 + 新增的数据\n- 改\n  - 方法: PUT\n  - 响应码: 200/201 + 修改后的数据\n- 删\n  - 方法: DELETE\n  - 响应码: 204 + 无\n\n### 接口请求的四大要素\n\n- 接口 URL 地址\n- 请求方法\n- 请求头\n- 请求参数\n\n\n\n","slug":"软件测试/软件测试起步","published":1,"updated":"2022-02-04T09:45:53.730Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb30007zc1bcptm29lv","content":"<h2 id=\"什么是软件测试\"><a href=\"#什么是软件测试\" class=\"headerlink\" title=\"什么是软件测试\"></a>什么是软件测试</h2><p>在规定的条件下，对程序进行操作，从而发现错误，对软件质量进行评估的过程。</p>\n<h2 id=\"软件测试的目的\"><a href=\"#软件测试的目的\" class=\"headerlink\" title=\"软件测试的目的\"></a>软件测试的目的</h2><p>以最少的人力、物力、时间找到软件的缺陷，并修改从而规避商业风险。</p>\n<h2 id=\"软件测试的定义\"><a href=\"#软件测试的定义\" class=\"headerlink\" title=\"软件测试的定义\"></a>软件测试的定义</h2><p>使用人工和自动手段来运行和测试某个系统的过程，目的在于检验是否满足了需求。</p>\n<h2 id=\"软件测试的原则\"><a href=\"#软件测试的原则\" class=\"headerlink\" title=\"软件测试的原则\"></a>软件测试的原则</h2><ul>\n<li>所有的测试都应该追朔到用户需求</li>\n<li>尽早和不断的测试</li>\n<li>测试工作都应该由独立的专业的软件测试机构来完成</li>\n<li>pareto 原则，测试发现的错误中 80% 很可能起源于 20% 的模块中（20% 指的是应用中出现的新模块，开发人员第一次开发，故会出现较多错误）</li>\n<li>设计测试用例时，应该考虑各种情况<ul>\n<li>测试用例： 测什么？怎么测？</li>\n</ul>\n</li>\n<li><strong>对测试出的错误结果一定要有一个确认的过程（描述缺陷报告）</strong><ul>\n<li>书写错误文档</li>\n</ul>\n</li>\n<li>指定严格的测试计划</li>\n<li><strong>完全测试是不可能的，测试需要终止</strong></li>\n<li>注意回归测试的的关联性<ul>\n<li>回归测试：指开发人员修改了旧代码后，我们需要重新进行测试，以确认修改没有有引入新的错误，或导致其他代码产生错误。</li>\n</ul>\n</li>\n<li>妥善保存一切测试过程文档</li>\n</ul>\n<h2 id=\"软件产品质量模型（ISO-IEC-9126）\"><a href=\"#软件产品质量模型（ISO-IEC-9126）\" class=\"headerlink\" title=\"软件产品质量模型（ISO / IEC 9126）\"></a>软件产品质量模型（ISO / IEC 9126）</h2><ul>\n<li>功能性：提供满足明确和隐含要求的功能的能力</li>\n<li>可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力<ul>\n<li>设备最好不要出故障</li>\n<li>社保出故障了，不要影响主要的功能和业务</li>\n<li>如果影响了主要功能和业务，系统可以尽快定位并恢复</li>\n</ul>\n</li>\n<li>易用性：易懂、易学、易用、漂亮好看（用户体验好）</li>\n<li>效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）</li>\n<li>可维持性：产品可以被修改的能力。可以增加功能，可以更新。</li>\n<li>可移植性：跨越不同系统平台</li>\n</ul>\n<h2 id=\"软件质量模型保证（SQA）\"><a href=\"#软件质量模型保证（SQA）\" class=\"headerlink\" title=\"软件质量模型保证（SQA）\"></a>软件质量模型保证（SQA）</h2><p>[ 目的 ]</p>\n<pre><code>使软件制作的过程对于领导层是可见的。\n</code></pre>\n<p>[ 目标 ]</p>\n<ul>\n<li>保证工作是有计划进行的</li>\n<li>客观的验证软件项目产品和工作是否遵循恰当的标准，步骤和需求。</li>\n<li>保证工作及结果及时通知给相关人员</li>\n<li>高管可以接触到项目内部</li>\n<li>软件质量需要测试工作来保证</li>\n</ul>\n<p>[ QC（检验产品的质量）]</p>\n<p>找出产品存在的问题，进行质量控制，向管理层反馈质量信息。</p>\n<p>[ QA（审计产品过程的质量）]</p>\n<p>来确认项目按照要求进行，审计的内容主要是过程； QA 则确保 QC 按照过程进行质量控制活动，按照过程将检查结果向管理层汇报。</p>\n<h2 id=\"软件测试的基本流程\"><a href=\"#软件测试的基本流程\" class=\"headerlink\" title=\"软件测试的基本流程\"></a>软件测试的基本流程</h2><ul>\n<li>需求分析</li>\n<li>编写测试用例（测什么？怎么测？）</li>\n<li>评审测试用例</li>\n<li>搭建测试环境</li>\n<li>等待开发提供测试包</li>\n<li>部署测试包</li>\n<li>冒烟测试（对软件主体的基本功能进行基本测试）</li>\n<li>执行测试用例</li>\n<li>BUG 跟踪处理（提交及回归 BUG）</li>\n<li>N 轮之后符合需求</li>\n<li>测试结束</li>\n</ul>\n<h2 id=\"测试用例编写\"><a href=\"#测试用例编写\" class=\"headerlink\" title=\"测试用例编写\"></a>测试用例编写</h2><h4 id=\"测试需求\"><a href=\"#测试需求\" class=\"headerlink\" title=\"测试需求\"></a>测试需求</h4><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/04/44d5789a21365530.png\" alt=\"测试需求\"></p>\n</div>\n\n<h4 id=\"测试要点和测试点\"><a href=\"#测试要点和测试点\" class=\"headerlink\" title=\"测试要点和测试点\"></a>测试要点和测试点</h4><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/04/4a83c3b61ceeafa8.png\" alt=\"测试要点和测试点\"></p>\n</div>\n\n<h2 id=\"开发模型\"><a href=\"#开发模型\" class=\"headerlink\" title=\"开发模型\"></a>开发模型</h2><h3 id=\"瀑布模型\"><a href=\"#瀑布模型\" class=\"headerlink\" title=\"瀑布模型\"></a>瀑布模型</h3><h3 id=\"快速原型模型\"><a href=\"#快速原型模型\" class=\"headerlink\" title=\"快速原型模型\"></a>快速原型模型</h3><h3 id=\"V-模型\"><a href=\"#V-模型\" class=\"headerlink\" title=\"V 模型\"></a>V 模型</h3><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/05/0d7cbc216f388880.png\" alt=\"V模型\"></p>\n</div>\n\n<p><strong>开发和测试阶段划分比较清晰</strong></p>\n<ul>\n<li>需求分析</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>编码</li>\n<li>单元测试（独立的模块测试）</li>\n<li>集成测试（模块联调）</li>\n<li>系统测试（整体流程）</li>\n<li>验收测试（验证是否满足需求）</li>\n</ul>\n<p>[ 优点 ]</p>\n<ul>\n<li>包含底层测试（单元测试）和高层测试（系统测试）</li>\n<li>阶段划分清晰，方便工作的整体把控</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>测试阶段比较靠后，之前的问题已经产生，修改不方便</li>\n<li>V 模型就是瀑布模型的变种，如果需求发生变化必然返工</li>\n</ul>\n<h3 id=\"W-模型（双-V-模型）\"><a href=\"#W-模型（双-V-模型）\" class=\"headerlink\" title=\"W 模型（双 V 模型）\"></a>W 模型（双 V 模型）</h3><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/05/7d4ee17a2197ece6.png\" alt=\"W 模型\"></p>\n</div>\n\n<p><strong>开发一个 V, 测试一个 V，开发和测试并行</strong></p>\n<ul>\n<li>开发 V (需求分析、概要设计、详细设计、编码、集成、实施、交付)</li>\n<li>测试 V (系统测试设计、集成测试设计、单元测试设计、单元测试、集成测试、系统测试、验收测试)</li>\n</ul>\n<p>[ 优点 ]</p>\n<ul>\n<li>开发伴随着测试并行，需求和设计一样要进行测试</li>\n<li>尽早的介入测试，会更早的发现问题，降低修复成本</li>\n<li>阶段依然明显，方便整体流程把控</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>代码依然在测试之前，不方便代码的测试工作</li>\n<li>如果没有文档，根本无法进行 W 模型，对人员要求较高</li>\n</ul>\n<h2 id=\"软件测试分类\"><a href=\"#软件测试分类\" class=\"headerlink\" title=\"软件测试分类\"></a>软件测试分类</h2><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/05/c3f48210f76d2c81.png\" alt=\"软件测试分类\"></p>\n</div>\n\n<h2 id=\"系统测试\"><a href=\"#系统测试\" class=\"headerlink\" title=\"系统测试\"></a>系统测试</h2><h3 id=\"什么是系统测试\"><a href=\"#什么是系统测试\" class=\"headerlink\" title=\"什么是系统测试\"></a>什么是系统测试</h3><p>  系统测试是一个全面的测试，包括单元、集成测试，</p>\n<h3 id=\"系统测试的方法是什么\"><a href=\"#系统测试的方法是什么\" class=\"headerlink\" title=\"系统测试的方法是什么\"></a>系统测试的方法是什么</h3><ul>\n<li>功能测试<ul>\n<li>概念：根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格</li>\n<li>考察特性： 功能是否有遗漏，功能是否准确</li>\n<li>测试思路/步骤：<ol>\n<li>确定功能需求列表</li>\n<li>分析功能测试得出测试子项</li>\n<li>根据测试子项分析</li>\n<li>采用测试用例方法设计用例</li>\n</ol>\n</li>\n<li>测试点： 根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格，满足用户显性和隐形的需求</li>\n</ul>\n</li>\n<li>性能测试<ul>\n<li>概念：验证系统在不同的业务场景下的响应时间和资源利用率等性能指标是否符合预期的标准</li>\n<li>测试思路： <ol>\n<li>压力测试：调查系统在其资源超负荷的情况下的表现，尤其是这些对系统的处理时间有什么影响</li>\n<li>容量测试：面向与数据。使系统承受超额的数据容量来发现它是否可以处理数据容量</li>\n<li>负载测试：在一定负载的情况下系统的性能表现（不关注稳定性，也就是说不关注长时间运行，只是得到不同负载相关性能指标即可）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>安全性测试: <ul>\n<li>概念：用来验证集成在系统内的保护机制是否能够在实际的情况中不受到非法的侵入</li>\n<li>测试点：<ol>\n<li>权限管理（注册登录才可以查看、注册信息符合要求、密码后台加密）</li>\n<li>信息保存（log、日志、cookie）</li>\n<li>数据库（默认的用户名和密码）</li>\n<li>协议(http协议)</li>\n</ol>\n</li>\n<li>安全性测试策略：层层剥离法</li>\n<li>工具：</li>\n<li>书籍：白帽子讲 web 安全</li>\n</ul>\n</li>\n<li>异常测试：<ul>\n<li>概念：又叫系统容错和可恢复性测试</li>\n<li>可靠性：指标</li>\n<li>可靠性设计方法：<ol>\n<li>避开错误（主动避开错误，针对可以预见的错误进行主动处理。试点：故意构测造无效数据、边界条件、压力测试） </li>\n<li>容错技术（主动断电强制进入新的设备、构造数据库瘫痪、构造数据死锁、构造数据的不完整事物、构造出错的时间点：断网、短信号）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>GUI 测试内容<ul>\n<li>界面实现与界面设计的吻合情况</li>\n<li>确认界面处理的正确性</li>\n</ul>\n</li>\n<li>易用性测试</li>\n<li>安装测试</li>\n<li>配置测试</li>\n<li>兼容测试</li>\n</ul>\n<h2 id=\"测试用例设计方法\"><a href=\"#测试用例设计方法\" class=\"headerlink\" title=\"测试用例设计方法\"></a>测试用例设计方法</h2><h3 id=\"等价类划分法\"><a href=\"#等价类划分法\" class=\"headerlink\" title=\"等价类划分法\"></a>等价类划分法</h3><p><strong>把无法穷举的数据分类书写</strong></p>\n<ul>\n<li>按需求写出有效等价类</li>\n<li>按需求取反无效等价类</li>\n<li>找到特殊情况的无效等价类（中文、英文、空格、空、符号等）</li>\n</ul>\n<p>[ 细节 ]</p>\n<ul>\n<li>输入长度</li>\n<li>组成规则</li>\n<li>输入类型</li>\n<li>是否为空</li>\n<li>是否去除空格</li>\n<li>是否区分大小写</li>\n</ul>\n<h3 id=\"边界值测试\"><a href=\"#边界值测试\" class=\"headerlink\" title=\"边界值测试\"></a>边界值测试</h3><ul>\n<li>找到测试数据的边界点进行测试，也就是有效等价类和无效等价类的边界点</li>\n<li>一般情况下需要对边界值以及边界值两边的的值分别进行测试（如：0-100，需要测试 0， 100， -1，1，99，101）</li>\n</ul>\n<h3 id=\"因果图制作判定表\"><a href=\"#因果图制作判定表\" class=\"headerlink\" title=\"因果图制作判定表\"></a>因果图制作判定表</h3><ul>\n<li>找到所有的输入条件和预期结果，把所有的输入条件和输出条件填写进去</li>\n<li>得到初始表格，根据实际需求进行简化</li>\n</ul>\n<h3 id=\"场景法\"><a href=\"#场景法\" class=\"headerlink\" title=\"场景法\"></a>场景法</h3><ul>\n<li>基本流：正确的业务流程</li>\n<li>备选流：有问题的业务流程</li>\n</ul>\n<p>测试用例书写：需求文档的每一个需求</p>\n<h3 id=\"流程法\"><a href=\"#流程法\" class=\"headerlink\" title=\"流程法\"></a>流程法</h3><p>测试用例必须包含所有的分支条件，每一个分支条件就是一条测试用例。</p>\n<h3 id=\"错误推测法\"><a href=\"#错误推测法\" class=\"headerlink\" title=\"错误推测法\"></a>错误推测法</h3><ul>\n<li>时间急，任务紧，测试时间少，考虑使用错误推断法，根据测试人员以往的项目经验进行设计</li>\n<li>已经经过几轮测试后，可以使用错误推测法进行测试用例的补充</li>\n</ul>\n<h3 id=\"正交排列法\"><a href=\"#正交排列法\" class=\"headerlink\" title=\"正交排列法\"></a>正交排列法</h3><p>当要测试的内容，需要排列组合的情况非常多的时候，我们考虑使用科学的方法来减少测试用例的个数，即正交表。</p>\n<p><strong>特点：均匀分散，齐整可比，所有的情况都应该被均匀的测试过一次</strong></p>\n<ul>\n<li>因素：控件的个数</li>\n<li>水平：控件里面的可选项个数</li>\n</ul>\n<p>[ 步骤 ]</p>\n<ul>\n<li>先确定几因素，几水平</li>\n<li>在“常用正交表”中找到合适的表格</li>\n<li>复制找到的表格到自己的表格中</li>\n<li>写一个对照表（所有的控件和对应的选项列出来）</li>\n<li>把复制过来的表格和对照表实现映射关系</li>\n</ul>\n<p><strong>如果没有找到合适的正交表，选用多一些的正交表，把多余的内容删除</strong></p>\n<h3 id=\"混合正交表\"><a href=\"#混合正交表\" class=\"headerlink\" title=\"混合正交表\"></a>混合正交表</h3><p>步骤：</p>\n<ul>\n<li><p>制作取值表</p>\n</li>\n<li><p>复制取值表的数据，放到文本文档中保存</p>\n</li>\n<li><p>把文本文档放在 allpairs.文件夹中</p>\n</li>\n<li><p>WIN+R 键进入 cmd 控制台</p>\n</li>\n<li><p>进入 allpairs 文件夹</p>\n</li>\n<li><p>在制台中入 allpairs 的文件路径如 F:allpairs/allpairs.exe test1.txt&gt;test2.txt(其中 test1 是你放进 allpairs 文件夹中的文件，test2 填你要生成的文件名)</p>\n</li>\n</ul>\n<p>[ 获取方式 ]</p>\n<ul>\n<li><p>链接: <a href=\"https://pan.baidu.com/s/1yQ7lrZSeR6lnvyYeXLzEdw?pwd=tap5\" rel=\"external nofollow noreferrer\">https://pan.baidu.com/s/1yQ7lrZSeR6lnvyYeXLzEdw?pwd=tap5</a> </p>\n</li>\n<li><p>提取码: tap5 </p>\n</li>\n</ul>\n<h2 id=\"测试用例的设计\"><a href=\"#测试用例的设计\" class=\"headerlink\" title=\"测试用例的设计\"></a>测试用例的设计</h2><h3 id=\"测试用例设计综合策略\"><a href=\"#测试用例设计综合策略\" class=\"headerlink\" title=\"测试用例设计综合策略\"></a>测试用例设计综合策略</h3><ol>\n<li><p>在任何情况下都必须使用边界值分析方法，经验表明用这种方法设计出测试用例发现程序错误的能力最强。</p>\n</li>\n<li><p>必要时用等价类划分方法补充一些测试用例。</p>\n</li>\n<li><p>用错误推测法再追加一些测试用例。</p>\n</li>\n<li><p>对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到要求的覆盖标准，应当再补充足够的测试用例。</p>\n</li>\n<li><p>如果程序的功能说明中含有输入条件的组合情况，则一开始就可选用因果图法。 </p>\n</li>\n</ol>\n<h3 id=\"测试用例的设计步骤\"><a href=\"#测试用例的设计步骤\" class=\"headerlink\" title=\"测试用例的设计步骤\"></a>测试用例的设计步骤</h3><ol>\n<li><p>构造根据设计规格得出的基本功能测试用例。</p>\n</li>\n<li><p>边界值测试用例</p>\n</li>\n<li><p>状态转换测试用例。</p>\n</li>\n<li><p>错误猜测测试用例。</p>\n</li>\n<li><p>异常测试用例。 </p>\n</li>\n</ol>\n<h2 id=\"软件缺陷\"><a href=\"#软件缺陷\" class=\"headerlink\" title=\"软件缺陷\"></a>软件缺陷</h2><h3 id=\"缺陷状态\"><a href=\"#缺陷状态\" class=\"headerlink\" title=\"缺陷状态\"></a>缺陷状态</h3><table>\n<thead>\n<tr>\n<th>编号</th>\n<th>缺陷状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>提交</td>\n<td>已提交的缺陷</td>\n</tr>\n<tr>\n<td>2</td>\n<td>打开</td>\n<td>确认提交的缺陷，等待处理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>拒绝</td>\n<td>拒绝提交的缺陷，不需要修复或不是缺陷、重复缺陷、无法重现</td>\n</tr>\n<tr>\n<td>4</td>\n<td>修复</td>\n<td>缺陷被修复（开发人员自认为修改对了）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>关闭</td>\n<td>确认修复的缺陷，将其关闭（测试人员进行回归复测，确认已经没问题）</td>\n</tr>\n<tr>\n<td>6</td>\n<td>推迟</td>\n<td>可在以后解决，但要确定修复日期和版本</td>\n</tr>\n</tbody></table>\n<p>[ 禅道 ]</p>\n<ul>\n<li>激活</li>\n<li>已解决</li>\n<li>已关闭</li>\n</ul>\n<h3 id=\"缺陷程度划分\"><a href=\"#缺陷程度划分\" class=\"headerlink\" title=\"缺陷程度划分\"></a>缺陷程度划分</h3><ol>\n<li>表面错误</li>\n<li>影响独立模块、断断续续的问题、特定条件下发生、与产品要求不一致。</li>\n<li>功能点没有实现、数据丢失</li>\n<li>影响了系统或者出现了严重的计算错误</li>\n</ol>\n<h3 id=\"缺陷的优先级\"><a href=\"#缺陷的优先级\" class=\"headerlink\" title=\"缺陷的优先级\"></a>缺陷的优先级</h3><table>\n<thead>\n<tr>\n<th>优先级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5-urgent</td>\n<td>最高优先级 在这个错误影响下，系统几乎不可用</td>\n</tr>\n<tr>\n<td>4-veryHigh</td>\n<td>高优先级 错误对系统的功能产生严重的影响</td>\n</tr>\n<tr>\n<td>3-high</td>\n<td>中优先级 错误会制约开发和测试的活动进行，如果先前没有修复他，那么需要在发布前修复他</td>\n</tr>\n<tr>\n<td>2-medium</td>\n<td>低优先级 不会延迟发布，但是会在以后修正这个错误</td>\n</tr>\n<tr>\n<td>1-low</td>\n<td>最低优先级 时间和资源允许时修正</td>\n</tr>\n</tbody></table>\n<p><strong>优先级和严重程度不是绝对的正比关系</strong></p>\n<h3 id=\"缺陷类型\"><a href=\"#缺陷类型\" class=\"headerlink\" title=\"缺陷类型\"></a>缺陷类型</h3><ul>\n<li>系统缺陷</li>\n<li>数据缺陷</li>\n<li>数据库缺陷</li>\n<li>接口缺陷</li>\n<li>功能缺陷</li>\n<li>安全性缺陷</li>\n<li>兼容性缺陷</li>\n<li>性能缺陷</li>\n<li>界面缺陷（删除操作未给出提示）</li>\n<li>建议（功能建议、操作建议）</li>\n</ul>\n<h3 id=\"缺陷报告注意事项\"><a href=\"#缺陷报告注意事项\" class=\"headerlink\" title=\"缺陷报告注意事项\"></a>缺陷报告注意事项</h3><ul>\n<li>尽量确保缺陷可以重现</li>\n<li>简洁、准确、完整</li>\n<li>一个缺陷一个报告</li>\n<li>复现缺陷的步骤清晰（一个编号一个步骤）</li>\n<li>描述结果和期望结果（结果就是 BUG 出现结果）</li>\n<li>使用术语描述问题</li>\n</ul>\n<h3 id=\"缺陷统计\"><a href=\"#缺陷统计\" class=\"headerlink\" title=\"缺陷统计\"></a>缺陷统计</h3><ul>\n<li>对软件问题的功能域分布进行分析，找出系统的薄弱环节<ul>\n<li>要详细采集每个功能模块或系统构件的缺陷数据，并按功能、错误类型、严重程度等分类</li>\n<li>二八定理：80% 的软件问题总发生在大约 20% 的功能模块中</li>\n</ul>\n</li>\n<li>对缺陷的注入阶段进行分析，并于历史数据相比较</li>\n<li>应对软件缺陷类型进行分析，以便针对各自特点，先修复严重缺陷</li>\n<li>动态采集每个测试周期中发现的缺陷数，并有效的控制缺陷的修复率</li>\n<li>密切观察缺陷的状态，并及时跟踪其状态的变化，以检查测试和开发人员的工作情况</li>\n</ul>\n<h2 id=\"SVN-使用\"><a href=\"#SVN-使用\" class=\"headerlink\" title=\"SVN 使用\"></a>SVN 使用</h2><ul>\n<li>创建版本库</li>\n<li>检出 （获取版本库最新版本，只有检出操作后才能提交更新操作）</li>\n<li>提交（把此文件夹中的内容提交到版本库）</li>\n<li>更新（把最新的版本库中的内容，更新到此文件夹中）</li>\n</ul>\n<h2 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h2><h3 id=\"接口优点\"><a href=\"#接口优点\" class=\"headerlink\" title=\"接口优点\"></a>接口优点</h3><ul>\n<li>责任划分清晰</li>\n<li>缩短研发周期</li>\n<li>可扩展性强</li>\n</ul>\n<h3 id=\"接口测试流程\"><a href=\"#接口测试流程\" class=\"headerlink\" title=\"接口测试流程\"></a>接口测试流程</h3><ul>\n<li>接口的功能测试（先保证接口是正确的）</li>\n<li>测试接口的数据（传递一些特殊的数据，保证接口没有问题）</li>\n<li>自动化测试脚本的编辑</li>\n<li>接口的性能、压力测试</li>\n</ul>\n<blockquote>\n<ul>\n<li>HTTP: 超文本传输协议，浏览器和服务器之间通信的规则</li>\n<li>URL: 统一资源定位符，协议://主机地址/路径</li>\n<li>GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET</li>\n<li>POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST</li>\n</ul>\n</blockquote>\n<h3 id=\"restful-风格（API-文档规则，非强制要求，软要求）\"><a href=\"#restful-风格（API-文档规则，非强制要求，软要求）\" class=\"headerlink\" title=\"restful 风格（API 文档规则，非强制要求，软要求）\"></a>restful 风格（API 文档规则，非强制要求，软要求）</h3><ul>\n<li>查<ul>\n<li>方法: GET</li>\n<li>响应码: 200 + 查询数据</li>\n</ul>\n</li>\n<li>增<ul>\n<li>方法: POST</li>\n<li>响应码: 201 + 新增的数据</li>\n</ul>\n</li>\n<li>改<ul>\n<li>方法: PUT</li>\n<li>响应码: 200/201 + 修改后的数据</li>\n</ul>\n</li>\n<li>删<ul>\n<li>方法: DELETE</li>\n<li>响应码: 204 + 无</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"接口请求的四大要素\"><a href=\"#接口请求的四大要素\" class=\"headerlink\" title=\"接口请求的四大要素\"></a>接口请求的四大要素</h3><ul>\n<li>接口 URL 地址</li>\n<li>请求方法</li>\n<li>请求头</li>\n<li>请求参数</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"什么是软件测试\"><a href=\"#什么是软件测试\" class=\"headerlink\" title=\"什么是软件测试\"></a>什么是软件测试</h2><p>在规定的条件下，对程序进行操作，从而发现错误，对软件质量进行评估的过程。</p>\n<h2 id=\"软件测试的目的\"><a href=\"#软件测试的目的\" class=\"headerlink\" title=\"软件测试的目的\"></a>软件测试的目的</h2><p>以最少的人力、物力、时间找到软件的缺陷，并修改从而规避商业风险。</p>\n<h2 id=\"软件测试的定义\"><a href=\"#软件测试的定义\" class=\"headerlink\" title=\"软件测试的定义\"></a>软件测试的定义</h2><p>使用人工和自动手段来运行和测试某个系统的过程，目的在于检验是否满足了需求。</p>\n<h2 id=\"软件测试的原则\"><a href=\"#软件测试的原则\" class=\"headerlink\" title=\"软件测试的原则\"></a>软件测试的原则</h2><ul>\n<li>所有的测试都应该追朔到用户需求</li>\n<li>尽早和不断的测试</li>\n<li>测试工作都应该由独立的专业的软件测试机构来完成</li>\n<li>pareto 原则，测试发现的错误中 80% 很可能起源于 20% 的模块中（20% 指的是应用中出现的新模块，开发人员第一次开发，故会出现较多错误）</li>\n<li>设计测试用例时，应该考虑各种情况<ul>\n<li>测试用例： 测什么？怎么测？</li>\n</ul>\n</li>\n<li><strong>对测试出的错误结果一定要有一个确认的过程（描述缺陷报告）</strong><ul>\n<li>书写错误文档</li>\n</ul>\n</li>\n<li>指定严格的测试计划</li>\n<li><strong>完全测试是不可能的，测试需要终止</strong></li>\n<li>注意回归测试的的关联性<ul>\n<li>回归测试：指开发人员修改了旧代码后，我们需要重新进行测试，以确认修改没有有引入新的错误，或导致其他代码产生错误。</li>\n</ul>\n</li>\n<li>妥善保存一切测试过程文档</li>\n</ul>\n<h2 id=\"软件产品质量模型（ISO-IEC-9126）\"><a href=\"#软件产品质量模型（ISO-IEC-9126）\" class=\"headerlink\" title=\"软件产品质量模型（ISO / IEC 9126）\"></a>软件产品质量模型（ISO / IEC 9126）</h2><ul>\n<li>功能性：提供满足明确和隐含要求的功能的能力</li>\n<li>可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力<ul>\n<li>设备最好不要出故障</li>\n<li>社保出故障了，不要影响主要的功能和业务</li>\n<li>如果影响了主要功能和业务，系统可以尽快定位并恢复</li>\n</ul>\n</li>\n<li>易用性：易懂、易学、易用、漂亮好看（用户体验好）</li>\n<li>效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）</li>\n<li>可维持性：产品可以被修改的能力。可以增加功能，可以更新。</li>\n<li>可移植性：跨越不同系统平台</li>\n</ul>\n<h2 id=\"软件质量模型保证（SQA）\"><a href=\"#软件质量模型保证（SQA）\" class=\"headerlink\" title=\"软件质量模型保证（SQA）\"></a>软件质量模型保证（SQA）</h2><p>[ 目的 ]</p>\n<pre><code>使软件制作的过程对于领导层是可见的。\n</code></pre>\n<p>[ 目标 ]</p>\n<ul>\n<li>保证工作是有计划进行的</li>\n<li>客观的验证软件项目产品和工作是否遵循恰当的标准，步骤和需求。</li>\n<li>保证工作及结果及时通知给相关人员</li>\n<li>高管可以接触到项目内部</li>\n<li>软件质量需要测试工作来保证</li>\n</ul>\n<p>[ QC（检验产品的质量）]</p>\n<p>找出产品存在的问题，进行质量控制，向管理层反馈质量信息。</p>\n<p>[ QA（审计产品过程的质量）]</p>\n<p>来确认项目按照要求进行，审计的内容主要是过程； QA 则确保 QC 按照过程进行质量控制活动，按照过程将检查结果向管理层汇报。</p>\n<h2 id=\"软件测试的基本流程\"><a href=\"#软件测试的基本流程\" class=\"headerlink\" title=\"软件测试的基本流程\"></a>软件测试的基本流程</h2><ul>\n<li>需求分析</li>\n<li>编写测试用例（测什么？怎么测？）</li>\n<li>评审测试用例</li>\n<li>搭建测试环境</li>\n<li>等待开发提供测试包</li>\n<li>部署测试包</li>\n<li>冒烟测试（对软件主体的基本功能进行基本测试）</li>\n<li>执行测试用例</li>\n<li>BUG 跟踪处理（提交及回归 BUG）</li>\n<li>N 轮之后符合需求</li>\n<li>测试结束</li>\n</ul>\n<h2 id=\"测试用例编写\"><a href=\"#测试用例编写\" class=\"headerlink\" title=\"测试用例编写\"></a>测试用例编写</h2><h4 id=\"测试需求\"><a href=\"#测试需求\" class=\"headerlink\" title=\"测试需求\"></a>测试需求</h4><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/04/44d5789a21365530.png\" alt=\"测试需求\"></p>\n</div>\n\n<h4 id=\"测试要点和测试点\"><a href=\"#测试要点和测试点\" class=\"headerlink\" title=\"测试要点和测试点\"></a>测试要点和测试点</h4><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/04/4a83c3b61ceeafa8.png\" alt=\"测试要点和测试点\"></p>\n</div>\n\n<h2 id=\"开发模型\"><a href=\"#开发模型\" class=\"headerlink\" title=\"开发模型\"></a>开发模型</h2><h3 id=\"瀑布模型\"><a href=\"#瀑布模型\" class=\"headerlink\" title=\"瀑布模型\"></a>瀑布模型</h3><h3 id=\"快速原型模型\"><a href=\"#快速原型模型\" class=\"headerlink\" title=\"快速原型模型\"></a>快速原型模型</h3><h3 id=\"V-模型\"><a href=\"#V-模型\" class=\"headerlink\" title=\"V 模型\"></a>V 模型</h3><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/05/0d7cbc216f388880.png\" alt=\"V模型\"></p>\n</div>\n\n<p><strong>开发和测试阶段划分比较清晰</strong></p>\n<ul>\n<li>需求分析</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>编码</li>\n<li>单元测试（独立的模块测试）</li>\n<li>集成测试（模块联调）</li>\n<li>系统测试（整体流程）</li>\n<li>验收测试（验证是否满足需求）</li>\n</ul>\n<p>[ 优点 ]</p>\n<ul>\n<li>包含底层测试（单元测试）和高层测试（系统测试）</li>\n<li>阶段划分清晰，方便工作的整体把控</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>测试阶段比较靠后，之前的问题已经产生，修改不方便</li>\n<li>V 模型就是瀑布模型的变种，如果需求发生变化必然返工</li>\n</ul>\n<h3 id=\"W-模型（双-V-模型）\"><a href=\"#W-模型（双-V-模型）\" class=\"headerlink\" title=\"W 模型（双 V 模型）\"></a>W 模型（双 V 模型）</h3><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/05/7d4ee17a2197ece6.png\" alt=\"W 模型\"></p>\n</div>\n\n<p><strong>开发一个 V, 测试一个 V，开发和测试并行</strong></p>\n<ul>\n<li>开发 V (需求分析、概要设计、详细设计、编码、集成、实施、交付)</li>\n<li>测试 V (系统测试设计、集成测试设计、单元测试设计、单元测试、集成测试、系统测试、验收测试)</li>\n</ul>\n<p>[ 优点 ]</p>\n<ul>\n<li>开发伴随着测试并行，需求和设计一样要进行测试</li>\n<li>尽早的介入测试，会更早的发现问题，降低修复成本</li>\n<li>阶段依然明显，方便整体流程把控</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>代码依然在测试之前，不方便代码的测试工作</li>\n<li>如果没有文档，根本无法进行 W 模型，对人员要求较高</li>\n</ul>\n<h2 id=\"软件测试分类\"><a href=\"#软件测试分类\" class=\"headerlink\" title=\"软件测试分类\"></a>软件测试分类</h2><div align=\"center\">\n\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/05/c3f48210f76d2c81.png\" alt=\"软件测试分类\"></p>\n</div>\n\n<h2 id=\"系统测试\"><a href=\"#系统测试\" class=\"headerlink\" title=\"系统测试\"></a>系统测试</h2><h3 id=\"什么是系统测试\"><a href=\"#什么是系统测试\" class=\"headerlink\" title=\"什么是系统测试\"></a>什么是系统测试</h3><p>  系统测试是一个全面的测试，包括单元、集成测试，</p>\n<h3 id=\"系统测试的方法是什么\"><a href=\"#系统测试的方法是什么\" class=\"headerlink\" title=\"系统测试的方法是什么\"></a>系统测试的方法是什么</h3><ul>\n<li>功能测试<ul>\n<li>概念：根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格</li>\n<li>考察特性： 功能是否有遗漏，功能是否准确</li>\n<li>测试思路/步骤：<ol>\n<li>确定功能需求列表</li>\n<li>分析功能测试得出测试子项</li>\n<li>根据测试子项分析</li>\n<li>采用测试用例方法设计用例</li>\n</ol>\n</li>\n<li>测试点： 根据产品的需求说明书和测试需求列表，验证产品的功能实现是否符合产品的需求规格，满足用户显性和隐形的需求</li>\n</ul>\n</li>\n<li>性能测试<ul>\n<li>概念：验证系统在不同的业务场景下的响应时间和资源利用率等性能指标是否符合预期的标准</li>\n<li>测试思路： <ol>\n<li>压力测试：调查系统在其资源超负荷的情况下的表现，尤其是这些对系统的处理时间有什么影响</li>\n<li>容量测试：面向与数据。使系统承受超额的数据容量来发现它是否可以处理数据容量</li>\n<li>负载测试：在一定负载的情况下系统的性能表现（不关注稳定性，也就是说不关注长时间运行，只是得到不同负载相关性能指标即可）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>安全性测试: <ul>\n<li>概念：用来验证集成在系统内的保护机制是否能够在实际的情况中不受到非法的侵入</li>\n<li>测试点：<ol>\n<li>权限管理（注册登录才可以查看、注册信息符合要求、密码后台加密）</li>\n<li>信息保存（log、日志、cookie）</li>\n<li>数据库（默认的用户名和密码）</li>\n<li>协议(http协议)</li>\n</ol>\n</li>\n<li>安全性测试策略：层层剥离法</li>\n<li>工具：</li>\n<li>书籍：白帽子讲 web 安全</li>\n</ul>\n</li>\n<li>异常测试：<ul>\n<li>概念：又叫系统容错和可恢复性测试</li>\n<li>可靠性：指标</li>\n<li>可靠性设计方法：<ol>\n<li>避开错误（主动避开错误，针对可以预见的错误进行主动处理。试点：故意构测造无效数据、边界条件、压力测试） </li>\n<li>容错技术（主动断电强制进入新的设备、构造数据库瘫痪、构造数据死锁、构造数据的不完整事物、构造出错的时间点：断网、短信号）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>GUI 测试内容<ul>\n<li>界面实现与界面设计的吻合情况</li>\n<li>确认界面处理的正确性</li>\n</ul>\n</li>\n<li>易用性测试</li>\n<li>安装测试</li>\n<li>配置测试</li>\n<li>兼容测试</li>\n</ul>\n<h2 id=\"测试用例设计方法\"><a href=\"#测试用例设计方法\" class=\"headerlink\" title=\"测试用例设计方法\"></a>测试用例设计方法</h2><h3 id=\"等价类划分法\"><a href=\"#等价类划分法\" class=\"headerlink\" title=\"等价类划分法\"></a>等价类划分法</h3><p><strong>把无法穷举的数据分类书写</strong></p>\n<ul>\n<li>按需求写出有效等价类</li>\n<li>按需求取反无效等价类</li>\n<li>找到特殊情况的无效等价类（中文、英文、空格、空、符号等）</li>\n</ul>\n<p>[ 细节 ]</p>\n<ul>\n<li>输入长度</li>\n<li>组成规则</li>\n<li>输入类型</li>\n<li>是否为空</li>\n<li>是否去除空格</li>\n<li>是否区分大小写</li>\n</ul>\n<h3 id=\"边界值测试\"><a href=\"#边界值测试\" class=\"headerlink\" title=\"边界值测试\"></a>边界值测试</h3><ul>\n<li>找到测试数据的边界点进行测试，也就是有效等价类和无效等价类的边界点</li>\n<li>一般情况下需要对边界值以及边界值两边的的值分别进行测试（如：0-100，需要测试 0， 100， -1，1，99，101）</li>\n</ul>\n<h3 id=\"因果图制作判定表\"><a href=\"#因果图制作判定表\" class=\"headerlink\" title=\"因果图制作判定表\"></a>因果图制作判定表</h3><ul>\n<li>找到所有的输入条件和预期结果，把所有的输入条件和输出条件填写进去</li>\n<li>得到初始表格，根据实际需求进行简化</li>\n</ul>\n<h3 id=\"场景法\"><a href=\"#场景法\" class=\"headerlink\" title=\"场景法\"></a>场景法</h3><ul>\n<li>基本流：正确的业务流程</li>\n<li>备选流：有问题的业务流程</li>\n</ul>\n<p>测试用例书写：需求文档的每一个需求</p>\n<h3 id=\"流程法\"><a href=\"#流程法\" class=\"headerlink\" title=\"流程法\"></a>流程法</h3><p>测试用例必须包含所有的分支条件，每一个分支条件就是一条测试用例。</p>\n<h3 id=\"错误推测法\"><a href=\"#错误推测法\" class=\"headerlink\" title=\"错误推测法\"></a>错误推测法</h3><ul>\n<li>时间急，任务紧，测试时间少，考虑使用错误推断法，根据测试人员以往的项目经验进行设计</li>\n<li>已经经过几轮测试后，可以使用错误推测法进行测试用例的补充</li>\n</ul>\n<h3 id=\"正交排列法\"><a href=\"#正交排列法\" class=\"headerlink\" title=\"正交排列法\"></a>正交排列法</h3><p>当要测试的内容，需要排列组合的情况非常多的时候，我们考虑使用科学的方法来减少测试用例的个数，即正交表。</p>\n<p><strong>特点：均匀分散，齐整可比，所有的情况都应该被均匀的测试过一次</strong></p>\n<ul>\n<li>因素：控件的个数</li>\n<li>水平：控件里面的可选项个数</li>\n</ul>\n<p>[ 步骤 ]</p>\n<ul>\n<li>先确定几因素，几水平</li>\n<li>在“常用正交表”中找到合适的表格</li>\n<li>复制找到的表格到自己的表格中</li>\n<li>写一个对照表（所有的控件和对应的选项列出来）</li>\n<li>把复制过来的表格和对照表实现映射关系</li>\n</ul>\n<p><strong>如果没有找到合适的正交表，选用多一些的正交表，把多余的内容删除</strong></p>\n<h3 id=\"混合正交表\"><a href=\"#混合正交表\" class=\"headerlink\" title=\"混合正交表\"></a>混合正交表</h3><p>步骤：</p>\n<ul>\n<li><p>制作取值表</p>\n</li>\n<li><p>复制取值表的数据，放到文本文档中保存</p>\n</li>\n<li><p>把文本文档放在 allpairs.文件夹中</p>\n</li>\n<li><p>WIN+R 键进入 cmd 控制台</p>\n</li>\n<li><p>进入 allpairs 文件夹</p>\n</li>\n<li><p>在制台中入 allpairs 的文件路径如 F:allpairs/allpairs.exe test1.txt&gt;test2.txt(其中 test1 是你放进 allpairs 文件夹中的文件，test2 填你要生成的文件名)</p>\n</li>\n</ul>\n<p>[ 获取方式 ]</p>\n<ul>\n<li><p>链接: <a href=\"https://pan.baidu.com/s/1yQ7lrZSeR6lnvyYeXLzEdw?pwd=tap5\">https://pan.baidu.com/s/1yQ7lrZSeR6lnvyYeXLzEdw?pwd=tap5</a> </p>\n</li>\n<li><p>提取码: tap5 </p>\n</li>\n</ul>\n<h2 id=\"测试用例的设计\"><a href=\"#测试用例的设计\" class=\"headerlink\" title=\"测试用例的设计\"></a>测试用例的设计</h2><h3 id=\"测试用例设计综合策略\"><a href=\"#测试用例设计综合策略\" class=\"headerlink\" title=\"测试用例设计综合策略\"></a>测试用例设计综合策略</h3><ol>\n<li><p>在任何情况下都必须使用边界值分析方法，经验表明用这种方法设计出测试用例发现程序错误的能力最强。</p>\n</li>\n<li><p>必要时用等价类划分方法补充一些测试用例。</p>\n</li>\n<li><p>用错误推测法再追加一些测试用例。</p>\n</li>\n<li><p>对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到要求的覆盖标准，应当再补充足够的测试用例。</p>\n</li>\n<li><p>如果程序的功能说明中含有输入条件的组合情况，则一开始就可选用因果图法。 </p>\n</li>\n</ol>\n<h3 id=\"测试用例的设计步骤\"><a href=\"#测试用例的设计步骤\" class=\"headerlink\" title=\"测试用例的设计步骤\"></a>测试用例的设计步骤</h3><ol>\n<li><p>构造根据设计规格得出的基本功能测试用例。</p>\n</li>\n<li><p>边界值测试用例</p>\n</li>\n<li><p>状态转换测试用例。</p>\n</li>\n<li><p>错误猜测测试用例。</p>\n</li>\n<li><p>异常测试用例。 </p>\n</li>\n</ol>\n<h2 id=\"软件缺陷\"><a href=\"#软件缺陷\" class=\"headerlink\" title=\"软件缺陷\"></a>软件缺陷</h2><h3 id=\"缺陷状态\"><a href=\"#缺陷状态\" class=\"headerlink\" title=\"缺陷状态\"></a>缺陷状态</h3><table>\n<thead>\n<tr>\n<th>编号</th>\n<th>缺陷状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>提交</td>\n<td>已提交的缺陷</td>\n</tr>\n<tr>\n<td>2</td>\n<td>打开</td>\n<td>确认提交的缺陷，等待处理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>拒绝</td>\n<td>拒绝提交的缺陷，不需要修复或不是缺陷、重复缺陷、无法重现</td>\n</tr>\n<tr>\n<td>4</td>\n<td>修复</td>\n<td>缺陷被修复（开发人员自认为修改对了）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>关闭</td>\n<td>确认修复的缺陷，将其关闭（测试人员进行回归复测，确认已经没问题）</td>\n</tr>\n<tr>\n<td>6</td>\n<td>推迟</td>\n<td>可在以后解决，但要确定修复日期和版本</td>\n</tr>\n</tbody></table>\n<p>[ 禅道 ]</p>\n<ul>\n<li>激活</li>\n<li>已解决</li>\n<li>已关闭</li>\n</ul>\n<h3 id=\"缺陷程度划分\"><a href=\"#缺陷程度划分\" class=\"headerlink\" title=\"缺陷程度划分\"></a>缺陷程度划分</h3><ol>\n<li>表面错误</li>\n<li>影响独立模块、断断续续的问题、特定条件下发生、与产品要求不一致。</li>\n<li>功能点没有实现、数据丢失</li>\n<li>影响了系统或者出现了严重的计算错误</li>\n</ol>\n<h3 id=\"缺陷的优先级\"><a href=\"#缺陷的优先级\" class=\"headerlink\" title=\"缺陷的优先级\"></a>缺陷的优先级</h3><table>\n<thead>\n<tr>\n<th>优先级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5-urgent</td>\n<td>最高优先级 在这个错误影响下，系统几乎不可用</td>\n</tr>\n<tr>\n<td>4-veryHigh</td>\n<td>高优先级 错误对系统的功能产生严重的影响</td>\n</tr>\n<tr>\n<td>3-high</td>\n<td>中优先级 错误会制约开发和测试的活动进行，如果先前没有修复他，那么需要在发布前修复他</td>\n</tr>\n<tr>\n<td>2-medium</td>\n<td>低优先级 不会延迟发布，但是会在以后修正这个错误</td>\n</tr>\n<tr>\n<td>1-low</td>\n<td>最低优先级 时间和资源允许时修正</td>\n</tr>\n</tbody></table>\n<p><strong>优先级和严重程度不是绝对的正比关系</strong></p>\n<h3 id=\"缺陷类型\"><a href=\"#缺陷类型\" class=\"headerlink\" title=\"缺陷类型\"></a>缺陷类型</h3><ul>\n<li>系统缺陷</li>\n<li>数据缺陷</li>\n<li>数据库缺陷</li>\n<li>接口缺陷</li>\n<li>功能缺陷</li>\n<li>安全性缺陷</li>\n<li>兼容性缺陷</li>\n<li>性能缺陷</li>\n<li>界面缺陷（删除操作未给出提示）</li>\n<li>建议（功能建议、操作建议）</li>\n</ul>\n<h3 id=\"缺陷报告注意事项\"><a href=\"#缺陷报告注意事项\" class=\"headerlink\" title=\"缺陷报告注意事项\"></a>缺陷报告注意事项</h3><ul>\n<li>尽量确保缺陷可以重现</li>\n<li>简洁、准确、完整</li>\n<li>一个缺陷一个报告</li>\n<li>复现缺陷的步骤清晰（一个编号一个步骤）</li>\n<li>描述结果和期望结果（结果就是 BUG 出现结果）</li>\n<li>使用术语描述问题</li>\n</ul>\n<h3 id=\"缺陷统计\"><a href=\"#缺陷统计\" class=\"headerlink\" title=\"缺陷统计\"></a>缺陷统计</h3><ul>\n<li>对软件问题的功能域分布进行分析，找出系统的薄弱环节<ul>\n<li>要详细采集每个功能模块或系统构件的缺陷数据，并按功能、错误类型、严重程度等分类</li>\n<li>二八定理：80% 的软件问题总发生在大约 20% 的功能模块中</li>\n</ul>\n</li>\n<li>对缺陷的注入阶段进行分析，并于历史数据相比较</li>\n<li>应对软件缺陷类型进行分析，以便针对各自特点，先修复严重缺陷</li>\n<li>动态采集每个测试周期中发现的缺陷数，并有效的控制缺陷的修复率</li>\n<li>密切观察缺陷的状态，并及时跟踪其状态的变化，以检查测试和开发人员的工作情况</li>\n</ul>\n<h2 id=\"SVN-使用\"><a href=\"#SVN-使用\" class=\"headerlink\" title=\"SVN 使用\"></a>SVN 使用</h2><ul>\n<li>创建版本库</li>\n<li>检出 （获取版本库最新版本，只有检出操作后才能提交更新操作）</li>\n<li>提交（把此文件夹中的内容提交到版本库）</li>\n<li>更新（把最新的版本库中的内容，更新到此文件夹中）</li>\n</ul>\n<h2 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h2><h3 id=\"接口优点\"><a href=\"#接口优点\" class=\"headerlink\" title=\"接口优点\"></a>接口优点</h3><ul>\n<li>责任划分清晰</li>\n<li>缩短研发周期</li>\n<li>可扩展性强</li>\n</ul>\n<h3 id=\"接口测试流程\"><a href=\"#接口测试流程\" class=\"headerlink\" title=\"接口测试流程\"></a>接口测试流程</h3><ul>\n<li>接口的功能测试（先保证接口是正确的）</li>\n<li>测试接口的数据（传递一些特殊的数据，保证接口没有问题）</li>\n<li>自动化测试脚本的编辑</li>\n<li>接口的性能、压力测试</li>\n</ul>\n<blockquote>\n<ul>\n<li>HTTP: 超文本传输协议，浏览器和服务器之间通信的规则</li>\n<li>URL: 统一资源定位符，协议://主机地址/路径</li>\n<li>GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET</li>\n<li>POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST</li>\n</ul>\n</blockquote>\n<h3 id=\"restful-风格（API-文档规则，非强制要求，软要求）\"><a href=\"#restful-风格（API-文档规则，非强制要求，软要求）\" class=\"headerlink\" title=\"restful 风格（API 文档规则，非强制要求，软要求）\"></a>restful 风格（API 文档规则，非强制要求，软要求）</h3><ul>\n<li>查<ul>\n<li>方法: GET</li>\n<li>响应码: 200 + 查询数据</li>\n</ul>\n</li>\n<li>增<ul>\n<li>方法: POST</li>\n<li>响应码: 201 + 新增的数据</li>\n</ul>\n</li>\n<li>改<ul>\n<li>方法: PUT</li>\n<li>响应码: 200/201 + 修改后的数据</li>\n</ul>\n</li>\n<li>删<ul>\n<li>方法: DELETE</li>\n<li>响应码: 204 + 无</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"接口请求的四大要素\"><a href=\"#接口请求的四大要素\" class=\"headerlink\" title=\"接口请求的四大要素\"></a>接口请求的四大要素</h3><ul>\n<li>接口 URL 地址</li>\n<li>请求方法</li>\n<li>请求头</li>\n<li>请求参数</li>\n</ul>\n"},{"title":"头脑风暴","comments":1,"abbrlink":2482852438,"date":"2022-01-30T16:00:00.000Z","_content":"","source":"_posts/头脑风暴/头脑风暴.md","raw":"---\ntitle: 头脑风暴\ncomments: true\ntags:\n  - 头脑风暴\ncategories:\n  - - 头脑风暴\nabbrlink: 2482852438\ndate: 2022-01-31 00:00:00\n---\n","slug":"头脑风暴/头脑风暴","published":1,"updated":"2022-02-04T09:45:53.673Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb5000azc1b4cipbpq6","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"软件测试面试","comments":1,"abbrlink":2734300636,"date":"2020-05-26T16:00:00.000Z","_content":"## 软件测试方法的分类\n\n<div align=\"center\">\n\n![软件测试分类.png](https://i.loli.net/2020/05/28/PcGbk4dYFfXLTzj.png)\n</div>\n\n## 常用测试方法\n\n<div align=\"center\">\n\n![测试方法.png](https://i.loli.net/2020/05/28/seV7fQw169kG5dh.png)\n</div>\n\n## 系统测试方法\n\n<div align=\"center\">\n\n![系统测试.png](https://i.loli.net/2020/05/28/7uieAb1MB3VH8ZR.png)\n</div>\n\n## 什么是软件测试\n\n- 软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。\n\n## 软件产品质量模型（ISO / IEC 9126）\n\n- 功能性：提供满足明确和隐含要求的功能的能力\n- 可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力\n  + 设备最好不要出故障\n  + 设备出故障了，不要影响主要的功能和业务\n  + 如果影响了主要功能和业务，系统可以尽快定位并恢复\n- 易用性：易懂、易学、易用、漂亮好看（用户体验好）\n- 效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）\n- 可维护性：产品可以被修改的能力。可以增加功能，可以更新。\n- 可移植性：跨越不同系统平台\n\n### 对一支笔从软件质量的体系进行分析要测哪些？\n\n- 功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸\n- 性能： 一支笔能连续写多久，从高处掉落会不会坏\n- 易用性： 是否美观，是否好握，书写是否舒服\n- 安全： 材质是否符合安全规范，是否对人体产生危害\n- 可移植性： 是否可以通过换笔芯继续使用。\n\n## Web 测试与 App 测试\n\n### 软件测试流程\n\n我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### App 测试流程\n\n我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### Web 测试与 App 测试的区别\n\n- 从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。\n\n- 系统架构方面：\n  + Web 项目，一般都是 b/s 架构，基于浏览器的\n  + App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。\n  + Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。\n- 性能方面:\n  + Web 页面主要会关注响应时间\n  + 而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。\n  + 它们服务端的性能没区别，都是一台服务器。\n- 兼容方面：\n  + Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载\n  + App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。\n\n所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件\n此外 App 还有一些专项测试：如网络、适配性。。。\n\n### App 测试特点\n\n**（除了按需求说明书外的 功能测试 之外还需要进行如下测试）**\n\n- 适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）\n- 不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）\n- 在线升级测试\n- 中断测试（电话、短中消息打扰）\n- 耗电量测试\n- 弱网测试（信号差，信号屏蔽实验室）\n- 安装卸载 （C/S）\n- 流量测试\n\n## 系统测试是什么，有哪些测试方法。流程是什么?\n\n[ 系统测试 ]\n\n- 对项目进行全面的测试，其中包含单元测试和集成测试\n\n[ 测试方法 ]\n\n- 功能测试\n- 异常测试\n- 性能测试\n- 易用性测试\n- 安全性测试\n- GUI 测试\n- 兼容性测试\n- 配置测试\n- 安装测试\n\n[ 流程 ]\n\n我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。\n\n## 测试用例的设计方法\n\n- 等价类划分法\n- 边界值分析法\n- 因果图/判定表法\n- 错误推断法\n- 正交实验法\n- 场景设计法/流程分析法\n\n## http 协议 和 https 协议\n\n### http 协议\n\n- HTTP 协议： 超文本传输协议\n\n[ 请求方式 ]\n\n- GET\n- POST\n- PUT\n- DELETE\n\n[ 状态码 ]\n\n- 200 成功\n- 204 请求成功，服务端没有内容\n- 301 永久重定向\n- 302 临时重定向\n- 304 走缓存\n- 400 参数错误\n- 401 权限不够\n- 403 服务器拒绝响应\n- 404 资源不存在\n- 500 服务器端错误，\n- 502 网关错误\n  \n### http 协议 和 https 协议的区别\n\n- http 协议是超文本传输协议，信息是明文传输\n- https 是具有安全性的 ssl / tls 加密传输协议\n- http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443\n- http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全\n\n### TCP与UDP的区别\n\nTCP（Transmission Control Protocol，传输控制协议）\nUDP（User Data Protocol，用户数据报协议）\n\n1、基于连接与无连接；\n\n2、对系统资源的要求（TCP较多，UDP少）；\n\n3、UDP程序结构较简单；\n\n4、流模式与数据报模式 ；\n\n5、TCP保证数据正确性，UDP可能丢包；\n\n6、TCP保证数据顺序，UDP不保证。\n\n## 接口测试流程\n\n- 接口的功能测试（先保证接口是正确的）\n- 测试接口的数据（传递一些特殊的数据，保证接口没有问题）\n- 自动化测试脚本的编辑\n- 接口的性能、压力测试\n\n> - HTTP: 超文本传输协议，浏览器和服务器之间通信的规则\n> - URL: 统一资源定位符，协议://主机地址/路径\n> - GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET\n> - POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST\n\n### Fiddler 的原理\n\n- Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。\n  \n### 你可以说说 jmeter 里的进程和线程吗？\n\n\n### 你说说聚合报告是个什么东西？\n\n- 对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以kb/秒为单位的吞吐量.\n\n## 缺陷（Bug）管理\n\n### 一个“缺陷”的记录都包含哪些内容\n\n- 所属产品、模块、项目、版本\n- Bug 指派\n- Bug 标题\n- 优先级\n- 严重程度\n- 操作步骤\n- 实际结果\n- 预期结果\n  \n### 怎么区分 Bug 是前端的还是后端的\n\n1. 如果项目崩溃，就是前端的 Bug\n2. 界面出现问题，前端 Bug\n3. 资源不能加载（根据状态码）\n\n- 500： 后端的问题\n- 404：\n- + 查看前端有没有发出去请求\n  + 查看前端请求接口是不是对的\n  + 查看前端请求参数是否正确\n- 200：\n  + 后端返回的数据是否正确\n  + 前端读取数据的时候出错 \n  \n### 优先级与严重程度\n\n#### Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\n- 一级： 严重影响到后面功能模块的测试工作\n- 二级： Bug 会制约开发和测试的活动进行，需要在发布前修复\n- 三级： 不影响其他工作，文字，话术、图片等出现错误\n\n#### Bug 严重程度（从用户角度考虑）\n- 一级：致命问题，App 崩溃\n- 二级：功能出现错误，\n- 三级：UI 界面出现错误（文字，话术、图片等）\n\n#### 测试用例优先级\n\n- 一级：正向的流程，主功能\n- 二级：反向的流程\n- 三级：检查 UI 界面的文本、图片等\n\n\n## 冒烟测试和回归测试的区别\n\n- 测试目的不同\n  + 冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。\n  + 回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。\n- 测试过程不同\n  + 冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。\n  + 回归测试：是指漏洞由开发人员修改之后再次测试的过程。\n- 问题解决方式不同\n  + 冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。\n  + 回归测试：回归测试是修改完之后进行验证再进行的工程。\n- 测试周期不同\n  + 冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。\n  + 回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。\n- 测试意义不同\n  + 冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。\n  + 回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。\n\n## git 是干嘛的？git 和 svn 有什么区别？\n\n- git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的\n- svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。\n- git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。\n\n## 说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\n\n- cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid\n- token 和 session 算是一类，都是用于服务器验证的。\n- 服务器会通过用户请求携带的 sessionid 来识别用户\n\n## 敏捷开发的特点\n\n敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。\n\n## Selenium 中,等待方式有哪些，区别是什么？\n\n- sleep 休眠方法\n- 隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒\n- 显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法\n\n## 功能测试在 beta 版本对外上线的标准是什么\n\n- 测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。\n\n## 软件测试结束的标准\n\n- 测试用例全部跑完，并且 Bug 都已经关闭\n- 性能指标达到要求\n- 验收测试通过\n\n## 有没有用过 django 框架？\n\n## 你知道深拷贝和浅拷贝的区别吗？\n\n如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。\n\n## 一个测试需要具备什么素质？\n\n- 五心（细心，专心，耐心，信心，责任心）\n- 要相信任何软件都存在缺陷\n- 需要具备专业的软件测试技能\n- 具备一定的逻辑分析能力\n- 具备团队合作精神\n- 具备较好的沟通能力\n- 实事求是\n- 具备较好的学习能力\n- 具备一定的编程能力\n- 要有原则\n- 不断总结经验与教训\n- 无论缺陷大小都要上报\n- 遇到不可重现的bug也要报告\n\n### 保持怀疑\n\n对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说\"我做完了而且也测过了\"就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。\n\n### 永不妥协\n\n不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。\n\n### 让用户满意\n\n产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个bug频出的系统／产品满意的。\n\n### 从用户角度思考\n\n很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能\n\n### 分清主次\n\n要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。\n\n### 从不承诺100%的覆盖率\n\n不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。\n\n### 倾听建议\n\n别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。\n\n### 尽早开始\n\n尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。\n\n### 确定并管理风险\n\n在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。\n\n### 做市场调研\n\n看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。\n\n### 培养BA技能\n\nBA就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。\n\n### 不要忘了异常情况\n\n只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现bug，也有助于我们换个角度看待产品和项目的业务行为。\n\n### Be a Good Judge of Your Product\n\n做那个对项目/产品最有发言权的人。\n\n### 学会交涉\n\n在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。\n\n### 停止指责\n\n出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。\n\n### 做一个好的观察者\n\n观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。\n\n## python 主要数据类型有哪些？\n\n- 数字：int、float、bool、complex\n- 字符串：str\n- 列表：list，用[]\n- 元组：tuple，用()，就相当于不可修改的list\n- 集合：set，用{}\n- 字典：dict，用{key: value}\n\n## Linux 面试\n\n### 你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\n\n- chmod 修改文件权限\n- 查看某个进程的pid\n```\n  ps -ef | grep xxx(某个进程)\n```\n\n- 查找被占用的端口\n```\n  netstat -tln  \n  netstat -tln | grep 8083 \n  netstat -lnp | grep 8083 \n\n```\n- 查看端口属于哪个程序？端口被哪个进程占用\n```\n  lsof -i :8083  \n```\n- 杀掉占用端口的进程\n```\nkill -9 进程id\n```\n\n","source":"_posts/软件测试/软件测试面试题目.md","raw":"---\ntitle: 软件测试面试\ncomments: true\ntags:\n  - 软件测试\ncategories:\n  - - 软件测试\nabbrlink: 2734300636\ndate: 2020-05-27 00:00:00\n---\n## 软件测试方法的分类\n\n<div align=\"center\">\n\n![软件测试分类.png](https://i.loli.net/2020/05/28/PcGbk4dYFfXLTzj.png)\n</div>\n\n## 常用测试方法\n\n<div align=\"center\">\n\n![测试方法.png](https://i.loli.net/2020/05/28/seV7fQw169kG5dh.png)\n</div>\n\n## 系统测试方法\n\n<div align=\"center\">\n\n![系统测试.png](https://i.loli.net/2020/05/28/7uieAb1MB3VH8ZR.png)\n</div>\n\n## 什么是软件测试\n\n- 软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。\n\n## 软件产品质量模型（ISO / IEC 9126）\n\n- 功能性：提供满足明确和隐含要求的功能的能力\n- 可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力\n  + 设备最好不要出故障\n  + 设备出故障了，不要影响主要的功能和业务\n  + 如果影响了主要功能和业务，系统可以尽快定位并恢复\n- 易用性：易懂、易学、易用、漂亮好看（用户体验好）\n- 效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）\n- 可维护性：产品可以被修改的能力。可以增加功能，可以更新。\n- 可移植性：跨越不同系统平台\n\n### 对一支笔从软件质量的体系进行分析要测哪些？\n\n- 功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸\n- 性能： 一支笔能连续写多久，从高处掉落会不会坏\n- 易用性： 是否美观，是否好握，书写是否舒服\n- 安全： 材质是否符合安全规范，是否对人体产生危害\n- 可移植性： 是否可以通过换笔芯继续使用。\n\n## Web 测试与 App 测试\n\n### 软件测试流程\n\n我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### App 测试流程\n\n我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### Web 测试与 App 测试的区别\n\n- 从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。\n\n- 系统架构方面：\n  + Web 项目，一般都是 b/s 架构，基于浏览器的\n  + App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。\n  + Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。\n- 性能方面:\n  + Web 页面主要会关注响应时间\n  + 而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。\n  + 它们服务端的性能没区别，都是一台服务器。\n- 兼容方面：\n  + Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载\n  + App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。\n\n所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件\n此外 App 还有一些专项测试：如网络、适配性。。。\n\n### App 测试特点\n\n**（除了按需求说明书外的 功能测试 之外还需要进行如下测试）**\n\n- 适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）\n- 不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）\n- 在线升级测试\n- 中断测试（电话、短中消息打扰）\n- 耗电量测试\n- 弱网测试（信号差，信号屏蔽实验室）\n- 安装卸载 （C/S）\n- 流量测试\n\n## 系统测试是什么，有哪些测试方法。流程是什么?\n\n[ 系统测试 ]\n\n- 对项目进行全面的测试，其中包含单元测试和集成测试\n\n[ 测试方法 ]\n\n- 功能测试\n- 异常测试\n- 性能测试\n- 易用性测试\n- 安全性测试\n- GUI 测试\n- 兼容性测试\n- 配置测试\n- 安装测试\n\n[ 流程 ]\n\n我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。\n\n## 测试用例的设计方法\n\n- 等价类划分法\n- 边界值分析法\n- 因果图/判定表法\n- 错误推断法\n- 正交实验法\n- 场景设计法/流程分析法\n\n## http 协议 和 https 协议\n\n### http 协议\n\n- HTTP 协议： 超文本传输协议\n\n[ 请求方式 ]\n\n- GET\n- POST\n- PUT\n- DELETE\n\n[ 状态码 ]\n\n- 200 成功\n- 204 请求成功，服务端没有内容\n- 301 永久重定向\n- 302 临时重定向\n- 304 走缓存\n- 400 参数错误\n- 401 权限不够\n- 403 服务器拒绝响应\n- 404 资源不存在\n- 500 服务器端错误，\n- 502 网关错误\n  \n### http 协议 和 https 协议的区别\n\n- http 协议是超文本传输协议，信息是明文传输\n- https 是具有安全性的 ssl / tls 加密传输协议\n- http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443\n- http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全\n\n### TCP与UDP的区别\n\nTCP（Transmission Control Protocol，传输控制协议）\nUDP（User Data Protocol，用户数据报协议）\n\n1、基于连接与无连接；\n\n2、对系统资源的要求（TCP较多，UDP少）；\n\n3、UDP程序结构较简单；\n\n4、流模式与数据报模式 ；\n\n5、TCP保证数据正确性，UDP可能丢包；\n\n6、TCP保证数据顺序，UDP不保证。\n\n## 接口测试流程\n\n- 接口的功能测试（先保证接口是正确的）\n- 测试接口的数据（传递一些特殊的数据，保证接口没有问题）\n- 自动化测试脚本的编辑\n- 接口的性能、压力测试\n\n> - HTTP: 超文本传输协议，浏览器和服务器之间通信的规则\n> - URL: 统一资源定位符，协议://主机地址/路径\n> - GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET\n> - POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST\n\n### Fiddler 的原理\n\n- Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。\n  \n### 你可以说说 jmeter 里的进程和线程吗？\n\n\n### 你说说聚合报告是个什么东西？\n\n- 对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以kb/秒为单位的吞吐量.\n\n## 缺陷（Bug）管理\n\n### 一个“缺陷”的记录都包含哪些内容\n\n- 所属产品、模块、项目、版本\n- Bug 指派\n- Bug 标题\n- 优先级\n- 严重程度\n- 操作步骤\n- 实际结果\n- 预期结果\n  \n### 怎么区分 Bug 是前端的还是后端的\n\n1. 如果项目崩溃，就是前端的 Bug\n2. 界面出现问题，前端 Bug\n3. 资源不能加载（根据状态码）\n\n- 500： 后端的问题\n- 404：\n- + 查看前端有没有发出去请求\n  + 查看前端请求接口是不是对的\n  + 查看前端请求参数是否正确\n- 200：\n  + 后端返回的数据是否正确\n  + 前端读取数据的时候出错 \n  \n### 优先级与严重程度\n\n#### Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\n- 一级： 严重影响到后面功能模块的测试工作\n- 二级： Bug 会制约开发和测试的活动进行，需要在发布前修复\n- 三级： 不影响其他工作，文字，话术、图片等出现错误\n\n#### Bug 严重程度（从用户角度考虑）\n- 一级：致命问题，App 崩溃\n- 二级：功能出现错误，\n- 三级：UI 界面出现错误（文字，话术、图片等）\n\n#### 测试用例优先级\n\n- 一级：正向的流程，主功能\n- 二级：反向的流程\n- 三级：检查 UI 界面的文本、图片等\n\n\n## 冒烟测试和回归测试的区别\n\n- 测试目的不同\n  + 冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。\n  + 回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。\n- 测试过程不同\n  + 冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。\n  + 回归测试：是指漏洞由开发人员修改之后再次测试的过程。\n- 问题解决方式不同\n  + 冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。\n  + 回归测试：回归测试是修改完之后进行验证再进行的工程。\n- 测试周期不同\n  + 冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。\n  + 回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。\n- 测试意义不同\n  + 冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。\n  + 回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。\n\n## git 是干嘛的？git 和 svn 有什么区别？\n\n- git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的\n- svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。\n- git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。\n\n## 说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\n\n- cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid\n- token 和 session 算是一类，都是用于服务器验证的。\n- 服务器会通过用户请求携带的 sessionid 来识别用户\n\n## 敏捷开发的特点\n\n敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。\n\n## Selenium 中,等待方式有哪些，区别是什么？\n\n- sleep 休眠方法\n- 隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒\n- 显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法\n\n## 功能测试在 beta 版本对外上线的标准是什么\n\n- 测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。\n\n## 软件测试结束的标准\n\n- 测试用例全部跑完，并且 Bug 都已经关闭\n- 性能指标达到要求\n- 验收测试通过\n\n## 有没有用过 django 框架？\n\n## 你知道深拷贝和浅拷贝的区别吗？\n\n如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。\n\n## 一个测试需要具备什么素质？\n\n- 五心（细心，专心，耐心，信心，责任心）\n- 要相信任何软件都存在缺陷\n- 需要具备专业的软件测试技能\n- 具备一定的逻辑分析能力\n- 具备团队合作精神\n- 具备较好的沟通能力\n- 实事求是\n- 具备较好的学习能力\n- 具备一定的编程能力\n- 要有原则\n- 不断总结经验与教训\n- 无论缺陷大小都要上报\n- 遇到不可重现的bug也要报告\n\n### 保持怀疑\n\n对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说\"我做完了而且也测过了\"就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。\n\n### 永不妥协\n\n不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。\n\n### 让用户满意\n\n产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个bug频出的系统／产品满意的。\n\n### 从用户角度思考\n\n很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能\n\n### 分清主次\n\n要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。\n\n### 从不承诺100%的覆盖率\n\n不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。\n\n### 倾听建议\n\n别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。\n\n### 尽早开始\n\n尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。\n\n### 确定并管理风险\n\n在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。\n\n### 做市场调研\n\n看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。\n\n### 培养BA技能\n\nBA就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。\n\n### 不要忘了异常情况\n\n只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现bug，也有助于我们换个角度看待产品和项目的业务行为。\n\n### Be a Good Judge of Your Product\n\n做那个对项目/产品最有发言权的人。\n\n### 学会交涉\n\n在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。\n\n### 停止指责\n\n出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。\n\n### 做一个好的观察者\n\n观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。\n\n## python 主要数据类型有哪些？\n\n- 数字：int、float、bool、complex\n- 字符串：str\n- 列表：list，用[]\n- 元组：tuple，用()，就相当于不可修改的list\n- 集合：set，用{}\n- 字典：dict，用{key: value}\n\n## Linux 面试\n\n### 你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\n\n- chmod 修改文件权限\n- 查看某个进程的pid\n```\n  ps -ef | grep xxx(某个进程)\n```\n\n- 查找被占用的端口\n```\n  netstat -tln  \n  netstat -tln | grep 8083 \n  netstat -lnp | grep 8083 \n\n```\n- 查看端口属于哪个程序？端口被哪个进程占用\n```\n  lsof -i :8083  \n```\n- 杀掉占用端口的进程\n```\nkill -9 进程id\n```\n\n","slug":"软件测试/软件测试面试题目","published":1,"updated":"2022-02-04T09:45:53.733Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb6000bzc1b3ocn395i","content":"<h2 id=\"软件测试方法的分类\"><a href=\"#软件测试方法的分类\" class=\"headerlink\" title=\"软件测试方法的分类\"></a>软件测试方法的分类</h2><div align=\"center\">\n\n<p><img src=\"https://i.loli.net/2020/05/28/PcGbk4dYFfXLTzj.png\" alt=\"软件测试分类.png\"></p>\n</div>\n\n<h2 id=\"常用测试方法\"><a href=\"#常用测试方法\" class=\"headerlink\" title=\"常用测试方法\"></a>常用测试方法</h2><div align=\"center\">\n\n<p><img src=\"https://i.loli.net/2020/05/28/seV7fQw169kG5dh.png\" alt=\"测试方法.png\"></p>\n</div>\n\n<h2 id=\"系统测试方法\"><a href=\"#系统测试方法\" class=\"headerlink\" title=\"系统测试方法\"></a>系统测试方法</h2><div align=\"center\">\n\n<p><img src=\"https://i.loli.net/2020/05/28/7uieAb1MB3VH8ZR.png\" alt=\"系统测试.png\"></p>\n</div>\n\n<h2 id=\"什么是软件测试\"><a href=\"#什么是软件测试\" class=\"headerlink\" title=\"什么是软件测试\"></a>什么是软件测试</h2><ul>\n<li>软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。</li>\n</ul>\n<h2 id=\"软件产品质量模型（ISO-IEC-9126）\"><a href=\"#软件产品质量模型（ISO-IEC-9126）\" class=\"headerlink\" title=\"软件产品质量模型（ISO / IEC 9126）\"></a>软件产品质量模型（ISO / IEC 9126）</h2><ul>\n<li>功能性：提供满足明确和隐含要求的功能的能力</li>\n<li>可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力<ul>\n<li>设备最好不要出故障</li>\n<li>设备出故障了，不要影响主要的功能和业务</li>\n<li>如果影响了主要功能和业务，系统可以尽快定位并恢复</li>\n</ul>\n</li>\n<li>易用性：易懂、易学、易用、漂亮好看（用户体验好）</li>\n<li>效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）</li>\n<li>可维护性：产品可以被修改的能力。可以增加功能，可以更新。</li>\n<li>可移植性：跨越不同系统平台</li>\n</ul>\n<h3 id=\"对一支笔从软件质量的体系进行分析要测哪些？\"><a href=\"#对一支笔从软件质量的体系进行分析要测哪些？\" class=\"headerlink\" title=\"对一支笔从软件质量的体系进行分析要测哪些？\"></a>对一支笔从软件质量的体系进行分析要测哪些？</h3><ul>\n<li>功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸</li>\n<li>性能： 一支笔能连续写多久，从高处掉落会不会坏</li>\n<li>易用性： 是否美观，是否好握，书写是否舒服</li>\n<li>安全： 材质是否符合安全规范，是否对人体产生危害</li>\n<li>可移植性： 是否可以通过换笔芯继续使用。</li>\n</ul>\n<h2 id=\"Web-测试与-App-测试\"><a href=\"#Web-测试与-App-测试\" class=\"headerlink\" title=\"Web 测试与 App 测试\"></a>Web 测试与 App 测试</h2><h3 id=\"软件测试流程\"><a href=\"#软件测试流程\" class=\"headerlink\" title=\"软件测试流程\"></a>软件测试流程</h3><p>我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"App-测试流程\"><a href=\"#App-测试流程\" class=\"headerlink\" title=\"App 测试流程\"></a>App 测试流程</h3><p>我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"Web-测试与-App-测试的区别\"><a href=\"#Web-测试与-App-测试的区别\" class=\"headerlink\" title=\"Web 测试与 App 测试的区别\"></a>Web 测试与 App 测试的区别</h3><ul>\n<li><p>从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。</p>\n</li>\n<li><p>系统架构方面：</p>\n<ul>\n<li>Web 项目，一般都是 b/s 架构，基于浏览器的</li>\n<li>App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。</li>\n<li>Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。</li>\n</ul>\n</li>\n<li><p>性能方面:</p>\n<ul>\n<li>Web 页面主要会关注响应时间</li>\n<li>而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。</li>\n<li>它们服务端的性能没区别，都是一台服务器。</li>\n</ul>\n</li>\n<li><p>兼容方面：</p>\n<ul>\n<li>Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载</li>\n<li>App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。</li>\n</ul>\n</li>\n</ul>\n<p>所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件<br>此外 App 还有一些专项测试：如网络、适配性。。。</p>\n<h3 id=\"App-测试特点\"><a href=\"#App-测试特点\" class=\"headerlink\" title=\"App 测试特点\"></a>App 测试特点</h3><p><strong>（除了按需求说明书外的 功能测试 之外还需要进行如下测试）</strong></p>\n<ul>\n<li>适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）</li>\n<li>不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）</li>\n<li>在线升级测试</li>\n<li>中断测试（电话、短中消息打扰）</li>\n<li>耗电量测试</li>\n<li>弱网测试（信号差，信号屏蔽实验室）</li>\n<li>安装卸载 （C/S）</li>\n<li>流量测试</li>\n</ul>\n<h2 id=\"系统测试是什么，有哪些测试方法。流程是什么\"><a href=\"#系统测试是什么，有哪些测试方法。流程是什么\" class=\"headerlink\" title=\"系统测试是什么，有哪些测试方法。流程是什么?\"></a>系统测试是什么，有哪些测试方法。流程是什么?</h2><p>[ 系统测试 ]</p>\n<ul>\n<li>对项目进行全面的测试，其中包含单元测试和集成测试</li>\n</ul>\n<p>[ 测试方法 ]</p>\n<ul>\n<li>功能测试</li>\n<li>异常测试</li>\n<li>性能测试</li>\n<li>易用性测试</li>\n<li>安全性测试</li>\n<li>GUI 测试</li>\n<li>兼容性测试</li>\n<li>配置测试</li>\n<li>安装测试</li>\n</ul>\n<p>[ 流程 ]</p>\n<p>我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。</p>\n<h2 id=\"测试用例的设计方法\"><a href=\"#测试用例的设计方法\" class=\"headerlink\" title=\"测试用例的设计方法\"></a>测试用例的设计方法</h2><ul>\n<li>等价类划分法</li>\n<li>边界值分析法</li>\n<li>因果图/判定表法</li>\n<li>错误推断法</li>\n<li>正交实验法</li>\n<li>场景设计法/流程分析法</li>\n</ul>\n<h2 id=\"http-协议-和-https-协议\"><a href=\"#http-协议-和-https-协议\" class=\"headerlink\" title=\"http 协议 和 https 协议\"></a>http 协议 和 https 协议</h2><h3 id=\"http-协议\"><a href=\"#http-协议\" class=\"headerlink\" title=\"http 协议\"></a>http 协议</h3><ul>\n<li>HTTP 协议： 超文本传输协议</li>\n</ul>\n<p>[ 请求方式 ]</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n</ul>\n<p>[ 状态码 ]</p>\n<ul>\n<li>200 成功</li>\n<li>204 请求成功，服务端没有内容</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>304 走缓存</li>\n<li>400 参数错误</li>\n<li>401 权限不够</li>\n<li>403 服务器拒绝响应</li>\n<li>404 资源不存在</li>\n<li>500 服务器端错误，</li>\n<li>502 网关错误</li>\n</ul>\n<h3 id=\"http-协议-和-https-协议的区别\"><a href=\"#http-协议-和-https-协议的区别\" class=\"headerlink\" title=\"http 协议 和 https 协议的区别\"></a>http 协议 和 https 协议的区别</h3><ul>\n<li>http 协议是超文本传输协议，信息是明文传输</li>\n<li>https 是具有安全性的 ssl / tls 加密传输协议</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443</li>\n<li>http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全</li>\n</ul>\n<h3 id=\"TCP与UDP的区别\"><a href=\"#TCP与UDP的区别\" class=\"headerlink\" title=\"TCP与UDP的区别\"></a>TCP与UDP的区别</h3><p>TCP（Transmission Control Protocol，传输控制协议）<br>UDP（User Data Protocol，用户数据报协议）</p>\n<p>1、基于连接与无连接；</p>\n<p>2、对系统资源的要求（TCP较多，UDP少）；</p>\n<p>3、UDP程序结构较简单；</p>\n<p>4、流模式与数据报模式 ；</p>\n<p>5、TCP保证数据正确性，UDP可能丢包；</p>\n<p>6、TCP保证数据顺序，UDP不保证。</p>\n<h2 id=\"接口测试流程\"><a href=\"#接口测试流程\" class=\"headerlink\" title=\"接口测试流程\"></a>接口测试流程</h2><ul>\n<li>接口的功能测试（先保证接口是正确的）</li>\n<li>测试接口的数据（传递一些特殊的数据，保证接口没有问题）</li>\n<li>自动化测试脚本的编辑</li>\n<li>接口的性能、压力测试</li>\n</ul>\n<blockquote>\n<ul>\n<li>HTTP: 超文本传输协议，浏览器和服务器之间通信的规则</li>\n<li>URL: 统一资源定位符，协议://主机地址/路径</li>\n<li>GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET</li>\n<li>POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST</li>\n</ul>\n</blockquote>\n<h3 id=\"Fiddler-的原理\"><a href=\"#Fiddler-的原理\" class=\"headerlink\" title=\"Fiddler 的原理\"></a>Fiddler 的原理</h3><ul>\n<li>Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。</li>\n</ul>\n<h3 id=\"你可以说说-jmeter-里的进程和线程吗？\"><a href=\"#你可以说说-jmeter-里的进程和线程吗？\" class=\"headerlink\" title=\"你可以说说 jmeter 里的进程和线程吗？\"></a>你可以说说 jmeter 里的进程和线程吗？</h3><h3 id=\"你说说聚合报告是个什么东西？\"><a href=\"#你说说聚合报告是个什么东西？\" class=\"headerlink\" title=\"你说说聚合报告是个什么东西？\"></a>你说说聚合报告是个什么东西？</h3><ul>\n<li>对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以kb/秒为单位的吞吐量.</li>\n</ul>\n<h2 id=\"缺陷（Bug）管理\"><a href=\"#缺陷（Bug）管理\" class=\"headerlink\" title=\"缺陷（Bug）管理\"></a>缺陷（Bug）管理</h2><h3 id=\"一个“缺陷”的记录都包含哪些内容\"><a href=\"#一个“缺陷”的记录都包含哪些内容\" class=\"headerlink\" title=\"一个“缺陷”的记录都包含哪些内容\"></a>一个“缺陷”的记录都包含哪些内容</h3><ul>\n<li>所属产品、模块、项目、版本</li>\n<li>Bug 指派</li>\n<li>Bug 标题</li>\n<li>优先级</li>\n<li>严重程度</li>\n<li>操作步骤</li>\n<li>实际结果</li>\n<li>预期结果</li>\n</ul>\n<h3 id=\"怎么区分-Bug-是前端的还是后端的\"><a href=\"#怎么区分-Bug-是前端的还是后端的\" class=\"headerlink\" title=\"怎么区分 Bug 是前端的还是后端的\"></a>怎么区分 Bug 是前端的还是后端的</h3><ol>\n<li>如果项目崩溃，就是前端的 Bug</li>\n<li>界面出现问题，前端 Bug</li>\n<li>资源不能加载（根据状态码）</li>\n</ol>\n<ul>\n<li>500： 后端的问题</li>\n<li>404：</li>\n<li><ul>\n<li>查看前端有没有发出去请求</li>\n<li>查看前端请求接口是不是对的</li>\n<li>查看前端请求参数是否正确</li>\n</ul>\n</li>\n<li>200：<ul>\n<li>后端返回的数据是否正确</li>\n<li>前端读取数据的时候出错 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级与严重程度\"><a href=\"#优先级与严重程度\" class=\"headerlink\" title=\"优先级与严重程度\"></a>优先级与严重程度</h3><h4 id=\"Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\"><a href=\"#Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\" class=\"headerlink\" title=\"Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\"></a>Bug 优先级（Bug 修复的先后顺序，针对于测试人员）</h4><ul>\n<li>一级： 严重影响到后面功能模块的测试工作</li>\n<li>二级： Bug 会制约开发和测试的活动进行，需要在发布前修复</li>\n<li>三级： 不影响其他工作，文字，话术、图片等出现错误</li>\n</ul>\n<h4 id=\"Bug-严重程度（从用户角度考虑）\"><a href=\"#Bug-严重程度（从用户角度考虑）\" class=\"headerlink\" title=\"Bug 严重程度（从用户角度考虑）\"></a>Bug 严重程度（从用户角度考虑）</h4><ul>\n<li>一级：致命问题，App 崩溃</li>\n<li>二级：功能出现错误，</li>\n<li>三级：UI 界面出现错误（文字，话术、图片等）</li>\n</ul>\n<h4 id=\"测试用例优先级\"><a href=\"#测试用例优先级\" class=\"headerlink\" title=\"测试用例优先级\"></a>测试用例优先级</h4><ul>\n<li>一级：正向的流程，主功能</li>\n<li>二级：反向的流程</li>\n<li>三级：检查 UI 界面的文本、图片等</li>\n</ul>\n<h2 id=\"冒烟测试和回归测试的区别\"><a href=\"#冒烟测试和回归测试的区别\" class=\"headerlink\" title=\"冒烟测试和回归测试的区别\"></a>冒烟测试和回归测试的区别</h2><ul>\n<li>测试目的不同<ul>\n<li>冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。</li>\n<li>回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。</li>\n</ul>\n</li>\n<li>测试过程不同<ul>\n<li>冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。</li>\n<li>回归测试：是指漏洞由开发人员修改之后再次测试的过程。</li>\n</ul>\n</li>\n<li>问题解决方式不同<ul>\n<li>冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。</li>\n<li>回归测试：回归测试是修改完之后进行验证再进行的工程。</li>\n</ul>\n</li>\n<li>测试周期不同<ul>\n<li>冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。</li>\n<li>回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。</li>\n</ul>\n</li>\n<li>测试意义不同<ul>\n<li>冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。</li>\n<li>回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"git-是干嘛的？git-和-svn-有什么区别？\"><a href=\"#git-是干嘛的？git-和-svn-有什么区别？\" class=\"headerlink\" title=\"git 是干嘛的？git 和 svn 有什么区别？\"></a>git 是干嘛的？git 和 svn 有什么区别？</h2><ul>\n<li>git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的</li>\n<li>svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。</li>\n<li>git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。</li>\n</ul>\n<h2 id=\"说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"><a href=\"#说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\" class=\"headerlink\" title=\"说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"></a>说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？</h2><ul>\n<li>cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid</li>\n<li>token 和 session 算是一类，都是用于服务器验证的。</li>\n<li>服务器会通过用户请求携带的 sessionid 来识别用户</li>\n</ul>\n<h2 id=\"敏捷开发的特点\"><a href=\"#敏捷开发的特点\" class=\"headerlink\" title=\"敏捷开发的特点\"></a>敏捷开发的特点</h2><p>敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。</p>\n<h2 id=\"Selenium-中-等待方式有哪些，区别是什么？\"><a href=\"#Selenium-中-等待方式有哪些，区别是什么？\" class=\"headerlink\" title=\"Selenium 中,等待方式有哪些，区别是什么？\"></a>Selenium 中,等待方式有哪些，区别是什么？</h2><ul>\n<li>sleep 休眠方法</li>\n<li>隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒</li>\n<li>显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法</li>\n</ul>\n<h2 id=\"功能测试在-beta-版本对外上线的标准是什么\"><a href=\"#功能测试在-beta-版本对外上线的标准是什么\" class=\"headerlink\" title=\"功能测试在 beta 版本对外上线的标准是什么\"></a>功能测试在 beta 版本对外上线的标准是什么</h2><ul>\n<li>测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。</li>\n</ul>\n<h2 id=\"软件测试结束的标准\"><a href=\"#软件测试结束的标准\" class=\"headerlink\" title=\"软件测试结束的标准\"></a>软件测试结束的标准</h2><ul>\n<li>测试用例全部跑完，并且 Bug 都已经关闭</li>\n<li>性能指标达到要求</li>\n<li>验收测试通过</li>\n</ul>\n<h2 id=\"有没有用过-django-框架？\"><a href=\"#有没有用过-django-框架？\" class=\"headerlink\" title=\"有没有用过 django 框架？\"></a>有没有用过 django 框架？</h2><h2 id=\"你知道深拷贝和浅拷贝的区别吗？\"><a href=\"#你知道深拷贝和浅拷贝的区别吗？\" class=\"headerlink\" title=\"你知道深拷贝和浅拷贝的区别吗？\"></a>你知道深拷贝和浅拷贝的区别吗？</h2><p>如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。</p>\n<h2 id=\"一个测试需要具备什么素质？\"><a href=\"#一个测试需要具备什么素质？\" class=\"headerlink\" title=\"一个测试需要具备什么素质？\"></a>一个测试需要具备什么素质？</h2><ul>\n<li>五心（细心，专心，耐心，信心，责任心）</li>\n<li>要相信任何软件都存在缺陷</li>\n<li>需要具备专业的软件测试技能</li>\n<li>具备一定的逻辑分析能力</li>\n<li>具备团队合作精神</li>\n<li>具备较好的沟通能力</li>\n<li>实事求是</li>\n<li>具备较好的学习能力</li>\n<li>具备一定的编程能力</li>\n<li>要有原则</li>\n<li>不断总结经验与教训</li>\n<li>无论缺陷大小都要上报</li>\n<li>遇到不可重现的bug也要报告</li>\n</ul>\n<h3 id=\"保持怀疑\"><a href=\"#保持怀疑\" class=\"headerlink\" title=\"保持怀疑\"></a>保持怀疑</h3><p>对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说”我做完了而且也测过了”就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。</p>\n<h3 id=\"永不妥协\"><a href=\"#永不妥协\" class=\"headerlink\" title=\"永不妥协\"></a>永不妥协</h3><p>不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。</p>\n<h3 id=\"让用户满意\"><a href=\"#让用户满意\" class=\"headerlink\" title=\"让用户满意\"></a>让用户满意</h3><p>产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个bug频出的系统／产品满意的。</p>\n<h3 id=\"从用户角度思考\"><a href=\"#从用户角度思考\" class=\"headerlink\" title=\"从用户角度思考\"></a>从用户角度思考</h3><p>很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能</p>\n<h3 id=\"分清主次\"><a href=\"#分清主次\" class=\"headerlink\" title=\"分清主次\"></a>分清主次</h3><p>要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。</p>\n<h3 id=\"从不承诺100-的覆盖率\"><a href=\"#从不承诺100-的覆盖率\" class=\"headerlink\" title=\"从不承诺100%的覆盖率\"></a>从不承诺100%的覆盖率</h3><p>不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。</p>\n<h3 id=\"倾听建议\"><a href=\"#倾听建议\" class=\"headerlink\" title=\"倾听建议\"></a>倾听建议</h3><p>别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。</p>\n<h3 id=\"尽早开始\"><a href=\"#尽早开始\" class=\"headerlink\" title=\"尽早开始\"></a>尽早开始</h3><p>尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。</p>\n<h3 id=\"确定并管理风险\"><a href=\"#确定并管理风险\" class=\"headerlink\" title=\"确定并管理风险\"></a>确定并管理风险</h3><p>在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。</p>\n<h3 id=\"做市场调研\"><a href=\"#做市场调研\" class=\"headerlink\" title=\"做市场调研\"></a>做市场调研</h3><p>看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。</p>\n<h3 id=\"培养BA技能\"><a href=\"#培养BA技能\" class=\"headerlink\" title=\"培养BA技能\"></a>培养BA技能</h3><p>BA就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。</p>\n<h3 id=\"不要忘了异常情况\"><a href=\"#不要忘了异常情况\" class=\"headerlink\" title=\"不要忘了异常情况\"></a>不要忘了异常情况</h3><p>只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现bug，也有助于我们换个角度看待产品和项目的业务行为。</p>\n<h3 id=\"Be-a-Good-Judge-of-Your-Product\"><a href=\"#Be-a-Good-Judge-of-Your-Product\" class=\"headerlink\" title=\"Be a Good Judge of Your Product\"></a>Be a Good Judge of Your Product</h3><p>做那个对项目/产品最有发言权的人。</p>\n<h3 id=\"学会交涉\"><a href=\"#学会交涉\" class=\"headerlink\" title=\"学会交涉\"></a>学会交涉</h3><p>在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。</p>\n<h3 id=\"停止指责\"><a href=\"#停止指责\" class=\"headerlink\" title=\"停止指责\"></a>停止指责</h3><p>出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。</p>\n<h3 id=\"做一个好的观察者\"><a href=\"#做一个好的观察者\" class=\"headerlink\" title=\"做一个好的观察者\"></a>做一个好的观察者</h3><p>观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。</p>\n<h2 id=\"python-主要数据类型有哪些？\"><a href=\"#python-主要数据类型有哪些？\" class=\"headerlink\" title=\"python 主要数据类型有哪些？\"></a>python 主要数据类型有哪些？</h2><ul>\n<li>数字：int、float、bool、complex</li>\n<li>字符串：str</li>\n<li>列表：list，用[]</li>\n<li>元组：tuple，用()，就相当于不可修改的list</li>\n<li>集合：set，用{}</li>\n<li>字典：dict，用{key: value}</li>\n</ul>\n<h2 id=\"Linux-面试\"><a href=\"#Linux-面试\" class=\"headerlink\" title=\"Linux 面试\"></a>Linux 面试</h2><h3 id=\"你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\"><a href=\"#你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\" class=\"headerlink\" title=\"你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\"></a>你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？</h3><ul>\n<li><p>chmod 修改文件权限</p>\n</li>\n<li><p>查看某个进程的pid</p>\n<pre><code>ps -ef | grep xxx(某个进程)\n</code></pre>\n</li>\n<li><p>查找被占用的端口<br>```<br>netstat -tln<br>netstat -tln | grep 8083<br>netstat -lnp | grep 8083 </p>\n</li>\n</ul>\n<pre><code>- 查看端口属于哪个程序？端口被哪个进程占用\n</code></pre>\n<p>  lsof -i :8083  </p>\n<pre><code>- 杀掉占用端口的进程\n</code></pre>\n<p>kill -9 进程id</p>\n<pre><code>\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"软件测试方法的分类\"><a href=\"#软件测试方法的分类\" class=\"headerlink\" title=\"软件测试方法的分类\"></a>软件测试方法的分类</h2><div align=\"center\">\n\n<p><img src=\"https://i.loli.net/2020/05/28/PcGbk4dYFfXLTzj.png\" alt=\"软件测试分类.png\"></p>\n</div>\n\n<h2 id=\"常用测试方法\"><a href=\"#常用测试方法\" class=\"headerlink\" title=\"常用测试方法\"></a>常用测试方法</h2><div align=\"center\">\n\n<p><img src=\"https://i.loli.net/2020/05/28/seV7fQw169kG5dh.png\" alt=\"测试方法.png\"></p>\n</div>\n\n<h2 id=\"系统测试方法\"><a href=\"#系统测试方法\" class=\"headerlink\" title=\"系统测试方法\"></a>系统测试方法</h2><div align=\"center\">\n\n<p><img src=\"https://i.loli.net/2020/05/28/7uieAb1MB3VH8ZR.png\" alt=\"系统测试.png\"></p>\n</div>\n\n<h2 id=\"什么是软件测试\"><a href=\"#什么是软件测试\" class=\"headerlink\" title=\"什么是软件测试\"></a>什么是软件测试</h2><ul>\n<li>软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。</li>\n</ul>\n<h2 id=\"软件产品质量模型（ISO-IEC-9126）\"><a href=\"#软件产品质量模型（ISO-IEC-9126）\" class=\"headerlink\" title=\"软件产品质量模型（ISO / IEC 9126）\"></a>软件产品质量模型（ISO / IEC 9126）</h2><ul>\n<li>功能性：提供满足明确和隐含要求的功能的能力</li>\n<li>可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力<ul>\n<li>设备最好不要出故障</li>\n<li>设备出故障了，不要影响主要的功能和业务</li>\n<li>如果影响了主要功能和业务，系统可以尽快定位并恢复</li>\n</ul>\n</li>\n<li>易用性：易懂、易学、易用、漂亮好看（用户体验好）</li>\n<li>效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）</li>\n<li>可维护性：产品可以被修改的能力。可以增加功能，可以更新。</li>\n<li>可移植性：跨越不同系统平台</li>\n</ul>\n<h3 id=\"对一支笔从软件质量的体系进行分析要测哪些？\"><a href=\"#对一支笔从软件质量的体系进行分析要测哪些？\" class=\"headerlink\" title=\"对一支笔从软件质量的体系进行分析要测哪些？\"></a>对一支笔从软件质量的体系进行分析要测哪些？</h3><ul>\n<li>功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸</li>\n<li>性能： 一支笔能连续写多久，从高处掉落会不会坏</li>\n<li>易用性： 是否美观，是否好握，书写是否舒服</li>\n<li>安全： 材质是否符合安全规范，是否对人体产生危害</li>\n<li>可移植性： 是否可以通过换笔芯继续使用。</li>\n</ul>\n<h2 id=\"Web-测试与-App-测试\"><a href=\"#Web-测试与-App-测试\" class=\"headerlink\" title=\"Web 测试与 App 测试\"></a>Web 测试与 App 测试</h2><h3 id=\"软件测试流程\"><a href=\"#软件测试流程\" class=\"headerlink\" title=\"软件测试流程\"></a>软件测试流程</h3><p>我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"App-测试流程\"><a href=\"#App-测试流程\" class=\"headerlink\" title=\"App 测试流程\"></a>App 测试流程</h3><p>我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"Web-测试与-App-测试的区别\"><a href=\"#Web-测试与-App-测试的区别\" class=\"headerlink\" title=\"Web 测试与 App 测试的区别\"></a>Web 测试与 App 测试的区别</h3><ul>\n<li><p>从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。</p>\n</li>\n<li><p>系统架构方面：</p>\n<ul>\n<li>Web 项目，一般都是 b/s 架构，基于浏览器的</li>\n<li>App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。</li>\n<li>Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。</li>\n</ul>\n</li>\n<li><p>性能方面:</p>\n<ul>\n<li>Web 页面主要会关注响应时间</li>\n<li>而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。</li>\n<li>它们服务端的性能没区别，都是一台服务器。</li>\n</ul>\n</li>\n<li><p>兼容方面：</p>\n<ul>\n<li>Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载</li>\n<li>App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。</li>\n</ul>\n</li>\n</ul>\n<p>所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件<br>此外 App 还有一些专项测试：如网络、适配性。。。</p>\n<h3 id=\"App-测试特点\"><a href=\"#App-测试特点\" class=\"headerlink\" title=\"App 测试特点\"></a>App 测试特点</h3><p><strong>（除了按需求说明书外的 功能测试 之外还需要进行如下测试）</strong></p>\n<ul>\n<li>适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）</li>\n<li>不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）</li>\n<li>在线升级测试</li>\n<li>中断测试（电话、短中消息打扰）</li>\n<li>耗电量测试</li>\n<li>弱网测试（信号差，信号屏蔽实验室）</li>\n<li>安装卸载 （C/S）</li>\n<li>流量测试</li>\n</ul>\n<h2 id=\"系统测试是什么，有哪些测试方法。流程是什么\"><a href=\"#系统测试是什么，有哪些测试方法。流程是什么\" class=\"headerlink\" title=\"系统测试是什么，有哪些测试方法。流程是什么?\"></a>系统测试是什么，有哪些测试方法。流程是什么?</h2><p>[ 系统测试 ]</p>\n<ul>\n<li>对项目进行全面的测试，其中包含单元测试和集成测试</li>\n</ul>\n<p>[ 测试方法 ]</p>\n<ul>\n<li>功能测试</li>\n<li>异常测试</li>\n<li>性能测试</li>\n<li>易用性测试</li>\n<li>安全性测试</li>\n<li>GUI 测试</li>\n<li>兼容性测试</li>\n<li>配置测试</li>\n<li>安装测试</li>\n</ul>\n<p>[ 流程 ]</p>\n<p>我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。</p>\n<h2 id=\"测试用例的设计方法\"><a href=\"#测试用例的设计方法\" class=\"headerlink\" title=\"测试用例的设计方法\"></a>测试用例的设计方法</h2><ul>\n<li>等价类划分法</li>\n<li>边界值分析法</li>\n<li>因果图/判定表法</li>\n<li>错误推断法</li>\n<li>正交实验法</li>\n<li>场景设计法/流程分析法</li>\n</ul>\n<h2 id=\"http-协议-和-https-协议\"><a href=\"#http-协议-和-https-协议\" class=\"headerlink\" title=\"http 协议 和 https 协议\"></a>http 协议 和 https 协议</h2><h3 id=\"http-协议\"><a href=\"#http-协议\" class=\"headerlink\" title=\"http 协议\"></a>http 协议</h3><ul>\n<li>HTTP 协议： 超文本传输协议</li>\n</ul>\n<p>[ 请求方式 ]</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n</ul>\n<p>[ 状态码 ]</p>\n<ul>\n<li>200 成功</li>\n<li>204 请求成功，服务端没有内容</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>304 走缓存</li>\n<li>400 参数错误</li>\n<li>401 权限不够</li>\n<li>403 服务器拒绝响应</li>\n<li>404 资源不存在</li>\n<li>500 服务器端错误，</li>\n<li>502 网关错误</li>\n</ul>\n<h3 id=\"http-协议-和-https-协议的区别\"><a href=\"#http-协议-和-https-协议的区别\" class=\"headerlink\" title=\"http 协议 和 https 协议的区别\"></a>http 协议 和 https 协议的区别</h3><ul>\n<li>http 协议是超文本传输协议，信息是明文传输</li>\n<li>https 是具有安全性的 ssl / tls 加密传输协议</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443</li>\n<li>http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全</li>\n</ul>\n<h3 id=\"TCP与UDP的区别\"><a href=\"#TCP与UDP的区别\" class=\"headerlink\" title=\"TCP与UDP的区别\"></a>TCP与UDP的区别</h3><p>TCP（Transmission Control Protocol，传输控制协议）<br>UDP（User Data Protocol，用户数据报协议）</p>\n<p>1、基于连接与无连接；</p>\n<p>2、对系统资源的要求（TCP较多，UDP少）；</p>\n<p>3、UDP程序结构较简单；</p>\n<p>4、流模式与数据报模式 ；</p>\n<p>5、TCP保证数据正确性，UDP可能丢包；</p>\n<p>6、TCP保证数据顺序，UDP不保证。</p>\n<h2 id=\"接口测试流程\"><a href=\"#接口测试流程\" class=\"headerlink\" title=\"接口测试流程\"></a>接口测试流程</h2><ul>\n<li>接口的功能测试（先保证接口是正确的）</li>\n<li>测试接口的数据（传递一些特殊的数据，保证接口没有问题）</li>\n<li>自动化测试脚本的编辑</li>\n<li>接口的性能、压力测试</li>\n</ul>\n<blockquote>\n<ul>\n<li>HTTP: 超文本传输协议，浏览器和服务器之间通信的规则</li>\n<li>URL: 统一资源定位符，协议://主机地址/路径</li>\n<li>GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET</li>\n<li>POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST</li>\n</ul>\n</blockquote>\n<h3 id=\"Fiddler-的原理\"><a href=\"#Fiddler-的原理\" class=\"headerlink\" title=\"Fiddler 的原理\"></a>Fiddler 的原理</h3><ul>\n<li>Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。</li>\n</ul>\n<h3 id=\"你可以说说-jmeter-里的进程和线程吗？\"><a href=\"#你可以说说-jmeter-里的进程和线程吗？\" class=\"headerlink\" title=\"你可以说说 jmeter 里的进程和线程吗？\"></a>你可以说说 jmeter 里的进程和线程吗？</h3><h3 id=\"你说说聚合报告是个什么东西？\"><a href=\"#你说说聚合报告是个什么东西？\" class=\"headerlink\" title=\"你说说聚合报告是个什么东西？\"></a>你说说聚合报告是个什么东西？</h3><ul>\n<li>对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以kb/秒为单位的吞吐量.</li>\n</ul>\n<h2 id=\"缺陷（Bug）管理\"><a href=\"#缺陷（Bug）管理\" class=\"headerlink\" title=\"缺陷（Bug）管理\"></a>缺陷（Bug）管理</h2><h3 id=\"一个“缺陷”的记录都包含哪些内容\"><a href=\"#一个“缺陷”的记录都包含哪些内容\" class=\"headerlink\" title=\"一个“缺陷”的记录都包含哪些内容\"></a>一个“缺陷”的记录都包含哪些内容</h3><ul>\n<li>所属产品、模块、项目、版本</li>\n<li>Bug 指派</li>\n<li>Bug 标题</li>\n<li>优先级</li>\n<li>严重程度</li>\n<li>操作步骤</li>\n<li>实际结果</li>\n<li>预期结果</li>\n</ul>\n<h3 id=\"怎么区分-Bug-是前端的还是后端的\"><a href=\"#怎么区分-Bug-是前端的还是后端的\" class=\"headerlink\" title=\"怎么区分 Bug 是前端的还是后端的\"></a>怎么区分 Bug 是前端的还是后端的</h3><ol>\n<li>如果项目崩溃，就是前端的 Bug</li>\n<li>界面出现问题，前端 Bug</li>\n<li>资源不能加载（根据状态码）</li>\n</ol>\n<ul>\n<li>500： 后端的问题</li>\n<li>404：</li>\n<li><ul>\n<li>查看前端有没有发出去请求</li>\n<li>查看前端请求接口是不是对的</li>\n<li>查看前端请求参数是否正确</li>\n</ul>\n</li>\n<li>200：<ul>\n<li>后端返回的数据是否正确</li>\n<li>前端读取数据的时候出错 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级与严重程度\"><a href=\"#优先级与严重程度\" class=\"headerlink\" title=\"优先级与严重程度\"></a>优先级与严重程度</h3><h4 id=\"Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\"><a href=\"#Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\" class=\"headerlink\" title=\"Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\"></a>Bug 优先级（Bug 修复的先后顺序，针对于测试人员）</h4><ul>\n<li>一级： 严重影响到后面功能模块的测试工作</li>\n<li>二级： Bug 会制约开发和测试的活动进行，需要在发布前修复</li>\n<li>三级： 不影响其他工作，文字，话术、图片等出现错误</li>\n</ul>\n<h4 id=\"Bug-严重程度（从用户角度考虑）\"><a href=\"#Bug-严重程度（从用户角度考虑）\" class=\"headerlink\" title=\"Bug 严重程度（从用户角度考虑）\"></a>Bug 严重程度（从用户角度考虑）</h4><ul>\n<li>一级：致命问题，App 崩溃</li>\n<li>二级：功能出现错误，</li>\n<li>三级：UI 界面出现错误（文字，话术、图片等）</li>\n</ul>\n<h4 id=\"测试用例优先级\"><a href=\"#测试用例优先级\" class=\"headerlink\" title=\"测试用例优先级\"></a>测试用例优先级</h4><ul>\n<li>一级：正向的流程，主功能</li>\n<li>二级：反向的流程</li>\n<li>三级：检查 UI 界面的文本、图片等</li>\n</ul>\n<h2 id=\"冒烟测试和回归测试的区别\"><a href=\"#冒烟测试和回归测试的区别\" class=\"headerlink\" title=\"冒烟测试和回归测试的区别\"></a>冒烟测试和回归测试的区别</h2><ul>\n<li>测试目的不同<ul>\n<li>冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。</li>\n<li>回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。</li>\n</ul>\n</li>\n<li>测试过程不同<ul>\n<li>冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。</li>\n<li>回归测试：是指漏洞由开发人员修改之后再次测试的过程。</li>\n</ul>\n</li>\n<li>问题解决方式不同<ul>\n<li>冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。</li>\n<li>回归测试：回归测试是修改完之后进行验证再进行的工程。</li>\n</ul>\n</li>\n<li>测试周期不同<ul>\n<li>冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。</li>\n<li>回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。</li>\n</ul>\n</li>\n<li>测试意义不同<ul>\n<li>冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。</li>\n<li>回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"git-是干嘛的？git-和-svn-有什么区别？\"><a href=\"#git-是干嘛的？git-和-svn-有什么区别？\" class=\"headerlink\" title=\"git 是干嘛的？git 和 svn 有什么区别？\"></a>git 是干嘛的？git 和 svn 有什么区别？</h2><ul>\n<li>git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的</li>\n<li>svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。</li>\n<li>git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。</li>\n</ul>\n<h2 id=\"说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"><a href=\"#说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\" class=\"headerlink\" title=\"说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"></a>说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？</h2><ul>\n<li>cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid</li>\n<li>token 和 session 算是一类，都是用于服务器验证的。</li>\n<li>服务器会通过用户请求携带的 sessionid 来识别用户</li>\n</ul>\n<h2 id=\"敏捷开发的特点\"><a href=\"#敏捷开发的特点\" class=\"headerlink\" title=\"敏捷开发的特点\"></a>敏捷开发的特点</h2><p>敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。</p>\n<h2 id=\"Selenium-中-等待方式有哪些，区别是什么？\"><a href=\"#Selenium-中-等待方式有哪些，区别是什么？\" class=\"headerlink\" title=\"Selenium 中,等待方式有哪些，区别是什么？\"></a>Selenium 中,等待方式有哪些，区别是什么？</h2><ul>\n<li>sleep 休眠方法</li>\n<li>隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒</li>\n<li>显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法</li>\n</ul>\n<h2 id=\"功能测试在-beta-版本对外上线的标准是什么\"><a href=\"#功能测试在-beta-版本对外上线的标准是什么\" class=\"headerlink\" title=\"功能测试在 beta 版本对外上线的标准是什么\"></a>功能测试在 beta 版本对外上线的标准是什么</h2><ul>\n<li>测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。</li>\n</ul>\n<h2 id=\"软件测试结束的标准\"><a href=\"#软件测试结束的标准\" class=\"headerlink\" title=\"软件测试结束的标准\"></a>软件测试结束的标准</h2><ul>\n<li>测试用例全部跑完，并且 Bug 都已经关闭</li>\n<li>性能指标达到要求</li>\n<li>验收测试通过</li>\n</ul>\n<h2 id=\"有没有用过-django-框架？\"><a href=\"#有没有用过-django-框架？\" class=\"headerlink\" title=\"有没有用过 django 框架？\"></a>有没有用过 django 框架？</h2><h2 id=\"你知道深拷贝和浅拷贝的区别吗？\"><a href=\"#你知道深拷贝和浅拷贝的区别吗？\" class=\"headerlink\" title=\"你知道深拷贝和浅拷贝的区别吗？\"></a>你知道深拷贝和浅拷贝的区别吗？</h2><p>如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。</p>\n<h2 id=\"一个测试需要具备什么素质？\"><a href=\"#一个测试需要具备什么素质？\" class=\"headerlink\" title=\"一个测试需要具备什么素质？\"></a>一个测试需要具备什么素质？</h2><ul>\n<li>五心（细心，专心，耐心，信心，责任心）</li>\n<li>要相信任何软件都存在缺陷</li>\n<li>需要具备专业的软件测试技能</li>\n<li>具备一定的逻辑分析能力</li>\n<li>具备团队合作精神</li>\n<li>具备较好的沟通能力</li>\n<li>实事求是</li>\n<li>具备较好的学习能力</li>\n<li>具备一定的编程能力</li>\n<li>要有原则</li>\n<li>不断总结经验与教训</li>\n<li>无论缺陷大小都要上报</li>\n<li>遇到不可重现的bug也要报告</li>\n</ul>\n<h3 id=\"保持怀疑\"><a href=\"#保持怀疑\" class=\"headerlink\" title=\"保持怀疑\"></a>保持怀疑</h3><p>对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说”我做完了而且也测过了”就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。</p>\n<h3 id=\"永不妥协\"><a href=\"#永不妥协\" class=\"headerlink\" title=\"永不妥协\"></a>永不妥协</h3><p>不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。</p>\n<h3 id=\"让用户满意\"><a href=\"#让用户满意\" class=\"headerlink\" title=\"让用户满意\"></a>让用户满意</h3><p>产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个bug频出的系统／产品满意的。</p>\n<h3 id=\"从用户角度思考\"><a href=\"#从用户角度思考\" class=\"headerlink\" title=\"从用户角度思考\"></a>从用户角度思考</h3><p>很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能</p>\n<h3 id=\"分清主次\"><a href=\"#分清主次\" class=\"headerlink\" title=\"分清主次\"></a>分清主次</h3><p>要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。</p>\n<h3 id=\"从不承诺100-的覆盖率\"><a href=\"#从不承诺100-的覆盖率\" class=\"headerlink\" title=\"从不承诺100%的覆盖率\"></a>从不承诺100%的覆盖率</h3><p>不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。</p>\n<h3 id=\"倾听建议\"><a href=\"#倾听建议\" class=\"headerlink\" title=\"倾听建议\"></a>倾听建议</h3><p>别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。</p>\n<h3 id=\"尽早开始\"><a href=\"#尽早开始\" class=\"headerlink\" title=\"尽早开始\"></a>尽早开始</h3><p>尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。</p>\n<h3 id=\"确定并管理风险\"><a href=\"#确定并管理风险\" class=\"headerlink\" title=\"确定并管理风险\"></a>确定并管理风险</h3><p>在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。</p>\n<h3 id=\"做市场调研\"><a href=\"#做市场调研\" class=\"headerlink\" title=\"做市场调研\"></a>做市场调研</h3><p>看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。</p>\n<h3 id=\"培养BA技能\"><a href=\"#培养BA技能\" class=\"headerlink\" title=\"培养BA技能\"></a>培养BA技能</h3><p>BA就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。</p>\n<h3 id=\"不要忘了异常情况\"><a href=\"#不要忘了异常情况\" class=\"headerlink\" title=\"不要忘了异常情况\"></a>不要忘了异常情况</h3><p>只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现bug，也有助于我们换个角度看待产品和项目的业务行为。</p>\n<h3 id=\"Be-a-Good-Judge-of-Your-Product\"><a href=\"#Be-a-Good-Judge-of-Your-Product\" class=\"headerlink\" title=\"Be a Good Judge of Your Product\"></a>Be a Good Judge of Your Product</h3><p>做那个对项目/产品最有发言权的人。</p>\n<h3 id=\"学会交涉\"><a href=\"#学会交涉\" class=\"headerlink\" title=\"学会交涉\"></a>学会交涉</h3><p>在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。</p>\n<h3 id=\"停止指责\"><a href=\"#停止指责\" class=\"headerlink\" title=\"停止指责\"></a>停止指责</h3><p>出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。</p>\n<h3 id=\"做一个好的观察者\"><a href=\"#做一个好的观察者\" class=\"headerlink\" title=\"做一个好的观察者\"></a>做一个好的观察者</h3><p>观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。</p>\n<h2 id=\"python-主要数据类型有哪些？\"><a href=\"#python-主要数据类型有哪些？\" class=\"headerlink\" title=\"python 主要数据类型有哪些？\"></a>python 主要数据类型有哪些？</h2><ul>\n<li>数字：int、float、bool、complex</li>\n<li>字符串：str</li>\n<li>列表：list，用[]</li>\n<li>元组：tuple，用()，就相当于不可修改的list</li>\n<li>集合：set，用{}</li>\n<li>字典：dict，用{key: value}</li>\n</ul>\n<h2 id=\"Linux-面试\"><a href=\"#Linux-面试\" class=\"headerlink\" title=\"Linux 面试\"></a>Linux 面试</h2><h3 id=\"你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\"><a href=\"#你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\" class=\"headerlink\" title=\"你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\"></a>你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？</h3><ul>\n<li><p>chmod 修改文件权限</p>\n</li>\n<li><p>查看某个进程的pid</p>\n<pre><code>ps -ef | grep xxx(某个进程)\n</code></pre>\n</li>\n<li><p>查找被占用的端口<br>```<br>netstat -tln<br>netstat -tln | grep 8083<br>netstat -lnp | grep 8083 </p>\n</li>\n</ul>\n<pre><code>- 查看端口属于哪个程序？端口被哪个进程占用\n</code></pre>\n<p>  lsof -i :8083  </p>\n<pre><code>- 杀掉占用端口的进程\n</code></pre>\n<p>kill -9 进程id</p>\n<pre><code>\n</code></pre>\n"},{"title":"Charles","comments":1,"abbrlink":4178019943,"date":"2022-01-08T16:00:00.000Z","_content":"\n## 安装激活\n\n1. 下载\n\n    官网链接: https://www.charlesproxy.com/download/\n\n2. 激活\n\n```tex\nRegistered Name ： https://zhile.io\n\nLicense Key：48891cf209c6d32bf4\n```\n\n","source":"_posts/工具流/Charles/charles.md","raw":"---\ntitle: Charles\ntags:\n  - 工具\n  - Charles\ncategories:\n  - - 工具流\n    - Charles\ncomments: true\nabbrlink: 4178019943\ndate: 2022-01-09 00:00:00\n---\n\n## 安装激活\n\n1. 下载\n\n    官网链接: https://www.charlesproxy.com/download/\n\n2. 激活\n\n```tex\nRegistered Name ： https://zhile.io\n\nLicense Key：48891cf209c6d32bf4\n```\n\n","slug":"工具流/Charles/charles","published":1,"updated":"2022-02-04T09:45:53.714Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb7000ezc1ba9tm9i4m","content":"<h2 id=\"安装激活\"><a href=\"#安装激活\" class=\"headerlink\" title=\"安装激活\"></a>安装激活</h2><ol>\n<li><p>下载</p>\n<p> 官网链接: <a href=\"https://www.charlesproxy.com/download/\" rel=\"external nofollow noreferrer\">https://www.charlesproxy.com/download/</a></p>\n</li>\n<li><p>激活</p>\n</li>\n</ol>\n<pre><code class=\"tex\">Registered Name ： https://zhile.io\n\nLicense Key：48891cf209c6d32bf4\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"安装激活\"><a href=\"#安装激活\" class=\"headerlink\" title=\"安装激活\"></a>安装激活</h2><ol>\n<li><p>下载</p>\n<p> 官网链接: <a href=\"https://www.charlesproxy.com/download/\">https://www.charlesproxy.com/download/</a></p>\n</li>\n<li><p>激活</p>\n</li>\n</ol>\n<pre><code class=\"tex\">Registered Name ： https://zhile.io\n\nLicense Key：48891cf209c6d32bf4\n</code></pre>\n"},{"title":"docker","comments":1,"abbrlink":4065722285,"date":"2020-10-16T16:00:00.000Z","_content":"## Docker 安装\n\n1. 通过 uname -r 命令查看你当前的内核版本\n    ```shell\n    $ uname -r\n    ```\n\n\n2. root权限更新Yum包\n    ```shell\n    $ yum update\n    ```\n\n3. 卸载旧版本：（如果安装过旧版本的话）\n(旧版名称是docker , 最新社区版 docker-engine， 目前已改名为docker-ce )\n\n    ```shell\n    $ yum -y remove docker docker-common docker-selinux docker-engine\n    ```\n\n4. 设置Yum源：（本文以Yum安装为例子进行安装）\n\n- 安装 yum-utils , 使用 yum-config-manager 工具设置Yum源, 后面两个是 devicemapper驱动依赖\n\n    ```shell\n    $ yum install -y yum-utils device-mapper-persistent-data lvm2\n    ```\n\n- 执行以下命令，添加docker的yum源\n    ```shell\n     $ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n     # 此处可能会报错 （原因是国内访问不到docker官方镜像的缘故）\n     Loaded plugins: fastestmirror（镜像）\n     adding repo from: https://download.docker.com/linux/centos/docker-ce.repo\n     grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\n     Could not fetch/save url https://download.docker.com/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: \n     [Errno 14] curl#35 - \"TCP connection reset by peer\n    \n     # 解决方法 ： 使用阿里源访问\n    $ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    ```\n\n5. 查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce)\n    ```shell\n    $ yum list docker-ce --showduplicates | sort -r\n    ```\n\n6. 配置镜像加速器（必须要配置，否则会出现访问镜像并不稳定 ，而且下载缓慢等问题）\n- 注册阿里云账号 ，登陆该网址自行注册 ( https://www.aliyun.com/?utm_content=se_1010377 )\n- 进入阿里云控制台如图 ( https://cr.console.aliyun.com/#/accelerator )\n- 执行命令 :\n    ```shell\n    \n    $ mkdir -p /etc/docker\n    $ tee /etc/docker/daemon.json <<-'EOF'\n    > { \n    >    \"registry-mirrors\": [\"输入你自己控制台此处的地址\"]\n    > }\n    EOF\n    $  systemctl daemon-reload    （导入操作）\n    ```\n\n7. 安装docker (此处我们安装社区版 docker-ce)\n    ```shell\n    \n    $ yum install docker-ce (这样写默认安装最新版本)\n    $ yum install  docker-ce-<VERSION_STRING> (指定安装版本) \n    #例： yum install docker-ce-18.03.1.ce\n    ```\n    \n8. 启动并加入开机启动\n    ```shell\n    $ systemctl start docker       (重启命令  $  systemctl restart docker ) \n    $ systemctl enable docker   开机启动\n    $ docker version  查看docker版本号\n    ```\n\n9. 验证是否安装成功\n    ```shell\n    $ docker run hello-world\n    ```\n## Docker 基本命令\n\n- 查看所有运行或者不运行容器\n- 列出所有容器ID\n- 停止所有的container（容器），这样才能够删除其中的images：\n- 如果想要删除所有container（容器）的话再加一个指令：\n- 查看当前有些什么images\n- 删除images（镜像），通过image的id来指定删除谁\n\n    ```shell\n    docker ps\n    docker ps -a\n    docker ps -aq\n    docker images\n    docker exec -it [name / id] /bin/bash\n    exit()\n    ```\n\n## Docker 开机配置\n\n- docker 中启动所有的容器命令\n    ```shell\n        docker start $(docker ps -a | awk '{ print $1}' | tail -n +2)\n    ```\n\n- docker 中关闭所有的容器命令\n    ```shell\n        docker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)\n    ```\n\n- docker 中删除所有的容器命令\n    ```shell\n        docker rm $(docker ps -a | awk '{ print $1}' | tail -n +2)\n    ```\n\n- docker 中删除所有的镜像\n    ```shell\n        docker rmi $(docker images | awk '{print $3}' |tail -n +2)\n    ```\n","source":"_posts/前沿技术/Docker/Docker.md","raw":"---\ntitle: docker\ncomments: true\ntags:\n  - docker\n  - 容器\ncategories:\n  - - 前沿技术\n    - Docker\nabbrlink: 4065722285\ndate: 2020-10-17 00:00:00\n---\n## Docker 安装\n\n1. 通过 uname -r 命令查看你当前的内核版本\n    ```shell\n    $ uname -r\n    ```\n\n\n2. root权限更新Yum包\n    ```shell\n    $ yum update\n    ```\n\n3. 卸载旧版本：（如果安装过旧版本的话）\n(旧版名称是docker , 最新社区版 docker-engine， 目前已改名为docker-ce )\n\n    ```shell\n    $ yum -y remove docker docker-common docker-selinux docker-engine\n    ```\n\n4. 设置Yum源：（本文以Yum安装为例子进行安装）\n\n- 安装 yum-utils , 使用 yum-config-manager 工具设置Yum源, 后面两个是 devicemapper驱动依赖\n\n    ```shell\n    $ yum install -y yum-utils device-mapper-persistent-data lvm2\n    ```\n\n- 执行以下命令，添加docker的yum源\n    ```shell\n     $ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n     # 此处可能会报错 （原因是国内访问不到docker官方镜像的缘故）\n     Loaded plugins: fastestmirror（镜像）\n     adding repo from: https://download.docker.com/linux/centos/docker-ce.repo\n     grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\n     Could not fetch/save url https://download.docker.com/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: \n     [Errno 14] curl#35 - \"TCP connection reset by peer\n    \n     # 解决方法 ： 使用阿里源访问\n    $ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    ```\n\n5. 查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce)\n    ```shell\n    $ yum list docker-ce --showduplicates | sort -r\n    ```\n\n6. 配置镜像加速器（必须要配置，否则会出现访问镜像并不稳定 ，而且下载缓慢等问题）\n- 注册阿里云账号 ，登陆该网址自行注册 ( https://www.aliyun.com/?utm_content=se_1010377 )\n- 进入阿里云控制台如图 ( https://cr.console.aliyun.com/#/accelerator )\n- 执行命令 :\n    ```shell\n    \n    $ mkdir -p /etc/docker\n    $ tee /etc/docker/daemon.json <<-'EOF'\n    > { \n    >    \"registry-mirrors\": [\"输入你自己控制台此处的地址\"]\n    > }\n    EOF\n    $  systemctl daemon-reload    （导入操作）\n    ```\n\n7. 安装docker (此处我们安装社区版 docker-ce)\n    ```shell\n    \n    $ yum install docker-ce (这样写默认安装最新版本)\n    $ yum install  docker-ce-<VERSION_STRING> (指定安装版本) \n    #例： yum install docker-ce-18.03.1.ce\n    ```\n    \n8. 启动并加入开机启动\n    ```shell\n    $ systemctl start docker       (重启命令  $  systemctl restart docker ) \n    $ systemctl enable docker   开机启动\n    $ docker version  查看docker版本号\n    ```\n\n9. 验证是否安装成功\n    ```shell\n    $ docker run hello-world\n    ```\n## Docker 基本命令\n\n- 查看所有运行或者不运行容器\n- 列出所有容器ID\n- 停止所有的container（容器），这样才能够删除其中的images：\n- 如果想要删除所有container（容器）的话再加一个指令：\n- 查看当前有些什么images\n- 删除images（镜像），通过image的id来指定删除谁\n\n    ```shell\n    docker ps\n    docker ps -a\n    docker ps -aq\n    docker images\n    docker exec -it [name / id] /bin/bash\n    exit()\n    ```\n\n## Docker 开机配置\n\n- docker 中启动所有的容器命令\n    ```shell\n        docker start $(docker ps -a | awk '{ print $1}' | tail -n +2)\n    ```\n\n- docker 中关闭所有的容器命令\n    ```shell\n        docker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)\n    ```\n\n- docker 中删除所有的容器命令\n    ```shell\n        docker rm $(docker ps -a | awk '{ print $1}' | tail -n +2)\n    ```\n\n- docker 中删除所有的镜像\n    ```shell\n        docker rmi $(docker images | awk '{print $3}' |tail -n +2)\n    ```\n","slug":"前沿技术/Docker/Docker","published":1,"updated":"2022-02-04T09:45:53.255Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb7000gzc1b1jb0hr0r","content":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><ol>\n<li>通过 uname -r 命令查看你当前的内核版本<pre><code class=\"shell\">$ uname -r\n</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>root权限更新Yum包</p>\n<pre><code class=\"shell\">$ yum update\n</code></pre>\n</li>\n<li><p>卸载旧版本：（如果安装过旧版本的话）<br>(旧版名称是docker , 最新社区版 docker-engine， 目前已改名为docker-ce )</p>\n<pre><code class=\"shell\">$ yum -y remove docker docker-common docker-selinux docker-engine\n</code></pre>\n</li>\n<li><p>设置Yum源：（本文以Yum安装为例子进行安装）</p>\n</li>\n</ol>\n<ul>\n<li><p>安装 yum-utils , 使用 yum-config-manager 工具设置Yum源, 后面两个是 devicemapper驱动依赖</p>\n<pre><code class=\"shell\">$ yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre>\n</li>\n<li><p>执行以下命令，添加docker的yum源</p>\n<pre><code class=\"shell\"> $ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n # 此处可能会报错 （原因是国内访问不到docker官方镜像的缘故）\n Loaded plugins: fastestmirror（镜像）\n adding repo from: https://download.docker.com/linux/centos/docker-ce.repo\n grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\n Could not fetch/save url https://download.docker.com/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: \n [Errno 14] curl#35 - &quot;TCP connection reset by peer\n\n # 解决方法 ： 使用阿里源访问\n$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li><p>查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce)</p>\n<pre><code class=\"shell\">$ yum list docker-ce --showduplicates | sort -r\n</code></pre>\n</li>\n<li><p>配置镜像加速器（必须要配置，否则会出现访问镜像并不稳定 ，而且下载缓慢等问题）</p>\n</li>\n</ol>\n<ul>\n<li>注册阿里云账号 ，登陆该网址自行注册 ( <a href=\"https://www.aliyun.com/?utm_content=se_1010377\" rel=\"external nofollow noreferrer\">https://www.aliyun.com/?utm_content=se_1010377</a> )</li>\n<li>进入阿里云控制台如图 ( <a href=\"https://cr.console.aliyun.com/#/accelerator\" rel=\"external nofollow noreferrer\">https://cr.console.aliyun.com/#/accelerator</a> )</li>\n<li>执行命令 :<pre><code class=\"shell\">\n$ mkdir -p /etc/docker\n$ tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;\n&gt; &#123; \n&gt;    &quot;registry-mirrors&quot;: [&quot;输入你自己控制台此处的地址&quot;]\n&gt; &#125;\nEOF\n$  systemctl daemon-reload    （导入操作）\n</code></pre>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>安装docker (此处我们安装社区版 docker-ce)</p>\n<pre><code class=\"shell\">\n$ yum install docker-ce (这样写默认安装最新版本)\n$ yum install  docker-ce-&lt;VERSION_STRING&gt; (指定安装版本) \n#例： yum install docker-ce-18.03.1.ce\n</code></pre>\n</li>\n<li><p>启动并加入开机启动</p>\n<pre><code class=\"shell\">$ systemctl start docker       (重启命令  $  systemctl restart docker ) \n$ systemctl enable docker   开机启动\n$ docker version  查看docker版本号\n</code></pre>\n</li>\n<li><p>验证是否安装成功</p>\n<pre><code class=\"shell\">$ docker run hello-world\n</code></pre>\n<h2 id=\"Docker-基本命令\"><a href=\"#Docker-基本命令\" class=\"headerlink\" title=\"Docker 基本命令\"></a>Docker 基本命令</h2></li>\n</ol>\n<ul>\n<li><p>查看所有运行或者不运行容器</p>\n</li>\n<li><p>列出所有容器ID</p>\n</li>\n<li><p>停止所有的container（容器），这样才能够删除其中的images：</p>\n</li>\n<li><p>如果想要删除所有container（容器）的话再加一个指令：</p>\n</li>\n<li><p>查看当前有些什么images</p>\n</li>\n<li><p>删除images（镜像），通过image的id来指定删除谁</p>\n<pre><code class=\"shell\">docker ps\ndocker ps -a\ndocker ps -aq\ndocker images\ndocker exec -it [name / id] /bin/bash\nexit()\n</code></pre>\n</li>\n</ul>\n<h2 id=\"Docker-开机配置\"><a href=\"#Docker-开机配置\" class=\"headerlink\" title=\"Docker 开机配置\"></a>Docker 开机配置</h2><ul>\n<li><p>docker 中启动所有的容器命令</p>\n<pre><code class=\"shell\">    docker start $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)\n</code></pre>\n</li>\n<li><p>docker 中关闭所有的容器命令</p>\n<pre><code class=\"shell\">    docker stop $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)\n</code></pre>\n</li>\n<li><p>docker 中删除所有的容器命令</p>\n<pre><code class=\"shell\">    docker rm $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)\n</code></pre>\n</li>\n<li><p>docker 中删除所有的镜像</p>\n<pre><code class=\"shell\">    docker rmi $(docker images | awk &#39;&#123;print $3&#125;&#39; |tail -n +2)\n</code></pre>\n</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><ol>\n<li>通过 uname -r 命令查看你当前的内核版本<pre><code class=\"shell\">$ uname -r\n</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>root权限更新Yum包</p>\n<pre><code class=\"shell\">$ yum update\n</code></pre>\n</li>\n<li><p>卸载旧版本：（如果安装过旧版本的话）<br>(旧版名称是docker , 最新社区版 docker-engine， 目前已改名为docker-ce )</p>\n<pre><code class=\"shell\">$ yum -y remove docker docker-common docker-selinux docker-engine\n</code></pre>\n</li>\n<li><p>设置Yum源：（本文以Yum安装为例子进行安装）</p>\n</li>\n</ol>\n<ul>\n<li><p>安装 yum-utils , 使用 yum-config-manager 工具设置Yum源, 后面两个是 devicemapper驱动依赖</p>\n<pre><code class=\"shell\">$ yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre>\n</li>\n<li><p>执行以下命令，添加docker的yum源</p>\n<pre><code class=\"shell\"> $ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n # 此处可能会报错 （原因是国内访问不到docker官方镜像的缘故）\n Loaded plugins: fastestmirror（镜像）\n adding repo from: https://download.docker.com/linux/centos/docker-ce.repo\n grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\n Could not fetch/save url https://download.docker.com/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: \n [Errno 14] curl#35 - &quot;TCP connection reset by peer\n\n # 解决方法 ： 使用阿里源访问\n$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li><p>查看所有仓库中docker版本，并选择特定版本安装：(此处我们查看社区版 docker-ce)</p>\n<pre><code class=\"shell\">$ yum list docker-ce --showduplicates | sort -r\n</code></pre>\n</li>\n<li><p>配置镜像加速器（必须要配置，否则会出现访问镜像并不稳定 ，而且下载缓慢等问题）</p>\n</li>\n</ol>\n<ul>\n<li>注册阿里云账号 ，登陆该网址自行注册 ( <a href=\"https://www.aliyun.com/?utm_content=se_1010377\">https://www.aliyun.com/?utm_content=se_1010377</a> )</li>\n<li>进入阿里云控制台如图 ( <a href=\"https://cr.console.aliyun.com/#/accelerator\">https://cr.console.aliyun.com/#/accelerator</a> )</li>\n<li>执行命令 :<pre><code class=\"shell\">\n$ mkdir -p /etc/docker\n$ tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;\n&gt; &#123; \n&gt;    &quot;registry-mirrors&quot;: [&quot;输入你自己控制台此处的地址&quot;]\n&gt; &#125;\nEOF\n$  systemctl daemon-reload    （导入操作）\n</code></pre>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>安装docker (此处我们安装社区版 docker-ce)</p>\n<pre><code class=\"shell\">\n$ yum install docker-ce (这样写默认安装最新版本)\n$ yum install  docker-ce-&lt;VERSION_STRING&gt; (指定安装版本) \n#例： yum install docker-ce-18.03.1.ce\n</code></pre>\n</li>\n<li><p>启动并加入开机启动</p>\n<pre><code class=\"shell\">$ systemctl start docker       (重启命令  $  systemctl restart docker ) \n$ systemctl enable docker   开机启动\n$ docker version  查看docker版本号\n</code></pre>\n</li>\n<li><p>验证是否安装成功</p>\n<pre><code class=\"shell\">$ docker run hello-world\n</code></pre>\n<h2 id=\"Docker-基本命令\"><a href=\"#Docker-基本命令\" class=\"headerlink\" title=\"Docker 基本命令\"></a>Docker 基本命令</h2></li>\n</ol>\n<ul>\n<li><p>查看所有运行或者不运行容器</p>\n</li>\n<li><p>列出所有容器ID</p>\n</li>\n<li><p>停止所有的container（容器），这样才能够删除其中的images：</p>\n</li>\n<li><p>如果想要删除所有container（容器）的话再加一个指令：</p>\n</li>\n<li><p>查看当前有些什么images</p>\n</li>\n<li><p>删除images（镜像），通过image的id来指定删除谁</p>\n<pre><code class=\"shell\">docker ps\ndocker ps -a\ndocker ps -aq\ndocker images\ndocker exec -it [name / id] /bin/bash\nexit()\n</code></pre>\n</li>\n</ul>\n<h2 id=\"Docker-开机配置\"><a href=\"#Docker-开机配置\" class=\"headerlink\" title=\"Docker 开机配置\"></a>Docker 开机配置</h2><ul>\n<li><p>docker 中启动所有的容器命令</p>\n<pre><code class=\"shell\">    docker start $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)\n</code></pre>\n</li>\n<li><p>docker 中关闭所有的容器命令</p>\n<pre><code class=\"shell\">    docker stop $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)\n</code></pre>\n</li>\n<li><p>docker 中删除所有的容器命令</p>\n<pre><code class=\"shell\">    docker rm $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)\n</code></pre>\n</li>\n<li><p>docker 中删除所有的镜像</p>\n<pre><code class=\"shell\">    docker rmi $(docker images | awk &#39;&#123;print $3&#125;&#39; |tail -n +2)\n</code></pre>\n</li>\n</ul>\n"},{"title":"linux 常见问题总结","comments":1,"abbrlink":3467120238,"date":"2021-11-01T16:00:00.000Z","_content":"\n## linux 配置静态 IP\n\n1. 安装 ifconfig\n\n```shell\n\tyum search ifconfig  => ifconfig 在 net-tools.x86_64 包中\n\n\tsudo yum install net-tools.x86_64\n```\n2. 查看 IP 信息\n```shell\n\tifconfig / ip addr  # 查看IP 和子网掩码\n        enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n            inet 192.168.1.222  netmask 255.255.255.0  broadcast 192.168.1.255\n            inet6 fe80::c597:178c:e00f:9029  prefixlen 64  scopeid 0x20<link>\n            ether 08:00:27:50:18:58  txqueuelen 1000  (Ethernet)\n            RX packets 4306  bytes 313127 (305.7 KiB)\n            RX errors 0  dropped 0  overruns 0  frame 0\n            TX packets 1243  bytes 225826 (220.5 KiB)\n            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\troute -n # 查看网关 GATEWAY\n\t\t[root@localhost etc]# route -n\n        Kernel IP routing table\n        Destination     Gateway         Genmask         Flags Metric Ref    Use Iface\n        0.0.0.0         192.168.1.1     0.0.0.0         UG    100    0        0 enp0s3\n        172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0\n        192.168.1.0     0.0.0.0         255.255.255.0   U     100    0        0 enp0s3\n\n```\n\n3. 修改配置文件\n\n```shell\n\tvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n\t\n\tTYPE=\"Ethernet\"\n    PROXY_METHOD=\"none\"\n    BROWSER_ONLY=\"no\"\n    DEFROUTE=\"yes\"\n    IPV4_FAILURE_FATAL=\"no\"\n    IPV6INIT=\"yes\"\n    IPV6_AUTOCONF=\"yes\"\n    IPV6_DEFROUTE=\"yes\"\n    IPV6_FAILURE_FATAL=\"no\"\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\n    NAME=\"enp0s3\"\n    UUID=\"65348731-3dab-47ae-a462-49eb2d7e7035\"\n    DEVICE=\"enp0s3\"\n    ONBOOT=\"yes\"\n    #####静态IP改动部分开始#####\n    # 动态 IP\n    # BOOTPROTO=\"dhcp\"\n    # 静态 IP\n    BOOTPROTO=\"static\"\n    IPADDR=192.168.1.222\n    NETMASK=255.255.255.0\n    GATEWAY=192.168.1.1\n    DNS1=114.114.114.114\n```\n\n4. 添加 DNS 服务(首选DNS服务器和备选DNS服务器)\n\n```shell\n    vi /etc/resolv.conf\n\n    # Generated by NetworkManager\n    search localdomain\n    nameserver 114.114.114.114\n    nameserver 114.114.114.115                             \n```\n\n5. 重启网络服务\n\n```\n\tservice network restart\n\n\tsystemctl network restart\n```\n\n## Deepin 配置 SSH 远程\n\n1. 安装ssh服务\n\n```SHELL\n    sudo su\n    apt-get install openssh-server\n```\n\n2. 修改配置文件\n\n```shell\n    vi /etc/ssh/sshd_config\n\n    # Authentication:\n    LoginGraceTime 2m\n    #PermitRootLogin prohibit-password\n    PermitRootLogin yes  # 允许 root 用户登录\n    StrictModes yes\n```\n\n3. 重启SSH服务端\n\n```shell\n    sudo /etc/init.d/ssh start \n    或者 \n    service ssh start\n```\n\n​    \n\n​    \n","source":"_posts/操作系统/Linux/Linux.md","raw":"---\ntitle: linux 常见问题总结\ntags:\n  - linux\n  - 问题总结\ncategories:\n  - - 操作系统\n    - Linux\ncomments: true\nabbrlink: 3467120238\ndate: 2021-11-02 00:00:00\n---\n\n## linux 配置静态 IP\n\n1. 安装 ifconfig\n\n```shell\n\tyum search ifconfig  => ifconfig 在 net-tools.x86_64 包中\n\n\tsudo yum install net-tools.x86_64\n```\n2. 查看 IP 信息\n```shell\n\tifconfig / ip addr  # 查看IP 和子网掩码\n        enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n            inet 192.168.1.222  netmask 255.255.255.0  broadcast 192.168.1.255\n            inet6 fe80::c597:178c:e00f:9029  prefixlen 64  scopeid 0x20<link>\n            ether 08:00:27:50:18:58  txqueuelen 1000  (Ethernet)\n            RX packets 4306  bytes 313127 (305.7 KiB)\n            RX errors 0  dropped 0  overruns 0  frame 0\n            TX packets 1243  bytes 225826 (220.5 KiB)\n            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\troute -n # 查看网关 GATEWAY\n\t\t[root@localhost etc]# route -n\n        Kernel IP routing table\n        Destination     Gateway         Genmask         Flags Metric Ref    Use Iface\n        0.0.0.0         192.168.1.1     0.0.0.0         UG    100    0        0 enp0s3\n        172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0\n        192.168.1.0     0.0.0.0         255.255.255.0   U     100    0        0 enp0s3\n\n```\n\n3. 修改配置文件\n\n```shell\n\tvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n\t\n\tTYPE=\"Ethernet\"\n    PROXY_METHOD=\"none\"\n    BROWSER_ONLY=\"no\"\n    DEFROUTE=\"yes\"\n    IPV4_FAILURE_FATAL=\"no\"\n    IPV6INIT=\"yes\"\n    IPV6_AUTOCONF=\"yes\"\n    IPV6_DEFROUTE=\"yes\"\n    IPV6_FAILURE_FATAL=\"no\"\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\n    NAME=\"enp0s3\"\n    UUID=\"65348731-3dab-47ae-a462-49eb2d7e7035\"\n    DEVICE=\"enp0s3\"\n    ONBOOT=\"yes\"\n    #####静态IP改动部分开始#####\n    # 动态 IP\n    # BOOTPROTO=\"dhcp\"\n    # 静态 IP\n    BOOTPROTO=\"static\"\n    IPADDR=192.168.1.222\n    NETMASK=255.255.255.0\n    GATEWAY=192.168.1.1\n    DNS1=114.114.114.114\n```\n\n4. 添加 DNS 服务(首选DNS服务器和备选DNS服务器)\n\n```shell\n    vi /etc/resolv.conf\n\n    # Generated by NetworkManager\n    search localdomain\n    nameserver 114.114.114.114\n    nameserver 114.114.114.115                             \n```\n\n5. 重启网络服务\n\n```\n\tservice network restart\n\n\tsystemctl network restart\n```\n\n## Deepin 配置 SSH 远程\n\n1. 安装ssh服务\n\n```SHELL\n    sudo su\n    apt-get install openssh-server\n```\n\n2. 修改配置文件\n\n```shell\n    vi /etc/ssh/sshd_config\n\n    # Authentication:\n    LoginGraceTime 2m\n    #PermitRootLogin prohibit-password\n    PermitRootLogin yes  # 允许 root 用户登录\n    StrictModes yes\n```\n\n3. 重启SSH服务端\n\n```shell\n    sudo /etc/init.d/ssh start \n    或者 \n    service ssh start\n```\n\n​    \n\n​    \n","slug":"操作系统/Linux/Linux","published":1,"updated":"2022-02-04T09:45:53.715Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvb8000jzc1bbissh739","content":"<h2 id=\"linux-配置静态-IP\"><a href=\"#linux-配置静态-IP\" class=\"headerlink\" title=\"linux 配置静态 IP\"></a>linux 配置静态 IP</h2><ol>\n<li>安装 ifconfig</li>\n</ol>\n<pre><code class=\"shell\">    yum search ifconfig  =&gt; ifconfig 在 net-tools.x86_64 包中\n\n    sudo yum install net-tools.x86_64\n</code></pre>\n<ol start=\"2\">\n<li>查看 IP 信息<br>```shell<br> ifconfig / ip addr  # 查看IP 和子网掩码<pre><code> enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n     inet 192.168.1.222  netmask 255.255.255.0  broadcast 192.168.1.255\n     inet6 fe80::c597:178c:e00f:9029  prefixlen 64  scopeid 0x20&lt;link&gt;\n     ether 08:00:27:50:18:58  txqueuelen 1000  (Ethernet)\n     RX packets 4306  bytes 313127 (305.7 KiB)\n     RX errors 0  dropped 0  overruns 0  frame 0\n     TX packets 1243  bytes 225826 (220.5 KiB)\n     TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre>\n route -n # 查看网关 GATEWAY<pre><code> [root@localhost etc]# route -n\n Kernel IP routing table\n Destination     Gateway         Genmask         Flags Metric Ref    Use Iface\n 0.0.0.0         192.168.1.1     0.0.0.0         UG    100    0        0 enp0s3\n 172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0\n 192.168.1.0     0.0.0.0         255.255.255.0   U     100    0        0 enp0s3\n</code></pre>\n</li>\n</ol>\n<pre><code>\n3. 修改配置文件\n\n```shell\n    vi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n    \n    TYPE=&quot;Ethernet&quot;\n    PROXY_METHOD=&quot;none&quot;\n    BROWSER_ONLY=&quot;no&quot;\n    DEFROUTE=&quot;yes&quot;\n    IPV4_FAILURE_FATAL=&quot;no&quot;\n    IPV6INIT=&quot;yes&quot;\n    IPV6_AUTOCONF=&quot;yes&quot;\n    IPV6_DEFROUTE=&quot;yes&quot;\n    IPV6_FAILURE_FATAL=&quot;no&quot;\n    IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;\n    NAME=&quot;enp0s3&quot;\n    UUID=&quot;65348731-3dab-47ae-a462-49eb2d7e7035&quot;\n    DEVICE=&quot;enp0s3&quot;\n    ONBOOT=&quot;yes&quot;\n    #####静态IP改动部分开始#####\n    # 动态 IP\n    # BOOTPROTO=&quot;dhcp&quot;\n    # 静态 IP\n    BOOTPROTO=&quot;static&quot;\n    IPADDR=192.168.1.222\n    NETMASK=255.255.255.0\n    GATEWAY=192.168.1.1\n    DNS1=114.114.114.114\n</code></pre>\n<ol start=\"4\">\n<li>添加 DNS 服务(首选DNS服务器和备选DNS服务器)</li>\n</ol>\n<pre><code class=\"shell\">    vi /etc/resolv.conf\n\n    # Generated by NetworkManager\n    search localdomain\n    nameserver 114.114.114.114\n    nameserver 114.114.114.115                             \n</code></pre>\n<ol start=\"5\">\n<li>重启网络服务</li>\n</ol>\n<pre><code>    service network restart\n\n    systemctl network restart\n</code></pre>\n<h2 id=\"Deepin-配置-SSH-远程\"><a href=\"#Deepin-配置-SSH-远程\" class=\"headerlink\" title=\"Deepin 配置 SSH 远程\"></a>Deepin 配置 SSH 远程</h2><ol>\n<li>安装ssh服务</li>\n</ol>\n<pre><code class=\"SHELL\">    sudo su\n    apt-get install openssh-server\n</code></pre>\n<ol start=\"2\">\n<li>修改配置文件</li>\n</ol>\n<pre><code class=\"shell\">    vi /etc/ssh/sshd_config\n\n    # Authentication:\n    LoginGraceTime 2m\n    #PermitRootLogin prohibit-password\n    PermitRootLogin yes  # 允许 root 用户登录\n    StrictModes yes\n</code></pre>\n<ol start=\"3\">\n<li>重启SSH服务端</li>\n</ol>\n<pre><code class=\"shell\">    sudo /etc/init.d/ssh start \n    或者 \n    service ssh start\n</code></pre>\n<p>​    </p>\n<p>​    </p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"linux-配置静态-IP\"><a href=\"#linux-配置静态-IP\" class=\"headerlink\" title=\"linux 配置静态 IP\"></a>linux 配置静态 IP</h2><ol>\n<li>安装 ifconfig</li>\n</ol>\n<pre><code class=\"shell\">    yum search ifconfig  =&gt; ifconfig 在 net-tools.x86_64 包中\n\n    sudo yum install net-tools.x86_64\n</code></pre>\n<ol start=\"2\">\n<li>查看 IP 信息<br>```shell<br> ifconfig / ip addr  # 查看IP 和子网掩码<pre><code> enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n     inet 192.168.1.222  netmask 255.255.255.0  broadcast 192.168.1.255\n     inet6 fe80::c597:178c:e00f:9029  prefixlen 64  scopeid 0x20&lt;link&gt;\n     ether 08:00:27:50:18:58  txqueuelen 1000  (Ethernet)\n     RX packets 4306  bytes 313127 (305.7 KiB)\n     RX errors 0  dropped 0  overruns 0  frame 0\n     TX packets 1243  bytes 225826 (220.5 KiB)\n     TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre>\n route -n # 查看网关 GATEWAY<pre><code> [root@localhost etc]# route -n\n Kernel IP routing table\n Destination     Gateway         Genmask         Flags Metric Ref    Use Iface\n 0.0.0.0         192.168.1.1     0.0.0.0         UG    100    0        0 enp0s3\n 172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0\n 192.168.1.0     0.0.0.0         255.255.255.0   U     100    0        0 enp0s3\n</code></pre>\n</li>\n</ol>\n<pre><code>\n3. 修改配置文件\n\n```shell\n    vi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n    \n    TYPE=&quot;Ethernet&quot;\n    PROXY_METHOD=&quot;none&quot;\n    BROWSER_ONLY=&quot;no&quot;\n    DEFROUTE=&quot;yes&quot;\n    IPV4_FAILURE_FATAL=&quot;no&quot;\n    IPV6INIT=&quot;yes&quot;\n    IPV6_AUTOCONF=&quot;yes&quot;\n    IPV6_DEFROUTE=&quot;yes&quot;\n    IPV6_FAILURE_FATAL=&quot;no&quot;\n    IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;\n    NAME=&quot;enp0s3&quot;\n    UUID=&quot;65348731-3dab-47ae-a462-49eb2d7e7035&quot;\n    DEVICE=&quot;enp0s3&quot;\n    ONBOOT=&quot;yes&quot;\n    #####静态IP改动部分开始#####\n    # 动态 IP\n    # BOOTPROTO=&quot;dhcp&quot;\n    # 静态 IP\n    BOOTPROTO=&quot;static&quot;\n    IPADDR=192.168.1.222\n    NETMASK=255.255.255.0\n    GATEWAY=192.168.1.1\n    DNS1=114.114.114.114\n</code></pre>\n<ol start=\"4\">\n<li>添加 DNS 服务(首选DNS服务器和备选DNS服务器)</li>\n</ol>\n<pre><code class=\"shell\">    vi /etc/resolv.conf\n\n    # Generated by NetworkManager\n    search localdomain\n    nameserver 114.114.114.114\n    nameserver 114.114.114.115                             \n</code></pre>\n<ol start=\"5\">\n<li>重启网络服务</li>\n</ol>\n<pre><code>    service network restart\n\n    systemctl network restart\n</code></pre>\n<h2 id=\"Deepin-配置-SSH-远程\"><a href=\"#Deepin-配置-SSH-远程\" class=\"headerlink\" title=\"Deepin 配置 SSH 远程\"></a>Deepin 配置 SSH 远程</h2><ol>\n<li>安装ssh服务</li>\n</ol>\n<pre><code class=\"SHELL\">    sudo su\n    apt-get install openssh-server\n</code></pre>\n<ol start=\"2\">\n<li>修改配置文件</li>\n</ol>\n<pre><code class=\"shell\">    vi /etc/ssh/sshd_config\n\n    # Authentication:\n    LoginGraceTime 2m\n    #PermitRootLogin prohibit-password\n    PermitRootLogin yes  # 允许 root 用户登录\n    StrictModes yes\n</code></pre>\n<ol start=\"3\">\n<li>重启SSH服务端</li>\n</ol>\n<pre><code class=\"shell\">    sudo /etc/init.d/ssh start \n    或者 \n    service ssh start\n</code></pre>\n<p>​    </p>\n<p>​    </p>\n"},{"title":"linux 命令总结","comments":1,"abbrlink":1564283385,"date":"2020-11-01T16:00:00.000Z","_content":"\n**[ 命令格式 ]**\n\n- 命令 [ 选项 ][ 参数 ]\n- 例： ls -la /home\n\n### 目录处理命令\n\n- ls\n  - 原意： list\n  - 功能： 显示目录文件\n  - 选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)\n  - 参数： 路径（非必填）\n  - 语法： ls -la /home\n- cd\n  - 原意： change directory\n  - 功能： 切换目录\n  - 参数： 路径\n  - 语法： cd /home (绝对路径) 或者 cd admin (相对路径)\n- pwd\n  - 原意： print working directory\n  - 功能： 显示当前目录\n  - 语法： pwd\n- mkdir\n  - 原意： make directories\n  - 功能： 创建空目录\n  - 选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)\n  - 参数： 目录名\n  - 语法： mkdir -p [目录名]\n- cp\n  - 原意： copy\n  - 功能： 复制文件或目录\n  - 选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)\n  - 参数： [原文件或目录][目标目录]\n  - 语法： cp -rp [原文件或目录][目标目录]\n- mv\n\n  - 原意： move\n  - 功能： 剪切文件或者改文件名\n  - 参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]\n  - 语法： mv [原文件或目录][目标目录]\n\n- rm\n  - 原意： remove\n  - 功能： 删除文件或目录\n  - 选项： -r： 删除目录，-f： 强制删除\n  - 参数： 文件或目录\n  - 语法： rm -rf [文件或目录] ==> 强制删除\n- rmdir\n  - 原意： remove empty directories\n  - 功能： 删除空目录\n  - 语法： rmdir [空目录]\n\n### 文件处理命令\n\n- touch\n  - 功能： 创建空文件\n  - 语法： touch [文件名]\n- cat\n  - 功能： 显示文件内容\n  - 选项： -n 显示行号\n  - 语法： cat [文件名]\n- tac\n\n  - 功能： 反向显示文件内容\n  - 选项： -n 显示行号\n  - 语法： tac [文件名]\n\n- more\n  - 功能： 分页显示文件内容\n  - 语法： more [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; （B => 上翻）\n- ln\n  - 原意： link\n  - 功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)\n  - 选项： -s： 创建软链接\n  - 语法： ln -s [原文件或目录][目标文件或目录] ==> 软链接; ln [原文件或目录][目标文件或目录] ==> 硬链接;\n- less\n  - 功能： 分页显示文件内容\n  - 语法： less [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; B => 向上翻页\n- head\n  - 功能： 显示文件前面几行\n  - 选项： -n： 指定行数\n  - 语法： head -n 10 [文件名]\n- tail\n  - 功能： 显示文件后面几行\n  - 选项： -n： 指定行数; -f： 动态显示文件末尾的内容\n  - 语法： tail -n 10 [文件名]\n\n### 文件搜索命令\n\n- find\n\n  - 功能： 文件搜索\n  - 语法： find [搜素范围][匹配条件] [搜素内容]\n  - 例： find /home -name log.md (搜素 log.md 文件)\n    > [ 匹配条件 ]\n    >\n    > - name： 名称搜素\n    > - size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)\n    >\n    > * +n(+204800) 大于 204800\n    > * -n\n    > * n 等于\n    >\n    > - type： 文件类型\n\n- grep\n\n  - 功能： 在文件中搜索字符串匹配的行并输出\n  - 选项： -i 不区分大小写; -v 排除指定字符串\n  - 语法： grep -iv [指定字符串][文件]\n\n- locate\n  - 功能： 在文件资料库中查找文件\n  - 语法： locate [文件名]\n- which\n  - 功能： 搜索命令所在目录及别名信息\n  - 语法： which [命令]\n- whereis\n  - 功能： 搜索命令所在目录以及帮助文档路径\n  - 语法： whereis [命令]\n\n### 帮助命令\n\n- man\n  - 功能： 获取帮助信息\n  - 语法： man [命令或帮助文件]\n- help\n  - 功能： 获取 shell 内置命令的帮助信息\n  - 语法： help [内置命令]\n\n### 权限管理命令\n\n- chmod\n  - 原意： change mode\n  - 功能： 改变文件或目录的权限\n  - 语法： chmod [ugoa+-=rwx][文件或目录]\n  - 例： chmod u-r [文件或目录] => 对文件的所属者去掉 r 权限\n  - 语法： chmod [mode = 777][文件或目录] => 给文件设置所有的用户拥有全部的权限\n  - 例： chmod 764 [文件或目录]\n  - 执行权限： 所有用户\n\n> **[ u，g，o，a 分别代表用户 ]**\n>\n> - u： User 所属者\n> - g： Group 用户组\n> - o： Other 其他用户\n> - a： all 所有人\n>\n> **[ r，w，x 分别代表权限 ]**\n>\n> - r： read 读权限\n>   - 用数字表示 4\n> - w： write 写权限\n>   - 用数字表示 2\n> - x： 执行权限\n>   - 用数字表示 1\n> - 每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)\n> - 例： rwxrw-r-- 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有>读的权限\n>   - 用数字表示： 764（4+2+1，4+2，4）\n\n- chown\n  - 原意： change file ownership\n  - 功能： 改变文件或目录的所属者\n  - 语法： chown [用户][文件/目录]\n  - 执行权限： root\n- umask\n  - 命令英文原意： the user file-creation mask\n  - 显示、设置文件的缺省权限(默认权限)\n  - 执行权限： 所有用户\n  - 语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限\n\n### 用户管理命令\n\n- useradd\n  - 功能： 添加新用户\n  - 执行权限： root\n- passwd\n  - 功能： 修改密码\n- who\n  - 功能： 查看登录用户信息\n- w\n  - 功能： 当前用户详细信息\n\n### 压缩解压命令\n\n- tar\n  - 功能： 打包文件或目录\n  - 说明： **结合 gzip 命令**\n  - 语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -zxf 文件名.tar.gz\n- zip\n  - 功能： 压缩文件或目录\n  - 选项： -r 压缩目录\n  - 语法： zip [新的文件名][目标文件或目录]\n  - 解压： unzip [压缩文件名.zip]\n- bzip2\n  - 功能： 打包文件()\n  - 选项： -k 保留原文件\n  - 说明： **结合 tar 命令使用**\n  - 语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -xjf 文件名.tar.bz2\n\n### 网络命令\n\n- ping\n  - 功能： 测试网络连通性\n  - 语法： ping [ip 地址]\n- last\n  - 功能： 列出目前和过去登入系统的用户信息\n  - 语法： last\n- traceroute\n  - 功能： 显示数据包到主机间的路径\n  - 语法： traceroute [ip 地址 或 域名]\n- netstat\n  - 功能： 显示网络相关信息\n  - 语法： netstat\n- steup\n  - 功能： 配置网络\n  - 语法： steup\n- write\n  - 功能： 给用户发信息\n  - 语法： write [用户名]\n- wall\n  - 功能： 发广播信息\n  - 语法： wall\n- mail\n  - 功能： 发送电子邮件\n  - 语法： mail [用户名]\n\n### 关机重启命令\n\n- shutdown [选项] now(时间)\n  - -c 取消\n  - -h 关机\n  - -r 重启\n- 其他关机\n  - halt\n  - poweroff\n  - init 0\n- 其他重启\n  - reboot\n  - init 6\n- 扩展\n\n* 0 --> 关机\n* 1 --> 单用户\n* 2 --> 不完全多用户，不含 nfs 服务\n* 3 --> 完全多用户\n* 4 --> 未分配\n* 5 --> 图形界面\n* 6 --> 重启\n","source":"_posts/操作系统/Linux/Linux常用命令.md","raw":"---\ntitle: linux 命令总结\ntags:\n  - linux\n  - linux 命令\ncategories:\n  - - 操作系统\n    - Linux\ncomments: true\nabbrlink: 1564283385\ndate: 2020-11-02 00:00:00\n---\n\n**[ 命令格式 ]**\n\n- 命令 [ 选项 ][ 参数 ]\n- 例： ls -la /home\n\n### 目录处理命令\n\n- ls\n  - 原意： list\n  - 功能： 显示目录文件\n  - 选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)\n  - 参数： 路径（非必填）\n  - 语法： ls -la /home\n- cd\n  - 原意： change directory\n  - 功能： 切换目录\n  - 参数： 路径\n  - 语法： cd /home (绝对路径) 或者 cd admin (相对路径)\n- pwd\n  - 原意： print working directory\n  - 功能： 显示当前目录\n  - 语法： pwd\n- mkdir\n  - 原意： make directories\n  - 功能： 创建空目录\n  - 选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)\n  - 参数： 目录名\n  - 语法： mkdir -p [目录名]\n- cp\n  - 原意： copy\n  - 功能： 复制文件或目录\n  - 选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)\n  - 参数： [原文件或目录][目标目录]\n  - 语法： cp -rp [原文件或目录][目标目录]\n- mv\n\n  - 原意： move\n  - 功能： 剪切文件或者改文件名\n  - 参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]\n  - 语法： mv [原文件或目录][目标目录]\n\n- rm\n  - 原意： remove\n  - 功能： 删除文件或目录\n  - 选项： -r： 删除目录，-f： 强制删除\n  - 参数： 文件或目录\n  - 语法： rm -rf [文件或目录] ==> 强制删除\n- rmdir\n  - 原意： remove empty directories\n  - 功能： 删除空目录\n  - 语法： rmdir [空目录]\n\n### 文件处理命令\n\n- touch\n  - 功能： 创建空文件\n  - 语法： touch [文件名]\n- cat\n  - 功能： 显示文件内容\n  - 选项： -n 显示行号\n  - 语法： cat [文件名]\n- tac\n\n  - 功能： 反向显示文件内容\n  - 选项： -n 显示行号\n  - 语法： tac [文件名]\n\n- more\n  - 功能： 分页显示文件内容\n  - 语法： more [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; （B => 上翻）\n- ln\n  - 原意： link\n  - 功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)\n  - 选项： -s： 创建软链接\n  - 语法： ln -s [原文件或目录][目标文件或目录] ==> 软链接; ln [原文件或目录][目标文件或目录] ==> 硬链接;\n- less\n  - 功能： 分页显示文件内容\n  - 语法： less [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; B => 向上翻页\n- head\n  - 功能： 显示文件前面几行\n  - 选项： -n： 指定行数\n  - 语法： head -n 10 [文件名]\n- tail\n  - 功能： 显示文件后面几行\n  - 选项： -n： 指定行数; -f： 动态显示文件末尾的内容\n  - 语法： tail -n 10 [文件名]\n\n### 文件搜索命令\n\n- find\n\n  - 功能： 文件搜索\n  - 语法： find [搜素范围][匹配条件] [搜素内容]\n  - 例： find /home -name log.md (搜素 log.md 文件)\n    > [ 匹配条件 ]\n    >\n    > - name： 名称搜素\n    > - size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)\n    >\n    > * +n(+204800) 大于 204800\n    > * -n\n    > * n 等于\n    >\n    > - type： 文件类型\n\n- grep\n\n  - 功能： 在文件中搜索字符串匹配的行并输出\n  - 选项： -i 不区分大小写; -v 排除指定字符串\n  - 语法： grep -iv [指定字符串][文件]\n\n- locate\n  - 功能： 在文件资料库中查找文件\n  - 语法： locate [文件名]\n- which\n  - 功能： 搜索命令所在目录及别名信息\n  - 语法： which [命令]\n- whereis\n  - 功能： 搜索命令所在目录以及帮助文档路径\n  - 语法： whereis [命令]\n\n### 帮助命令\n\n- man\n  - 功能： 获取帮助信息\n  - 语法： man [命令或帮助文件]\n- help\n  - 功能： 获取 shell 内置命令的帮助信息\n  - 语法： help [内置命令]\n\n### 权限管理命令\n\n- chmod\n  - 原意： change mode\n  - 功能： 改变文件或目录的权限\n  - 语法： chmod [ugoa+-=rwx][文件或目录]\n  - 例： chmod u-r [文件或目录] => 对文件的所属者去掉 r 权限\n  - 语法： chmod [mode = 777][文件或目录] => 给文件设置所有的用户拥有全部的权限\n  - 例： chmod 764 [文件或目录]\n  - 执行权限： 所有用户\n\n> **[ u，g，o，a 分别代表用户 ]**\n>\n> - u： User 所属者\n> - g： Group 用户组\n> - o： Other 其他用户\n> - a： all 所有人\n>\n> **[ r，w，x 分别代表权限 ]**\n>\n> - r： read 读权限\n>   - 用数字表示 4\n> - w： write 写权限\n>   - 用数字表示 2\n> - x： 执行权限\n>   - 用数字表示 1\n> - 每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)\n> - 例： rwxrw-r-- 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有>读的权限\n>   - 用数字表示： 764（4+2+1，4+2，4）\n\n- chown\n  - 原意： change file ownership\n  - 功能： 改变文件或目录的所属者\n  - 语法： chown [用户][文件/目录]\n  - 执行权限： root\n- umask\n  - 命令英文原意： the user file-creation mask\n  - 显示、设置文件的缺省权限(默认权限)\n  - 执行权限： 所有用户\n  - 语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限\n\n### 用户管理命令\n\n- useradd\n  - 功能： 添加新用户\n  - 执行权限： root\n- passwd\n  - 功能： 修改密码\n- who\n  - 功能： 查看登录用户信息\n- w\n  - 功能： 当前用户详细信息\n\n### 压缩解压命令\n\n- tar\n  - 功能： 打包文件或目录\n  - 说明： **结合 gzip 命令**\n  - 语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -zxf 文件名.tar.gz\n- zip\n  - 功能： 压缩文件或目录\n  - 选项： -r 压缩目录\n  - 语法： zip [新的文件名][目标文件或目录]\n  - 解压： unzip [压缩文件名.zip]\n- bzip2\n  - 功能： 打包文件()\n  - 选项： -k 保留原文件\n  - 说明： **结合 tar 命令使用**\n  - 语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -xjf 文件名.tar.bz2\n\n### 网络命令\n\n- ping\n  - 功能： 测试网络连通性\n  - 语法： ping [ip 地址]\n- last\n  - 功能： 列出目前和过去登入系统的用户信息\n  - 语法： last\n- traceroute\n  - 功能： 显示数据包到主机间的路径\n  - 语法： traceroute [ip 地址 或 域名]\n- netstat\n  - 功能： 显示网络相关信息\n  - 语法： netstat\n- steup\n  - 功能： 配置网络\n  - 语法： steup\n- write\n  - 功能： 给用户发信息\n  - 语法： write [用户名]\n- wall\n  - 功能： 发广播信息\n  - 语法： wall\n- mail\n  - 功能： 发送电子邮件\n  - 语法： mail [用户名]\n\n### 关机重启命令\n\n- shutdown [选项] now(时间)\n  - -c 取消\n  - -h 关机\n  - -r 重启\n- 其他关机\n  - halt\n  - poweroff\n  - init 0\n- 其他重启\n  - reboot\n  - init 6\n- 扩展\n\n* 0 --> 关机\n* 1 --> 单用户\n* 2 --> 不完全多用户，不含 nfs 服务\n* 3 --> 完全多用户\n* 4 --> 未分配\n* 5 --> 图形界面\n* 6 --> 重启\n","slug":"操作系统/Linux/Linux常用命令","published":1,"updated":"2022-02-04T09:45:53.717Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbb000mzc1b4mu33cwx","content":"<p><strong>[ 命令格式 ]</strong></p>\n<ul>\n<li>命令 [ 选项 ][ 参数 ]</li>\n<li>例： ls -la /home</li>\n</ul>\n<h3 id=\"目录处理命令\"><a href=\"#目录处理命令\" class=\"headerlink\" title=\"目录处理命令\"></a>目录处理命令</h3><ul>\n<li><p>ls</p>\n<ul>\n<li>原意： list</li>\n<li>功能： 显示目录文件</li>\n<li>选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)</li>\n<li>参数： 路径（非必填）</li>\n<li>语法： ls -la /home</li>\n</ul>\n</li>\n<li><p>cd</p>\n<ul>\n<li>原意： change directory</li>\n<li>功能： 切换目录</li>\n<li>参数： 路径</li>\n<li>语法： cd /home (绝对路径) 或者 cd admin (相对路径)</li>\n</ul>\n</li>\n<li><p>pwd</p>\n<ul>\n<li>原意： print working directory</li>\n<li>功能： 显示当前目录</li>\n<li>语法： pwd</li>\n</ul>\n</li>\n<li><p>mkdir</p>\n<ul>\n<li>原意： make directories</li>\n<li>功能： 创建空目录</li>\n<li>选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)</li>\n<li>参数： 目录名</li>\n<li>语法： mkdir -p [目录名]</li>\n</ul>\n</li>\n<li><p>cp</p>\n<ul>\n<li>原意： copy</li>\n<li>功能： 复制文件或目录</li>\n<li>选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)</li>\n<li>参数： [原文件或目录][目标目录]</li>\n<li>语法： cp -rp [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li><p>mv</p>\n<ul>\n<li>原意： move</li>\n<li>功能： 剪切文件或者改文件名</li>\n<li>参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]</li>\n<li>语法： mv [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li><p>rm</p>\n<ul>\n<li>原意： remove</li>\n<li>功能： 删除文件或目录</li>\n<li>选项： -r： 删除目录，-f： 强制删除</li>\n<li>参数： 文件或目录</li>\n<li>语法： rm -rf [文件或目录] ==&gt; 强制删除</li>\n</ul>\n</li>\n<li><p>rmdir</p>\n<ul>\n<li>原意： remove empty directories</li>\n<li>功能： 删除空目录</li>\n<li>语法： rmdir [空目录]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件处理命令\"><a href=\"#文件处理命令\" class=\"headerlink\" title=\"文件处理命令\"></a>文件处理命令</h3><ul>\n<li><p>touch</p>\n<ul>\n<li>功能： 创建空文件</li>\n<li>语法： touch [文件名]</li>\n</ul>\n</li>\n<li><p>cat</p>\n<ul>\n<li>功能： 显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： cat [文件名]</li>\n</ul>\n</li>\n<li><p>tac</p>\n<ul>\n<li>功能： 反向显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： tac [文件名]</li>\n</ul>\n</li>\n<li><p>more</p>\n<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： more [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; （B =&gt; 上翻）</li>\n</ul>\n</li>\n<li><p>ln</p>\n<ul>\n<li>原意： link</li>\n<li>功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)</li>\n<li>选项： -s： 创建软链接</li>\n<li>语法： ln -s [原文件或目录][目标文件或目录] ==&gt; 软链接; ln [原文件或目录][目标文件或目录] ==&gt; 硬链接;</li>\n</ul>\n</li>\n<li><p>less</p>\n<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： less [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; B =&gt; 向上翻页</li>\n</ul>\n</li>\n<li><p>head</p>\n<ul>\n<li>功能： 显示文件前面几行</li>\n<li>选项： -n： 指定行数</li>\n<li>语法： head -n 10 [文件名]</li>\n</ul>\n</li>\n<li><p>tail</p>\n<ul>\n<li>功能： 显示文件后面几行</li>\n<li>选项： -n： 指定行数; -f： 动态显示文件末尾的内容</li>\n<li>语法： tail -n 10 [文件名]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件搜索命令\"><a href=\"#文件搜索命令\" class=\"headerlink\" title=\"文件搜索命令\"></a>文件搜索命令</h3><ul>\n<li><p>find</p>\n<ul>\n<li>功能： 文件搜索</li>\n<li>语法： find [搜素范围][匹配条件] [搜素内容]</li>\n<li>例： find /home -name log.md (搜素 log.md 文件)<blockquote>\n<p>[ 匹配条件 ]</p>\n<ul>\n<li>name： 名称搜素</li>\n<li>size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)</li>\n</ul>\n<ul>\n<li>+n(+204800) 大于 204800</li>\n<li>-n</li>\n<li>n 等于</li>\n</ul>\n<ul>\n<li>type： 文件类型</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>grep</p>\n<ul>\n<li>功能： 在文件中搜索字符串匹配的行并输出</li>\n<li>选项： -i 不区分大小写; -v 排除指定字符串</li>\n<li>语法： grep -iv [指定字符串][文件]</li>\n</ul>\n</li>\n<li><p>locate</p>\n<ul>\n<li>功能： 在文件资料库中查找文件</li>\n<li>语法： locate [文件名]</li>\n</ul>\n</li>\n<li><p>which</p>\n<ul>\n<li>功能： 搜索命令所在目录及别名信息</li>\n<li>语法： which [命令]</li>\n</ul>\n</li>\n<li><p>whereis</p>\n<ul>\n<li>功能： 搜索命令所在目录以及帮助文档路径</li>\n<li>语法： whereis [命令]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><ul>\n<li>man<ul>\n<li>功能： 获取帮助信息</li>\n<li>语法： man [命令或帮助文件]</li>\n</ul>\n</li>\n<li>help<ul>\n<li>功能： 获取 shell 内置命令的帮助信息</li>\n<li>语法： help [内置命令]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"权限管理命令\"><a href=\"#权限管理命令\" class=\"headerlink\" title=\"权限管理命令\"></a>权限管理命令</h3><ul>\n<li>chmod<ul>\n<li>原意： change mode</li>\n<li>功能： 改变文件或目录的权限</li>\n<li>语法： chmod [ugoa+-=rwx][文件或目录]</li>\n<li>例： chmod u-r [文件或目录] =&gt; 对文件的所属者去掉 r 权限</li>\n<li>语法： chmod [mode = 777][文件或目录] =&gt; 给文件设置所有的用户拥有全部的权限</li>\n<li>例： chmod 764 [文件或目录]</li>\n<li>执行权限： 所有用户</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>[ u，g，o，a 分别代表用户 ]</strong></p>\n<ul>\n<li>u： User 所属者</li>\n<li>g： Group 用户组</li>\n<li>o： Other 其他用户</li>\n<li>a： all 所有人</li>\n</ul>\n<p><strong>[ r，w，x 分别代表权限 ]</strong></p>\n<ul>\n<li>r： read 读权限<ul>\n<li>用数字表示 4</li>\n</ul>\n</li>\n<li>w： write 写权限<ul>\n<li>用数字表示 2</li>\n</ul>\n</li>\n<li>x： 执行权限<ul>\n<li>用数字表示 1</li>\n</ul>\n</li>\n<li>每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)</li>\n<li>例： rwxrw-r– 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有&gt;读的权限<ul>\n<li>用数字表示： 764（4+2+1，4+2，4）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>chown<ul>\n<li>原意： change file ownership</li>\n<li>功能： 改变文件或目录的所属者</li>\n<li>语法： chown [用户][文件/目录]</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>umask<ul>\n<li>命令英文原意： the user file-creation mask</li>\n<li>显示、设置文件的缺省权限(默认权限)</li>\n<li>执行权限： 所有用户</li>\n<li>语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"用户管理命令\"><a href=\"#用户管理命令\" class=\"headerlink\" title=\"用户管理命令\"></a>用户管理命令</h3><ul>\n<li>useradd<ul>\n<li>功能： 添加新用户</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>passwd<ul>\n<li>功能： 修改密码</li>\n</ul>\n</li>\n<li>who<ul>\n<li>功能： 查看登录用户信息</li>\n</ul>\n</li>\n<li>w<ul>\n<li>功能： 当前用户详细信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"压缩解压命令\"><a href=\"#压缩解压命令\" class=\"headerlink\" title=\"压缩解压命令\"></a>压缩解压命令</h3><ul>\n<li>tar<ul>\n<li>功能： 打包文件或目录</li>\n<li>说明： <strong>结合 gzip 命令</strong></li>\n<li>语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -zxf 文件名.tar.gz</li>\n</ul>\n</li>\n<li>zip<ul>\n<li>功能： 压缩文件或目录</li>\n<li>选项： -r 压缩目录</li>\n<li>语法： zip [新的文件名][目标文件或目录]</li>\n<li>解压： unzip [压缩文件名.zip]</li>\n</ul>\n</li>\n<li>bzip2<ul>\n<li>功能： 打包文件()</li>\n<li>选项： -k 保留原文件</li>\n<li>说明： <strong>结合 tar 命令使用</strong></li>\n<li>语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -xjf 文件名.tar.bz2</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"网络命令\"><a href=\"#网络命令\" class=\"headerlink\" title=\"网络命令\"></a>网络命令</h3><ul>\n<li>ping<ul>\n<li>功能： 测试网络连通性</li>\n<li>语法： ping [ip 地址]</li>\n</ul>\n</li>\n<li>last<ul>\n<li>功能： 列出目前和过去登入系统的用户信息</li>\n<li>语法： last</li>\n</ul>\n</li>\n<li>traceroute<ul>\n<li>功能： 显示数据包到主机间的路径</li>\n<li>语法： traceroute [ip 地址 或 域名]</li>\n</ul>\n</li>\n<li>netstat<ul>\n<li>功能： 显示网络相关信息</li>\n<li>语法： netstat</li>\n</ul>\n</li>\n<li>steup<ul>\n<li>功能： 配置网络</li>\n<li>语法： steup</li>\n</ul>\n</li>\n<li>write<ul>\n<li>功能： 给用户发信息</li>\n<li>语法： write [用户名]</li>\n</ul>\n</li>\n<li>wall<ul>\n<li>功能： 发广播信息</li>\n<li>语法： wall</li>\n</ul>\n</li>\n<li>mail<ul>\n<li>功能： 发送电子邮件</li>\n<li>语法： mail [用户名]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关机重启命令\"><a href=\"#关机重启命令\" class=\"headerlink\" title=\"关机重启命令\"></a>关机重启命令</h3><ul>\n<li>shutdown [选项] now(时间)<ul>\n<li>-c 取消</li>\n<li>-h 关机</li>\n<li>-r 重启</li>\n</ul>\n</li>\n<li>其他关机<ul>\n<li>halt</li>\n<li>poweroff</li>\n<li>init 0</li>\n</ul>\n</li>\n<li>其他重启<ul>\n<li>reboot</li>\n<li>init 6</li>\n</ul>\n</li>\n<li>扩展</li>\n</ul>\n<ul>\n<li>0 –&gt; 关机</li>\n<li>1 –&gt; 单用户</li>\n<li>2 –&gt; 不完全多用户，不含 nfs 服务</li>\n<li>3 –&gt; 完全多用户</li>\n<li>4 –&gt; 未分配</li>\n<li>5 –&gt; 图形界面</li>\n<li>6 –&gt; 重启</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><strong>[ 命令格式 ]</strong></p>\n<ul>\n<li>命令 [ 选项 ][ 参数 ]</li>\n<li>例： ls -la /home</li>\n</ul>\n<h3 id=\"目录处理命令\"><a href=\"#目录处理命令\" class=\"headerlink\" title=\"目录处理命令\"></a>目录处理命令</h3><ul>\n<li><p>ls</p>\n<ul>\n<li>原意： list</li>\n<li>功能： 显示目录文件</li>\n<li>选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)</li>\n<li>参数： 路径（非必填）</li>\n<li>语法： ls -la /home</li>\n</ul>\n</li>\n<li><p>cd</p>\n<ul>\n<li>原意： change directory</li>\n<li>功能： 切换目录</li>\n<li>参数： 路径</li>\n<li>语法： cd /home (绝对路径) 或者 cd admin (相对路径)</li>\n</ul>\n</li>\n<li><p>pwd</p>\n<ul>\n<li>原意： print working directory</li>\n<li>功能： 显示当前目录</li>\n<li>语法： pwd</li>\n</ul>\n</li>\n<li><p>mkdir</p>\n<ul>\n<li>原意： make directories</li>\n<li>功能： 创建空目录</li>\n<li>选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)</li>\n<li>参数： 目录名</li>\n<li>语法： mkdir -p [目录名]</li>\n</ul>\n</li>\n<li><p>cp</p>\n<ul>\n<li>原意： copy</li>\n<li>功能： 复制文件或目录</li>\n<li>选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)</li>\n<li>参数： [原文件或目录][目标目录]</li>\n<li>语法： cp -rp [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li><p>mv</p>\n<ul>\n<li>原意： move</li>\n<li>功能： 剪切文件或者改文件名</li>\n<li>参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]</li>\n<li>语法： mv [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li><p>rm</p>\n<ul>\n<li>原意： remove</li>\n<li>功能： 删除文件或目录</li>\n<li>选项： -r： 删除目录，-f： 强制删除</li>\n<li>参数： 文件或目录</li>\n<li>语法： rm -rf [文件或目录] ==&gt; 强制删除</li>\n</ul>\n</li>\n<li><p>rmdir</p>\n<ul>\n<li>原意： remove empty directories</li>\n<li>功能： 删除空目录</li>\n<li>语法： rmdir [空目录]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件处理命令\"><a href=\"#文件处理命令\" class=\"headerlink\" title=\"文件处理命令\"></a>文件处理命令</h3><ul>\n<li><p>touch</p>\n<ul>\n<li>功能： 创建空文件</li>\n<li>语法： touch [文件名]</li>\n</ul>\n</li>\n<li><p>cat</p>\n<ul>\n<li>功能： 显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： cat [文件名]</li>\n</ul>\n</li>\n<li><p>tac</p>\n<ul>\n<li>功能： 反向显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： tac [文件名]</li>\n</ul>\n</li>\n<li><p>more</p>\n<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： more [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; （B =&gt; 上翻）</li>\n</ul>\n</li>\n<li><p>ln</p>\n<ul>\n<li>原意： link</li>\n<li>功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)</li>\n<li>选项： -s： 创建软链接</li>\n<li>语法： ln -s [原文件或目录][目标文件或目录] ==&gt; 软链接; ln [原文件或目录][目标文件或目录] ==&gt; 硬链接;</li>\n</ul>\n</li>\n<li><p>less</p>\n<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： less [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; B =&gt; 向上翻页</li>\n</ul>\n</li>\n<li><p>head</p>\n<ul>\n<li>功能： 显示文件前面几行</li>\n<li>选项： -n： 指定行数</li>\n<li>语法： head -n 10 [文件名]</li>\n</ul>\n</li>\n<li><p>tail</p>\n<ul>\n<li>功能： 显示文件后面几行</li>\n<li>选项： -n： 指定行数; -f： 动态显示文件末尾的内容</li>\n<li>语法： tail -n 10 [文件名]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件搜索命令\"><a href=\"#文件搜索命令\" class=\"headerlink\" title=\"文件搜索命令\"></a>文件搜索命令</h3><ul>\n<li><p>find</p>\n<ul>\n<li>功能： 文件搜索</li>\n<li>语法： find [搜素范围][匹配条件] [搜素内容]</li>\n<li>例： find /home -name log.md (搜素 log.md 文件)<blockquote>\n<p>[ 匹配条件 ]</p>\n<ul>\n<li>name： 名称搜素</li>\n<li>size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)</li>\n</ul>\n<ul>\n<li>+n(+204800) 大于 204800</li>\n<li>-n</li>\n<li>n 等于</li>\n</ul>\n<ul>\n<li>type： 文件类型</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>grep</p>\n<ul>\n<li>功能： 在文件中搜索字符串匹配的行并输出</li>\n<li>选项： -i 不区分大小写; -v 排除指定字符串</li>\n<li>语法： grep -iv [指定字符串][文件]</li>\n</ul>\n</li>\n<li><p>locate</p>\n<ul>\n<li>功能： 在文件资料库中查找文件</li>\n<li>语法： locate [文件名]</li>\n</ul>\n</li>\n<li><p>which</p>\n<ul>\n<li>功能： 搜索命令所在目录及别名信息</li>\n<li>语法： which [命令]</li>\n</ul>\n</li>\n<li><p>whereis</p>\n<ul>\n<li>功能： 搜索命令所在目录以及帮助文档路径</li>\n<li>语法： whereis [命令]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><ul>\n<li>man<ul>\n<li>功能： 获取帮助信息</li>\n<li>语法： man [命令或帮助文件]</li>\n</ul>\n</li>\n<li>help<ul>\n<li>功能： 获取 shell 内置命令的帮助信息</li>\n<li>语法： help [内置命令]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"权限管理命令\"><a href=\"#权限管理命令\" class=\"headerlink\" title=\"权限管理命令\"></a>权限管理命令</h3><ul>\n<li>chmod<ul>\n<li>原意： change mode</li>\n<li>功能： 改变文件或目录的权限</li>\n<li>语法： chmod [ugoa+-=rwx][文件或目录]</li>\n<li>例： chmod u-r [文件或目录] =&gt; 对文件的所属者去掉 r 权限</li>\n<li>语法： chmod [mode = 777][文件或目录] =&gt; 给文件设置所有的用户拥有全部的权限</li>\n<li>例： chmod 764 [文件或目录]</li>\n<li>执行权限： 所有用户</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>[ u，g，o，a 分别代表用户 ]</strong></p>\n<ul>\n<li>u： User 所属者</li>\n<li>g： Group 用户组</li>\n<li>o： Other 其他用户</li>\n<li>a： all 所有人</li>\n</ul>\n<p><strong>[ r，w，x 分别代表权限 ]</strong></p>\n<ul>\n<li>r： read 读权限<ul>\n<li>用数字表示 4</li>\n</ul>\n</li>\n<li>w： write 写权限<ul>\n<li>用数字表示 2</li>\n</ul>\n</li>\n<li>x： 执行权限<ul>\n<li>用数字表示 1</li>\n</ul>\n</li>\n<li>每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)</li>\n<li>例： rwxrw-r– 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有&gt;读的权限<ul>\n<li>用数字表示： 764（4+2+1，4+2，4）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>chown<ul>\n<li>原意： change file ownership</li>\n<li>功能： 改变文件或目录的所属者</li>\n<li>语法： chown [用户][文件/目录]</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>umask<ul>\n<li>命令英文原意： the user file-creation mask</li>\n<li>显示、设置文件的缺省权限(默认权限)</li>\n<li>执行权限： 所有用户</li>\n<li>语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"用户管理命令\"><a href=\"#用户管理命令\" class=\"headerlink\" title=\"用户管理命令\"></a>用户管理命令</h3><ul>\n<li>useradd<ul>\n<li>功能： 添加新用户</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>passwd<ul>\n<li>功能： 修改密码</li>\n</ul>\n</li>\n<li>who<ul>\n<li>功能： 查看登录用户信息</li>\n</ul>\n</li>\n<li>w<ul>\n<li>功能： 当前用户详细信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"压缩解压命令\"><a href=\"#压缩解压命令\" class=\"headerlink\" title=\"压缩解压命令\"></a>压缩解压命令</h3><ul>\n<li>tar<ul>\n<li>功能： 打包文件或目录</li>\n<li>说明： <strong>结合 gzip 命令</strong></li>\n<li>语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -zxf 文件名.tar.gz</li>\n</ul>\n</li>\n<li>zip<ul>\n<li>功能： 压缩文件或目录</li>\n<li>选项： -r 压缩目录</li>\n<li>语法： zip [新的文件名][目标文件或目录]</li>\n<li>解压： unzip [压缩文件名.zip]</li>\n</ul>\n</li>\n<li>bzip2<ul>\n<li>功能： 打包文件()</li>\n<li>选项： -k 保留原文件</li>\n<li>说明： <strong>结合 tar 命令使用</strong></li>\n<li>语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -xjf 文件名.tar.bz2</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"网络命令\"><a href=\"#网络命令\" class=\"headerlink\" title=\"网络命令\"></a>网络命令</h3><ul>\n<li>ping<ul>\n<li>功能： 测试网络连通性</li>\n<li>语法： ping [ip 地址]</li>\n</ul>\n</li>\n<li>last<ul>\n<li>功能： 列出目前和过去登入系统的用户信息</li>\n<li>语法： last</li>\n</ul>\n</li>\n<li>traceroute<ul>\n<li>功能： 显示数据包到主机间的路径</li>\n<li>语法： traceroute [ip 地址 或 域名]</li>\n</ul>\n</li>\n<li>netstat<ul>\n<li>功能： 显示网络相关信息</li>\n<li>语法： netstat</li>\n</ul>\n</li>\n<li>steup<ul>\n<li>功能： 配置网络</li>\n<li>语法： steup</li>\n</ul>\n</li>\n<li>write<ul>\n<li>功能： 给用户发信息</li>\n<li>语法： write [用户名]</li>\n</ul>\n</li>\n<li>wall<ul>\n<li>功能： 发广播信息</li>\n<li>语法： wall</li>\n</ul>\n</li>\n<li>mail<ul>\n<li>功能： 发送电子邮件</li>\n<li>语法： mail [用户名]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关机重启命令\"><a href=\"#关机重启命令\" class=\"headerlink\" title=\"关机重启命令\"></a>关机重启命令</h3><ul>\n<li>shutdown [选项] now(时间)<ul>\n<li>-c 取消</li>\n<li>-h 关机</li>\n<li>-r 重启</li>\n</ul>\n</li>\n<li>其他关机<ul>\n<li>halt</li>\n<li>poweroff</li>\n<li>init 0</li>\n</ul>\n</li>\n<li>其他重启<ul>\n<li>reboot</li>\n<li>init 6</li>\n</ul>\n</li>\n<li>扩展</li>\n</ul>\n<ul>\n<li>0 –&gt; 关机</li>\n<li>1 –&gt; 单用户</li>\n<li>2 –&gt; 不完全多用户，不含 nfs 服务</li>\n<li>3 –&gt; 完全多用户</li>\n<li>4 –&gt; 未分配</li>\n<li>5 –&gt; 图形界面</li>\n<li>6 –&gt; 重启</li>\n</ul>\n"},{"title":"linux 环境搭建","comments":1,"abbrlink":2237793324,"date":"2021-11-01T16:00:00.000Z","_content":"\n\n## 搭建测试环境\n\n### linux 安装 java\n\n- 查看系统是否安装过 java\n\n```\nyum search java | grep jdk\n```\n\n- 如果有旧版本的 java，可以用如下方法卸载 java\n\n```\nyum ‐y remove java‐1.8.0‐openjdk*\n```\n\n- 查看 java 软件包列表\n\n```\nyum ‐y list java*\n```\n\n- 下载安装 java1.8 的所有软件包，中途需要输入 y 来确认下载\n\n```\nyum install java‐1.8.0‐openjdk*\n```\n\n- 安装成功，输入如下命令检查是否安装成功，如果返回正确的版本号则表示安装成功。\n\n```\njava ‐version\n```\n\n- java 安装目录\n\n```\n/usr/lib/jvm/java‐1.8.0‐openjdk\n```\n\n### linux 安装 MySQL\n\n- 使用 wget 获取 rpm 包\n\n```\nwget http://repo.mysql.com//mysql57‐community‐release‐el7‐8.noarch.rpm\n```\n\n- 安装 mysql community‐release\n\n```\n- yum ‐y install mysql57‐community‐release‐el7‐8.noarch.rpm\n```\n\n- 安装 mysql 服务器\n\n```\nyum ‐y install mysql‐community‐server.x86_64\n```\n\n- 启动 MySQL 服务器\n\n```\nsystemctl start mysqld.service\n```\n\n- 检查 MySQL 服务器的状态\n\n```\nsystemctl status mysqld.service\n```\n\n- 查看初始化密码\n\n```\ngrep 'temporary password' /var/log/mysqld.log\n```\n\n- 使用初始化密码进入数据库\n\n```\nmysql ‐uroot ‐p\n```\n\n- 修改密码\n\n```\nALTER USER 'root'@'localhost' IDENTIFIED BY '简单密码';\n```\n\n- 修改密码强度\n\n```\nset global validate_password_length=4;\n\nset global validate_password_policy=0;\n```\n\n- 创建一个可以远程的账号\n\n```\nCREATE USER 'root'@'%' IDENTIFIED BY 'root';\n```\n\n- 给远程的账号赋予权限\n\n```\nGRANT ALL ON _._ TO 'root'@'%';\n```\n\n- 如果还连不上，请关闭防火墙\n\n```\n查看防火墙状态： systemctl status firewalld.service\n\n执行关闭命令： systemctl stop firewalld.service\n\n再次执行查看防火墙命令：systemctl status firewalld.service\n\n执行开机禁用防火墙自启命令  ： systemctl disable firewalld.service\n\n启动：systemctl start firewalld.service\n\n防火墙随系统开启启动  ： systemctl enable firewalld.service\n\n```\n\n- MySQL 8.0 连不上\n\n```\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\n```\n\n- 详细参考: https://www.cnblogs.com/zhanyd/p/10001138.html\n\n### linux 安装 redis\n\n- 详细参考: https://www.cnblogs.com/zuidongfeng/p/8032505.html\n- 启动 redis: (启动目录：/root/redis-4.0.6/src)\n  - ./redis-server /root/redis-4.0.6/redis.conf()\n- 查看进程： ps -ef | grep redis\n\n### linux 启动 jar 包\n\n- 创建目录：/home/webapps/testsell (目录可以随便)\n- 下载 rz\n  - yum install lrzsz\n  - rz 上传文件\n  - sz 下载文件\n- 启动 jar 包\n  - java -jar sell.jar\n  - 后台启动：nohup java -jar sell.jar\n  - 指定端口号启动:nohup java -jar sell.jar --server.port=8080\n\n## Jenkins 自动化部署环境\n\n- 详细参考：https://note.youdao.com/ynoteshare1/index.html?id=01a3f11b1fd24459fbba82a0509f5d4e&type=note\n\n","source":"_posts/操作系统/Linux/测试环境搭建.md","raw":"---\ntitle: linux 环境搭建\ntags:\n  - linux\n  - 环境搭建\ncategories:\n  - - 操作系统\n    - Linux\ncomments: true\nabbrlink: 2237793324\ndate: 2021-11-02 00:00:00\n---\n\n\n## 搭建测试环境\n\n### linux 安装 java\n\n- 查看系统是否安装过 java\n\n```\nyum search java | grep jdk\n```\n\n- 如果有旧版本的 java，可以用如下方法卸载 java\n\n```\nyum ‐y remove java‐1.8.0‐openjdk*\n```\n\n- 查看 java 软件包列表\n\n```\nyum ‐y list java*\n```\n\n- 下载安装 java1.8 的所有软件包，中途需要输入 y 来确认下载\n\n```\nyum install java‐1.8.0‐openjdk*\n```\n\n- 安装成功，输入如下命令检查是否安装成功，如果返回正确的版本号则表示安装成功。\n\n```\njava ‐version\n```\n\n- java 安装目录\n\n```\n/usr/lib/jvm/java‐1.8.0‐openjdk\n```\n\n### linux 安装 MySQL\n\n- 使用 wget 获取 rpm 包\n\n```\nwget http://repo.mysql.com//mysql57‐community‐release‐el7‐8.noarch.rpm\n```\n\n- 安装 mysql community‐release\n\n```\n- yum ‐y install mysql57‐community‐release‐el7‐8.noarch.rpm\n```\n\n- 安装 mysql 服务器\n\n```\nyum ‐y install mysql‐community‐server.x86_64\n```\n\n- 启动 MySQL 服务器\n\n```\nsystemctl start mysqld.service\n```\n\n- 检查 MySQL 服务器的状态\n\n```\nsystemctl status mysqld.service\n```\n\n- 查看初始化密码\n\n```\ngrep 'temporary password' /var/log/mysqld.log\n```\n\n- 使用初始化密码进入数据库\n\n```\nmysql ‐uroot ‐p\n```\n\n- 修改密码\n\n```\nALTER USER 'root'@'localhost' IDENTIFIED BY '简单密码';\n```\n\n- 修改密码强度\n\n```\nset global validate_password_length=4;\n\nset global validate_password_policy=0;\n```\n\n- 创建一个可以远程的账号\n\n```\nCREATE USER 'root'@'%' IDENTIFIED BY 'root';\n```\n\n- 给远程的账号赋予权限\n\n```\nGRANT ALL ON _._ TO 'root'@'%';\n```\n\n- 如果还连不上，请关闭防火墙\n\n```\n查看防火墙状态： systemctl status firewalld.service\n\n执行关闭命令： systemctl stop firewalld.service\n\n再次执行查看防火墙命令：systemctl status firewalld.service\n\n执行开机禁用防火墙自启命令  ： systemctl disable firewalld.service\n\n启动：systemctl start firewalld.service\n\n防火墙随系统开启启动  ： systemctl enable firewalld.service\n\n```\n\n- MySQL 8.0 连不上\n\n```\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\n```\n\n- 详细参考: https://www.cnblogs.com/zhanyd/p/10001138.html\n\n### linux 安装 redis\n\n- 详细参考: https://www.cnblogs.com/zuidongfeng/p/8032505.html\n- 启动 redis: (启动目录：/root/redis-4.0.6/src)\n  - ./redis-server /root/redis-4.0.6/redis.conf()\n- 查看进程： ps -ef | grep redis\n\n### linux 启动 jar 包\n\n- 创建目录：/home/webapps/testsell (目录可以随便)\n- 下载 rz\n  - yum install lrzsz\n  - rz 上传文件\n  - sz 下载文件\n- 启动 jar 包\n  - java -jar sell.jar\n  - 后台启动：nohup java -jar sell.jar\n  - 指定端口号启动:nohup java -jar sell.jar --server.port=8080\n\n## Jenkins 自动化部署环境\n\n- 详细参考：https://note.youdao.com/ynoteshare1/index.html?id=01a3f11b1fd24459fbba82a0509f5d4e&type=note\n\n","slug":"操作系统/Linux/测试环境搭建","published":1,"updated":"2022-02-04T09:45:53.718Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbc000qzc1bb49b9bnc","content":"<h2 id=\"搭建测试环境\"><a href=\"#搭建测试环境\" class=\"headerlink\" title=\"搭建测试环境\"></a>搭建测试环境</h2><h3 id=\"linux-安装-java\"><a href=\"#linux-安装-java\" class=\"headerlink\" title=\"linux 安装 java\"></a>linux 安装 java</h3><ul>\n<li>查看系统是否安装过 java</li>\n</ul>\n<pre><code>yum search java | grep jdk\n</code></pre>\n<ul>\n<li>如果有旧版本的 java，可以用如下方法卸载 java</li>\n</ul>\n<pre><code>yum ‐y remove java‐1.8.0‐openjdk*\n</code></pre>\n<ul>\n<li>查看 java 软件包列表</li>\n</ul>\n<pre><code>yum ‐y list java*\n</code></pre>\n<ul>\n<li>下载安装 java1.8 的所有软件包，中途需要输入 y 来确认下载</li>\n</ul>\n<pre><code>yum install java‐1.8.0‐openjdk*\n</code></pre>\n<ul>\n<li>安装成功，输入如下命令检查是否安装成功，如果返回正确的版本号则表示安装成功。</li>\n</ul>\n<pre><code>java ‐version\n</code></pre>\n<ul>\n<li>java 安装目录</li>\n</ul>\n<pre><code>/usr/lib/jvm/java‐1.8.0‐openjdk\n</code></pre>\n<h3 id=\"linux-安装-MySQL\"><a href=\"#linux-安装-MySQL\" class=\"headerlink\" title=\"linux 安装 MySQL\"></a>linux 安装 MySQL</h3><ul>\n<li>使用 wget 获取 rpm 包</li>\n</ul>\n<pre><code>wget http://repo.mysql.com//mysql57‐community‐release‐el7‐8.noarch.rpm\n</code></pre>\n<ul>\n<li>安装 mysql community‐release</li>\n</ul>\n<pre><code>- yum ‐y install mysql57‐community‐release‐el7‐8.noarch.rpm\n</code></pre>\n<ul>\n<li>安装 mysql 服务器</li>\n</ul>\n<pre><code>yum ‐y install mysql‐community‐server.x86_64\n</code></pre>\n<ul>\n<li>启动 MySQL 服务器</li>\n</ul>\n<pre><code>systemctl start mysqld.service\n</code></pre>\n<ul>\n<li>检查 MySQL 服务器的状态</li>\n</ul>\n<pre><code>systemctl status mysqld.service\n</code></pre>\n<ul>\n<li>查看初始化密码</li>\n</ul>\n<pre><code>grep &#39;temporary password&#39; /var/log/mysqld.log\n</code></pre>\n<ul>\n<li>使用初始化密码进入数据库</li>\n</ul>\n<pre><code>mysql ‐uroot ‐p\n</code></pre>\n<ul>\n<li>修改密码</li>\n</ul>\n<pre><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;简单密码&#39;;\n</code></pre>\n<ul>\n<li>修改密码强度</li>\n</ul>\n<pre><code>set global validate_password_length=4;\n\nset global validate_password_policy=0;\n</code></pre>\n<ul>\n<li>创建一个可以远程的账号</li>\n</ul>\n<pre><code>CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39;;\n</code></pre>\n<ul>\n<li>给远程的账号赋予权限</li>\n</ul>\n<pre><code>GRANT ALL ON _._ TO &#39;root&#39;@&#39;%&#39;;\n</code></pre>\n<ul>\n<li>如果还连不上，请关闭防火墙</li>\n</ul>\n<pre><code>查看防火墙状态： systemctl status firewalld.service\n\n执行关闭命令： systemctl stop firewalld.service\n\n再次执行查看防火墙命令：systemctl status firewalld.service\n\n执行开机禁用防火墙自启命令  ： systemctl disable firewalld.service\n\n启动：systemctl start firewalld.service\n\n防火墙随系统开启启动  ： systemctl enable firewalld.service\n</code></pre>\n<ul>\n<li>MySQL 8.0 连不上</li>\n</ul>\n<pre><code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;\n</code></pre>\n<ul>\n<li>详细参考: <a href=\"https://www.cnblogs.com/zhanyd/p/10001138.html\" rel=\"external nofollow noreferrer\">https://www.cnblogs.com/zhanyd/p/10001138.html</a></li>\n</ul>\n<h3 id=\"linux-安装-redis\"><a href=\"#linux-安装-redis\" class=\"headerlink\" title=\"linux 安装 redis\"></a>linux 安装 redis</h3><ul>\n<li>详细参考: <a href=\"https://www.cnblogs.com/zuidongfeng/p/8032505.html\" rel=\"external nofollow noreferrer\">https://www.cnblogs.com/zuidongfeng/p/8032505.html</a></li>\n<li>启动 redis: (启动目录：/root/redis-4.0.6/src)<ul>\n<li>./redis-server /root/redis-4.0.6/redis.conf()</li>\n</ul>\n</li>\n<li>查看进程： ps -ef | grep redis</li>\n</ul>\n<h3 id=\"linux-启动-jar-包\"><a href=\"#linux-启动-jar-包\" class=\"headerlink\" title=\"linux 启动 jar 包\"></a>linux 启动 jar 包</h3><ul>\n<li>创建目录：/home/webapps/testsell (目录可以随便)</li>\n<li>下载 rz<ul>\n<li>yum install lrzsz</li>\n<li>rz 上传文件</li>\n<li>sz 下载文件</li>\n</ul>\n</li>\n<li>启动 jar 包<ul>\n<li>java -jar sell.jar</li>\n<li>后台启动：nohup java -jar sell.jar</li>\n<li>指定端口号启动:nohup java -jar sell.jar –server.port=8080</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Jenkins-自动化部署环境\"><a href=\"#Jenkins-自动化部署环境\" class=\"headerlink\" title=\"Jenkins 自动化部署环境\"></a>Jenkins 自动化部署环境</h2><ul>\n<li>详细参考：<a href=\"https://note.youdao.com/ynoteshare1/index.html?id=01a3f11b1fd24459fbba82a0509f5d4e&amp;type=note\" rel=\"external nofollow noreferrer\">https://note.youdao.com/ynoteshare1/index.html?id=01a3f11b1fd24459fbba82a0509f5d4e&amp;type=note</a></li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"搭建测试环境\"><a href=\"#搭建测试环境\" class=\"headerlink\" title=\"搭建测试环境\"></a>搭建测试环境</h2><h3 id=\"linux-安装-java\"><a href=\"#linux-安装-java\" class=\"headerlink\" title=\"linux 安装 java\"></a>linux 安装 java</h3><ul>\n<li>查看系统是否安装过 java</li>\n</ul>\n<pre><code>yum search java | grep jdk\n</code></pre>\n<ul>\n<li>如果有旧版本的 java，可以用如下方法卸载 java</li>\n</ul>\n<pre><code>yum ‐y remove java‐1.8.0‐openjdk*\n</code></pre>\n<ul>\n<li>查看 java 软件包列表</li>\n</ul>\n<pre><code>yum ‐y list java*\n</code></pre>\n<ul>\n<li>下载安装 java1.8 的所有软件包，中途需要输入 y 来确认下载</li>\n</ul>\n<pre><code>yum install java‐1.8.0‐openjdk*\n</code></pre>\n<ul>\n<li>安装成功，输入如下命令检查是否安装成功，如果返回正确的版本号则表示安装成功。</li>\n</ul>\n<pre><code>java ‐version\n</code></pre>\n<ul>\n<li>java 安装目录</li>\n</ul>\n<pre><code>/usr/lib/jvm/java‐1.8.0‐openjdk\n</code></pre>\n<h3 id=\"linux-安装-MySQL\"><a href=\"#linux-安装-MySQL\" class=\"headerlink\" title=\"linux 安装 MySQL\"></a>linux 安装 MySQL</h3><ul>\n<li>使用 wget 获取 rpm 包</li>\n</ul>\n<pre><code>wget http://repo.mysql.com//mysql57‐community‐release‐el7‐8.noarch.rpm\n</code></pre>\n<ul>\n<li>安装 mysql community‐release</li>\n</ul>\n<pre><code>- yum ‐y install mysql57‐community‐release‐el7‐8.noarch.rpm\n</code></pre>\n<ul>\n<li>安装 mysql 服务器</li>\n</ul>\n<pre><code>yum ‐y install mysql‐community‐server.x86_64\n</code></pre>\n<ul>\n<li>启动 MySQL 服务器</li>\n</ul>\n<pre><code>systemctl start mysqld.service\n</code></pre>\n<ul>\n<li>检查 MySQL 服务器的状态</li>\n</ul>\n<pre><code>systemctl status mysqld.service\n</code></pre>\n<ul>\n<li>查看初始化密码</li>\n</ul>\n<pre><code>grep &#39;temporary password&#39; /var/log/mysqld.log\n</code></pre>\n<ul>\n<li>使用初始化密码进入数据库</li>\n</ul>\n<pre><code>mysql ‐uroot ‐p\n</code></pre>\n<ul>\n<li>修改密码</li>\n</ul>\n<pre><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;简单密码&#39;;\n</code></pre>\n<ul>\n<li>修改密码强度</li>\n</ul>\n<pre><code>set global validate_password_length=4;\n\nset global validate_password_policy=0;\n</code></pre>\n<ul>\n<li>创建一个可以远程的账号</li>\n</ul>\n<pre><code>CREATE USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39;;\n</code></pre>\n<ul>\n<li>给远程的账号赋予权限</li>\n</ul>\n<pre><code>GRANT ALL ON _._ TO &#39;root&#39;@&#39;%&#39;;\n</code></pre>\n<ul>\n<li>如果还连不上，请关闭防火墙</li>\n</ul>\n<pre><code>查看防火墙状态： systemctl status firewalld.service\n\n执行关闭命令： systemctl stop firewalld.service\n\n再次执行查看防火墙命令：systemctl status firewalld.service\n\n执行开机禁用防火墙自启命令  ： systemctl disable firewalld.service\n\n启动：systemctl start firewalld.service\n\n防火墙随系统开启启动  ： systemctl enable firewalld.service\n</code></pre>\n<ul>\n<li>MySQL 8.0 连不上</li>\n</ul>\n<pre><code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;\n</code></pre>\n<ul>\n<li>详细参考: <a href=\"https://www.cnblogs.com/zhanyd/p/10001138.html\">https://www.cnblogs.com/zhanyd/p/10001138.html</a></li>\n</ul>\n<h3 id=\"linux-安装-redis\"><a href=\"#linux-安装-redis\" class=\"headerlink\" title=\"linux 安装 redis\"></a>linux 安装 redis</h3><ul>\n<li>详细参考: <a href=\"https://www.cnblogs.com/zuidongfeng/p/8032505.html\">https://www.cnblogs.com/zuidongfeng/p/8032505.html</a></li>\n<li>启动 redis: (启动目录：/root/redis-4.0.6/src)<ul>\n<li>./redis-server /root/redis-4.0.6/redis.conf()</li>\n</ul>\n</li>\n<li>查看进程： ps -ef | grep redis</li>\n</ul>\n<h3 id=\"linux-启动-jar-包\"><a href=\"#linux-启动-jar-包\" class=\"headerlink\" title=\"linux 启动 jar 包\"></a>linux 启动 jar 包</h3><ul>\n<li>创建目录：/home/webapps/testsell (目录可以随便)</li>\n<li>下载 rz<ul>\n<li>yum install lrzsz</li>\n<li>rz 上传文件</li>\n<li>sz 下载文件</li>\n</ul>\n</li>\n<li>启动 jar 包<ul>\n<li>java -jar sell.jar</li>\n<li>后台启动：nohup java -jar sell.jar</li>\n<li>指定端口号启动:nohup java -jar sell.jar –server.port=8080</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Jenkins-自动化部署环境\"><a href=\"#Jenkins-自动化部署环境\" class=\"headerlink\" title=\"Jenkins 自动化部署环境\"></a>Jenkins 自动化部署环境</h2><ul>\n<li>详细参考：<a href=\"https://note.youdao.com/ynoteshare1/index.html?id=01a3f11b1fd24459fbba82a0509f5d4e&amp;type=note\">https://note.youdao.com/ynoteshare1/index.html?id=01a3f11b1fd24459fbba82a0509f5d4e&amp;type=note</a></li>\n</ul>\n"},{"title":"win 常见问题总结","comments":1,"abbrlink":624053898,"date":"2021-11-01T16:00:00.000Z","_content":"\n## DOS 命令\n\n1. 修改文件大小（将其他文件的大小合并到需要扩充的文件）\n\n    ```shell\n    $ copy img.jpg /b + music.mp3 10Mimg.jpg\n    # copy 原图名称 /b + 需要扩充的文件名称 新图名称\n    ```\n\n    \n\n","source":"_posts/操作系统/Windows/winbase.md","raw":"---\ntitle: win 常见问题总结\ntags:\n  - windows 问题总结\ncategories:\n  - - 操作系统\n    - Windows\ncomments: true\nabbrlink: 624053898\ndate: 2021-11-02 00:00:00\n---\n\n## DOS 命令\n\n1. 修改文件大小（将其他文件的大小合并到需要扩充的文件）\n\n    ```shell\n    $ copy img.jpg /b + music.mp3 10Mimg.jpg\n    # copy 原图名称 /b + 需要扩充的文件名称 新图名称\n    ```\n\n    \n\n","slug":"操作系统/Windows/winbase","published":1,"updated":"2022-02-04T09:45:53.719Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbe000tzc1b7b835qrk","content":"<h2 id=\"DOS-命令\"><a href=\"#DOS-命令\" class=\"headerlink\" title=\"DOS 命令\"></a>DOS 命令</h2><ol>\n<li><p>修改文件大小（将其他文件的大小合并到需要扩充的文件）</p>\n<pre><code class=\"shell\">$ copy img.jpg /b + music.mp3 10Mimg.jpg\n# copy 原图名称 /b + 需要扩充的文件名称 新图名称\n</code></pre>\n</li>\n</ol>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"DOS-命令\"><a href=\"#DOS-命令\" class=\"headerlink\" title=\"DOS 命令\"></a>DOS 命令</h2><ol>\n<li><p>修改文件大小（将其他文件的大小合并到需要扩充的文件）</p>\n<pre><code class=\"shell\">$ copy img.jpg /b + music.mp3 10Mimg.jpg\n# copy 原图名称 /b + 需要扩充的文件名称 新图名称\n</code></pre>\n</li>\n</ol>\n"},{"title":"MacOS 常见问题总结","comments":1,"abbrlink":1992094617,"date":"2021-11-01T16:00:00.000Z","_content":"","source":"_posts/操作系统/MacOS/macOS.md","raw":"---\ntitle: MacOS 常见问题总结\ntags:\n  - MacOS 问题总结\ncategories:\n  - - 操作系统\n    - MacOS\ncomments: true\nabbrlink: 1992094617\ndate: 2021-11-02 00:00:00\n---\n","slug":"操作系统/MacOS/macOS","published":1,"updated":"2022-02-04T09:45:53.719Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbf000wzc1b7xj32x5o","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"Locust 性能测试","comments":1,"abbrlink":519960898,"date":"2021-08-28T16:00:00.000Z","_content":"\n## Locust 安装及运行\n\n- 创建虚拟环境，并进入\n\n```shell\n$ pip install locustio==0.14.6  (0.14.6 版本安装)\n$ pip install locust  (最新版本安装)\n$\n$ 报错： error: Microsoft Visual C++ 14.0 is required. Get it with \"Build Tools for Visual Studio\": https://visualstudio.microsoft.com/downloads/ Tools\"\n$ 解决： http://go.microsoft.com/fwlink/?LinkId=691126\n$ 导入win32com模块还失败，执行下面命令\n$\tpython -m pip install pypiwin32\n```\n\n- 脚本运行\n\n```shell\n$ locust -f ***.py\n\t运行成功：\n$ (locust_0) D:\\Locust\\locust_0\\src>locust -f locust0-template.py\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting web monitor at http://*:8089\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting Locust 0.14.6\n\t\n```\n\n- 浏览器访问\n\n```shell\n\n本机访问： localhost:8089  \n远程访问： ip / 域名：8089\n\tNumber of total users to simulate： 模拟的总数量 20/200/2000\n\tHatch rate (users spawned/second)： 每秒增加多少个用户 \n\tHost： 被测的服务器的 IP和端口 / 域名（http://8.129.219.235:8808）\n\n```\n## Locust 运行模式\n\n#### Web 界面启动 (单进程)\n> 参数：\n>\t--web-host: HOST\n>   --web-port: PORT\n\n```shell\n\n\tlocust --web-host=127.0.0.1 --web-port=8088 -f .\\\\1000_user_load_query.py\n\n```\n\n#### 命令行启动 (单进程)\n> 参数：\n>    --headless : 禁用 Web 界面，且立即开始负载测试 需要 -u 和 -t 被指定\n> \t --host : 地址 http://192.168.40.1:8090 (https://www.baidu.com)\n>    --csv : 保存执行结果  --csv=result\n> \t -u/--users : 虚拟用户数\n> \t -r/--spawn-rate : 每秒孵化数（每秒增加用户数）\n>    -t/--run-time ： 运行时间（h, m, s, 1h30m）\n> \t\n\n```shell\n\n    locust -f 1000_user_load_query.py --headless --host=http://192.168.40.1:8090 --csv=./result/result  --u 200 -r 20 -t 60s\n\n```\n\n#### 分布式运行（多进程）\n> 角色： \n>    1. 主机： --master; 只负责管理不运行脚本\n>    2. 从属主机(执行机)： --worker --master-host=主机 IP\n> \t\n> 注意：  \n>    1. 执行机必须有主机脚本的副本\n> \t 2. 同一台机子执行, 处理器的核心数就是执行机的最大数量\n> \t参数：\n> \t--master : \n> \t--web-host: 访问 IP\n>\t--web-port: 端口号\n>       --master-bind-host : 要绑定的主机名，IP; 仅在 master 时使用,可以不使用             \n>       --master-bind-port : 要绑定的主机端口号; 仅在 master 时使用,可以不使用\n> \t--expect-workers : 执行机数量 仅在 headless 时使用\n> \n>   --worker : 如果 master 和 worker 不在同一台机器上， worker 需要指定 --master-host 参数\n>   --master-host : 运行 master 时设置的 host                   \n>   --master-port : 运行 master 时设置的 port\n\n\n- Web 界面启动\n```shell\n\n# 主机启动\n\tlocust -f 1000_user_load_query.py --master --web-host=192.168.40.1\n\n# 从机启动（每次启动一个执行机）\n\tlocust -f .\\\\1000_user_load_query.py --worker --master-host=主机 IP  \n\n```\n## FastHttpUser 和 HttpUser\n> FastHttpUser\n> HttpUser\n\n## Locust + geventhttpclient\n> geventhttpclient\n\n## SequentialTaskSet 和 TaskSet\n> SequentialTaskSet\n> TaskSet\n\n\n## Locust 多进程 数据共享\n> \n\n\n## Locust 运行 Go 语言\n\n> 使用 Locust + Go 实现性能测试， 比 py 脚本性能提高到 5 - 10 倍\n> 待研究。。。。。。","source":"_posts/软件测试/性能测试/Locust.md","raw":"---\ntitle: Locust 性能测试\ncomments: true\ntags:\n  - 软件测试\n  - 性能测试\n  - locust\ncategories:\n  - - 软件测试\n    - 性能测试\nabbrlink: 519960898\ndate: 2021-08-29 00:00:00\n---\n\n## Locust 安装及运行\n\n- 创建虚拟环境，并进入\n\n```shell\n$ pip install locustio==0.14.6  (0.14.6 版本安装)\n$ pip install locust  (最新版本安装)\n$\n$ 报错： error: Microsoft Visual C++ 14.0 is required. Get it with \"Build Tools for Visual Studio\": https://visualstudio.microsoft.com/downloads/ Tools\"\n$ 解决： http://go.microsoft.com/fwlink/?LinkId=691126\n$ 导入win32com模块还失败，执行下面命令\n$\tpython -m pip install pypiwin32\n```\n\n- 脚本运行\n\n```shell\n$ locust -f ***.py\n\t运行成功：\n$ (locust_0) D:\\Locust\\locust_0\\src>locust -f locust0-template.py\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting web monitor at http://*:8089\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting Locust 0.14.6\n\t\n```\n\n- 浏览器访问\n\n```shell\n\n本机访问： localhost:8089  \n远程访问： ip / 域名：8089\n\tNumber of total users to simulate： 模拟的总数量 20/200/2000\n\tHatch rate (users spawned/second)： 每秒增加多少个用户 \n\tHost： 被测的服务器的 IP和端口 / 域名（http://8.129.219.235:8808）\n\n```\n## Locust 运行模式\n\n#### Web 界面启动 (单进程)\n> 参数：\n>\t--web-host: HOST\n>   --web-port: PORT\n\n```shell\n\n\tlocust --web-host=127.0.0.1 --web-port=8088 -f .\\\\1000_user_load_query.py\n\n```\n\n#### 命令行启动 (单进程)\n> 参数：\n>    --headless : 禁用 Web 界面，且立即开始负载测试 需要 -u 和 -t 被指定\n> \t --host : 地址 http://192.168.40.1:8090 (https://www.baidu.com)\n>    --csv : 保存执行结果  --csv=result\n> \t -u/--users : 虚拟用户数\n> \t -r/--spawn-rate : 每秒孵化数（每秒增加用户数）\n>    -t/--run-time ： 运行时间（h, m, s, 1h30m）\n> \t\n\n```shell\n\n    locust -f 1000_user_load_query.py --headless --host=http://192.168.40.1:8090 --csv=./result/result  --u 200 -r 20 -t 60s\n\n```\n\n#### 分布式运行（多进程）\n> 角色： \n>    1. 主机： --master; 只负责管理不运行脚本\n>    2. 从属主机(执行机)： --worker --master-host=主机 IP\n> \t\n> 注意：  \n>    1. 执行机必须有主机脚本的副本\n> \t 2. 同一台机子执行, 处理器的核心数就是执行机的最大数量\n> \t参数：\n> \t--master : \n> \t--web-host: 访问 IP\n>\t--web-port: 端口号\n>       --master-bind-host : 要绑定的主机名，IP; 仅在 master 时使用,可以不使用             \n>       --master-bind-port : 要绑定的主机端口号; 仅在 master 时使用,可以不使用\n> \t--expect-workers : 执行机数量 仅在 headless 时使用\n> \n>   --worker : 如果 master 和 worker 不在同一台机器上， worker 需要指定 --master-host 参数\n>   --master-host : 运行 master 时设置的 host                   \n>   --master-port : 运行 master 时设置的 port\n\n\n- Web 界面启动\n```shell\n\n# 主机启动\n\tlocust -f 1000_user_load_query.py --master --web-host=192.168.40.1\n\n# 从机启动（每次启动一个执行机）\n\tlocust -f .\\\\1000_user_load_query.py --worker --master-host=主机 IP  \n\n```\n## FastHttpUser 和 HttpUser\n> FastHttpUser\n> HttpUser\n\n## Locust + geventhttpclient\n> geventhttpclient\n\n## SequentialTaskSet 和 TaskSet\n> SequentialTaskSet\n> TaskSet\n\n\n## Locust 多进程 数据共享\n> \n\n\n## Locust 运行 Go 语言\n\n> 使用 Locust + Go 实现性能测试， 比 py 脚本性能提高到 5 - 10 倍\n> 待研究。。。。。。","slug":"软件测试/性能测试/Locust","published":1,"updated":"2022-02-04T09:45:53.737Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbg000zzc1b74gafsym","content":"<h2 id=\"Locust-安装及运行\"><a href=\"#Locust-安装及运行\" class=\"headerlink\" title=\"Locust 安装及运行\"></a>Locust 安装及运行</h2><ul>\n<li>创建虚拟环境，并进入</li>\n</ul>\n<pre><code class=\"shell\">$ pip install locustio==0.14.6  (0.14.6 版本安装)\n$ pip install locust  (最新版本安装)\n$\n$ 报错： error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Build Tools for Visual Studio&quot;: https://visualstudio.microsoft.com/downloads/ Tools&quot;\n$ 解决： http://go.microsoft.com/fwlink/?LinkId=691126\n$ 导入win32com模块还失败，执行下面命令\n$    python -m pip install pypiwin32\n</code></pre>\n<ul>\n<li>脚本运行</li>\n</ul>\n<pre><code class=\"shell\">$ locust -f ***.py\n    运行成功：\n$ (locust_0) D:\\Locust\\locust_0\\src&gt;locust -f locust0-template.py\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting web monitor at http://*:8089\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting Locust 0.14.6\n    \n</code></pre>\n<ul>\n<li>浏览器访问</li>\n</ul>\n<pre><code class=\"shell\">\n本机访问： localhost:8089  \n远程访问： ip / 域名：8089\n    Number of total users to simulate： 模拟的总数量 20/200/2000\n    Hatch rate (users spawned/second)： 每秒增加多少个用户 \n    Host： 被测的服务器的 IP和端口 / 域名（http://8.129.219.235:8808）\n</code></pre>\n<h2 id=\"Locust-运行模式\"><a href=\"#Locust-运行模式\" class=\"headerlink\" title=\"Locust 运行模式\"></a>Locust 运行模式</h2><h4 id=\"Web-界面启动-单进程\"><a href=\"#Web-界面启动-单进程\" class=\"headerlink\" title=\"Web 界面启动 (单进程)\"></a>Web 界面启动 (单进程)</h4><blockquote>\n<p>参数：<br>   –web-host: HOST<br>  –web-port: PORT</p>\n</blockquote>\n<pre><code class=\"shell\">\n    locust --web-host=127.0.0.1 --web-port=8088 -f .\\\\1000_user_load_query.py\n</code></pre>\n<h4 id=\"命令行启动-单进程\"><a href=\"#命令行启动-单进程\" class=\"headerlink\" title=\"命令行启动 (单进程)\"></a>命令行启动 (单进程)</h4><blockquote>\n<p>参数：<br>   –headless : 禁用 Web 界面，且立即开始负载测试 需要 -u 和 -t 被指定<br>     –host : 地址 <a href=\"http://192.168.40.1:8090/\" rel=\"external nofollow noreferrer\">http://192.168.40.1:8090</a> (<a href=\"https://www.baidu.com/\" rel=\"external nofollow noreferrer\">https://www.baidu.com</a>)<br>   –csv : 保存执行结果  –csv=result<br>     -u/–users : 虚拟用户数<br>     -r/–spawn-rate : 每秒孵化数（每秒增加用户数）<br>   -t/–run-time ： 运行时间（h, m, s, 1h30m）</p>\n</blockquote>\n<pre><code class=\"shell\">\n    locust -f 1000_user_load_query.py --headless --host=http://192.168.40.1:8090 --csv=./result/result  --u 200 -r 20 -t 60s\n</code></pre>\n<h4 id=\"分布式运行（多进程）\"><a href=\"#分布式运行（多进程）\" class=\"headerlink\" title=\"分布式运行（多进程）\"></a>分布式运行（多进程）</h4><blockquote>\n<p>角色： </p>\n<ol>\n<li>主机： –master; 只负责管理不运行脚本</li>\n<li>从属主机(执行机)： –worker –master-host=主机 IP</li>\n</ol>\n<p>注意：  </p>\n<ol>\n<li>执行机必须有主机脚本的副本     2. 同一台机子执行, 处理器的核心数就是执行机的最大数量<br>参数：    –master :     –web-host: 访问 IP</li>\n</ol>\n<p>   –web-port: 端口号<br>      –master-bind-host : 要绑定的主机名，IP; 仅在 master 时使用,可以不使用<br>      –master-bind-port : 要绑定的主机端口号; 仅在 master 时使用,可以不使用<br>    –expect-workers : 执行机数量 仅在 headless 时使用</p>\n<p>  –worker : 如果 master 和 worker 不在同一台机器上， worker 需要指定 –master-host 参数<br>  –master-host : 运行 master 时设置的 host<br>  –master-port : 运行 master 时设置的 port</p>\n</blockquote>\n<ul>\n<li>Web 界面启动<br>```shell</li>\n</ul>\n<h1 id=\"主机启动\"><a href=\"#主机启动\" class=\"headerlink\" title=\"主机启动\"></a>主机启动</h1><pre><code>locust -f 1000_user_load_query.py --master --web-host=192.168.40.1\n</code></pre>\n<h1 id=\"从机启动（每次启动一个执行机）\"><a href=\"#从机启动（每次启动一个执行机）\" class=\"headerlink\" title=\"从机启动（每次启动一个执行机）\"></a>从机启动（每次启动一个执行机）</h1><pre><code>locust -f .\\\\1000_user_load_query.py --worker --master-host=主机 IP  \n</code></pre>\n<p>```</p>\n<h2 id=\"FastHttpUser-和-HttpUser\"><a href=\"#FastHttpUser-和-HttpUser\" class=\"headerlink\" title=\"FastHttpUser 和 HttpUser\"></a>FastHttpUser 和 HttpUser</h2><blockquote>\n<p>FastHttpUser<br>HttpUser</p>\n</blockquote>\n<h2 id=\"Locust-geventhttpclient\"><a href=\"#Locust-geventhttpclient\" class=\"headerlink\" title=\"Locust + geventhttpclient\"></a>Locust + geventhttpclient</h2><blockquote>\n<p>geventhttpclient</p>\n</blockquote>\n<h2 id=\"SequentialTaskSet-和-TaskSet\"><a href=\"#SequentialTaskSet-和-TaskSet\" class=\"headerlink\" title=\"SequentialTaskSet 和 TaskSet\"></a>SequentialTaskSet 和 TaskSet</h2><blockquote>\n<p>SequentialTaskSet<br>TaskSet</p>\n</blockquote>\n<h2 id=\"Locust-多进程-数据共享\"><a href=\"#Locust-多进程-数据共享\" class=\"headerlink\" title=\"Locust 多进程 数据共享\"></a>Locust 多进程 数据共享</h2><blockquote>\n</blockquote>\n<h2 id=\"Locust-运行-Go-语言\"><a href=\"#Locust-运行-Go-语言\" class=\"headerlink\" title=\"Locust 运行 Go 语言\"></a>Locust 运行 Go 语言</h2><blockquote>\n<p>使用 Locust + Go 实现性能测试， 比 py 脚本性能提高到 5 - 10 倍<br>待研究。。。。。。</p>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"Locust-安装及运行\"><a href=\"#Locust-安装及运行\" class=\"headerlink\" title=\"Locust 安装及运行\"></a>Locust 安装及运行</h2><ul>\n<li>创建虚拟环境，并进入</li>\n</ul>\n<pre><code class=\"shell\">$ pip install locustio==0.14.6  (0.14.6 版本安装)\n$ pip install locust  (最新版本安装)\n$\n$ 报错： error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Build Tools for Visual Studio&quot;: https://visualstudio.microsoft.com/downloads/ Tools&quot;\n$ 解决： http://go.microsoft.com/fwlink/?LinkId=691126\n$ 导入win32com模块还失败，执行下面命令\n$    python -m pip install pypiwin32\n</code></pre>\n<ul>\n<li>脚本运行</li>\n</ul>\n<pre><code class=\"shell\">$ locust -f ***.py\n    运行成功：\n$ (locust_0) D:\\Locust\\locust_0\\src&gt;locust -f locust0-template.py\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting web monitor at http://*:8089\n$ [2020-08-16 21:16:56,219] Yii/INFO/locust.main: Starting Locust 0.14.6\n    \n</code></pre>\n<ul>\n<li>浏览器访问</li>\n</ul>\n<pre><code class=\"shell\">\n本机访问： localhost:8089  \n远程访问： ip / 域名：8089\n    Number of total users to simulate： 模拟的总数量 20/200/2000\n    Hatch rate (users spawned/second)： 每秒增加多少个用户 \n    Host： 被测的服务器的 IP和端口 / 域名（http://8.129.219.235:8808）\n</code></pre>\n<h2 id=\"Locust-运行模式\"><a href=\"#Locust-运行模式\" class=\"headerlink\" title=\"Locust 运行模式\"></a>Locust 运行模式</h2><h4 id=\"Web-界面启动-单进程\"><a href=\"#Web-界面启动-单进程\" class=\"headerlink\" title=\"Web 界面启动 (单进程)\"></a>Web 界面启动 (单进程)</h4><blockquote>\n<p>参数：<br>   –web-host: HOST<br>  –web-port: PORT</p>\n</blockquote>\n<pre><code class=\"shell\">\n    locust --web-host=127.0.0.1 --web-port=8088 -f .\\\\1000_user_load_query.py\n</code></pre>\n<h4 id=\"命令行启动-单进程\"><a href=\"#命令行启动-单进程\" class=\"headerlink\" title=\"命令行启动 (单进程)\"></a>命令行启动 (单进程)</h4><blockquote>\n<p>参数：<br>   –headless : 禁用 Web 界面，且立即开始负载测试 需要 -u 和 -t 被指定<br>     –host : 地址 <a href=\"http://192.168.40.1:8090/\">http://192.168.40.1:8090</a> (<a href=\"https://www.baidu.com/\">https://www.baidu.com</a>)<br>   –csv : 保存执行结果  –csv=result<br>     -u/–users : 虚拟用户数<br>     -r/–spawn-rate : 每秒孵化数（每秒增加用户数）<br>   -t/–run-time ： 运行时间（h, m, s, 1h30m）</p>\n</blockquote>\n<pre><code class=\"shell\">\n    locust -f 1000_user_load_query.py --headless --host=http://192.168.40.1:8090 --csv=./result/result  --u 200 -r 20 -t 60s\n</code></pre>\n<h4 id=\"分布式运行（多进程）\"><a href=\"#分布式运行（多进程）\" class=\"headerlink\" title=\"分布式运行（多进程）\"></a>分布式运行（多进程）</h4><blockquote>\n<p>角色： </p>\n<ol>\n<li>主机： –master; 只负责管理不运行脚本</li>\n<li>从属主机(执行机)： –worker –master-host=主机 IP</li>\n</ol>\n<p>注意：  </p>\n<ol>\n<li>执行机必须有主机脚本的副本     2. 同一台机子执行, 处理器的核心数就是执行机的最大数量<br>参数：    –master :     –web-host: 访问 IP</li>\n</ol>\n<p>   –web-port: 端口号<br>      –master-bind-host : 要绑定的主机名，IP; 仅在 master 时使用,可以不使用<br>      –master-bind-port : 要绑定的主机端口号; 仅在 master 时使用,可以不使用<br>    –expect-workers : 执行机数量 仅在 headless 时使用</p>\n<p>  –worker : 如果 master 和 worker 不在同一台机器上， worker 需要指定 –master-host 参数<br>  –master-host : 运行 master 时设置的 host<br>  –master-port : 运行 master 时设置的 port</p>\n</blockquote>\n<ul>\n<li>Web 界面启动<br>```shell</li>\n</ul>\n<h1 id=\"主机启动\"><a href=\"#主机启动\" class=\"headerlink\" title=\"主机启动\"></a>主机启动</h1><pre><code>locust -f 1000_user_load_query.py --master --web-host=192.168.40.1\n</code></pre>\n<h1 id=\"从机启动（每次启动一个执行机）\"><a href=\"#从机启动（每次启动一个执行机）\" class=\"headerlink\" title=\"从机启动（每次启动一个执行机）\"></a>从机启动（每次启动一个执行机）</h1><pre><code>locust -f .\\\\1000_user_load_query.py --worker --master-host=主机 IP  \n</code></pre>\n<p>```</p>\n<h2 id=\"FastHttpUser-和-HttpUser\"><a href=\"#FastHttpUser-和-HttpUser\" class=\"headerlink\" title=\"FastHttpUser 和 HttpUser\"></a>FastHttpUser 和 HttpUser</h2><blockquote>\n<p>FastHttpUser<br>HttpUser</p>\n</blockquote>\n<h2 id=\"Locust-geventhttpclient\"><a href=\"#Locust-geventhttpclient\" class=\"headerlink\" title=\"Locust + geventhttpclient\"></a>Locust + geventhttpclient</h2><blockquote>\n<p>geventhttpclient</p>\n</blockquote>\n<h2 id=\"SequentialTaskSet-和-TaskSet\"><a href=\"#SequentialTaskSet-和-TaskSet\" class=\"headerlink\" title=\"SequentialTaskSet 和 TaskSet\"></a>SequentialTaskSet 和 TaskSet</h2><blockquote>\n<p>SequentialTaskSet<br>TaskSet</p>\n</blockquote>\n<h2 id=\"Locust-多进程-数据共享\"><a href=\"#Locust-多进程-数据共享\" class=\"headerlink\" title=\"Locust 多进程 数据共享\"></a>Locust 多进程 数据共享</h2><blockquote>\n</blockquote>\n<h2 id=\"Locust-运行-Go-语言\"><a href=\"#Locust-运行-Go-语言\" class=\"headerlink\" title=\"Locust 运行 Go 语言\"></a>Locust 运行 Go 语言</h2><blockquote>\n<p>使用 Locust + Go 实现性能测试， 比 py 脚本性能提高到 5 - 10 倍<br>待研究。。。。。。</p>\n</blockquote>\n"},{"title":"性能测试基础","comments":1,"abbrlink":3113662073,"date":"2021-08-17T16:00:00.000Z","_content":"\n## 性能测试理论知识\n\n\n**性能测试的目的：发现性能的瓶颈**\n\n\n### 负载测试\n\n\n```\n通过逐步加压的方法，达到既定的性能阀值的目标。\n\t阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n```\n\n\n### 压力测试\n\n\n```\n通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n```\n\n\n### 并发测试\n\n\n```\n同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n```\n\n\n### 容量测试\n\n\n```\n通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n\t测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n```\n\n\n### 可靠性测试（稳定性测试 / 疲劳测试）\n\n\n```\n系统在高压的情况下，长时间的运行系统是否稳定。\n\t如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n```\n\n\n### 异常测试（失败测试）\n\n\n```\n指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n```\n\n\n### 性能测试指标定义\n\n\n- 事务\n\n\n\n```\n从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n```\n\n\n- TPS (Transactions Per Second)\n\n\n\n```\n每秒钟系统可以处理的事务数\n```\n\n\n- QPS：(Query per second )\n\n\n\n```\n一台查询服务器每秒处理的请求次数\n```\n\n\n- 请求响应时间\n\n\n\n```\n从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n```\n\n\n- 事务响应时间\n\n\n\n```\n事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n```\n\n\n- 并发定义\n\n\n\n```\n没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n```\n\n\n- 并发用户数\n\n\n\n```\n同一单位时间内，对系统发起请求的用户数量\n```\n\n\n- 吞吐量\n\n\n\n```\n一次性能测试过程中，网络上传输的数据量的总和\n```\n\n\n- 吞吐率\n\n\n\n```\n单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n```\n\n\n- 点击率\n\n\n\n```\n每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n```\n\n\n- 资源使用率\n\n\n\n```\n对不同的系统资源的使用情况，如： CPU、内存、 IO\n```\n\n\n### 性能测试的监控指标\n\n\n- 响应时间\n\n\n\n```\n反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n```\n\n\n- 吞吐量\n\n\n\n```\n反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n```\n\n\n- 服务器资源占用\n\n\n\n```\n服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n```\n\n\n### 性能测试的原理\n\n\n- 用户行为模拟\n\n\n\n```\n低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n\t1. 通过参数化，实现不同用户使用不同数据 \n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n```\n\n\n- 性能指标监控\n\n\n\n```\n通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n```\n\n\n- 性能调优\n\n\n\n```\n通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n```\n\n\n## 性能测试的工作流程\n\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=767&size=0&status=done&style=none&width=767)\n\n\n### 性能测试的需求分析\n\n\n- 目的: 明确测试目标和测试场景\n- 新系统\n   - 同行业比较\n   - 业务预期\n- 老系统\n   - 对比以往用户的使用行为以及用户量\n- 性能需求的的提取\n\n\n\n```\n1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n```\n\n\n### 系统应用分层架构\n\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=832&size=0&status=done&style=none&width=832)\n\n\n## JMeter 性能测试\n\n\n### JMeter 实现逻辑分支控制\n\n\n- 逻辑控制器\n   - 用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)\n   - 如果（if）控制器\n   - include Controller\n   - Runtime Controller\n   - Switch Controller\n   - While Controller\n\n\n\n### JMeter 实现配置管理\n\n\n- 配置元件\n\n\n\n### JMeter 函数助手\n\n\n- _CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时\n\n\n\n```\n_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==> 指${__CSVRead(,)}中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==> 指${__CSVRead(,)}中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： ${__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)}\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n```\n\n\n- _Random： 生成随机数\n\n\n\n```\n_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==> 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==> 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==> 为生成随机数添加变量名称   id(可任意)\n\n\t生成的函数字符串：${__Random(2,100,)}  ==> id = 55(随机数)\n```\n\n\n- _Log：\n\n\n\n```\nlog 函数参数说明：\n\n    String to be logged (and returned) ==> 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==> 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==> 抛出的异常信息\n```\n\n\n- _Split： 字符串分割函数\n\n\n\n\n\n### 聚合报告\n\n\n- Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值\n- #Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100\n- Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间\n- Median：中位数，也就是 50％ 用户的响应时间\n- 90% Line：90％ 用户的响应时间\n- Min：最小响应时间\n- Max：最大响应时间\n- Error%：错误率 —— 错误请求数 / 请求总数\n- Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数\n- KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec\n\n\n\n**重点关注的数据：**\n\n\n- Samples： 请求数\n- Average： 平均响应时间\n- Min： 最小响应时间\n- Max： 最大响应时间\n- Error%： 错误率\n- Throughput： 吞吐量\n\n\n\n### JMeter 扩展组件开发\n\n\n```shell\n$ Git 地址：\n```\n\n\n## Linux 服务器监控性能测试\n\n\n### 测试范围及性能指标\n\n\n**—— —— CPU 内存 磁盘 网络 版本**\n\n\n### 进程和线程\n\n\n- 进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）\n- 线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程\n\n\n\n#### 进程与线程的区别\n\n\n1. 一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。\n1. 线程是进程工作的最小单位，\n1. 一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。\n1. 同一个进程下的不同的多个线程，共享父进程的地址空间。\n1. 线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。\n1. 线程作为调度和分派的基本单位，进程作为拥有资源的基本单位\n\n\n\n#### 进程的优缺点\n\n\n[ 优点 ]\n\n\n- 每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程\n- 通过添加 CPU 可以扩充性能\n- 可以尽量减少线程加锁和解锁的影响，极大地提高了性能\n\n\n\n[ 缺点 ]\n\n\n- 逻辑控制复杂，需要和主程序交互\n- 多进程调度开销大\n\n\n\n#### 线程的优缺点\n\n\n[ 优点 ]\n\n\n- 程序的逻辑和控制方式简单\n- 所有线程可以共享内存和变量等\n- 线程方式消耗的总资源比进程方式少\n\n\n\n[ 缺点 ]\n\n\n- 线程与主程序共用地址空间，最大内存地址受限\n- 线程之间的同步和加锁不易控制（同步锁）\n- 一个线程的崩溃可能影响整个程序的稳定性\n\n\n\n### Linux 服务器监控命令\n\n\n#### 实时监控命令\n\n\n- top (实时监控-综合)\n   - 作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序\n   - top -h：帮助\n   - top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID\n- top 任务区命令(top 进入任务区)\n   - M：按内存使用率排序\n   - P: 按 CPU 使用率排序\n   - z: 彩色 / 黑白显示\n\n\n\n```\nload average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n```\n\n\n- vmstat（实时监控 - 综合）\n   - 功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息\n   - 选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）\n   - 语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n- free (实时监控-内存)\n   - 功能：监控系统内存的使用状态\n   - 语法：free -h\n\n\n\n```\nfree - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n```\n\n\n- mpstat（实时监控 - CPU）\n   - 功能：可以查看多核心 CPU 中每个计算核心的统计数据\n   - 参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息\n   - 语法：mpstat [-P | ALL] [interval | count]\n\n\n\n```\nmpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n```\n\n\n- netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）\n   - netstat -n 拒绝显示别名，能显示数字的全部显示数字\n   - netstat -l 仅列出有在 Listen（监听）的服务状态\n   - netstat -p 显示建立相关链接的程序名\n   - netstat -t 显示 TCP 相关选项\n   - netstat -u 仅显示 UDP 相关选项\n   - netstat -i 显示自动匹配接口的信息 ==> 查看网络传输的大小以及有没有发生错误\n   - netstat -c 每隔一个固定时间，执行该 netstat 命令\n- iostat (实时监控 - 磁盘)\n   - 作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况\n   - iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）\n\n\n\n```shell\n[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n\t重点关注： r/s 、w/s、 %util(繁忙程度)\n\n\t>> 将命令结果以二进制格式存放在文件中\n```\n\n\n- sar 万能命令\n   - 功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告\n   - 监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动\n   - 语法：sar [options] [-O file] t n ==> (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)\n\n\n\n```shell\noptions 选项： \n    -A: 所有报告的总和； \n    -u: CPU 利用率； \n    -v: 进程、节点、文件和锁表的状态； \n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n```\n\n\n#### 进程追踪命令\n\n\n- strace\n   - 功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程\n   - 选项 -p： 跟踪指定进程\n   - 选项 -f: 跟踪由 fork 子进程系统调用\n   - 选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等\n   - 选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级\n   - 选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出\n   - 选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹\n\n\n\n#### 监控工具 nmon\n\n\n```\n说明：\n下载：\n    wget\n```\n\n\n## 数据驱动性能测试\n\n\n```\n定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n\t1. 测试数据与测试代码分离\n\t2. 数据控制过程\n\t3. 可以减少测试代码量\n\t4. 降低脚本开发和维护的成本\n\t5. 便于用例的修改和维护\n要求：\n\t1. 较强的代码能力\n\t2. 较强的分层架构设计思维\n\t3. 对开发框架有一定的了解\n使用场景：\n \t1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n```\n\n\n## 数据库的架构设计\n\n\n### 数据库性能测试\n\n\n- 测试范围\n\n\n\n```\n1. SQL 语句   => 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n```\n\n\n### 数据库架构\n\n\n- 一主多从\n\n\n\n```\n读写分离：\n    master(主写，主库)\n    ==>复制 slave(从读，从库)\n    ==>复制 slave(从读，从库)\n缺点： 主从延迟\n```\n\n\n- 双机热备\n\n\n\n```\nKeepAlived\n    ==> VIP (虚拟 IP)\n    ==> master  ==> 复制 ==> slave\n缺点：\n优点：\n```\n\n\n### 数据库主从同步的工作原理\n\n\n```\n1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n```\n\n\n### 数据库分库分表的设计方法\n\n\n```\n分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==> 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==> userid%3 == 1\n            ==> userid%3 == 2\n            ==> userid%3 == 3\n```\n\n\n## 数据库性能测试\n\n\n### MySQL\n\n\n- MariaDB(主流分支)\n   - MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL\n   - 兼容 MySQL, 对于开发者来说感知不到变化\n   - MariaDB is free and open source software\n\n\n\n### MySQL 数据库监控指标\n\n\n- QPS(Queries per seconds)\n   - 每秒钟查询数量\n   - show global status like 'Question%';\n- TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds\n   - show global status like 'Com_commit';\n   - show global status like 'Com_rollback';\n- 线程连接数\n   - show global status like 'Max_used_connections';(使用的最大连接数)\n   - show global status like 'Max_connections';(设置的最大连接数)\n   - show global status like 'Threads%';\n- Query Cache\n   - 查询缓存，用于缓存 select 查询结果\n   - 当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果\n   - 适用于大量查询，很少改变表中的数据\n- Query Cache 命中率（MySQL 特有）\n   - show global status like 'Qcache%';\n   - 命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) * 100%\n\n\n\n```\n开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    => 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    => 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n```\n\n\n- 锁定状态\n   - show global status like '%lock';\n   - table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重\n   - innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的\n   - 表锁、行锁、间隙锁\n- 主从延时\n   - 查询主从延时时间： show slave status\n\n\n\n### MySQL 慢查询工作原理及操作\n\n\n```\n慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n```\n\n\n- 慢查询日志分析\n   - mysqldumpslow 命令\n   - -s : 表示按照何种方式排序\n   - -t : top n 的意思，即返回前面多少条数据\n   - -g : 后边可写正则匹配模式，大小写不敏感\n- mysqldumpslow -s 的更多参数\n   - c 访问计数\n   - i 锁定时间\n   - r 返回记录\n   - t 查询时间\n   - al 平均锁定时间\n   - ar 平均返回记录数\n   - at 平均查询时间\n\n\n\n```\n使用：\n    1. 得到返回记录集最多的 10 个 SQL\n    \tmysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n    \tmysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n    \tmysqldumpslow -s t -t 10 -g \"left join\" slow.log\n```\n\n\n- SQL 语句性能分析\n   - explain select 语句\n\n\n\n```markdown\nexplain 返回结果分析\n    1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行\n    2. select_type: \n    3. table: 显示查询表名，<derived N> 临时表\n    **4. type: **\n        1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all**\n        2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引\n    5. possible_keys: 可能使用的索引\n    6. key: 真正使用到的索引\n    7. key_len: \n    8. ref:\n    9. rows: 估算的扫描行数\n    10. extra:\n```\n\n\n### MySQL 索引的概念及作用\n\n\n[ 索引类型 ]\n\n\n- 主键索引（唯一索引，不允许有空值）\n- 全文索引（fulltext, MyISAM 表特有）\n- 唯一索引（值唯一，允许有空值）\n- 组合索引（多列索引，多列同时创建索引）\n- 普通索引（无限制）\n\n\n\n[ 索引创建规则 ]\n\n\n- 可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间\n- 在插入与更新数据时，要重写索引文件\n- 单张表索引数量最好不超过 5 个\n- 单个索引中的字段数不超过 5 个（组合索引）\n- 不适用索引的查询： like 模糊查询；反向查询，not in / not like\n\n\n\n### MySQL 存储引擎\n\n\n- MyISAM（只支持表锁）\n\n\n\n```\n优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n```\n\n\n- InnoDB\n\n\n\n```\n优点：\n    1. 支持事务 \n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n```\n\n\n### MySQL 实时监控\n\n\n- orzdba(监控工具)\n\n\n\n```\n./orzdba 执行\n使用：\n```\n\n\n### MySQL 集群监控方案 - 天兔 LEPUS\n\n\n- 天兔 LEPUS 全部数据库实例监控\n\n\n\n```\n本地部署： 产品 > 文档中心 > 安装\n    admin /Lepusadmin\n```\n\n\n### MySQL 性能测试的用例准备\n\n\n```\n要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤： \n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n```\n","source":"_posts/软件测试/性能测试/性能测试基础.md","raw":"---\ntitle: 性能测试基础\ncomments: true\ntags:\n  - 软件测试\n  - 性能测试\ncategories:\n  - - 软件测试\n    - 性能测试\nabbrlink: 3113662073\ndate: 2021-08-18 00:00:00\n---\n\n## 性能测试理论知识\n\n\n**性能测试的目的：发现性能的瓶颈**\n\n\n### 负载测试\n\n\n```\n通过逐步加压的方法，达到既定的性能阀值的目标。\n\t阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n```\n\n\n### 压力测试\n\n\n```\n通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n```\n\n\n### 并发测试\n\n\n```\n同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n```\n\n\n### 容量测试\n\n\n```\n通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n\t测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n```\n\n\n### 可靠性测试（稳定性测试 / 疲劳测试）\n\n\n```\n系统在高压的情况下，长时间的运行系统是否稳定。\n\t如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n```\n\n\n### 异常测试（失败测试）\n\n\n```\n指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n```\n\n\n### 性能测试指标定义\n\n\n- 事务\n\n\n\n```\n从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n```\n\n\n- TPS (Transactions Per Second)\n\n\n\n```\n每秒钟系统可以处理的事务数\n```\n\n\n- QPS：(Query per second )\n\n\n\n```\n一台查询服务器每秒处理的请求次数\n```\n\n\n- 请求响应时间\n\n\n\n```\n从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n```\n\n\n- 事务响应时间\n\n\n\n```\n事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n```\n\n\n- 并发定义\n\n\n\n```\n没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n```\n\n\n- 并发用户数\n\n\n\n```\n同一单位时间内，对系统发起请求的用户数量\n```\n\n\n- 吞吐量\n\n\n\n```\n一次性能测试过程中，网络上传输的数据量的总和\n```\n\n\n- 吞吐率\n\n\n\n```\n单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n```\n\n\n- 点击率\n\n\n\n```\n每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n```\n\n\n- 资源使用率\n\n\n\n```\n对不同的系统资源的使用情况，如： CPU、内存、 IO\n```\n\n\n### 性能测试的监控指标\n\n\n- 响应时间\n\n\n\n```\n反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n```\n\n\n- 吞吐量\n\n\n\n```\n反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n```\n\n\n- 服务器资源占用\n\n\n\n```\n服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n```\n\n\n### 性能测试的原理\n\n\n- 用户行为模拟\n\n\n\n```\n低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n\t1. 通过参数化，实现不同用户使用不同数据 \n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n```\n\n\n- 性能指标监控\n\n\n\n```\n通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n```\n\n\n- 性能调优\n\n\n\n```\n通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n```\n\n\n## 性能测试的工作流程\n\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=767&size=0&status=done&style=none&width=767)\n\n\n### 性能测试的需求分析\n\n\n- 目的: 明确测试目标和测试场景\n- 新系统\n   - 同行业比较\n   - 业务预期\n- 老系统\n   - 对比以往用户的使用行为以及用户量\n- 性能需求的的提取\n\n\n\n```\n1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n```\n\n\n### 系统应用分层架构\n\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=832&size=0&status=done&style=none&width=832)\n\n\n## JMeter 性能测试\n\n\n### JMeter 实现逻辑分支控制\n\n\n- 逻辑控制器\n   - 用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)\n   - 如果（if）控制器\n   - include Controller\n   - Runtime Controller\n   - Switch Controller\n   - While Controller\n\n\n\n### JMeter 实现配置管理\n\n\n- 配置元件\n\n\n\n### JMeter 函数助手\n\n\n- _CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时\n\n\n\n```\n_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==> 指${__CSVRead(,)}中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==> 指${__CSVRead(,)}中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： ${__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)}\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n```\n\n\n- _Random： 生成随机数\n\n\n\n```\n_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==> 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==> 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==> 为生成随机数添加变量名称   id(可任意)\n\n\t生成的函数字符串：${__Random(2,100,)}  ==> id = 55(随机数)\n```\n\n\n- _Log：\n\n\n\n```\nlog 函数参数说明：\n\n    String to be logged (and returned) ==> 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==> 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==> 抛出的异常信息\n```\n\n\n- _Split： 字符串分割函数\n\n\n\n\n\n### 聚合报告\n\n\n- Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值\n- #Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100\n- Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间\n- Median：中位数，也就是 50％ 用户的响应时间\n- 90% Line：90％ 用户的响应时间\n- Min：最小响应时间\n- Max：最大响应时间\n- Error%：错误率 —— 错误请求数 / 请求总数\n- Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数\n- KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec\n\n\n\n**重点关注的数据：**\n\n\n- Samples： 请求数\n- Average： 平均响应时间\n- Min： 最小响应时间\n- Max： 最大响应时间\n- Error%： 错误率\n- Throughput： 吞吐量\n\n\n\n### JMeter 扩展组件开发\n\n\n```shell\n$ Git 地址：\n```\n\n\n## Linux 服务器监控性能测试\n\n\n### 测试范围及性能指标\n\n\n**—— —— CPU 内存 磁盘 网络 版本**\n\n\n### 进程和线程\n\n\n- 进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）\n- 线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程\n\n\n\n#### 进程与线程的区别\n\n\n1. 一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。\n1. 线程是进程工作的最小单位，\n1. 一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。\n1. 同一个进程下的不同的多个线程，共享父进程的地址空间。\n1. 线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。\n1. 线程作为调度和分派的基本单位，进程作为拥有资源的基本单位\n\n\n\n#### 进程的优缺点\n\n\n[ 优点 ]\n\n\n- 每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程\n- 通过添加 CPU 可以扩充性能\n- 可以尽量减少线程加锁和解锁的影响，极大地提高了性能\n\n\n\n[ 缺点 ]\n\n\n- 逻辑控制复杂，需要和主程序交互\n- 多进程调度开销大\n\n\n\n#### 线程的优缺点\n\n\n[ 优点 ]\n\n\n- 程序的逻辑和控制方式简单\n- 所有线程可以共享内存和变量等\n- 线程方式消耗的总资源比进程方式少\n\n\n\n[ 缺点 ]\n\n\n- 线程与主程序共用地址空间，最大内存地址受限\n- 线程之间的同步和加锁不易控制（同步锁）\n- 一个线程的崩溃可能影响整个程序的稳定性\n\n\n\n### Linux 服务器监控命令\n\n\n#### 实时监控命令\n\n\n- top (实时监控-综合)\n   - 作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序\n   - top -h：帮助\n   - top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID\n- top 任务区命令(top 进入任务区)\n   - M：按内存使用率排序\n   - P: 按 CPU 使用率排序\n   - z: 彩色 / 黑白显示\n\n\n\n```\nload average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n```\n\n\n- vmstat（实时监控 - 综合）\n   - 功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息\n   - 选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）\n   - 语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n- free (实时监控-内存)\n   - 功能：监控系统内存的使用状态\n   - 语法：free -h\n\n\n\n```\nfree - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n```\n\n\n- mpstat（实时监控 - CPU）\n   - 功能：可以查看多核心 CPU 中每个计算核心的统计数据\n   - 参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息\n   - 语法：mpstat [-P | ALL] [interval | count]\n\n\n\n```\nmpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n```\n\n\n- netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）\n   - netstat -n 拒绝显示别名，能显示数字的全部显示数字\n   - netstat -l 仅列出有在 Listen（监听）的服务状态\n   - netstat -p 显示建立相关链接的程序名\n   - netstat -t 显示 TCP 相关选项\n   - netstat -u 仅显示 UDP 相关选项\n   - netstat -i 显示自动匹配接口的信息 ==> 查看网络传输的大小以及有没有发生错误\n   - netstat -c 每隔一个固定时间，执行该 netstat 命令\n- iostat (实时监控 - 磁盘)\n   - 作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况\n   - iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）\n\n\n\n```shell\n[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n\t重点关注： r/s 、w/s、 %util(繁忙程度)\n\n\t>> 将命令结果以二进制格式存放在文件中\n```\n\n\n- sar 万能命令\n   - 功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告\n   - 监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动\n   - 语法：sar [options] [-O file] t n ==> (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)\n\n\n\n```shell\noptions 选项： \n    -A: 所有报告的总和； \n    -u: CPU 利用率； \n    -v: 进程、节点、文件和锁表的状态； \n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n```\n\n\n#### 进程追踪命令\n\n\n- strace\n   - 功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程\n   - 选项 -p： 跟踪指定进程\n   - 选项 -f: 跟踪由 fork 子进程系统调用\n   - 选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等\n   - 选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级\n   - 选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出\n   - 选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹\n\n\n\n#### 监控工具 nmon\n\n\n```\n说明：\n下载：\n    wget\n```\n\n\n## 数据驱动性能测试\n\n\n```\n定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n\t1. 测试数据与测试代码分离\n\t2. 数据控制过程\n\t3. 可以减少测试代码量\n\t4. 降低脚本开发和维护的成本\n\t5. 便于用例的修改和维护\n要求：\n\t1. 较强的代码能力\n\t2. 较强的分层架构设计思维\n\t3. 对开发框架有一定的了解\n使用场景：\n \t1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n```\n\n\n## 数据库的架构设计\n\n\n### 数据库性能测试\n\n\n- 测试范围\n\n\n\n```\n1. SQL 语句   => 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n```\n\n\n### 数据库架构\n\n\n- 一主多从\n\n\n\n```\n读写分离：\n    master(主写，主库)\n    ==>复制 slave(从读，从库)\n    ==>复制 slave(从读，从库)\n缺点： 主从延迟\n```\n\n\n- 双机热备\n\n\n\n```\nKeepAlived\n    ==> VIP (虚拟 IP)\n    ==> master  ==> 复制 ==> slave\n缺点：\n优点：\n```\n\n\n### 数据库主从同步的工作原理\n\n\n```\n1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n```\n\n\n### 数据库分库分表的设计方法\n\n\n```\n分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==> 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==> userid%3 == 1\n            ==> userid%3 == 2\n            ==> userid%3 == 3\n```\n\n\n## 数据库性能测试\n\n\n### MySQL\n\n\n- MariaDB(主流分支)\n   - MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL\n   - 兼容 MySQL, 对于开发者来说感知不到变化\n   - MariaDB is free and open source software\n\n\n\n### MySQL 数据库监控指标\n\n\n- QPS(Queries per seconds)\n   - 每秒钟查询数量\n   - show global status like 'Question%';\n- TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds\n   - show global status like 'Com_commit';\n   - show global status like 'Com_rollback';\n- 线程连接数\n   - show global status like 'Max_used_connections';(使用的最大连接数)\n   - show global status like 'Max_connections';(设置的最大连接数)\n   - show global status like 'Threads%';\n- Query Cache\n   - 查询缓存，用于缓存 select 查询结果\n   - 当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果\n   - 适用于大量查询，很少改变表中的数据\n- Query Cache 命中率（MySQL 特有）\n   - show global status like 'Qcache%';\n   - 命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) * 100%\n\n\n\n```\n开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    => 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    => 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n```\n\n\n- 锁定状态\n   - show global status like '%lock';\n   - table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重\n   - innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的\n   - 表锁、行锁、间隙锁\n- 主从延时\n   - 查询主从延时时间： show slave status\n\n\n\n### MySQL 慢查询工作原理及操作\n\n\n```\n慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n```\n\n\n- 慢查询日志分析\n   - mysqldumpslow 命令\n   - -s : 表示按照何种方式排序\n   - -t : top n 的意思，即返回前面多少条数据\n   - -g : 后边可写正则匹配模式，大小写不敏感\n- mysqldumpslow -s 的更多参数\n   - c 访问计数\n   - i 锁定时间\n   - r 返回记录\n   - t 查询时间\n   - al 平均锁定时间\n   - ar 平均返回记录数\n   - at 平均查询时间\n\n\n\n```\n使用：\n    1. 得到返回记录集最多的 10 个 SQL\n    \tmysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n    \tmysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n    \tmysqldumpslow -s t -t 10 -g \"left join\" slow.log\n```\n\n\n- SQL 语句性能分析\n   - explain select 语句\n\n\n\n```markdown\nexplain 返回结果分析\n    1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行\n    2. select_type: \n    3. table: 显示查询表名，<derived N> 临时表\n    **4. type: **\n        1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all**\n        2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引\n    5. possible_keys: 可能使用的索引\n    6. key: 真正使用到的索引\n    7. key_len: \n    8. ref:\n    9. rows: 估算的扫描行数\n    10. extra:\n```\n\n\n### MySQL 索引的概念及作用\n\n\n[ 索引类型 ]\n\n\n- 主键索引（唯一索引，不允许有空值）\n- 全文索引（fulltext, MyISAM 表特有）\n- 唯一索引（值唯一，允许有空值）\n- 组合索引（多列索引，多列同时创建索引）\n- 普通索引（无限制）\n\n\n\n[ 索引创建规则 ]\n\n\n- 可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间\n- 在插入与更新数据时，要重写索引文件\n- 单张表索引数量最好不超过 5 个\n- 单个索引中的字段数不超过 5 个（组合索引）\n- 不适用索引的查询： like 模糊查询；反向查询，not in / not like\n\n\n\n### MySQL 存储引擎\n\n\n- MyISAM（只支持表锁）\n\n\n\n```\n优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n```\n\n\n- InnoDB\n\n\n\n```\n优点：\n    1. 支持事务 \n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n```\n\n\n### MySQL 实时监控\n\n\n- orzdba(监控工具)\n\n\n\n```\n./orzdba 执行\n使用：\n```\n\n\n### MySQL 集群监控方案 - 天兔 LEPUS\n\n\n- 天兔 LEPUS 全部数据库实例监控\n\n\n\n```\n本地部署： 产品 > 文档中心 > 安装\n    admin /Lepusadmin\n```\n\n\n### MySQL 性能测试的用例准备\n\n\n```\n要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤： \n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n```\n","slug":"软件测试/性能测试/性能测试基础","published":1,"updated":"2022-02-04T09:45:53.741Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbh0010zc1be9xe4y1h","content":"<h2 id=\"性能测试理论知识\"><a href=\"#性能测试理论知识\" class=\"headerlink\" title=\"性能测试理论知识\"></a>性能测试理论知识</h2><p><strong>性能测试的目的：发现性能的瓶颈</strong></p>\n<h3 id=\"负载测试\"><a href=\"#负载测试\" class=\"headerlink\" title=\"负载测试\"></a>负载测试</h3><pre><code>通过逐步加压的方法，达到既定的性能阀值的目标。\n    阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n</code></pre>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><pre><code>通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n</code></pre>\n<h3 id=\"并发测试\"><a href=\"#并发测试\" class=\"headerlink\" title=\"并发测试\"></a>并发测试</h3><pre><code>同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n</code></pre>\n<h3 id=\"容量测试\"><a href=\"#容量测试\" class=\"headerlink\" title=\"容量测试\"></a>容量测试</h3><pre><code>通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n    测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n</code></pre>\n<h3 id=\"可靠性测试（稳定性测试-疲劳测试）\"><a href=\"#可靠性测试（稳定性测试-疲劳测试）\" class=\"headerlink\" title=\"可靠性测试（稳定性测试 / 疲劳测试）\"></a>可靠性测试（稳定性测试 / 疲劳测试）</h3><pre><code>系统在高压的情况下，长时间的运行系统是否稳定。\n    如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n</code></pre>\n<h3 id=\"异常测试（失败测试）\"><a href=\"#异常测试（失败测试）\" class=\"headerlink\" title=\"异常测试（失败测试）\"></a>异常测试（失败测试）</h3><pre><code>指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n</code></pre>\n<h3 id=\"性能测试指标定义\"><a href=\"#性能测试指标定义\" class=\"headerlink\" title=\"性能测试指标定义\"></a>性能测试指标定义</h3><ul>\n<li>事务</li>\n</ul>\n<pre><code>从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n</code></pre>\n<ul>\n<li>TPS (Transactions Per Second)</li>\n</ul>\n<pre><code>每秒钟系统可以处理的事务数\n</code></pre>\n<ul>\n<li>QPS：(Query per second )</li>\n</ul>\n<pre><code>一台查询服务器每秒处理的请求次数\n</code></pre>\n<ul>\n<li>请求响应时间</li>\n</ul>\n<pre><code>从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n</code></pre>\n<ul>\n<li>事务响应时间</li>\n</ul>\n<pre><code>事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n</code></pre>\n<ul>\n<li>并发定义</li>\n</ul>\n<pre><code>没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n</code></pre>\n<ul>\n<li>并发用户数</li>\n</ul>\n<pre><code>同一单位时间内，对系统发起请求的用户数量\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>一次性能测试过程中，网络上传输的数据量的总和\n</code></pre>\n<ul>\n<li>吞吐率</li>\n</ul>\n<pre><code>单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n</code></pre>\n<ul>\n<li>点击率</li>\n</ul>\n<pre><code>每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n</code></pre>\n<ul>\n<li>资源使用率</li>\n</ul>\n<pre><code>对不同的系统资源的使用情况，如： CPU、内存、 IO\n</code></pre>\n<h3 id=\"性能测试的监控指标\"><a href=\"#性能测试的监控指标\" class=\"headerlink\" title=\"性能测试的监控指标\"></a>性能测试的监控指标</h3><ul>\n<li>响应时间</li>\n</ul>\n<pre><code>反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n</code></pre>\n<ul>\n<li>服务器资源占用</li>\n</ul>\n<pre><code>服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n</code></pre>\n<h3 id=\"性能测试的原理\"><a href=\"#性能测试的原理\" class=\"headerlink\" title=\"性能测试的原理\"></a>性能测试的原理</h3><ul>\n<li>用户行为模拟</li>\n</ul>\n<pre><code>低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n    1. 通过参数化，实现不同用户使用不同数据 \n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n</code></pre>\n<ul>\n<li>性能指标监控</li>\n</ul>\n<pre><code>通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n</code></pre>\n<ul>\n<li>性能调优</li>\n</ul>\n<pre><code>通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n</code></pre>\n<h2 id=\"性能测试的工作流程\"><a href=\"#性能测试的工作流程\" class=\"headerlink\" title=\"性能测试的工作流程\"></a>性能测试的工作流程</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=767&size=0&status=done&style=none&width=767\"></p>\n<h3 id=\"性能测试的需求分析\"><a href=\"#性能测试的需求分析\" class=\"headerlink\" title=\"性能测试的需求分析\"></a>性能测试的需求分析</h3><ul>\n<li>目的: 明确测试目标和测试场景</li>\n<li>新系统<ul>\n<li>同行业比较</li>\n<li>业务预期</li>\n</ul>\n</li>\n<li>老系统<ul>\n<li>对比以往用户的使用行为以及用户量</li>\n</ul>\n</li>\n<li>性能需求的的提取</li>\n</ul>\n<pre><code>1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n</code></pre>\n<h3 id=\"系统应用分层架构\"><a href=\"#系统应用分层架构\" class=\"headerlink\" title=\"系统应用分层架构\"></a>系统应用分层架构</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=832&size=0&status=done&style=none&width=832\"></p>\n<h2 id=\"JMeter-性能测试\"><a href=\"#JMeter-性能测试\" class=\"headerlink\" title=\"JMeter 性能测试\"></a>JMeter 性能测试</h2><h3 id=\"JMeter-实现逻辑分支控制\"><a href=\"#JMeter-实现逻辑分支控制\" class=\"headerlink\" title=\"JMeter 实现逻辑分支控制\"></a>JMeter 实现逻辑分支控制</h3><ul>\n<li>逻辑控制器<ul>\n<li>用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)</li>\n<li>如果（if）控制器</li>\n<li>include Controller</li>\n<li>Runtime Controller</li>\n<li>Switch Controller</li>\n<li>While Controller</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JMeter-实现配置管理\"><a href=\"#JMeter-实现配置管理\" class=\"headerlink\" title=\"JMeter 实现配置管理\"></a>JMeter 实现配置管理</h3><ul>\n<li>配置元件</li>\n</ul>\n<h3 id=\"JMeter-函数助手\"><a href=\"#JMeter-函数助手\" class=\"headerlink\" title=\"JMeter 函数助手\"></a>JMeter 函数助手</h3><ul>\n<li>_CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时</li>\n</ul>\n<pre><code>_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： $&#123;__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)&#125;\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n</code></pre>\n<ul>\n<li>_Random： 生成随机数</li>\n</ul>\n<pre><code>_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==&gt; 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==&gt; 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==&gt; 为生成随机数添加变量名称   id(可任意)\n\n    生成的函数字符串：$&#123;__Random(2,100,)&#125;  ==&gt; id = 55(随机数)\n</code></pre>\n<ul>\n<li>_Log：</li>\n</ul>\n<pre><code>log 函数参数说明：\n\n    String to be logged (and returned) ==&gt; 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==&gt; 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==&gt; 抛出的异常信息\n</code></pre>\n<ul>\n<li>_Split： 字符串分割函数</li>\n</ul>\n<h3 id=\"聚合报告\"><a href=\"#聚合报告\" class=\"headerlink\" title=\"聚合报告\"></a>聚合报告</h3><ul>\n<li>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值</li>\n<li>#Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100</li>\n<li>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间</li>\n<li>Median：中位数，也就是 50％ 用户的响应时间</li>\n<li>90% Line：90％ 用户的响应时间</li>\n<li>Min：最小响应时间</li>\n<li>Max：最大响应时间</li>\n<li>Error%：错误率 —— 错误请求数 / 请求总数</li>\n<li>Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数</li>\n<li>KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec</li>\n</ul>\n<p><strong>重点关注的数据：</strong></p>\n<ul>\n<li>Samples： 请求数</li>\n<li>Average： 平均响应时间</li>\n<li>Min： 最小响应时间</li>\n<li>Max： 最大响应时间</li>\n<li>Error%： 错误率</li>\n<li>Throughput： 吞吐量</li>\n</ul>\n<h3 id=\"JMeter-扩展组件开发\"><a href=\"#JMeter-扩展组件开发\" class=\"headerlink\" title=\"JMeter 扩展组件开发\"></a>JMeter 扩展组件开发</h3><pre><code class=\"shell\">$ Git 地址：\n</code></pre>\n<h2 id=\"Linux-服务器监控性能测试\"><a href=\"#Linux-服务器监控性能测试\" class=\"headerlink\" title=\"Linux 服务器监控性能测试\"></a>Linux 服务器监控性能测试</h2><h3 id=\"测试范围及性能指标\"><a href=\"#测试范围及性能指标\" class=\"headerlink\" title=\"测试范围及性能指标\"></a>测试范围及性能指标</h3><p><strong>—— —— CPU 内存 磁盘 网络 版本</strong></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li>进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）</li>\n<li>线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程</li>\n</ul>\n<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><ol>\n<li>一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。</li>\n<li>线程是进程工作的最小单位，</li>\n<li>一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。</li>\n<li>同一个进程下的不同的多个线程，共享父进程的地址空间。</li>\n<li>线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。</li>\n<li>线程作为调度和分派的基本单位，进程作为拥有资源的基本单位</li>\n</ol>\n<h4 id=\"进程的优缺点\"><a href=\"#进程的优缺点\" class=\"headerlink\" title=\"进程的优缺点\"></a>进程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程</li>\n<li>通过添加 CPU 可以扩充性能</li>\n<li>可以尽量减少线程加锁和解锁的影响，极大地提高了性能</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>逻辑控制复杂，需要和主程序交互</li>\n<li>多进程调度开销大</li>\n</ul>\n<h4 id=\"线程的优缺点\"><a href=\"#线程的优缺点\" class=\"headerlink\" title=\"线程的优缺点\"></a>线程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>程序的逻辑和控制方式简单</li>\n<li>所有线程可以共享内存和变量等</li>\n<li>线程方式消耗的总资源比进程方式少</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>线程与主程序共用地址空间，最大内存地址受限</li>\n<li>线程之间的同步和加锁不易控制（同步锁）</li>\n<li>一个线程的崩溃可能影响整个程序的稳定性</li>\n</ul>\n<h3 id=\"Linux-服务器监控命令\"><a href=\"#Linux-服务器监控命令\" class=\"headerlink\" title=\"Linux 服务器监控命令\"></a>Linux 服务器监控命令</h3><h4 id=\"实时监控命令\"><a href=\"#实时监控命令\" class=\"headerlink\" title=\"实时监控命令\"></a>实时监控命令</h4><ul>\n<li>top (实时监控-综合)<ul>\n<li>作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序</li>\n<li>top -h：帮助</li>\n<li>top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID</li>\n</ul>\n</li>\n<li>top 任务区命令(top 进入任务区)<ul>\n<li>M：按内存使用率排序</li>\n<li>P: 按 CPU 使用率排序</li>\n<li>z: 彩色 / 黑白显示</li>\n</ul>\n</li>\n</ul>\n<pre><code>load average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n</code></pre>\n<ul>\n<li>vmstat（实时监控 - 综合）<ul>\n<li>功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息</li>\n<li>选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）</li>\n<li>语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）</li>\n</ul>\n</li>\n<li>free (实时监控-内存)<ul>\n<li>功能：监控系统内存的使用状态</li>\n<li>语法：free -h</li>\n</ul>\n</li>\n</ul>\n<pre><code>free - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n</code></pre>\n<ul>\n<li>mpstat（实时监控 - CPU）<ul>\n<li>功能：可以查看多核心 CPU 中每个计算核心的统计数据</li>\n<li>参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息</li>\n<li>语法：mpstat [-P | ALL] [interval | count]</li>\n</ul>\n</li>\n</ul>\n<pre><code>mpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n</code></pre>\n<ul>\n<li>netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）<ul>\n<li>netstat -n 拒绝显示别名，能显示数字的全部显示数字</li>\n<li>netstat -l 仅列出有在 Listen（监听）的服务状态</li>\n<li>netstat -p 显示建立相关链接的程序名</li>\n<li>netstat -t 显示 TCP 相关选项</li>\n<li>netstat -u 仅显示 UDP 相关选项</li>\n<li>netstat -i 显示自动匹配接口的信息 ==&gt; 查看网络传输的大小以及有没有发生错误</li>\n<li>netstat -c 每隔一个固定时间，执行该 netstat 命令</li>\n</ul>\n</li>\n<li>iostat (实时监控 - 磁盘)<ul>\n<li>作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况</li>\n<li>iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n    重点关注： r/s 、w/s、 %util(繁忙程度)\n\n    &gt;&gt; 将命令结果以二进制格式存放在文件中\n</code></pre>\n<ul>\n<li>sar 万能命令<ul>\n<li>功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告</li>\n<li>监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动</li>\n<li>语法：sar [options] [-O file] t n ==&gt; (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">options 选项： \n    -A: 所有报告的总和； \n    -u: CPU 利用率； \n    -v: 进程、节点、文件和锁表的状态； \n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n</code></pre>\n<h4 id=\"进程追踪命令\"><a href=\"#进程追踪命令\" class=\"headerlink\" title=\"进程追踪命令\"></a>进程追踪命令</h4><ul>\n<li>strace<ul>\n<li>功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程</li>\n<li>选项 -p： 跟踪指定进程</li>\n<li>选项 -f: 跟踪由 fork 子进程系统调用</li>\n<li>选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等</li>\n<li>选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级</li>\n<li>选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出</li>\n<li>选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"监控工具-nmon\"><a href=\"#监控工具-nmon\" class=\"headerlink\" title=\"监控工具 nmon\"></a>监控工具 nmon</h4><pre><code>说明：\n下载：\n    wget\n</code></pre>\n<h2 id=\"数据驱动性能测试\"><a href=\"#数据驱动性能测试\" class=\"headerlink\" title=\"数据驱动性能测试\"></a>数据驱动性能测试</h2><pre><code>定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n    1. 测试数据与测试代码分离\n    2. 数据控制过程\n    3. 可以减少测试代码量\n    4. 降低脚本开发和维护的成本\n    5. 便于用例的修改和维护\n要求：\n    1. 较强的代码能力\n    2. 较强的分层架构设计思维\n    3. 对开发框架有一定的了解\n使用场景：\n     1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n</code></pre>\n<h2 id=\"数据库的架构设计\"><a href=\"#数据库的架构设计\" class=\"headerlink\" title=\"数据库的架构设计\"></a>数据库的架构设计</h2><h3 id=\"数据库性能测试\"><a href=\"#数据库性能测试\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h3><ul>\n<li>测试范围</li>\n</ul>\n<pre><code>1. SQL 语句   =&gt; 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n</code></pre>\n<h3 id=\"数据库架构\"><a href=\"#数据库架构\" class=\"headerlink\" title=\"数据库架构\"></a>数据库架构</h3><ul>\n<li>一主多从</li>\n</ul>\n<pre><code>读写分离：\n    master(主写，主库)\n    ==&gt;复制 slave(从读，从库)\n    ==&gt;复制 slave(从读，从库)\n缺点： 主从延迟\n</code></pre>\n<ul>\n<li>双机热备</li>\n</ul>\n<pre><code>KeepAlived\n    ==&gt; VIP (虚拟 IP)\n    ==&gt; master  ==&gt; 复制 ==&gt; slave\n缺点：\n优点：\n</code></pre>\n<h3 id=\"数据库主从同步的工作原理\"><a href=\"#数据库主从同步的工作原理\" class=\"headerlink\" title=\"数据库主从同步的工作原理\"></a>数据库主从同步的工作原理</h3><pre><code>1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n</code></pre>\n<h3 id=\"数据库分库分表的设计方法\"><a href=\"#数据库分库分表的设计方法\" class=\"headerlink\" title=\"数据库分库分表的设计方法\"></a>数据库分库分表的设计方法</h3><pre><code>分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==&gt; 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==&gt; userid%3 == 1\n            ==&gt; userid%3 == 2\n            ==&gt; userid%3 == 3\n</code></pre>\n<h2 id=\"数据库性能测试-1\"><a href=\"#数据库性能测试-1\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><ul>\n<li>MariaDB(主流分支)<ul>\n<li>MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL</li>\n<li>兼容 MySQL, 对于开发者来说感知不到变化</li>\n<li>MariaDB is free and open source software</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-数据库监控指标\"><a href=\"#MySQL-数据库监控指标\" class=\"headerlink\" title=\"MySQL 数据库监控指标\"></a>MySQL 数据库监控指标</h3><ul>\n<li>QPS(Queries per seconds)<ul>\n<li>每秒钟查询数量</li>\n<li>show global status like ‘Question%’;</li>\n</ul>\n</li>\n<li>TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds<ul>\n<li>show global status like ‘Com_commit’;</li>\n<li>show global status like ‘Com_rollback’;</li>\n</ul>\n</li>\n<li>线程连接数<ul>\n<li>show global status like ‘Max_used_connections’;(使用的最大连接数)</li>\n<li>show global status like ‘Max_connections’;(设置的最大连接数)</li>\n<li>show global status like ‘Threads%’;</li>\n</ul>\n</li>\n<li>Query Cache<ul>\n<li>查询缓存，用于缓存 select 查询结果</li>\n<li>当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果</li>\n<li>适用于大量查询，很少改变表中的数据</li>\n</ul>\n</li>\n<li>Query Cache 命中率（MySQL 特有）<ul>\n<li>show global status like ‘Qcache%’;</li>\n<li>命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) * 100%</li>\n</ul>\n</li>\n</ul>\n<pre><code>开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    =&gt; 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    =&gt; 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n</code></pre>\n<ul>\n<li>锁定状态<ul>\n<li>show global status like ‘%lock’;</li>\n<li>table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重</li>\n<li>innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的</li>\n<li>表锁、行锁、间隙锁</li>\n</ul>\n</li>\n<li>主从延时<ul>\n<li>查询主从延时时间： show slave status</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-慢查询工作原理及操作\"><a href=\"#MySQL-慢查询工作原理及操作\" class=\"headerlink\" title=\"MySQL 慢查询工作原理及操作\"></a>MySQL 慢查询工作原理及操作</h3><pre><code>慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n</code></pre>\n<ul>\n<li>慢查询日志分析<ul>\n<li>mysqldumpslow 命令</li>\n<li>-s : 表示按照何种方式排序</li>\n<li>-t : top n 的意思，即返回前面多少条数据</li>\n<li>-g : 后边可写正则匹配模式，大小写不敏感</li>\n</ul>\n</li>\n<li>mysqldumpslow -s 的更多参数<ul>\n<li>c 访问计数</li>\n<li>i 锁定时间</li>\n<li>r 返回记录</li>\n<li>t 查询时间</li>\n<li>al 平均锁定时间</li>\n<li>ar 平均返回记录数</li>\n<li>at 平均查询时间</li>\n</ul>\n</li>\n</ul>\n<pre><code>使用：\n    1. 得到返回记录集最多的 10 个 SQL\n        mysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n        mysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n        mysqldumpslow -s t -t 10 -g &quot;left join&quot; slow.log\n</code></pre>\n<ul>\n<li>SQL 语句性能分析<ul>\n<li>explain select 语句</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"markdown\">explain 返回结果分析\n    1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行\n    2. select_type: \n    3. table: 显示查询表名，&lt;derived N&gt; 临时表\n    **4. type: **\n        1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all**\n        2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引\n    5. possible_keys: 可能使用的索引\n    6. key: 真正使用到的索引\n    7. key_len: \n    8. ref:\n    9. rows: 估算的扫描行数\n    10. extra:\n</code></pre>\n<h3 id=\"MySQL-索引的概念及作用\"><a href=\"#MySQL-索引的概念及作用\" class=\"headerlink\" title=\"MySQL 索引的概念及作用\"></a>MySQL 索引的概念及作用</h3><p>[ 索引类型 ]</p>\n<ul>\n<li>主键索引（唯一索引，不允许有空值）</li>\n<li>全文索引（fulltext, MyISAM 表特有）</li>\n<li>唯一索引（值唯一，允许有空值）</li>\n<li>组合索引（多列索引，多列同时创建索引）</li>\n<li>普通索引（无限制）</li>\n</ul>\n<p>[ 索引创建规则 ]</p>\n<ul>\n<li>可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间</li>\n<li>在插入与更新数据时，要重写索引文件</li>\n<li>单张表索引数量最好不超过 5 个</li>\n<li>单个索引中的字段数不超过 5 个（组合索引）</li>\n<li>不适用索引的查询： like 模糊查询；反向查询，not in / not like</li>\n</ul>\n<h3 id=\"MySQL-存储引擎\"><a href=\"#MySQL-存储引擎\" class=\"headerlink\" title=\"MySQL 存储引擎\"></a>MySQL 存储引擎</h3><ul>\n<li>MyISAM（只支持表锁）</li>\n</ul>\n<pre><code>优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n</code></pre>\n<ul>\n<li>InnoDB</li>\n</ul>\n<pre><code>优点：\n    1. 支持事务 \n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n</code></pre>\n<h3 id=\"MySQL-实时监控\"><a href=\"#MySQL-实时监控\" class=\"headerlink\" title=\"MySQL 实时监控\"></a>MySQL 实时监控</h3><ul>\n<li>orzdba(监控工具)</li>\n</ul>\n<pre><code>./orzdba 执行\n使用：\n</code></pre>\n<h3 id=\"MySQL-集群监控方案-天兔-LEPUS\"><a href=\"#MySQL-集群监控方案-天兔-LEPUS\" class=\"headerlink\" title=\"MySQL 集群监控方案 - 天兔 LEPUS\"></a>MySQL 集群监控方案 - 天兔 LEPUS</h3><ul>\n<li>天兔 LEPUS 全部数据库实例监控</li>\n</ul>\n<pre><code>本地部署： 产品 &gt; 文档中心 &gt; 安装\n    admin /Lepusadmin\n</code></pre>\n<h3 id=\"MySQL-性能测试的用例准备\"><a href=\"#MySQL-性能测试的用例准备\" class=\"headerlink\" title=\"MySQL 性能测试的用例准备\"></a>MySQL 性能测试的用例准备</h3><pre><code>要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤： \n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"性能测试理论知识\"><a href=\"#性能测试理论知识\" class=\"headerlink\" title=\"性能测试理论知识\"></a>性能测试理论知识</h2><p><strong>性能测试的目的：发现性能的瓶颈</strong></p>\n<h3 id=\"负载测试\"><a href=\"#负载测试\" class=\"headerlink\" title=\"负载测试\"></a>负载测试</h3><pre><code>通过逐步加压的方法，达到既定的性能阀值的目标。\n    阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n</code></pre>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><pre><code>通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n</code></pre>\n<h3 id=\"并发测试\"><a href=\"#并发测试\" class=\"headerlink\" title=\"并发测试\"></a>并发测试</h3><pre><code>同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n</code></pre>\n<h3 id=\"容量测试\"><a href=\"#容量测试\" class=\"headerlink\" title=\"容量测试\"></a>容量测试</h3><pre><code>通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n    测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n</code></pre>\n<h3 id=\"可靠性测试（稳定性测试-疲劳测试）\"><a href=\"#可靠性测试（稳定性测试-疲劳测试）\" class=\"headerlink\" title=\"可靠性测试（稳定性测试 / 疲劳测试）\"></a>可靠性测试（稳定性测试 / 疲劳测试）</h3><pre><code>系统在高压的情况下，长时间的运行系统是否稳定。\n    如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n</code></pre>\n<h3 id=\"异常测试（失败测试）\"><a href=\"#异常测试（失败测试）\" class=\"headerlink\" title=\"异常测试（失败测试）\"></a>异常测试（失败测试）</h3><pre><code>指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n</code></pre>\n<h3 id=\"性能测试指标定义\"><a href=\"#性能测试指标定义\" class=\"headerlink\" title=\"性能测试指标定义\"></a>性能测试指标定义</h3><ul>\n<li>事务</li>\n</ul>\n<pre><code>从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n</code></pre>\n<ul>\n<li>TPS (Transactions Per Second)</li>\n</ul>\n<pre><code>每秒钟系统可以处理的事务数\n</code></pre>\n<ul>\n<li>QPS：(Query per second )</li>\n</ul>\n<pre><code>一台查询服务器每秒处理的请求次数\n</code></pre>\n<ul>\n<li>请求响应时间</li>\n</ul>\n<pre><code>从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n</code></pre>\n<ul>\n<li>事务响应时间</li>\n</ul>\n<pre><code>事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n</code></pre>\n<ul>\n<li>并发定义</li>\n</ul>\n<pre><code>没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n</code></pre>\n<ul>\n<li>并发用户数</li>\n</ul>\n<pre><code>同一单位时间内，对系统发起请求的用户数量\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>一次性能测试过程中，网络上传输的数据量的总和\n</code></pre>\n<ul>\n<li>吞吐率</li>\n</ul>\n<pre><code>单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n</code></pre>\n<ul>\n<li>点击率</li>\n</ul>\n<pre><code>每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n</code></pre>\n<ul>\n<li>资源使用率</li>\n</ul>\n<pre><code>对不同的系统资源的使用情况，如： CPU、内存、 IO\n</code></pre>\n<h3 id=\"性能测试的监控指标\"><a href=\"#性能测试的监控指标\" class=\"headerlink\" title=\"性能测试的监控指标\"></a>性能测试的监控指标</h3><ul>\n<li>响应时间</li>\n</ul>\n<pre><code>反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n</code></pre>\n<ul>\n<li>服务器资源占用</li>\n</ul>\n<pre><code>服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n</code></pre>\n<h3 id=\"性能测试的原理\"><a href=\"#性能测试的原理\" class=\"headerlink\" title=\"性能测试的原理\"></a>性能测试的原理</h3><ul>\n<li>用户行为模拟</li>\n</ul>\n<pre><code>低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n    1. 通过参数化，实现不同用户使用不同数据 \n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n</code></pre>\n<ul>\n<li>性能指标监控</li>\n</ul>\n<pre><code>通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n</code></pre>\n<ul>\n<li>性能调优</li>\n</ul>\n<pre><code>通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n</code></pre>\n<h2 id=\"性能测试的工作流程\"><a href=\"#性能测试的工作流程\" class=\"headerlink\" title=\"性能测试的工作流程\"></a>性能测试的工作流程</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&originHeight=426&originWidth=767&size=0&status=done&style=none&width=767\"></p>\n<h3 id=\"性能测试的需求分析\"><a href=\"#性能测试的需求分析\" class=\"headerlink\" title=\"性能测试的需求分析\"></a>性能测试的需求分析</h3><ul>\n<li>目的: 明确测试目标和测试场景</li>\n<li>新系统<ul>\n<li>同行业比较</li>\n<li>业务预期</li>\n</ul>\n</li>\n<li>老系统<ul>\n<li>对比以往用户的使用行为以及用户量</li>\n</ul>\n</li>\n<li>性能需求的的提取</li>\n</ul>\n<pre><code>1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n</code></pre>\n<h3 id=\"系统应用分层架构\"><a href=\"#系统应用分层架构\" class=\"headerlink\" title=\"系统应用分层架构\"></a>系统应用分层架构</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=832&size=0&status=done&style=none&width=832\"></p>\n<h2 id=\"JMeter-性能测试\"><a href=\"#JMeter-性能测试\" class=\"headerlink\" title=\"JMeter 性能测试\"></a>JMeter 性能测试</h2><h3 id=\"JMeter-实现逻辑分支控制\"><a href=\"#JMeter-实现逻辑分支控制\" class=\"headerlink\" title=\"JMeter 实现逻辑分支控制\"></a>JMeter 实现逻辑分支控制</h3><ul>\n<li>逻辑控制器<ul>\n<li>用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)</li>\n<li>如果（if）控制器</li>\n<li>include Controller</li>\n<li>Runtime Controller</li>\n<li>Switch Controller</li>\n<li>While Controller</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JMeter-实现配置管理\"><a href=\"#JMeter-实现配置管理\" class=\"headerlink\" title=\"JMeter 实现配置管理\"></a>JMeter 实现配置管理</h3><ul>\n<li>配置元件</li>\n</ul>\n<h3 id=\"JMeter-函数助手\"><a href=\"#JMeter-函数助手\" class=\"headerlink\" title=\"JMeter 函数助手\"></a>JMeter 函数助手</h3><ul>\n<li>_CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时</li>\n</ul>\n<pre><code>_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： $&#123;__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)&#125;\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n</code></pre>\n<ul>\n<li>_Random： 生成随机数</li>\n</ul>\n<pre><code>_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==&gt; 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==&gt; 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==&gt; 为生成随机数添加变量名称   id(可任意)\n\n    生成的函数字符串：$&#123;__Random(2,100,)&#125;  ==&gt; id = 55(随机数)\n</code></pre>\n<ul>\n<li>_Log：</li>\n</ul>\n<pre><code>log 函数参数说明：\n\n    String to be logged (and returned) ==&gt; 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==&gt; 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==&gt; 抛出的异常信息\n</code></pre>\n<ul>\n<li>_Split： 字符串分割函数</li>\n</ul>\n<h3 id=\"聚合报告\"><a href=\"#聚合报告\" class=\"headerlink\" title=\"聚合报告\"></a>聚合报告</h3><ul>\n<li>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值</li>\n<li>#Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100</li>\n<li>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间</li>\n<li>Median：中位数，也就是 50％ 用户的响应时间</li>\n<li>90% Line：90％ 用户的响应时间</li>\n<li>Min：最小响应时间</li>\n<li>Max：最大响应时间</li>\n<li>Error%：错误率 —— 错误请求数 / 请求总数</li>\n<li>Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数</li>\n<li>KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec</li>\n</ul>\n<p><strong>重点关注的数据：</strong></p>\n<ul>\n<li>Samples： 请求数</li>\n<li>Average： 平均响应时间</li>\n<li>Min： 最小响应时间</li>\n<li>Max： 最大响应时间</li>\n<li>Error%： 错误率</li>\n<li>Throughput： 吞吐量</li>\n</ul>\n<h3 id=\"JMeter-扩展组件开发\"><a href=\"#JMeter-扩展组件开发\" class=\"headerlink\" title=\"JMeter 扩展组件开发\"></a>JMeter 扩展组件开发</h3><pre><code class=\"shell\">$ Git 地址：\n</code></pre>\n<h2 id=\"Linux-服务器监控性能测试\"><a href=\"#Linux-服务器监控性能测试\" class=\"headerlink\" title=\"Linux 服务器监控性能测试\"></a>Linux 服务器监控性能测试</h2><h3 id=\"测试范围及性能指标\"><a href=\"#测试范围及性能指标\" class=\"headerlink\" title=\"测试范围及性能指标\"></a>测试范围及性能指标</h3><p><strong>—— —— CPU 内存 磁盘 网络 版本</strong></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li>进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）</li>\n<li>线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程</li>\n</ul>\n<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><ol>\n<li>一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。</li>\n<li>线程是进程工作的最小单位，</li>\n<li>一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。</li>\n<li>同一个进程下的不同的多个线程，共享父进程的地址空间。</li>\n<li>线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。</li>\n<li>线程作为调度和分派的基本单位，进程作为拥有资源的基本单位</li>\n</ol>\n<h4 id=\"进程的优缺点\"><a href=\"#进程的优缺点\" class=\"headerlink\" title=\"进程的优缺点\"></a>进程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程</li>\n<li>通过添加 CPU 可以扩充性能</li>\n<li>可以尽量减少线程加锁和解锁的影响，极大地提高了性能</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>逻辑控制复杂，需要和主程序交互</li>\n<li>多进程调度开销大</li>\n</ul>\n<h4 id=\"线程的优缺点\"><a href=\"#线程的优缺点\" class=\"headerlink\" title=\"线程的优缺点\"></a>线程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>程序的逻辑和控制方式简单</li>\n<li>所有线程可以共享内存和变量等</li>\n<li>线程方式消耗的总资源比进程方式少</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>线程与主程序共用地址空间，最大内存地址受限</li>\n<li>线程之间的同步和加锁不易控制（同步锁）</li>\n<li>一个线程的崩溃可能影响整个程序的稳定性</li>\n</ul>\n<h3 id=\"Linux-服务器监控命令\"><a href=\"#Linux-服务器监控命令\" class=\"headerlink\" title=\"Linux 服务器监控命令\"></a>Linux 服务器监控命令</h3><h4 id=\"实时监控命令\"><a href=\"#实时监控命令\" class=\"headerlink\" title=\"实时监控命令\"></a>实时监控命令</h4><ul>\n<li>top (实时监控-综合)<ul>\n<li>作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序</li>\n<li>top -h：帮助</li>\n<li>top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID</li>\n</ul>\n</li>\n<li>top 任务区命令(top 进入任务区)<ul>\n<li>M：按内存使用率排序</li>\n<li>P: 按 CPU 使用率排序</li>\n<li>z: 彩色 / 黑白显示</li>\n</ul>\n</li>\n</ul>\n<pre><code>load average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n</code></pre>\n<ul>\n<li>vmstat（实时监控 - 综合）<ul>\n<li>功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息</li>\n<li>选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）</li>\n<li>语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）</li>\n</ul>\n</li>\n<li>free (实时监控-内存)<ul>\n<li>功能：监控系统内存的使用状态</li>\n<li>语法：free -h</li>\n</ul>\n</li>\n</ul>\n<pre><code>free - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n</code></pre>\n<ul>\n<li>mpstat（实时监控 - CPU）<ul>\n<li>功能：可以查看多核心 CPU 中每个计算核心的统计数据</li>\n<li>参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息</li>\n<li>语法：mpstat [-P | ALL] [interval | count]</li>\n</ul>\n</li>\n</ul>\n<pre><code>mpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n</code></pre>\n<ul>\n<li>netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）<ul>\n<li>netstat -n 拒绝显示别名，能显示数字的全部显示数字</li>\n<li>netstat -l 仅列出有在 Listen（监听）的服务状态</li>\n<li>netstat -p 显示建立相关链接的程序名</li>\n<li>netstat -t 显示 TCP 相关选项</li>\n<li>netstat -u 仅显示 UDP 相关选项</li>\n<li>netstat -i 显示自动匹配接口的信息 ==&gt; 查看网络传输的大小以及有没有发生错误</li>\n<li>netstat -c 每隔一个固定时间，执行该 netstat 命令</li>\n</ul>\n</li>\n<li>iostat (实时监控 - 磁盘)<ul>\n<li>作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况</li>\n<li>iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n    重点关注： r/s 、w/s、 %util(繁忙程度)\n\n    &gt;&gt; 将命令结果以二进制格式存放在文件中\n</code></pre>\n<ul>\n<li>sar 万能命令<ul>\n<li>功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告</li>\n<li>监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动</li>\n<li>语法：sar [options] [-O file] t n ==&gt; (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">options 选项： \n    -A: 所有报告的总和； \n    -u: CPU 利用率； \n    -v: 进程、节点、文件和锁表的状态； \n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n</code></pre>\n<h4 id=\"进程追踪命令\"><a href=\"#进程追踪命令\" class=\"headerlink\" title=\"进程追踪命令\"></a>进程追踪命令</h4><ul>\n<li>strace<ul>\n<li>功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程</li>\n<li>选项 -p： 跟踪指定进程</li>\n<li>选项 -f: 跟踪由 fork 子进程系统调用</li>\n<li>选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等</li>\n<li>选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级</li>\n<li>选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出</li>\n<li>选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"监控工具-nmon\"><a href=\"#监控工具-nmon\" class=\"headerlink\" title=\"监控工具 nmon\"></a>监控工具 nmon</h4><pre><code>说明：\n下载：\n    wget\n</code></pre>\n<h2 id=\"数据驱动性能测试\"><a href=\"#数据驱动性能测试\" class=\"headerlink\" title=\"数据驱动性能测试\"></a>数据驱动性能测试</h2><pre><code>定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n    1. 测试数据与测试代码分离\n    2. 数据控制过程\n    3. 可以减少测试代码量\n    4. 降低脚本开发和维护的成本\n    5. 便于用例的修改和维护\n要求：\n    1. 较强的代码能力\n    2. 较强的分层架构设计思维\n    3. 对开发框架有一定的了解\n使用场景：\n     1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n</code></pre>\n<h2 id=\"数据库的架构设计\"><a href=\"#数据库的架构设计\" class=\"headerlink\" title=\"数据库的架构设计\"></a>数据库的架构设计</h2><h3 id=\"数据库性能测试\"><a href=\"#数据库性能测试\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h3><ul>\n<li>测试范围</li>\n</ul>\n<pre><code>1. SQL 语句   =&gt; 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n</code></pre>\n<h3 id=\"数据库架构\"><a href=\"#数据库架构\" class=\"headerlink\" title=\"数据库架构\"></a>数据库架构</h3><ul>\n<li>一主多从</li>\n</ul>\n<pre><code>读写分离：\n    master(主写，主库)\n    ==&gt;复制 slave(从读，从库)\n    ==&gt;复制 slave(从读，从库)\n缺点： 主从延迟\n</code></pre>\n<ul>\n<li>双机热备</li>\n</ul>\n<pre><code>KeepAlived\n    ==&gt; VIP (虚拟 IP)\n    ==&gt; master  ==&gt; 复制 ==&gt; slave\n缺点：\n优点：\n</code></pre>\n<h3 id=\"数据库主从同步的工作原理\"><a href=\"#数据库主从同步的工作原理\" class=\"headerlink\" title=\"数据库主从同步的工作原理\"></a>数据库主从同步的工作原理</h3><pre><code>1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n</code></pre>\n<h3 id=\"数据库分库分表的设计方法\"><a href=\"#数据库分库分表的设计方法\" class=\"headerlink\" title=\"数据库分库分表的设计方法\"></a>数据库分库分表的设计方法</h3><pre><code>分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==&gt; 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==&gt; userid%3 == 1\n            ==&gt; userid%3 == 2\n            ==&gt; userid%3 == 3\n</code></pre>\n<h2 id=\"数据库性能测试-1\"><a href=\"#数据库性能测试-1\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><ul>\n<li>MariaDB(主流分支)<ul>\n<li>MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL</li>\n<li>兼容 MySQL, 对于开发者来说感知不到变化</li>\n<li>MariaDB is free and open source software</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-数据库监控指标\"><a href=\"#MySQL-数据库监控指标\" class=\"headerlink\" title=\"MySQL 数据库监控指标\"></a>MySQL 数据库监控指标</h3><ul>\n<li>QPS(Queries per seconds)<ul>\n<li>每秒钟查询数量</li>\n<li>show global status like ‘Question%’;</li>\n</ul>\n</li>\n<li>TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds<ul>\n<li>show global status like ‘Com_commit’;</li>\n<li>show global status like ‘Com_rollback’;</li>\n</ul>\n</li>\n<li>线程连接数<ul>\n<li>show global status like ‘Max_used_connections’;(使用的最大连接数)</li>\n<li>show global status like ‘Max_connections’;(设置的最大连接数)</li>\n<li>show global status like ‘Threads%’;</li>\n</ul>\n</li>\n<li>Query Cache<ul>\n<li>查询缓存，用于缓存 select 查询结果</li>\n<li>当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果</li>\n<li>适用于大量查询，很少改变表中的数据</li>\n</ul>\n</li>\n<li>Query Cache 命中率（MySQL 特有）<ul>\n<li>show global status like ‘Qcache%’;</li>\n<li>命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) * 100%</li>\n</ul>\n</li>\n</ul>\n<pre><code>开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    =&gt; 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    =&gt; 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n</code></pre>\n<ul>\n<li>锁定状态<ul>\n<li>show global status like ‘%lock’;</li>\n<li>table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重</li>\n<li>innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的</li>\n<li>表锁、行锁、间隙锁</li>\n</ul>\n</li>\n<li>主从延时<ul>\n<li>查询主从延时时间： show slave status</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-慢查询工作原理及操作\"><a href=\"#MySQL-慢查询工作原理及操作\" class=\"headerlink\" title=\"MySQL 慢查询工作原理及操作\"></a>MySQL 慢查询工作原理及操作</h3><pre><code>慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n</code></pre>\n<ul>\n<li>慢查询日志分析<ul>\n<li>mysqldumpslow 命令</li>\n<li>-s : 表示按照何种方式排序</li>\n<li>-t : top n 的意思，即返回前面多少条数据</li>\n<li>-g : 后边可写正则匹配模式，大小写不敏感</li>\n</ul>\n</li>\n<li>mysqldumpslow -s 的更多参数<ul>\n<li>c 访问计数</li>\n<li>i 锁定时间</li>\n<li>r 返回记录</li>\n<li>t 查询时间</li>\n<li>al 平均锁定时间</li>\n<li>ar 平均返回记录数</li>\n<li>at 平均查询时间</li>\n</ul>\n</li>\n</ul>\n<pre><code>使用：\n    1. 得到返回记录集最多的 10 个 SQL\n        mysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n        mysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n        mysqldumpslow -s t -t 10 -g &quot;left join&quot; slow.log\n</code></pre>\n<ul>\n<li>SQL 语句性能分析<ul>\n<li>explain select 语句</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"markdown\">explain 返回结果分析\n    1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行\n    2. select_type: \n    3. table: 显示查询表名，&lt;derived N&gt; 临时表\n    **4. type: **\n        1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all**\n        2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引\n    5. possible_keys: 可能使用的索引\n    6. key: 真正使用到的索引\n    7. key_len: \n    8. ref:\n    9. rows: 估算的扫描行数\n    10. extra:\n</code></pre>\n<h3 id=\"MySQL-索引的概念及作用\"><a href=\"#MySQL-索引的概念及作用\" class=\"headerlink\" title=\"MySQL 索引的概念及作用\"></a>MySQL 索引的概念及作用</h3><p>[ 索引类型 ]</p>\n<ul>\n<li>主键索引（唯一索引，不允许有空值）</li>\n<li>全文索引（fulltext, MyISAM 表特有）</li>\n<li>唯一索引（值唯一，允许有空值）</li>\n<li>组合索引（多列索引，多列同时创建索引）</li>\n<li>普通索引（无限制）</li>\n</ul>\n<p>[ 索引创建规则 ]</p>\n<ul>\n<li>可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间</li>\n<li>在插入与更新数据时，要重写索引文件</li>\n<li>单张表索引数量最好不超过 5 个</li>\n<li>单个索引中的字段数不超过 5 个（组合索引）</li>\n<li>不适用索引的查询： like 模糊查询；反向查询，not in / not like</li>\n</ul>\n<h3 id=\"MySQL-存储引擎\"><a href=\"#MySQL-存储引擎\" class=\"headerlink\" title=\"MySQL 存储引擎\"></a>MySQL 存储引擎</h3><ul>\n<li>MyISAM（只支持表锁）</li>\n</ul>\n<pre><code>优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n</code></pre>\n<ul>\n<li>InnoDB</li>\n</ul>\n<pre><code>优点：\n    1. 支持事务 \n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n</code></pre>\n<h3 id=\"MySQL-实时监控\"><a href=\"#MySQL-实时监控\" class=\"headerlink\" title=\"MySQL 实时监控\"></a>MySQL 实时监控</h3><ul>\n<li>orzdba(监控工具)</li>\n</ul>\n<pre><code>./orzdba 执行\n使用：\n</code></pre>\n<h3 id=\"MySQL-集群监控方案-天兔-LEPUS\"><a href=\"#MySQL-集群监控方案-天兔-LEPUS\" class=\"headerlink\" title=\"MySQL 集群监控方案 - 天兔 LEPUS\"></a>MySQL 集群监控方案 - 天兔 LEPUS</h3><ul>\n<li>天兔 LEPUS 全部数据库实例监控</li>\n</ul>\n<pre><code>本地部署： 产品 &gt; 文档中心 &gt; 安装\n    admin /Lepusadmin\n</code></pre>\n<h3 id=\"MySQL-性能测试的用例准备\"><a href=\"#MySQL-性能测试的用例准备\" class=\"headerlink\" title=\"MySQL 性能测试的用例准备\"></a>MySQL 性能测试的用例准备</h3><pre><code>要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤： \n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n</code></pre>\n"},{"title":"adb 常用命令","date":"2020-07-12T16:00:00.000Z","comments":1,"abbrlink":2030954057,"_content":"- 列出所有的连接设备\n\n```\nadb devices\n```\n\n- 拷⻉⽂件/⽬录到设备\n\n```\n adb push E:/images/test.jpg /sdcard/\n```\n\n- 从设备拷⻉⽂件/⽬录\n\n```\n adb pull /sdcard/images/test.jpg E:\\tmp\n```\n\n- 浏览设备⽇志\n\n```\n adb logcat\n```\n\n- 列出所有包名\n\n```\n adb shell pm list packages\n```\n\n- 安装 apk ⽂件\n\n```\n adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n\n```\n\n- 卸载 app\n\n```\n adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n\n```\n\n- 查看 package name，启动应⽤后输⼊命令\n\n```\n windows环境下: adb shell dumpsys activity | findstr \"mFocusedActivity\"\n\n Linux、Mac环境下： adb shell dumpsys activity | grep \"mFocusedActivity\"\n```\n\n- 截图\n\n```\n adb shell screencap /sdcard/screen.png\n```\n\n- app 启动时间测试\n\n```\n 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n```\n\n**adb shell**\n\n- adb shell 进⼊ Android 设备环境\n- 设备基本信息：\n\n```\n 命令：cat /system/build.prop | grep \"product\"\n```\n\n```\n1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n```\n\n- 获取 cpu 信息\n\n```\n命令：cat /proc/cpuinfo\n```\n\n```\n1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n```\n\n- 获取设备内存\n\n```\n命令：cat /proc/meminfo\n```\n\n```\n1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n```\n","source":"_posts/软件测试/移动端测试/Adb 常用命令.md","raw":"---\ntitle: adb 常用命令\ndate: 2020-7-13\ncomments: true\ntags:\n  - 软件测试\n  - 移动端测试\n  - adb\ncategories:\n  - - 软件测试\n    - 移动端测试\nabbrlink: 2030954057\n---\n- 列出所有的连接设备\n\n```\nadb devices\n```\n\n- 拷⻉⽂件/⽬录到设备\n\n```\n adb push E:/images/test.jpg /sdcard/\n```\n\n- 从设备拷⻉⽂件/⽬录\n\n```\n adb pull /sdcard/images/test.jpg E:\\tmp\n```\n\n- 浏览设备⽇志\n\n```\n adb logcat\n```\n\n- 列出所有包名\n\n```\n adb shell pm list packages\n```\n\n- 安装 apk ⽂件\n\n```\n adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n\n```\n\n- 卸载 app\n\n```\n adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n\n```\n\n- 查看 package name，启动应⽤后输⼊命令\n\n```\n windows环境下: adb shell dumpsys activity | findstr \"mFocusedActivity\"\n\n Linux、Mac环境下： adb shell dumpsys activity | grep \"mFocusedActivity\"\n```\n\n- 截图\n\n```\n adb shell screencap /sdcard/screen.png\n```\n\n- app 启动时间测试\n\n```\n 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n```\n\n**adb shell**\n\n- adb shell 进⼊ Android 设备环境\n- 设备基本信息：\n\n```\n 命令：cat /system/build.prop | grep \"product\"\n```\n\n```\n1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n```\n\n- 获取 cpu 信息\n\n```\n命令：cat /proc/cpuinfo\n```\n\n```\n1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n```\n\n- 获取设备内存\n\n```\n命令：cat /proc/meminfo\n```\n\n```\n1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n```\n","slug":"软件测试/移动端测试/Adb 常用命令","published":1,"updated":"2022-02-04T09:45:53.736Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbl0014zc1beyjq3ri4","content":"<ul>\n<li>列出所有的连接设备</li>\n</ul>\n<pre><code>adb devices\n</code></pre>\n<ul>\n<li>拷⻉⽂件/⽬录到设备</li>\n</ul>\n<pre><code> adb push E:/images/test.jpg /sdcard/\n</code></pre>\n<ul>\n<li>从设备拷⻉⽂件/⽬录</li>\n</ul>\n<pre><code> adb pull /sdcard/images/test.jpg E:\\tmp\n</code></pre>\n<ul>\n<li>浏览设备⽇志</li>\n</ul>\n<pre><code> adb logcat\n</code></pre>\n<ul>\n<li>列出所有包名</li>\n</ul>\n<pre><code> adb shell pm list packages\n</code></pre>\n<ul>\n<li>安装 apk ⽂件</li>\n</ul>\n<pre><code> adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n</code></pre>\n<ul>\n<li>卸载 app</li>\n</ul>\n<pre><code> adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n</code></pre>\n<ul>\n<li>查看 package name，启动应⽤后输⼊命令</li>\n</ul>\n<pre><code> windows环境下: adb shell dumpsys activity | findstr &quot;mFocusedActivity&quot;\n\n Linux、Mac环境下： adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;\n</code></pre>\n<ul>\n<li>截图</li>\n</ul>\n<pre><code> adb shell screencap /sdcard/screen.png\n</code></pre>\n<ul>\n<li>app 启动时间测试</li>\n</ul>\n<pre><code> 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n</code></pre>\n<p><strong>adb shell</strong></p>\n<ul>\n<li>adb shell 进⼊ Android 设备环境</li>\n<li>设备基本信息：</li>\n</ul>\n<pre><code> 命令：cat /system/build.prop | grep &quot;product&quot;\n</code></pre>\n<pre><code>1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n</code></pre>\n<ul>\n<li>获取 cpu 信息</li>\n</ul>\n<pre><code>命令：cat /proc/cpuinfo\n</code></pre>\n<pre><code>1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n</code></pre>\n<ul>\n<li>获取设备内存</li>\n</ul>\n<pre><code>命令：cat /proc/meminfo\n</code></pre>\n<pre><code>1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<ul>\n<li>列出所有的连接设备</li>\n</ul>\n<pre><code>adb devices\n</code></pre>\n<ul>\n<li>拷⻉⽂件/⽬录到设备</li>\n</ul>\n<pre><code> adb push E:/images/test.jpg /sdcard/\n</code></pre>\n<ul>\n<li>从设备拷⻉⽂件/⽬录</li>\n</ul>\n<pre><code> adb pull /sdcard/images/test.jpg E:\\tmp\n</code></pre>\n<ul>\n<li>浏览设备⽇志</li>\n</ul>\n<pre><code> adb logcat\n</code></pre>\n<ul>\n<li>列出所有包名</li>\n</ul>\n<pre><code> adb shell pm list packages\n</code></pre>\n<ul>\n<li>安装 apk ⽂件</li>\n</ul>\n<pre><code> adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n</code></pre>\n<ul>\n<li>卸载 app</li>\n</ul>\n<pre><code> adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n</code></pre>\n<ul>\n<li>查看 package name，启动应⽤后输⼊命令</li>\n</ul>\n<pre><code> windows环境下: adb shell dumpsys activity | findstr &quot;mFocusedActivity&quot;\n\n Linux、Mac环境下： adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;\n</code></pre>\n<ul>\n<li>截图</li>\n</ul>\n<pre><code> adb shell screencap /sdcard/screen.png\n</code></pre>\n<ul>\n<li>app 启动时间测试</li>\n</ul>\n<pre><code> 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n</code></pre>\n<p><strong>adb shell</strong></p>\n<ul>\n<li>adb shell 进⼊ Android 设备环境</li>\n<li>设备基本信息：</li>\n</ul>\n<pre><code> 命令：cat /system/build.prop | grep &quot;product&quot;\n</code></pre>\n<pre><code>1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n</code></pre>\n<ul>\n<li>获取 cpu 信息</li>\n</ul>\n<pre><code>命令：cat /proc/cpuinfo\n</code></pre>\n<pre><code>1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n</code></pre>\n<ul>\n<li>获取设备内存</li>\n</ul>\n<pre><code>命令：cat /proc/meminfo\n</code></pre>\n<pre><code>1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n</code></pre>\n"},{"title":"Robot Framework","comments":1,"abbrlink":3888393026,"date":"2021-05-10T16:00:00.000Z","_content":"\n**特点**\n- 提供可视化界面 ride、 eclipse\n- txt、html 等格式编写测试用例，而不是编程语言\n- 支持**关键字驱动**（直接调用已有的关键字，组成自动化用例）\n- 支持 web 、app、api 自动化测试\n- 开源，基于 Python 编写\n\n## Robot Framework 环境搭建\n\n\n- **安装 wxPython**\n\n```shell\n$ 下载页面： http://wxpython.org/download.php#stable\n\t在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n\t比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n\t下载完成后，选择默认项进行安装即可。\n```\n\n\n- **安装 Robot Framwork**\n\n```shell\n$\tpip install robotframwork\n\t图形化界面：RIDE\n\t\tpip install robotframework-ride\n\t\tpip install robotframework-ride==1.7.4.1（指定版本安装）\n```\n\n\n- **安装 selenium2library**\n\n```shell\n$\tpip install robotframework-selenium2library\n```\n\n\n- **第三方包本地安装**\n\n```shell\n$  **.whl : \n$\t\tpip install  **.whl\n$  **.egg : \n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n$\t\tpython setup.py install\n```\n\n- **启动 RIDE**\n   - 通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide下的**init**.py文件）\n   - 通过命令启动（运行 -> ride.py 回车 / 确认）\n```shell\n$\tcd C:\\Python27\\Scripts\\\n# 运行\n$ python ride.py\n```\n\n   - 将C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。\n- **查看 pybot 版本**\n\n```shell\n$\tcd C:\\Python27\\Scripts\n# 运行\n$ pybot --version\n```\n\n## Robot Framework + PyCharm\n\n\n- **pyCharm 插件**\n\n```shell\n$\tFile >> Settings >> Plugins >> intelliBot 插件 install\n```\n\n\n- **RobotFramework 的文件类型识别配置**\n\n```shell\n$\tFile >> Settings >> Editor >> File Types\n$\t\t列表中 找到 Robot Feature 选中\n$\t\tFile Name Patterns: 点击 +  >> 分别添加 *.txt 和 *.\n```\n\n\n- **Suite 和 Case 的执行配置**\n\n```shell\n$\t在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$ \tFile >> Settings >> Tools >> External Tools >> 点击 +\n$ \t\tName：Robot Run SingleTestCase\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t \"$SelectedText$\" ./\n$       Working directory：$FileDir$\n$\t点击 + \n$       Name：Robot Run TestSuite\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n```\n\n\n- **问题解决**\n\n```shell\n解决：‘chromedriver’ executable needs to be in PATH 问题 \n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n```\n\n## Robot Framework + Eclipse\n\n\n\n\n## Robot Framework + RIDE\n\n\n### RIDE 的使用\n\n\n```shell\n工程创建： \n\tFile => New Project\n\t\t\t=> Type: Directory(方便管理) 如果内容简单选择 file\n\t\t\t=> Format: 推荐 txt \n\t\t => New Suite(测试套件)\n\t\t \t=> Type: file\n\t\t \t=> Format: txt\n\t\t => New Test Case\n\t注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径  \n\nSettings:\n\tDocumentation：文档，每一项都有。可以给当前的对象加入文档说明。\n\tSetup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n\tSuite Stetup: 套件启动\n\tSuite Teardown: 套件停止\n\tTest Steup: 案例启动\n\tTest Teardown: 案例停止\n\tForce Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n\t右键 工程名称 => New Resource\n\t或\n\t右键 External Resources => Add Resource\n\t\n用户关键字：（Resource 用来保存用户关键字）\n\t右键新创建的资源 => New User Keyword \nUser Keyword 工作区：\n\tTags： \n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n    \n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n```\n##### 测试套件（TestSuite）\n```\n测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n\tDocumentation：\n\tSuite Stetup:\n\tSuite Teardown: \n\tTest Steup: \n\tTest Teardown:\n\tTest Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n\tTest Timeout：\n\tForce Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n\t\n\t\n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n\tAdd Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n```\n\n\n##### 测试用例（TestCase）\n```shell\n测试用例工作区：\n\nSettings:\n\tDocumentation：略\n\tStetup: 略\n\tTeardown: 略\n\tTemplate：略\n\tTimeout：略\n```\n\n##### Run 页面\n\n","source":"_posts/软件测试/自动化测试/Robot Framework .md","raw":"---\ntitle: Robot Framework\ncomments: true\ntags:\n  - 软件测试\n  - 自动化测试，Robot Framework\ncategories:\n  - - 软件测试\n    - 自动化测试\nabbrlink: 3888393026\ndate: 2021-05-11 00:00:00\n---\n\n**特点**\n- 提供可视化界面 ride、 eclipse\n- txt、html 等格式编写测试用例，而不是编程语言\n- 支持**关键字驱动**（直接调用已有的关键字，组成自动化用例）\n- 支持 web 、app、api 自动化测试\n- 开源，基于 Python 编写\n\n## Robot Framework 环境搭建\n\n\n- **安装 wxPython**\n\n```shell\n$ 下载页面： http://wxpython.org/download.php#stable\n\t在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n\t比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n\t下载完成后，选择默认项进行安装即可。\n```\n\n\n- **安装 Robot Framwork**\n\n```shell\n$\tpip install robotframwork\n\t图形化界面：RIDE\n\t\tpip install robotframework-ride\n\t\tpip install robotframework-ride==1.7.4.1（指定版本安装）\n```\n\n\n- **安装 selenium2library**\n\n```shell\n$\tpip install robotframework-selenium2library\n```\n\n\n- **第三方包本地安装**\n\n```shell\n$  **.whl : \n$\t\tpip install  **.whl\n$  **.egg : \n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n$\t\tpython setup.py install\n```\n\n- **启动 RIDE**\n   - 通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide下的**init**.py文件）\n   - 通过命令启动（运行 -> ride.py 回车 / 确认）\n```shell\n$\tcd C:\\Python27\\Scripts\\\n# 运行\n$ python ride.py\n```\n\n   - 将C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。\n- **查看 pybot 版本**\n\n```shell\n$\tcd C:\\Python27\\Scripts\n# 运行\n$ pybot --version\n```\n\n## Robot Framework + PyCharm\n\n\n- **pyCharm 插件**\n\n```shell\n$\tFile >> Settings >> Plugins >> intelliBot 插件 install\n```\n\n\n- **RobotFramework 的文件类型识别配置**\n\n```shell\n$\tFile >> Settings >> Editor >> File Types\n$\t\t列表中 找到 Robot Feature 选中\n$\t\tFile Name Patterns: 点击 +  >> 分别添加 *.txt 和 *.\n```\n\n\n- **Suite 和 Case 的执行配置**\n\n```shell\n$\t在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$ \tFile >> Settings >> Tools >> External Tools >> 点击 +\n$ \t\tName：Robot Run SingleTestCase\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t \"$SelectedText$\" ./\n$       Working directory：$FileDir$\n$\t点击 + \n$       Name：Robot Run TestSuite\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n```\n\n\n- **问题解决**\n\n```shell\n解决：‘chromedriver’ executable needs to be in PATH 问题 \n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n```\n\n## Robot Framework + Eclipse\n\n\n\n\n## Robot Framework + RIDE\n\n\n### RIDE 的使用\n\n\n```shell\n工程创建： \n\tFile => New Project\n\t\t\t=> Type: Directory(方便管理) 如果内容简单选择 file\n\t\t\t=> Format: 推荐 txt \n\t\t => New Suite(测试套件)\n\t\t \t=> Type: file\n\t\t \t=> Format: txt\n\t\t => New Test Case\n\t注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径  \n\nSettings:\n\tDocumentation：文档，每一项都有。可以给当前的对象加入文档说明。\n\tSetup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n\tSuite Stetup: 套件启动\n\tSuite Teardown: 套件停止\n\tTest Steup: 案例启动\n\tTest Teardown: 案例停止\n\tForce Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n\t右键 工程名称 => New Resource\n\t或\n\t右键 External Resources => Add Resource\n\t\n用户关键字：（Resource 用来保存用户关键字）\n\t右键新创建的资源 => New User Keyword \nUser Keyword 工作区：\n\tTags： \n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n    \n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n```\n##### 测试套件（TestSuite）\n```\n测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n\tDocumentation：\n\tSuite Stetup:\n\tSuite Teardown: \n\tTest Steup: \n\tTest Teardown:\n\tTest Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n\tTest Timeout：\n\tForce Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n\t\n\t\n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n\tAdd Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n```\n\n\n##### 测试用例（TestCase）\n```shell\n测试用例工作区：\n\nSettings:\n\tDocumentation：略\n\tStetup: 略\n\tTeardown: 略\n\tTemplate：略\n\tTimeout：略\n```\n\n##### Run 页面\n\n","slug":"软件测试/自动化测试/Robot Framework ","published":1,"updated":"2022-02-04T09:45:53.735Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbm0016zc1b2wyg8xlo","content":"<p><strong>特点</strong></p>\n<ul>\n<li>提供可视化界面 ride、 eclipse</li>\n<li>txt、html 等格式编写测试用例，而不是编程语言</li>\n<li>支持<strong>关键字驱动</strong>（直接调用已有的关键字，组成自动化用例）</li>\n<li>支持 web 、app、api 自动化测试</li>\n<li>开源，基于 Python 编写</li>\n</ul>\n<h2 id=\"Robot-Framework-环境搭建\"><a href=\"#Robot-Framework-环境搭建\" class=\"headerlink\" title=\"Robot Framework 环境搭建\"></a>Robot Framework 环境搭建</h2><ul>\n<li><strong>安装 wxPython</strong></li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面： http://wxpython.org/download.php#stable\n    在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n    比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n    下载完成后，选择默认项进行安装即可。\n</code></pre>\n<ul>\n<li><strong>安装 Robot Framwork</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframwork\n    图形化界面：RIDE\n        pip install robotframework-ride\n        pip install robotframework-ride==1.7.4.1（指定版本安装）\n</code></pre>\n<ul>\n<li><strong>安装 selenium2library</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframework-selenium2library\n</code></pre>\n<ul>\n<li><strong>第三方包本地安装</strong></li>\n</ul>\n<pre><code class=\"shell\">$  **.whl : \n$        pip install  **.whl\n$  **.egg : \n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n$        python setup.py install\n</code></pre>\n<ul>\n<li><p><strong>启动 RIDE</strong></p>\n<ul>\n<li><p>通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide下的<strong>init</strong>.py文件）</p>\n</li>\n<li><p>通过命令启动（运行 -&gt; ride.py 回车 / 确认）</p>\n<pre><code class=\"shell\">$    cd C:\\Python27\\Scripts\\\n# 运行\n$ python ride.py\n</code></pre>\n</li>\n<li><p>将C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>查看 pybot 版本</strong></p>\n</li>\n</ul>\n<pre><code class=\"shell\">$    cd C:\\Python27\\Scripts\n# 运行\n$ pybot --version\n</code></pre>\n<h2 id=\"Robot-Framework-PyCharm\"><a href=\"#Robot-Framework-PyCharm\" class=\"headerlink\" title=\"Robot Framework + PyCharm\"></a>Robot Framework + PyCharm</h2><ul>\n<li><strong>pyCharm 插件</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Plugins &gt;&gt; intelliBot 插件 install\n</code></pre>\n<ul>\n<li><strong>RobotFramework 的文件类型识别配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Editor &gt;&gt; File Types\n$        列表中 找到 Robot Feature 选中\n$        File Name Patterns: 点击 +  &gt;&gt; 分别添加 *.txt 和 *.\n</code></pre>\n<ul>\n<li><strong>Suite 和 Case 的执行配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$     File &gt;&gt; Settings &gt;&gt; Tools &gt;&gt; External Tools &gt;&gt; 点击 +\n$         Name：Robot Run SingleTestCase\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t &quot;$SelectedText$&quot; ./\n$       Working directory：$FileDir$\n$    点击 + \n$       Name：Robot Run TestSuite\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n</code></pre>\n<ul>\n<li><strong>问题解决</strong></li>\n</ul>\n<pre><code class=\"shell\">解决：‘chromedriver’ executable needs to be in PATH 问题 \n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n</code></pre>\n<h2 id=\"Robot-Framework-Eclipse\"><a href=\"#Robot-Framework-Eclipse\" class=\"headerlink\" title=\"Robot Framework + Eclipse\"></a>Robot Framework + Eclipse</h2><h2 id=\"Robot-Framework-RIDE\"><a href=\"#Robot-Framework-RIDE\" class=\"headerlink\" title=\"Robot Framework + RIDE\"></a>Robot Framework + RIDE</h2><h3 id=\"RIDE-的使用\"><a href=\"#RIDE-的使用\" class=\"headerlink\" title=\"RIDE 的使用\"></a>RIDE 的使用</h3><pre><code class=\"shell\">工程创建： \n    File =&gt; New Project\n            =&gt; Type: Directory(方便管理) 如果内容简单选择 file\n            =&gt; Format: 推荐 txt \n         =&gt; New Suite(测试套件)\n             =&gt; Type: file\n             =&gt; Format: txt\n         =&gt; New Test Case\n    注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径  \n\nSettings:\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n    Setup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n    Suite Stetup: 套件启动\n    Suite Teardown: 套件停止\n    Test Steup: 案例启动\n    Test Teardown: 案例停止\n    Force Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n    右键 工程名称 =&gt; New Resource\n    或\n    右键 External Resources =&gt; Add Resource\n    \n用户关键字：（Resource 用来保存用户关键字）\n    右键新创建的资源 =&gt; New User Keyword \nUser Keyword 工作区：\n    Tags： \n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n    \n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n</code></pre>\n<h5 id=\"测试套件（TestSuite）\"><a href=\"#测试套件（TestSuite）\" class=\"headerlink\" title=\"测试套件（TestSuite）\"></a>测试套件（TestSuite）</h5><pre><code>测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n    Documentation：\n    Suite Stetup:\n    Suite Teardown: \n    Test Steup: \n    Test Teardown:\n    Test Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n    Test Timeout：\n    Force Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n    \n    \n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n    Add Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n</code></pre>\n<h5 id=\"测试用例（TestCase）\"><a href=\"#测试用例（TestCase）\" class=\"headerlink\" title=\"测试用例（TestCase）\"></a>测试用例（TestCase）</h5><pre><code class=\"shell\">测试用例工作区：\n\nSettings:\n    Documentation：略\n    Stetup: 略\n    Teardown: 略\n    Template：略\n    Timeout：略\n</code></pre>\n<h5 id=\"Run-页面\"><a href=\"#Run-页面\" class=\"headerlink\" title=\"Run 页面\"></a>Run 页面</h5>","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><strong>特点</strong></p>\n<ul>\n<li>提供可视化界面 ride、 eclipse</li>\n<li>txt、html 等格式编写测试用例，而不是编程语言</li>\n<li>支持<strong>关键字驱动</strong>（直接调用已有的关键字，组成自动化用例）</li>\n<li>支持 web 、app、api 自动化测试</li>\n<li>开源，基于 Python 编写</li>\n</ul>\n<h2 id=\"Robot-Framework-环境搭建\"><a href=\"#Robot-Framework-环境搭建\" class=\"headerlink\" title=\"Robot Framework 环境搭建\"></a>Robot Framework 环境搭建</h2><ul>\n<li><strong>安装 wxPython</strong></li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面： http://wxpython.org/download.php#stable\n    在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n    比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n    下载完成后，选择默认项进行安装即可。\n</code></pre>\n<ul>\n<li><strong>安装 Robot Framwork</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframwork\n    图形化界面：RIDE\n        pip install robotframework-ride\n        pip install robotframework-ride==1.7.4.1（指定版本安装）\n</code></pre>\n<ul>\n<li><strong>安装 selenium2library</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframework-selenium2library\n</code></pre>\n<ul>\n<li><strong>第三方包本地安装</strong></li>\n</ul>\n<pre><code class=\"shell\">$  **.whl : \n$        pip install  **.whl\n$  **.egg : \n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n$        python setup.py install\n</code></pre>\n<ul>\n<li><p><strong>启动 RIDE</strong></p>\n<ul>\n<li><p>通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide下的<strong>init</strong>.py文件）</p>\n</li>\n<li><p>通过命令启动（运行 -&gt; ride.py 回车 / 确认）</p>\n<pre><code class=\"shell\">$    cd C:\\Python27\\Scripts\\\n# 运行\n$ python ride.py\n</code></pre>\n</li>\n<li><p>将C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>查看 pybot 版本</strong></p>\n</li>\n</ul>\n<pre><code class=\"shell\">$    cd C:\\Python27\\Scripts\n# 运行\n$ pybot --version\n</code></pre>\n<h2 id=\"Robot-Framework-PyCharm\"><a href=\"#Robot-Framework-PyCharm\" class=\"headerlink\" title=\"Robot Framework + PyCharm\"></a>Robot Framework + PyCharm</h2><ul>\n<li><strong>pyCharm 插件</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Plugins &gt;&gt; intelliBot 插件 install\n</code></pre>\n<ul>\n<li><strong>RobotFramework 的文件类型识别配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Editor &gt;&gt; File Types\n$        列表中 找到 Robot Feature 选中\n$        File Name Patterns: 点击 +  &gt;&gt; 分别添加 *.txt 和 *.\n</code></pre>\n<ul>\n<li><strong>Suite 和 Case 的执行配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$     File &gt;&gt; Settings &gt;&gt; Tools &gt;&gt; External Tools &gt;&gt; 点击 +\n$         Name：Robot Run SingleTestCase\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t &quot;$SelectedText$&quot; ./\n$       Working directory：$FileDir$\n$    点击 + \n$       Name：Robot Run TestSuite\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n</code></pre>\n<ul>\n<li><strong>问题解决</strong></li>\n</ul>\n<pre><code class=\"shell\">解决：‘chromedriver’ executable needs to be in PATH 问题 \n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n</code></pre>\n<h2 id=\"Robot-Framework-Eclipse\"><a href=\"#Robot-Framework-Eclipse\" class=\"headerlink\" title=\"Robot Framework + Eclipse\"></a>Robot Framework + Eclipse</h2><h2 id=\"Robot-Framework-RIDE\"><a href=\"#Robot-Framework-RIDE\" class=\"headerlink\" title=\"Robot Framework + RIDE\"></a>Robot Framework + RIDE</h2><h3 id=\"RIDE-的使用\"><a href=\"#RIDE-的使用\" class=\"headerlink\" title=\"RIDE 的使用\"></a>RIDE 的使用</h3><pre><code class=\"shell\">工程创建： \n    File =&gt; New Project\n            =&gt; Type: Directory(方便管理) 如果内容简单选择 file\n            =&gt; Format: 推荐 txt \n         =&gt; New Suite(测试套件)\n             =&gt; Type: file\n             =&gt; Format: txt\n         =&gt; New Test Case\n    注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径  \n\nSettings:\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n    Setup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n    Suite Stetup: 套件启动\n    Suite Teardown: 套件停止\n    Test Steup: 案例启动\n    Test Teardown: 案例停止\n    Force Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n    右键 工程名称 =&gt; New Resource\n    或\n    右键 External Resources =&gt; Add Resource\n    \n用户关键字：（Resource 用来保存用户关键字）\n    右键新创建的资源 =&gt; New User Keyword \nUser Keyword 工作区：\n    Tags： \n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n    \n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n</code></pre>\n<h5 id=\"测试套件（TestSuite）\"><a href=\"#测试套件（TestSuite）\" class=\"headerlink\" title=\"测试套件（TestSuite）\"></a>测试套件（TestSuite）</h5><pre><code>测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n    Documentation：\n    Suite Stetup:\n    Suite Teardown: \n    Test Steup: \n    Test Teardown:\n    Test Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n    Test Timeout：\n    Force Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n    \n    \n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n    Add Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n</code></pre>\n<h5 id=\"测试用例（TestCase）\"><a href=\"#测试用例（TestCase）\" class=\"headerlink\" title=\"测试用例（TestCase）\"></a>测试用例（TestCase）</h5><pre><code class=\"shell\">测试用例工作区：\n\nSettings:\n    Documentation：略\n    Stetup: 略\n    Teardown: 略\n    Template：略\n    Timeout：略\n</code></pre>\n<h5 id=\"Run-页面\"><a href=\"#Run-页面\" class=\"headerlink\" title=\"Run 页面\"></a>Run 页面</h5>"},{"title":"信息系统项目管理","comments":1,"abbrlink":2949196864,"date":"2021-12-31T16:00:00.000Z","_content":"\n\n\n> 信息系统项目管理学习资料：\n>\n> ​\t最好是 2020 年或 2021 年，首选是 51 CTO 薛大龙，然后是马军或野人老师等\n\n","source":"_posts/软考2022/信息系统项目管理师/信息系统项目管理.md","raw":"---\ntitle: 信息系统项目管理\ncomments: true\ntags:\n  - 软考\n  - 信息系统项目管理\ncategories:\n  - - 软考 2022\n    - 信息系统项目管理师\nabbrlink: 2949196864\ndate: 2022-01-01 00:00:00\n---\n\n\n\n> 信息系统项目管理学习资料：\n>\n> ​\t最好是 2020 年或 2021 年，首选是 51 CTO 薛大龙，然后是马军或野人老师等\n\n","slug":"软考2022/信息系统项目管理师/信息系统项目管理","published":1,"updated":"2022-02-04T09:45:53.747Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbn001bzc1bgujf08m8","content":"<blockquote>\n<p>信息系统项目管理学习资料：</p>\n<p>​    最好是 2020 年或 2021 年，首选是 51 CTO 薛大龙，然后是马军或野人老师等</p>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<blockquote>\n<p>信息系统项目管理学习资料：</p>\n<p>​    最好是 2020 年或 2021 年，首选是 51 CTO 薛大龙，然后是马军或野人老师等</p>\n</blockquote>\n"},{"title":"圣杯布局和双飞翼布局","comments":1,"abbrlink":1718216264,"date":"2019-10-31T16:00:00.000Z","_content":"### 什么是圣杯布局\n- 布局效果类似于圣杯而得名，也叫做三行三列布局。\n- 定宽 — 自适应 — 定宽\n<!-- more -->\n![圣杯布局](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png)\n\n\n[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]\n```html\n   <style>\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * \n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        background-color: #eee;\n        padding: 10px; \n    }\n    .left,\n    .center, \n    .right {\n        height: 300px;\n    }\n    .left,\n    .right {\n        width: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    }\n    .center {\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    .right {\n        background-color: #ff0000;\n        float: right;\n    }\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    </style>\n</head>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n        <div class=\"center\"> 中：定宽 </div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n```\n\n[ 圣杯布局的实现 ]\n```html\n    <style>\n      /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        background-color: #eee;\n        /* 解决父级元素高度塌陷 */\n        height: 300px;\n        /* 对应 left 的宽度 */\n        margin-left: 300px;\n        /* 对应 right 的宽度  */\n        margin-right: 300px;\n    }\n    .left,\n    .center, \n    .right {\n        height: 300px;\n        /* 使三个div 浮动 */\n        float: left;\n    }\n    .left,\n    .right {\n        width: 300px;\n    }\n\n    .left {\n        background-color: #00ffff;\n        /* 将当前元素从当前行移动到上一行同一个位置*/\n        margin-left: -100%;\n        /* 将当前元素移动到理想位置 */\n        position: relative;\n        left: -300px;\n    }\n    .center {\n        width: 100%;\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff0000;\n        margin-left: -300px;\n        position: relative;\n        right: -300px;\n    }\n    </style>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"center\"> 中：定宽 </div>\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n    <div class=\"footer\"></div>\n</body>     \n```\n### 什么是双飞翼布局\n—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。\n\n[ 双飞翼布局的实现 ]\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>双飞翼布局</title>\n    <style>\n        /* \n         *   \n         *\n         */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        height: 300px;\n        background-color: #eee;\n\n    }\n    .left {\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    }\n    .center {\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    }\n    .right {\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    }\n    .inner {\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    </style>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"center\">\n            <div class=\"inner\">中：定宽</div>\n        </div>\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n</html>\n\n\n```\n","source":"_posts/前端领域/小专栏/页面布局/圣杯布局和双飞翼布局.md","raw":"---\ntitle: 圣杯布局和双飞翼布局\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 1718216264\ndate: 2019-11-01 00:00:00\n---\n### 什么是圣杯布局\n- 布局效果类似于圣杯而得名，也叫做三行三列布局。\n- 定宽 — 自适应 — 定宽\n<!-- more -->\n![圣杯布局](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png)\n\n\n[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]\n```html\n   <style>\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * \n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        background-color: #eee;\n        padding: 10px; \n    }\n    .left,\n    .center, \n    .right {\n        height: 300px;\n    }\n    .left,\n    .right {\n        width: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    }\n    .center {\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    .right {\n        background-color: #ff0000;\n        float: right;\n    }\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    </style>\n</head>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n        <div class=\"center\"> 中：定宽 </div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n```\n\n[ 圣杯布局的实现 ]\n```html\n    <style>\n      /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        background-color: #eee;\n        /* 解决父级元素高度塌陷 */\n        height: 300px;\n        /* 对应 left 的宽度 */\n        margin-left: 300px;\n        /* 对应 right 的宽度  */\n        margin-right: 300px;\n    }\n    .left,\n    .center, \n    .right {\n        height: 300px;\n        /* 使三个div 浮动 */\n        float: left;\n    }\n    .left,\n    .right {\n        width: 300px;\n    }\n\n    .left {\n        background-color: #00ffff;\n        /* 将当前元素从当前行移动到上一行同一个位置*/\n        margin-left: -100%;\n        /* 将当前元素移动到理想位置 */\n        position: relative;\n        left: -300px;\n    }\n    .center {\n        width: 100%;\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff0000;\n        margin-left: -300px;\n        position: relative;\n        right: -300px;\n    }\n    </style>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"center\"> 中：定宽 </div>\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n    <div class=\"footer\"></div>\n</body>     \n```\n### 什么是双飞翼布局\n—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。\n\n[ 双飞翼布局的实现 ]\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>双飞翼布局</title>\n    <style>\n        /* \n         *   \n         *\n         */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        height: 300px;\n        background-color: #eee;\n\n    }\n    .left {\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    }\n    .center {\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    }\n    .right {\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    }\n    .inner {\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    </style>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"center\">\n            <div class=\"inner\">中：定宽</div>\n        </div>\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n</html>\n\n\n```\n","slug":"前端领域/小专栏/页面布局/圣杯布局和双飞翼布局","published":1,"updated":"2022-02-04T09:45:53.639Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbo001dzc1beifd4r3d","content":"<h3 id=\"什么是圣杯布局\"><a href=\"#什么是圣杯布局\" class=\"headerlink\" title=\"什么是圣杯布局\"></a>什么是圣杯布局</h3><ul>\n<li>布局效果类似于圣杯而得名，也叫做三行三列布局。</li>\n<li>定宽 — 自适应 — 定宽<span id=\"more\"></span>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png\" alt=\"圣杯布局\"></li>\n</ul>\n<p>[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]</p>\n<pre><code class=\"html\">   &lt;style&gt;\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * \n     */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        padding: 10px; \n    &#125;\n    .left,\n    .center, \n    .right &#123;\n        height: 300px;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    &#125;\n    .center &#123;\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        float: right;\n    &#125;\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 圣杯布局的实现 ]</p>\n<pre><code class=\"html\">    &lt;style&gt;\n      /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        /* 解决父级元素高度塌陷 */\n        height: 300px;\n        /* 对应 left 的宽度 */\n        margin-left: 300px;\n        /* 对应 right 的宽度  */\n        margin-right: 300px;\n    &#125;\n    .left,\n    .center, \n    .right &#123;\n        height: 300px;\n        /* 使三个div 浮动 */\n        float: left;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n    &#125;\n\n    .left &#123;\n        background-color: #00ffff;\n        /* 将当前元素从当前行移动到上一行同一个位置*/\n        margin-left: -100%;\n        /* 将当前元素移动到理想位置 */\n        position: relative;\n        left: -300px;\n    &#125;\n    .center &#123;\n        width: 100%;\n        background-color: #ffff00;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        margin-left: -300px;\n        position: relative;\n        right: -300px;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;     \n</code></pre>\n<h3 id=\"什么是双飞翼布局\"><a href=\"#什么是双飞翼布局\" class=\"headerlink\" title=\"什么是双飞翼布局\"></a>什么是双飞翼布局</h3><p>—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。</p>\n<p>[ 双飞翼布局的实现 ]</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;双飞翼布局&lt;/title&gt;\n    &lt;style&gt;\n        /* \n         *   \n         *\n         */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        height: 300px;\n        background-color: #eee;\n\n    &#125;\n    .left &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    &#125;\n    .center &#123;\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    &#125;\n    .right &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    &#125;\n    .inner &#123;\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;center&quot;&gt;\n            &lt;div class=&quot;inner&quot;&gt;中：定宽&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"什么是圣杯布局\"><a href=\"#什么是圣杯布局\" class=\"headerlink\" title=\"什么是圣杯布局\"></a>什么是圣杯布局</h3><ul>\n<li>布局效果类似于圣杯而得名，也叫做三行三列布局。</li>\n<li>定宽 — 自适应 — 定宽","more":"<img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png\" alt=\"圣杯布局\"></li>\n</ul>\n<p>[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]</p>\n<pre><code class=\"html\">   &lt;style&gt;\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * \n     */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        padding: 10px; \n    &#125;\n    .left,\n    .center, \n    .right &#123;\n        height: 300px;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    &#125;\n    .center &#123;\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        float: right;\n    &#125;\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 圣杯布局的实现 ]</p>\n<pre><code class=\"html\">    &lt;style&gt;\n      /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        /* 解决父级元素高度塌陷 */\n        height: 300px;\n        /* 对应 left 的宽度 */\n        margin-left: 300px;\n        /* 对应 right 的宽度  */\n        margin-right: 300px;\n    &#125;\n    .left,\n    .center, \n    .right &#123;\n        height: 300px;\n        /* 使三个div 浮动 */\n        float: left;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n    &#125;\n\n    .left &#123;\n        background-color: #00ffff;\n        /* 将当前元素从当前行移动到上一行同一个位置*/\n        margin-left: -100%;\n        /* 将当前元素移动到理想位置 */\n        position: relative;\n        left: -300px;\n    &#125;\n    .center &#123;\n        width: 100%;\n        background-color: #ffff00;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        margin-left: -300px;\n        position: relative;\n        right: -300px;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;     \n</code></pre>\n<h3 id=\"什么是双飞翼布局\"><a href=\"#什么是双飞翼布局\" class=\"headerlink\" title=\"什么是双飞翼布局\"></a>什么是双飞翼布局</h3><p>—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。</p>\n<p>[ 双飞翼布局的实现 ]</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;双飞翼布局&lt;/title&gt;\n    &lt;style&gt;\n        /* \n         *   \n         *\n         */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        height: 300px;\n        background-color: #eee;\n\n    &#125;\n    .left &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    &#125;\n    .center &#123;\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    &#125;\n    .right &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    &#125;\n    .inner &#123;\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;center&quot;&gt;\n            &lt;div class=&quot;inner&quot;&gt;中：定宽&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>"},{"title":"主流 CSS 布局(水平居中、垂直居中、居中 )","comments":1,"abbrlink":1679852539,"date":"2019-10-31T16:00:00.000Z","_content":"### 什么是布局\n\n- html 页面的整体结构或骨架\n- 布局不是某个技术内容 而是一种设计思想\n\n<!-- more -->\n\n[ 布局方式 ]\n\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n\n### 什么是水平居中布局\n\n水平居中布局 元素相对于页面/元素相对于父元素水平居中\n[ 实现方式 ]\n\n- inline-block + text-align 属性配合使用\n\n**注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示**\n**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n        text-align: center;\n    }\n\n    .child {\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n        display: inline-block;\n    }\n</style>\n<body>\n<!-- 居中布局 -->\n<!-- 方法一： inline-block + text-align 属性配合使用 -->\n\n<div class=\"parent\">\n    <div class=\"child\"></div>\n</div>\n</body>\n\n```\n\n- table + margin 属性配合使用\n  **注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效**\n  **解决方法：考虑第一种或第三种解决方案**\n\n[ 拓展 ]  CSS 中使元素脱离文档流的方式\n\n- 将元素设置浮动 float\n- 将元素设置为绝对定位 position: absolute\n- 将元素设置为固定定位 position: fixed\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n    }\n\n    .child {\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 方法二： gtable + margin 属性配合使用 */\n        /* display的值 为 table 或 block */\n        display: table;\n        /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n        margin: 0 auto;\n    }\n</style>\n```\n\n- absolute + transform 属性配合使用\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n**解决方法：考虑第一种或第二种解决方案 **\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 相对定位 */\n        position: relative;\n    }\n\n    .child {\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 当把当前元素设置为绝对定位以后\n        - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n        - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n        */\n        position: absolute;\n        left: 50%;\n        /* 水平方向平移 */\n        transform: translateX(-50%);\n        /* margin-left: -50%; */\n    }\n</style>\n```\n\n- ... ...\n\n### 什么是垂直居中布局\n\n垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的\n[ 实现方式 ]\n\n- table-cell + vertical-align 属性配合使用\n  **注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示**\n  **如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        /*方法一： table-cell + vertical-align 属性配合使用 */\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n        /* display 属性：\n           - table: 设置当前元素为<table>元素\n           - table-cell：设置当前元素为<td>元素  单元格\n           - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n        \n         */\n        display: table-cell;\n        /* \n            vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n            - top： 顶部对齐\n            - middle: 居中对齐\n            - bottom: 底部对齐 \n         */\n        vertical-align: middle;\n    }\n\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n    }\n\n</style>\n<body>\n<div class=\"parent\">\n    <div class=\"child\"></div>\n</div>\n</body>\n```\n\n- absolute + transform 属性配合使用\n  **注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n  **解决方法：考虑第一种解决方案 **\n\n```html\n\n<style>\n\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n\n        position: relative;\n    }\n\n    /* 方法二： absolute + transform 属性配合使用 */\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n        position: absolute;\n        top: 50%;\n        /* 垂直方向 */\n        transform: translateY(-50%);\n    }\n</style>\n```\n\n### 什么是居中布局\n\n居中布局：（ 水平 + 垂直 ）居中\n[ 实现方式 ]\n\n- display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中\n  **注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码**\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 实现垂直居中  */\n        /* <td> */\n        display: table-cell;\n        vertical-align: middle;\n\n    }\n\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 实现水居中 */\n        /* <table> */\n        /* display: table; */\n        display: block;\n        margin: 0 auto;\n\n    }\n\n</style>\n<body>\n<div class=\"parent\">\n    <div class=\"child\"></div>\n</div>\n</body>\n\n```\n\n- absolute + transform 属性实现水平和垂直方向的居中\n  **注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码**\n\n```html\n\n<style>\n\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 相对定位 不脱离文档流*/\n        position: relative;\n    }\n\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 绝对定位 ———— 子绝父相 */\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n    }\n</style>\n```\n","source":"_posts/前端领域/小专栏/页面布局/主流-CSS-布局.md","raw":"---\ntitle: 主流 CSS 布局(水平居中、垂直居中、居中 )\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 1679852539\ndate: 2019-11-01 00:00:00\n---\n### 什么是布局\n\n- html 页面的整体结构或骨架\n- 布局不是某个技术内容 而是一种设计思想\n\n<!-- more -->\n\n[ 布局方式 ]\n\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n\n### 什么是水平居中布局\n\n水平居中布局 元素相对于页面/元素相对于父元素水平居中\n[ 实现方式 ]\n\n- inline-block + text-align 属性配合使用\n\n**注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示**\n**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n        text-align: center;\n    }\n\n    .child {\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n        display: inline-block;\n    }\n</style>\n<body>\n<!-- 居中布局 -->\n<!-- 方法一： inline-block + text-align 属性配合使用 -->\n\n<div class=\"parent\">\n    <div class=\"child\"></div>\n</div>\n</body>\n\n```\n\n- table + margin 属性配合使用\n  **注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效**\n  **解决方法：考虑第一种或第三种解决方案**\n\n[ 拓展 ]  CSS 中使元素脱离文档流的方式\n\n- 将元素设置浮动 float\n- 将元素设置为绝对定位 position: absolute\n- 将元素设置为固定定位 position: fixed\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n    }\n\n    .child {\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 方法二： gtable + margin 属性配合使用 */\n        /* display的值 为 table 或 block */\n        display: table;\n        /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n        margin: 0 auto;\n    }\n</style>\n```\n\n- absolute + transform 属性配合使用\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n**解决方法：考虑第一种或第二种解决方案 **\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 相对定位 */\n        position: relative;\n    }\n\n    .child {\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 当把当前元素设置为绝对定位以后\n        - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n        - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n        */\n        position: absolute;\n        left: 50%;\n        /* 水平方向平移 */\n        transform: translateX(-50%);\n        /* margin-left: -50%; */\n    }\n</style>\n```\n\n- ... ...\n\n### 什么是垂直居中布局\n\n垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的\n[ 实现方式 ]\n\n- table-cell + vertical-align 属性配合使用\n  **注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示**\n  **如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        /*方法一： table-cell + vertical-align 属性配合使用 */\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n        /* display 属性：\n           - table: 设置当前元素为<table>元素\n           - table-cell：设置当前元素为<td>元素  单元格\n           - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n        \n         */\n        display: table-cell;\n        /* \n            vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n            - top： 顶部对齐\n            - middle: 居中对齐\n            - bottom: 底部对齐 \n         */\n        vertical-align: middle;\n    }\n\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n    }\n\n</style>\n<body>\n<div class=\"parent\">\n    <div class=\"child\"></div>\n</div>\n</body>\n```\n\n- absolute + transform 属性配合使用\n  **注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n  **解决方法：考虑第一种解决方案 **\n\n```html\n\n<style>\n\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n\n        position: relative;\n    }\n\n    /* 方法二： absolute + transform 属性配合使用 */\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n        position: absolute;\n        top: 50%;\n        /* 垂直方向 */\n        transform: translateY(-50%);\n    }\n</style>\n```\n\n### 什么是居中布局\n\n居中布局：（ 水平 + 垂直 ）居中\n[ 实现方式 ]\n\n- display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中\n  **注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码**\n\n```html\n\n<style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 实现垂直居中  */\n        /* <td> */\n        display: table-cell;\n        vertical-align: middle;\n\n    }\n\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 实现水居中 */\n        /* <table> */\n        /* display: table; */\n        display: block;\n        margin: 0 auto;\n\n    }\n\n</style>\n<body>\n<div class=\"parent\">\n    <div class=\"child\"></div>\n</div>\n</body>\n\n```\n\n- absolute + transform 属性实现水平和垂直方向的居中\n  **注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码**\n\n```html\n\n<style>\n\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .parent {\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 相对定位 不脱离文档流*/\n        position: relative;\n    }\n\n    .child {\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 绝对定位 ———— 子绝父相 */\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n    }\n</style>\n```\n","slug":"前端领域/小专栏/页面布局/主流-CSS-布局","published":1,"updated":"2022-02-04T09:45:53.261Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbr001hzc1b2kvgb7l5","content":"<h3 id=\"什么是布局\"><a href=\"#什么是布局\" class=\"headerlink\" title=\"什么是布局\"></a>什么是布局</h3><ul>\n<li>html 页面的整体结构或骨架</li>\n<li>布局不是某个技术内容 而是一种设计思想</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>[ 布局方式 ]</p>\n<ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）</li>\n</ul>\n<h3 id=\"什么是水平居中布局\"><a href=\"#什么是水平居中布局\" class=\"headerlink\" title=\"什么是水平居中布局\"></a>什么是水平居中布局</h3><p>水平居中布局 元素相对于页面/元素相对于父元素水平居中<br>[ 实现方式 ]</p>\n<ul>\n<li>inline-block + text-align 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示</strong><br>**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **</p>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n        text-align: center;\n    &#125;\n\n    .child &#123;\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n        display: inline-block;\n    &#125;\n&lt;/style&gt;\n&lt;body&gt;\n&lt;!-- 居中布局 --&gt;\n&lt;!-- 方法一： inline-block + text-align 属性配合使用 --&gt;\n\n&lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>table + margin 属性配合使用<br><strong>注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效</strong><br><strong>解决方法：考虑第一种或第三种解决方案</strong></li>\n</ul>\n<p>[ 拓展 ]  CSS 中使元素脱离文档流的方式</p>\n<ul>\n<li>将元素设置浮动 float</li>\n<li>将元素设置为绝对定位 position: absolute</li>\n<li>将元素设置为固定定位 position: fixed</li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n    &#125;\n\n    .child &#123;\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 方法二： gtable + margin 属性配合使用 */\n        /* display的值 为 table 或 block */\n        display: table;\n        /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n        margin: 0 auto;\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong><br>**解决方法：考虑第一种或第二种解决方案 **</p>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 相对定位 */\n        position: relative;\n    &#125;\n\n    .child &#123;\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 当把当前元素设置为绝对定位以后\n        - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n        - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n        */\n        position: absolute;\n        left: 50%;\n        /* 水平方向平移 */\n        transform: translateX(-50%);\n        /* margin-left: -50%; */\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>… …</li>\n</ul>\n<h3 id=\"什么是垂直居中布局\"><a href=\"#什么是垂直居中布局\" class=\"headerlink\" title=\"什么是垂直居中布局\"></a>什么是垂直居中布局</h3><p>垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的<br>[ 实现方式 ]</p>\n<ul>\n<li>table-cell + vertical-align 属性配合使用<br><strong>注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示</strong><br>**如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **</li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        /*方法一： table-cell + vertical-align 属性配合使用 */\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n        /* display 属性：\n           - table: 设置当前元素为&lt;table&gt;元素\n           - table-cell：设置当前元素为&lt;td&gt;元素  单元格\n           - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n        \n         */\n        display: table-cell;\n        /* \n            vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n            - top： 顶部对齐\n            - middle: 居中对齐\n            - bottom: 底部对齐 \n         */\n        vertical-align: middle;\n    &#125;\n\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n    &#125;\n\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用<br><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong><br>**解决方法：考虑第一种解决方案 **</li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n\n        position: relative;\n    &#125;\n\n    /* 方法二： absolute + transform 属性配合使用 */\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n        position: absolute;\n        top: 50%;\n        /* 垂直方向 */\n        transform: translateY(-50%);\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"什么是居中布局\"><a href=\"#什么是居中布局\" class=\"headerlink\" title=\"什么是居中布局\"></a>什么是居中布局</h3><p>居中布局：（ 水平 + 垂直 ）居中<br>[ 实现方式 ]</p>\n<ul>\n<li>display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中<br><strong>注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码</strong></li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 实现垂直居中  */\n        /* &lt;td&gt; */\n        display: table-cell;\n        vertical-align: middle;\n\n    &#125;\n\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 实现水居中 */\n        /* &lt;table&gt; */\n        /* display: table; */\n        display: block;\n        margin: 0 auto;\n\n    &#125;\n\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性实现水平和垂直方向的居中<br><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码</strong></li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 相对定位 不脱离文档流*/\n        position: relative;\n    &#125;\n\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 绝对定位 ———— 子绝父相 */\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n    &#125;\n&lt;/style&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"什么是布局\"><a href=\"#什么是布局\" class=\"headerlink\" title=\"什么是布局\"></a>什么是布局</h3><ul>\n<li>html 页面的整体结构或骨架</li>\n<li>布局不是某个技术内容 而是一种设计思想</li>\n</ul>","more":"<p>[ 布局方式 ]</p>\n<ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）</li>\n</ul>\n<h3 id=\"什么是水平居中布局\"><a href=\"#什么是水平居中布局\" class=\"headerlink\" title=\"什么是水平居中布局\"></a>什么是水平居中布局</h3><p>水平居中布局 元素相对于页面/元素相对于父元素水平居中<br>[ 实现方式 ]</p>\n<ul>\n<li>inline-block + text-align 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示</strong><br>**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **</p>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n        text-align: center;\n    &#125;\n\n    .child &#123;\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n        display: inline-block;\n    &#125;\n&lt;/style&gt;\n&lt;body&gt;\n&lt;!-- 居中布局 --&gt;\n&lt;!-- 方法一： inline-block + text-align 属性配合使用 --&gt;\n\n&lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>table + margin 属性配合使用<br><strong>注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效</strong><br><strong>解决方法：考虑第一种或第三种解决方案</strong></li>\n</ul>\n<p>[ 拓展 ]  CSS 中使元素脱离文档流的方式</p>\n<ul>\n<li>将元素设置浮动 float</li>\n<li>将元素设置为绝对定位 position: absolute</li>\n<li>将元素设置为固定定位 position: fixed</li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n    &#125;\n\n    .child &#123;\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 方法二： gtable + margin 属性配合使用 */\n        /* display的值 为 table 或 block */\n        display: table;\n        /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n        margin: 0 auto;\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong><br>**解决方法：考虑第一种或第二种解决方案 **</p>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 100%;\n        height: 200px;\n        background-color: #00ffff;\n        /* 相对定位 */\n        position: relative;\n    &#125;\n\n    .child &#123;\n        width: 300px;\n        height: 200px;\n        background-color: #ff0000;\n        /* 当把当前元素设置为绝对定位以后\n        - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n        - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n        */\n        position: absolute;\n        left: 50%;\n        /* 水平方向平移 */\n        transform: translateX(-50%);\n        /* margin-left: -50%; */\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>… …</li>\n</ul>\n<h3 id=\"什么是垂直居中布局\"><a href=\"#什么是垂直居中布局\" class=\"headerlink\" title=\"什么是垂直居中布局\"></a>什么是垂直居中布局</h3><p>垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的<br>[ 实现方式 ]</p>\n<ul>\n<li>table-cell + vertical-align 属性配合使用<br><strong>注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示</strong><br>**如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **</li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        /*方法一： table-cell + vertical-align 属性配合使用 */\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n        /* display 属性：\n           - table: 设置当前元素为&lt;table&gt;元素\n           - table-cell：设置当前元素为&lt;td&gt;元素  单元格\n           - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n        \n         */\n        display: table-cell;\n        /* \n            vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n            - top： 顶部对齐\n            - middle: 居中对齐\n            - bottom: 底部对齐 \n         */\n        vertical-align: middle;\n    &#125;\n\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n    &#125;\n\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用<br><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong><br>**解决方法：考虑第一种解决方案 **</li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 200px;\n        height: 600px;\n        background-color: #00ffff;\n\n        position: relative;\n    &#125;\n\n    /* 方法二： absolute + transform 属性配合使用 */\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n\n        position: absolute;\n        top: 50%;\n        /* 垂直方向 */\n        transform: translateY(-50%);\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"什么是居中布局\"><a href=\"#什么是居中布局\" class=\"headerlink\" title=\"什么是居中布局\"></a>什么是居中布局</h3><p>居中布局：（ 水平 + 垂直 ）居中<br>[ 实现方式 ]</p>\n<ul>\n<li>display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中<br><strong>注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码</strong></li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 实现垂直居中  */\n        /* &lt;td&gt; */\n        display: table-cell;\n        vertical-align: middle;\n\n    &#125;\n\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 实现水居中 */\n        /* &lt;table&gt; */\n        /* display: table; */\n        display: block;\n        margin: 0 auto;\n\n    &#125;\n\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性实现水平和垂直方向的居中<br><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码</strong></li>\n</ul>\n<pre><code class=\"html\">\n&lt;style&gt;\n\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n\n    .parent &#123;\n        width: 1000px;\n        height: 600px;\n        background-color: #00ffff;\n        /* 相对定位 不脱离文档流*/\n        position: relative;\n    &#125;\n\n    .child &#123;\n        width: 200px;\n        height: 300px;\n        background-color: #ff0000;\n        /* 绝对定位 ———— 子绝父相 */\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n    &#125;\n&lt;/style&gt;\n</code></pre>"},{"title":"全屏布局","comments":1,"abbrlink":635713354,"date":"2019-10-31T16:00:00.000Z","_content":"### 什么是全屏布局？\n—— HTML页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。\n<!-- more -->\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png)\n\n```html\n<style>\n    /* \n     * .content .right {\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        }\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n    html,body{\n       margin: 0;\n       padding: 0; \n       /* 避免全屏出现滚动条*/\n       overflow: hidden;\n    }\n    header {\n        height: 100px;\n        background-color: #eee;\n\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n    }\n\n    .content {\n        /* 提供滚动条 */\n        overflow: auto;\n        background-color: rgb(14, 197, 221);\n\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 100px;\n        bottom: 100px;\n    }\n    .content .left {\n        width: 300px;\n        height: 100%;\n        background-color: rgb(247, 54, 54);\n\n        position: fixed;\n        left: 0;\n        top: 100px;\n        bottom: 100px;\n    }\n    .content .right {\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n    }\n    footer {\n        height: 100px;\n        background-color: rgb(39, 38, 38);\n\n        position:fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n    }\n    </style>\n<body>\n    <header></header>\n    <div class=\"content\">\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n    </div>\n    <footer></footer>\n</body>\n\n```\n\n","source":"_posts/前端领域/小专栏/页面布局/全屏布局.md","raw":"---\ntitle: 全屏布局\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 635713354\ndate: 2019-11-01 00:00:00\n---\n### 什么是全屏布局？\n—— HTML页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。\n<!-- more -->\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png)\n\n```html\n<style>\n    /* \n     * .content .right {\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        }\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n    html,body{\n       margin: 0;\n       padding: 0; \n       /* 避免全屏出现滚动条*/\n       overflow: hidden;\n    }\n    header {\n        height: 100px;\n        background-color: #eee;\n\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n    }\n\n    .content {\n        /* 提供滚动条 */\n        overflow: auto;\n        background-color: rgb(14, 197, 221);\n\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 100px;\n        bottom: 100px;\n    }\n    .content .left {\n        width: 300px;\n        height: 100%;\n        background-color: rgb(247, 54, 54);\n\n        position: fixed;\n        left: 0;\n        top: 100px;\n        bottom: 100px;\n    }\n    .content .right {\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n    }\n    footer {\n        height: 100px;\n        background-color: rgb(39, 38, 38);\n\n        position:fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n    }\n    </style>\n<body>\n    <header></header>\n    <div class=\"content\">\n        <div class=\"left\"></div>\n        <div class=\"right\"></div>\n    </div>\n    <footer></footer>\n</body>\n\n```\n\n","slug":"前端领域/小专栏/页面布局/全屏布局","published":1,"updated":"2022-02-04T09:45:53.667Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbt001jzc1be7m39qkv","content":"<h3 id=\"什么是全屏布局？\"><a href=\"#什么是全屏布局？\" class=\"headerlink\" title=\"什么是全屏布局？\"></a>什么是全屏布局？</h3><p>—— HTML页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。</p>\n<span id=\"more\"></span>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png\"></p>\n<pre><code class=\"html\">&lt;style&gt;\n    /* \n     * .content .right &#123;\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        &#125;\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n    html,body&#123;\n       margin: 0;\n       padding: 0; \n       /* 避免全屏出现滚动条*/\n       overflow: hidden;\n    &#125;\n    header &#123;\n        height: 100px;\n        background-color: #eee;\n\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n    &#125;\n\n    .content &#123;\n        /* 提供滚动条 */\n        overflow: auto;\n        background-color: rgb(14, 197, 221);\n\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 100px;\n        bottom: 100px;\n    &#125;\n    .content .left &#123;\n        width: 300px;\n        height: 100%;\n        background-color: rgb(247, 54, 54);\n\n        position: fixed;\n        left: 0;\n        top: 100px;\n        bottom: 100px;\n    &#125;\n    .content .right &#123;\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n    &#125;\n    footer &#123;\n        height: 100px;\n        background-color: rgb(39, 38, 38);\n\n        position:fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;div class=&quot;content&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"什么是全屏布局？\"><a href=\"#什么是全屏布局？\" class=\"headerlink\" title=\"什么是全屏布局？\"></a>什么是全屏布局？</h3><p>—— HTML页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。</p>","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png\"></p>\n<pre><code class=\"html\">&lt;style&gt;\n    /* \n     * .content .right &#123;\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        &#125;\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n    html,body&#123;\n       margin: 0;\n       padding: 0; \n       /* 避免全屏出现滚动条*/\n       overflow: hidden;\n    &#125;\n    header &#123;\n        height: 100px;\n        background-color: #eee;\n\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n    &#125;\n\n    .content &#123;\n        /* 提供滚动条 */\n        overflow: auto;\n        background-color: rgb(14, 197, 221);\n\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 100px;\n        bottom: 100px;\n    &#125;\n    .content .left &#123;\n        width: 300px;\n        height: 100%;\n        background-color: rgb(247, 54, 54);\n\n        position: fixed;\n        left: 0;\n        top: 100px;\n        bottom: 100px;\n    &#125;\n    .content .right &#123;\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n    &#125;\n    footer &#123;\n        height: 100px;\n        background-color: rgb(39, 38, 38);\n\n        position:fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;div class=&quot;content&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre>"},{"title":"多列布局","comments":1,"abbrlink":3225661351,"date":"2019-10-31T16:00:00.000Z","_content":"### 什么是多列布局\n——几个元素呈现水平方式排列的效果\n<!-- more -->\n[ 从元素分类角度 ]\n\n- 块级元素  默认垂直排列    设置浮动实现水平方式排列\n- 内联元素  默认水平方式排列\n- 行内块元素  默认水平方式排列\n\n[ 多列布局分类 ]\n- 两列布局   一列定宽，另外一列宽度自适应\n- 三列布局\n  + 两列定宽且相邻，另外一列宽度自适应\n  + 两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局\n- 等分布局  每一列宽度相同\n- 等高布局  每一列高度相同\n- CSS 3 三列布局 \n\n### 什么是两列布局\n—— 左列确定宽度，右列自动填满剩余空间\n### 两列布局的实现\n\n####  float + margin 属性实现\n\n**  此方案的优缺点\n优点：实现方式简单\n缺点：\n\n1. 自适应元素 margin 属性值必须与定宽元素的width 值保持一致  高耦合\n2. 定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好\n3. 如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉 \n**\n```html\n    <style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n    .parent {\n        background-color: #eee;\n    }\n    .left,\n    .right {\n        height: 500px;\n    } \n\n    .left {\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    }\n    .right {\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    }\n    /* .inner {\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    } */\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右： 自适应\n          <!-- <div class=\"inner\"></div> -->\n        </div>\n    </div>\n</body>\n```\n** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动  没有解决高耦合的问题 **\n```html\n  <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        .parent {\n            background-color: #eee;\n\n        }\n        .left,\n        .right {\n            height: 200px;\n        } \n        .left {\n            width:300px;\n            background-color: #00ffff;\n            /* 脱离文档流 */\n            float: left;\n            /* margin-left: -100%; */\n            /* 提高显示层级 */\n            position: relative;\n        }\n        .right-fix {\n            /* 由于设置浮动，默认宽度为 0 */\n            /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n            width: 100%;\n            /* 向左移动 此时覆盖掉 左侧*/\n            margin-left: -300px;\n            float: left;\n            background-color: #000000;\n        }\n        .right {\n            /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n      \t\t margin-left: 300px; \n            /* padding-left: 300px; */\n            background-color: #ff0000;\n        }\n        </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right-fix\">\n            <div class=\"right\"> 右： 自适应</div>\n        </div>\n    </div>\n</body>\n```\n#### float + overflow 属性实现\n**  此方案的优缺点\n优点：没有第一种解决方案中存在的问题\n缺点：overflow 属性开启BFC模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启BFC模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题\n**\n```html\n  <style>\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n        height: 500px;\n    }\n    .left, \n    .right {\n        height: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    }\n    .right {\n        background-color: #ff0000;\n        /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n        overflow: hidden;\n    }\n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 左对齐</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n</body>\n```\n#### 使用 display 属性的 table 相关值\n**  此方案的优缺点\n优点：浏览器的兼容性比较好\n缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题\n**\n```html\n<style>\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n        height: 500px;\n\n        /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n        display: table;\n        /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n        table-layout: fixed;\n        width: 100%;\n    }\n    .left, \n    .right {\n        height: 300px;\n\n        display: table-cell;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n    }\n    .right {\n        background-color: #ff0000;\n    }\n    \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 左对齐</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n</body>\n```\n### 什么是三列布局\n—— 两列定宽且相邻，另外一列宽度自适应\n### 三列布局的实现\n实现方式与两列布局实现方式类似\n####  float + margin 属性实现\n```html\n<style>\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n        height: 500px;\n    }\n    .left,\n    .center, \n    .right {\n        height: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        /*  */\n        float: left;\n\n    }\n    .center {\n        width: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    }\n    .right {\n        background-color: #ff0000;\n\n        margin-left: 600px;\n    }\n    \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"center\"> 中：定宽 </div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n</body>\n```\n#### float + overflow 属性实现\n```html\n略，参考两列布局\n```\n#### 使用 display 属性的 table 相关值\n```html\n略，参考两列布局\n```\n\n\n\n\n\n","source":"_posts/前端领域/小专栏/页面布局/多列布局.md","raw":"---\ntitle: 多列布局\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 3225661351\ndate: 2019-11-01 00:00:00\n---\n### 什么是多列布局\n——几个元素呈现水平方式排列的效果\n<!-- more -->\n[ 从元素分类角度 ]\n\n- 块级元素  默认垂直排列    设置浮动实现水平方式排列\n- 内联元素  默认水平方式排列\n- 行内块元素  默认水平方式排列\n\n[ 多列布局分类 ]\n- 两列布局   一列定宽，另外一列宽度自适应\n- 三列布局\n  + 两列定宽且相邻，另外一列宽度自适应\n  + 两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局\n- 等分布局  每一列宽度相同\n- 等高布局  每一列高度相同\n- CSS 3 三列布局 \n\n### 什么是两列布局\n—— 左列确定宽度，右列自动填满剩余空间\n### 两列布局的实现\n\n####  float + margin 属性实现\n\n**  此方案的优缺点\n优点：实现方式简单\n缺点：\n\n1. 自适应元素 margin 属性值必须与定宽元素的width 值保持一致  高耦合\n2. 定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好\n3. 如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉 \n**\n```html\n    <style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n    .parent {\n        background-color: #eee;\n    }\n    .left,\n    .right {\n        height: 500px;\n    } \n\n    .left {\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    }\n    .right {\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    }\n    /* .inner {\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    } */\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右： 自适应\n          <!-- <div class=\"inner\"></div> -->\n        </div>\n    </div>\n</body>\n```\n** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动  没有解决高耦合的问题 **\n```html\n  <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        .parent {\n            background-color: #eee;\n\n        }\n        .left,\n        .right {\n            height: 200px;\n        } \n        .left {\n            width:300px;\n            background-color: #00ffff;\n            /* 脱离文档流 */\n            float: left;\n            /* margin-left: -100%; */\n            /* 提高显示层级 */\n            position: relative;\n        }\n        .right-fix {\n            /* 由于设置浮动，默认宽度为 0 */\n            /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n            width: 100%;\n            /* 向左移动 此时覆盖掉 左侧*/\n            margin-left: -300px;\n            float: left;\n            background-color: #000000;\n        }\n        .right {\n            /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n      \t\t margin-left: 300px; \n            /* padding-left: 300px; */\n            background-color: #ff0000;\n        }\n        </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right-fix\">\n            <div class=\"right\"> 右： 自适应</div>\n        </div>\n    </div>\n</body>\n```\n#### float + overflow 属性实现\n**  此方案的优缺点\n优点：没有第一种解决方案中存在的问题\n缺点：overflow 属性开启BFC模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启BFC模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题\n**\n```html\n  <style>\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n        height: 500px;\n    }\n    .left, \n    .right {\n        height: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    }\n    .right {\n        background-color: #ff0000;\n        /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n        overflow: hidden;\n    }\n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 左对齐</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n</body>\n```\n#### 使用 display 属性的 table 相关值\n**  此方案的优缺点\n优点：浏览器的兼容性比较好\n缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题\n**\n```html\n<style>\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n        height: 500px;\n\n        /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n        display: table;\n        /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n        table-layout: fixed;\n        width: 100%;\n    }\n    .left, \n    .right {\n        height: 300px;\n\n        display: table-cell;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n    }\n    .right {\n        background-color: #ff0000;\n    }\n    \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 左对齐</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n</body>\n```\n### 什么是三列布局\n—— 两列定宽且相邻，另外一列宽度自适应\n### 三列布局的实现\n实现方式与两列布局实现方式类似\n####  float + margin 属性实现\n```html\n<style>\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n        height: 500px;\n    }\n    .left,\n    .center, \n    .right {\n        height: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        /*  */\n        float: left;\n\n    }\n    .center {\n        width: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    }\n    .right {\n        background-color: #ff0000;\n\n        margin-left: 600px;\n    }\n    \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"center\"> 中：定宽 </div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n</body>\n```\n#### float + overflow 属性实现\n```html\n略，参考两列布局\n```\n#### 使用 display 属性的 table 相关值\n```html\n略，参考两列布局\n```\n\n\n\n\n\n","slug":"前端领域/小专栏/页面布局/多列布局","published":1,"updated":"2022-02-04T09:45:53.683Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbu001mzc1bae377djq","content":"<h3 id=\"什么是多列布局\"><a href=\"#什么是多列布局\" class=\"headerlink\" title=\"什么是多列布局\"></a>什么是多列布局</h3><p>——几个元素呈现水平方式排列的效果</p>\n<span id=\"more\"></span>\n<p>[ 从元素分类角度 ]</p>\n<ul>\n<li>块级元素  默认垂直排列    设置浮动实现水平方式排列</li>\n<li>内联元素  默认水平方式排列</li>\n<li>行内块元素  默认水平方式排列</li>\n</ul>\n<p>[ 多列布局分类 ]</p>\n<ul>\n<li>两列布局   一列定宽，另外一列宽度自适应</li>\n<li>三列布局<ul>\n<li>两列定宽且相邻，另外一列宽度自适应</li>\n<li>两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局</li>\n</ul>\n</li>\n<li>等分布局  每一列宽度相同</li>\n<li>等高布局  每一列高度相同</li>\n<li>CSS 3 三列布局 </li>\n</ul>\n<h3 id=\"什么是两列布局\"><a href=\"#什么是两列布局\" class=\"headerlink\" title=\"什么是两列布局\"></a>什么是两列布局</h3><p>—— 左列确定宽度，右列自动填满剩余空间</p>\n<h3 id=\"两列布局的实现\"><a href=\"#两列布局的实现\" class=\"headerlink\" title=\"两列布局的实现\"></a>两列布局的实现</h3><h4 id=\"float-margin-属性实现\"><a href=\"#float-margin-属性实现\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><p>**  此方案的优缺点<br>优点：实现方式简单<br>缺点：</p>\n<ol>\n<li>自适应元素 margin 属性值必须与定宽元素的width 值保持一致  高耦合</li>\n<li>定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好</li>\n<li>如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉 </li>\n</ol>\n<p>**</p>\n<pre><code class=\"html\">    &lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n    &#125;\n    .left,\n    .right &#123;\n        height: 500px;\n    &#125; \n\n    .left &#123;\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    &#125;\n    .right &#123;\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    &#125;\n    /* .inner &#123;\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    &#125; */\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右： 自适应\n          &lt;!-- &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动  没有解决高耦合的问题 **</p>\n<pre><code class=\"html\">  &lt;style&gt;\n        * &#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        .parent &#123;\n            background-color: #eee;\n\n        &#125;\n        .left,\n        .right &#123;\n            height: 200px;\n        &#125; \n        .left &#123;\n            width:300px;\n            background-color: #00ffff;\n            /* 脱离文档流 */\n            float: left;\n            /* margin-left: -100%; */\n            /* 提高显示层级 */\n            position: relative;\n        &#125;\n        .right-fix &#123;\n            /* 由于设置浮动，默认宽度为 0 */\n            /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n            width: 100%;\n            /* 向左移动 此时覆盖掉 左侧*/\n            margin-left: -300px;\n            float: left;\n            background-color: #000000;\n        &#125;\n        .right &#123;\n            /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n               margin-left: 300px; \n            /* padding-left: 300px; */\n            background-color: #ff0000;\n        &#125;\n        &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right-fix&quot;&gt;\n            &lt;div class=&quot;right&quot;&gt; 右： 自适应&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现\"><a href=\"#float-overflow-属性实现\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><p>**  此方案的优缺点<br>优点：没有第一种解决方案中存在的问题<br>缺点：overflow 属性开启BFC模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启BFC模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题<br>**</p>\n<pre><code class=\"html\">  &lt;style&gt;\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        height: 500px;\n    &#125;\n    .left, \n    .right &#123;\n        height: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n        overflow: hidden;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 左对齐&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值\"><a href=\"#使用-display-属性的-table-相关值\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><p>**  此方案的优缺点<br>优点：浏览器的兼容性比较好<br>缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题<br>**</p>\n<pre><code class=\"html\">&lt;style&gt;\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        height: 500px;\n\n        /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n        display: table;\n        /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n        table-layout: fixed;\n        width: 100%;\n    &#125;\n    .left, \n    .right &#123;\n        height: 300px;\n\n        display: table-cell;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n    &#125;\n    \n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 左对齐&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是三列布局\"><a href=\"#什么是三列布局\" class=\"headerlink\" title=\"什么是三列布局\"></a>什么是三列布局</h3><p>—— 两列定宽且相邻，另外一列宽度自适应</p>\n<h3 id=\"三列布局的实现\"><a href=\"#三列布局的实现\" class=\"headerlink\" title=\"三列布局的实现\"></a>三列布局的实现</h3><p>实现方式与两列布局实现方式类似</p>\n<h4 id=\"float-margin-属性实现-1\"><a href=\"#float-margin-属性实现-1\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><pre><code class=\"html\">&lt;style&gt;\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        height: 500px;\n    &#125;\n    .left,\n    .center, \n    .right &#123;\n        height: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        /*  */\n        float: left;\n\n    &#125;\n    .center &#123;\n        width: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n\n        margin-left: 600px;\n    &#125;\n    \n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现-1\"><a href=\"#float-overflow-属性实现-1\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值-1\"><a href=\"#使用-display-属性的-table-相关值-1\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"什么是多列布局\"><a href=\"#什么是多列布局\" class=\"headerlink\" title=\"什么是多列布局\"></a>什么是多列布局</h3><p>——几个元素呈现水平方式排列的效果</p>","more":"<p>[ 从元素分类角度 ]</p>\n<ul>\n<li>块级元素  默认垂直排列    设置浮动实现水平方式排列</li>\n<li>内联元素  默认水平方式排列</li>\n<li>行内块元素  默认水平方式排列</li>\n</ul>\n<p>[ 多列布局分类 ]</p>\n<ul>\n<li>两列布局   一列定宽，另外一列宽度自适应</li>\n<li>三列布局<ul>\n<li>两列定宽且相邻，另外一列宽度自适应</li>\n<li>两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局</li>\n</ul>\n</li>\n<li>等分布局  每一列宽度相同</li>\n<li>等高布局  每一列高度相同</li>\n<li>CSS 3 三列布局 </li>\n</ul>\n<h3 id=\"什么是两列布局\"><a href=\"#什么是两列布局\" class=\"headerlink\" title=\"什么是两列布局\"></a>什么是两列布局</h3><p>—— 左列确定宽度，右列自动填满剩余空间</p>\n<h3 id=\"两列布局的实现\"><a href=\"#两列布局的实现\" class=\"headerlink\" title=\"两列布局的实现\"></a>两列布局的实现</h3><h4 id=\"float-margin-属性实现\"><a href=\"#float-margin-属性实现\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><p>**  此方案的优缺点<br>优点：实现方式简单<br>缺点：</p>\n<ol>\n<li>自适应元素 margin 属性值必须与定宽元素的width 值保持一致  高耦合</li>\n<li>定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好</li>\n<li>如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉 </li>\n</ol>\n<p>**</p>\n<pre><code class=\"html\">    &lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n    &#125;\n    .left,\n    .right &#123;\n        height: 500px;\n    &#125; \n\n    .left &#123;\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    &#125;\n    .right &#123;\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    &#125;\n    /* .inner &#123;\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    &#125; */\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右： 自适应\n          &lt;!-- &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动  没有解决高耦合的问题 **</p>\n<pre><code class=\"html\">  &lt;style&gt;\n        * &#123;\n            margin: 0;\n            padding: 0;\n        &#125;\n        .parent &#123;\n            background-color: #eee;\n\n        &#125;\n        .left,\n        .right &#123;\n            height: 200px;\n        &#125; \n        .left &#123;\n            width:300px;\n            background-color: #00ffff;\n            /* 脱离文档流 */\n            float: left;\n            /* margin-left: -100%; */\n            /* 提高显示层级 */\n            position: relative;\n        &#125;\n        .right-fix &#123;\n            /* 由于设置浮动，默认宽度为 0 */\n            /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n            width: 100%;\n            /* 向左移动 此时覆盖掉 左侧*/\n            margin-left: -300px;\n            float: left;\n            background-color: #000000;\n        &#125;\n        .right &#123;\n            /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n               margin-left: 300px; \n            /* padding-left: 300px; */\n            background-color: #ff0000;\n        &#125;\n        &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right-fix&quot;&gt;\n            &lt;div class=&quot;right&quot;&gt; 右： 自适应&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现\"><a href=\"#float-overflow-属性实现\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><p>**  此方案的优缺点<br>优点：没有第一种解决方案中存在的问题<br>缺点：overflow 属性开启BFC模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启BFC模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题<br>**</p>\n<pre><code class=\"html\">  &lt;style&gt;\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        height: 500px;\n    &#125;\n    .left, \n    .right &#123;\n        height: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n        overflow: hidden;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 左对齐&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值\"><a href=\"#使用-display-属性的-table-相关值\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><p>**  此方案的优缺点<br>优点：浏览器的兼容性比较好<br>缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题<br>**</p>\n<pre><code class=\"html\">&lt;style&gt;\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        height: 500px;\n\n        /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n        display: table;\n        /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n        table-layout: fixed;\n        width: 100%;\n    &#125;\n    .left, \n    .right &#123;\n        height: 300px;\n\n        display: table-cell;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n    &#125;\n    \n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 左对齐&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是三列布局\"><a href=\"#什么是三列布局\" class=\"headerlink\" title=\"什么是三列布局\"></a>什么是三列布局</h3><p>—— 两列定宽且相邻，另外一列宽度自适应</p>\n<h3 id=\"三列布局的实现\"><a href=\"#三列布局的实现\" class=\"headerlink\" title=\"三列布局的实现\"></a>三列布局的实现</h3><p>实现方式与两列布局实现方式类似</p>\n<h4 id=\"float-margin-属性实现-1\"><a href=\"#float-margin-属性实现-1\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><pre><code class=\"html\">&lt;style&gt;\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        height: 500px;\n    &#125;\n    .left,\n    .center, \n    .right &#123;\n        height: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        /*  */\n        float: left;\n\n    &#125;\n    .center &#123;\n        width: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n\n        margin-left: 600px;\n    &#125;\n    \n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现-1\"><a href=\"#float-overflow-属性实现-1\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值-1\"><a href=\"#使用-display-属性的-table-相关值-1\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>"},{"title":"布局总结","comments":1,"abbrlink":3630208258,"date":"2019-10-31T16:00:00.000Z","_content":"\n\n### 总结\n#### 居中布局\n<!--more-->\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n#### 多列布局 \n- 两列布局\n- 三列布局\n- CSS 3 多列布局\n#### 经典布局\n- 圣杯布局\n- 双飞翼布局\n#### 全屏布局\n#### 未涉及的布局\n- 网格布局\n- 弹性盒子布局 CSS3 \n** 没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式** \n\n","source":"_posts/前端领域/小专栏/页面布局/布局总结.md","raw":"---\ntitle: 布局总结\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 3630208258\ndate: 2019-11-01 00:00:00\n---\n\n\n### 总结\n#### 居中布局\n<!--more-->\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n#### 多列布局 \n- 两列布局\n- 三列布局\n- CSS 3 多列布局\n#### 经典布局\n- 圣杯布局\n- 双飞翼布局\n#### 全屏布局\n#### 未涉及的布局\n- 网格布局\n- 弹性盒子布局 CSS3 \n** 没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式** \n\n","slug":"前端领域/小专栏/页面布局/布局总结","published":1,"updated":"2022-02-04T09:45:53.691Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbv001ozc1b6zuj4fc2","content":"<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h4><span id=\"more\"></span>\n<ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）<h4 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h4></li>\n<li>两列布局</li>\n<li>三列布局</li>\n<li>CSS 3 多列布局<h4 id=\"经典布局\"><a href=\"#经典布局\" class=\"headerlink\" title=\"经典布局\"></a>经典布局</h4></li>\n<li>圣杯布局</li>\n<li>双飞翼布局<h4 id=\"全屏布局\"><a href=\"#全屏布局\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h4><h4 id=\"未涉及的布局\"><a href=\"#未涉及的布局\" class=\"headerlink\" title=\"未涉及的布局\"></a>未涉及的布局</h4></li>\n<li>网格布局</li>\n<li>弹性盒子布局 CSS3 </li>\n</ul>\n<p>** 没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式** </p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h4>","more":"<ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）<h4 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h4></li>\n<li>两列布局</li>\n<li>三列布局</li>\n<li>CSS 3 多列布局<h4 id=\"经典布局\"><a href=\"#经典布局\" class=\"headerlink\" title=\"经典布局\"></a>经典布局</h4></li>\n<li>圣杯布局</li>\n<li>双飞翼布局<h4 id=\"全屏布局\"><a href=\"#全屏布局\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h4><h4 id=\"未涉及的布局\"><a href=\"#未涉及的布局\" class=\"headerlink\" title=\"未涉及的布局\"></a>未涉及的布局</h4></li>\n<li>网格布局</li>\n<li>弹性盒子布局 CSS3 </li>\n</ul>\n<p>** 没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式** </p>"},{"title":"CSS 3 多列布局","comments":1,"abbrlink":2560017432,"date":"2019-10-31T16:00:00.000Z","_content":"### CSS 3 多列布局\n\n[ column 属性 ]\n\n——column 属性是一个简写属性  包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度\n<!-- more -->\n-  column-count 属性 用于设置列的数量或允许的最大列数\n  + auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定\n  + number: 必须是正整数，用于表示定义列的数量\n- column-width 属性 用于设置列的宽度或列的最小宽度\n  + auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定\n  + length: 必须是正整数，用于表示定义列的宽度\n\n```html\n<style>\n    /* \n     *  \n     *  \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 6 auto;\n\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 300px;\n    }\n    .column2 {\n        background-color: #ff66ff;\n    }\n    .column3 {\n        background-color: #00ffff;\n    }\n    .column1 {\n        background-color: #ffff00;\n    }\n    .column5 {\n        background-color: #ff0000;\n    }\n    .column6 {\n        background-color: #00ff00;\n    }\n\n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"column1\"></div>\n        <div class=\"column2\"></div>\n        <div class=\"column3\"></div>\n        <div class=\"column6\"></div>\n        <div class=\"column5\"></div>\n        <div class=\"column6\"></div>\n    </div>\n</body>\n\n```\n[ 列的间距 ]\n- column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置\n  + normal:  用于表示使用浏览器定义列的默认间距，默认值 1em\n  + length: 必须是正整数，用于表示定义列之间的间距\n ```html\n <style>\n     .parent {\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 5 auto;\n\n        column-gap: 20px;\n\n    }\n </style>\n ```\n [列的边框 column-rule ]\n\n—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。\n- column-rule-width: 列于列之间的边框宽度\n- column-rule-color: 列于列之间的边框颜色\n- column-rule-style: 列于列之间的边框样式   \n\n ```html\n <style>\n    .parent {\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 5 auto;\n\n        column-gap: 20px;\n\n        /* column-rule-width: 5px;\n        column-rule-color: #ff0000;\n        column-rule-style: double; */\n        /* 简写属性 */\n        column-rule: 5px #ff0000 double;\n\n    }\n </style>\n ```\n [ 横跨多列 ]\n\n- column-span 属性 用于定义一个列元素是否跨列\n  + none：表示元素不跨列\n  + all: 表示元素跨所有列 \n\n ```html\n <style>\n    .column6 {\n        background-color: #00ff00;\n        column-span: all;\n    }\n </style>\n ```\n [ 列的填充 ]\n\n- column-fill 属性用于定义列的高度由内容决定，还是同一高度\n  + auto: 默认值，列的高度由内容绝对\n  + balance: 列的高度根据内容最多的一列的高度为准\n ```html\n <style>\n    .column6,\n    .column7, \n    .column8,\n    .column9 {\n        /* 浏览器兼容不好 包括chrome浏览器 */\n        column-fill: balance;\n    }\n</style>   \n   <div class=\"parent\">\n            <div class=\"column6\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?</div>\n\n            <div class=\"column7\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam unde sed autem.</div>\n\n            <div class=\"column8\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi eveniet, error quis ex cum ut nulla sunt aut saepe?\n                Lorem ipsum dolor sit amet consectetur, adipisicing elit. Facilis debitis officia distinctio cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n            </div>\n            <div class=\"column9\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum. Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa vitae accusantium nesciunt.</div>\n        </div>\n ```","source":"_posts/前端领域/小专栏/页面布局/CSS3-多列布局.md","raw":"---\ntitle: CSS 3 多列布局\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 2560017432\ndate: 2019-11-01 00:00:00\n---\n### CSS 3 多列布局\n\n[ column 属性 ]\n\n——column 属性是一个简写属性  包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度\n<!-- more -->\n-  column-count 属性 用于设置列的数量或允许的最大列数\n  + auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定\n  + number: 必须是正整数，用于表示定义列的数量\n- column-width 属性 用于设置列的宽度或列的最小宽度\n  + auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定\n  + length: 必须是正整数，用于表示定义列的宽度\n\n```html\n<style>\n    /* \n     *  \n     *  \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 6 auto;\n\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 300px;\n    }\n    .column2 {\n        background-color: #ff66ff;\n    }\n    .column3 {\n        background-color: #00ffff;\n    }\n    .column1 {\n        background-color: #ffff00;\n    }\n    .column5 {\n        background-color: #ff0000;\n    }\n    .column6 {\n        background-color: #00ff00;\n    }\n\n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"column1\"></div>\n        <div class=\"column2\"></div>\n        <div class=\"column3\"></div>\n        <div class=\"column6\"></div>\n        <div class=\"column5\"></div>\n        <div class=\"column6\"></div>\n    </div>\n</body>\n\n```\n[ 列的间距 ]\n- column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置\n  + normal:  用于表示使用浏览器定义列的默认间距，默认值 1em\n  + length: 必须是正整数，用于表示定义列之间的间距\n ```html\n <style>\n     .parent {\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 5 auto;\n\n        column-gap: 20px;\n\n    }\n </style>\n ```\n [列的边框 column-rule ]\n\n—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。\n- column-rule-width: 列于列之间的边框宽度\n- column-rule-color: 列于列之间的边框颜色\n- column-rule-style: 列于列之间的边框样式   \n\n ```html\n <style>\n    .parent {\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 5 auto;\n\n        column-gap: 20px;\n\n        /* column-rule-width: 5px;\n        column-rule-color: #ff0000;\n        column-rule-style: double; */\n        /* 简写属性 */\n        column-rule: 5px #ff0000 double;\n\n    }\n </style>\n ```\n [ 横跨多列 ]\n\n- column-span 属性 用于定义一个列元素是否跨列\n  + none：表示元素不跨列\n  + all: 表示元素跨所有列 \n\n ```html\n <style>\n    .column6 {\n        background-color: #00ff00;\n        column-span: all;\n    }\n </style>\n ```\n [ 列的填充 ]\n\n- column-fill 属性用于定义列的高度由内容决定，还是同一高度\n  + auto: 默认值，列的高度由内容绝对\n  + balance: 列的高度根据内容最多的一列的高度为准\n ```html\n <style>\n    .column6,\n    .column7, \n    .column8,\n    .column9 {\n        /* 浏览器兼容不好 包括chrome浏览器 */\n        column-fill: balance;\n    }\n</style>   \n   <div class=\"parent\">\n            <div class=\"column6\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?</div>\n\n            <div class=\"column7\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam unde sed autem.</div>\n\n            <div class=\"column8\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi eveniet, error quis ex cum ut nulla sunt aut saepe?\n                Lorem ipsum dolor sit amet consectetur, adipisicing elit. Facilis debitis officia distinctio cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n            </div>\n            <div class=\"column9\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum. Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa vitae accusantium nesciunt.</div>\n        </div>\n ```","slug":"前端领域/小专栏/页面布局/CSS3-多列布局","published":1,"updated":"2022-02-04T09:45:53.259Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbw001rzc1bfi460a38","content":"<h3 id=\"CSS-3-多列布局\"><a href=\"#CSS-3-多列布局\" class=\"headerlink\" title=\"CSS 3 多列布局\"></a>CSS 3 多列布局</h3><p>[ column 属性 ]</p>\n<p>——column 属性是一个简写属性  包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度</p>\n<span id=\"more\"></span>\n<ul>\n<li> column-count 属性 用于设置列的数量或允许的最大列数</li>\n</ul>\n<ul>\n<li>auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定</li>\n<li>number: 必须是正整数，用于表示定义列的数量</li>\n</ul>\n<ul>\n<li>column-width 属性 用于设置列的宽度或列的最小宽度<ul>\n<li>auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定</li>\n<li>length: 必须是正整数，用于表示定义列的宽度</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    /* \n     *  \n     *  \n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 6 auto;\n\n    &#125;\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 &#123;\n        height: 300px;\n    &#125;\n    .column2 &#123;\n        background-color: #ff66ff;\n    &#125;\n    .column3 &#123;\n        background-color: #00ffff;\n    &#125;\n    .column1 &#123;\n        background-color: #ffff00;\n    &#125;\n    .column5 &#123;\n        background-color: #ff0000;\n    &#125;\n    .column6 &#123;\n        background-color: #00ff00;\n    &#125;\n\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;column1&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column2&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column3&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column5&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 列的间距 ]</p>\n<ul>\n<li><p>column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置</p>\n<ul>\n<li><p>normal:  用于表示使用浏览器定义列的默认间距，默认值 1em</p>\n</li>\n<li><p>length: 必须是正整数，用于表示定义列之间的间距</p>\n<pre><code class=\"html\">&lt;style&gt;\n .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p>[列的边框 column-rule ]</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。</p>\n<ul>\n<li>column-rule-width: 列于列之间的边框宽度</li>\n<li>column-rule-color: 列于列之间的边框颜色</li>\n<li>column-rule-style: 列于列之间的边框样式   </li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n   .parent &#123;\n       background-color: #eee;\n\n       /* column-count: 6; */\n       /* column-width: 200px; */\n       /* 简写属性 */\n       columns: 5 auto;\n\n       column-gap: 20px;\n\n       /* column-rule-width: 5px;\n       column-rule-color: #ff0000;\n       column-rule-style: double; */\n       /* 简写属性 */\n       column-rule: 5px #ff0000 double;\n\n   &#125;\n&lt;/style&gt;\n</code></pre>\n<p> [ 横跨多列 ]</p>\n<ul>\n<li>column-span 属性 用于定义一个列元素是否跨列<ul>\n<li>none：表示元素不跨列</li>\n<li>all: 表示元素跨所有列 </li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n   .column6 &#123;\n       background-color: #00ff00;\n       column-span: all;\n   &#125;\n&lt;/style&gt;\n</code></pre>\n<p> [ 列的填充 ]</p>\n<ul>\n<li><p>column-fill 属性用于定义列的高度由内容决定，还是同一高度</p>\n<ul>\n<li><p>auto: 默认值，列的高度由内容绝对</p>\n</li>\n<li><p>balance: 列的高度根据内容最多的一列的高度为准</p>\n<pre><code class=\"html\">&lt;style&gt;\n.column6,\n.column7, \n.column8,\n.column9 &#123;\n    /* 浏览器兼容不好 包括chrome浏览器 */\n    column-fill: balance;\n&#125;\n&lt;/style&gt;   \n&lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;column6&quot;&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?&lt;/div&gt;\n\n        &lt;div class=&quot;column7&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam unde sed autem.&lt;/div&gt;\n\n        &lt;div class=&quot;column8&quot;&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi eveniet, error quis ex cum ut nulla sunt aut saepe?\n            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Facilis debitis officia distinctio cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n        &lt;/div&gt;\n        &lt;div class=&quot;column9&quot;&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum. Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa vitae accusantium nesciunt.&lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"CSS-3-多列布局\"><a href=\"#CSS-3-多列布局\" class=\"headerlink\" title=\"CSS 3 多列布局\"></a>CSS 3 多列布局</h3><p>[ column 属性 ]</p>\n<p>——column 属性是一个简写属性  包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度</p>","more":"<ul>\n<li> column-count 属性 用于设置列的数量或允许的最大列数</li>\n</ul>\n<ul>\n<li>auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定</li>\n<li>number: 必须是正整数，用于表示定义列的数量</li>\n</ul>\n<ul>\n<li>column-width 属性 用于设置列的宽度或列的最小宽度<ul>\n<li>auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定</li>\n<li>length: 必须是正整数，用于表示定义列的宽度</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    /* \n     *  \n     *  \n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n    .parent &#123;\n        background-color: #eee;\n\n        /* column-count: 6; */\n        /* column-width: 200px; */\n        /* 简写属性 */\n        columns: 6 auto;\n\n    &#125;\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 &#123;\n        height: 300px;\n    &#125;\n    .column2 &#123;\n        background-color: #ff66ff;\n    &#125;\n    .column3 &#123;\n        background-color: #00ffff;\n    &#125;\n    .column1 &#123;\n        background-color: #ffff00;\n    &#125;\n    .column5 &#123;\n        background-color: #ff0000;\n    &#125;\n    .column6 &#123;\n        background-color: #00ff00;\n    &#125;\n\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;column1&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column2&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column3&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column5&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 列的间距 ]</p>\n<ul>\n<li><p>column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置</p>\n<ul>\n<li><p>normal:  用于表示使用浏览器定义列的默认间距，默认值 1em</p>\n</li>\n<li><p>length: 必须是正整数，用于表示定义列之间的间距</p>\n<pre><code class=\"html\">&lt;style&gt;\n .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p>[列的边框 column-rule ]</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。</p>\n<ul>\n<li>column-rule-width: 列于列之间的边框宽度</li>\n<li>column-rule-color: 列于列之间的边框颜色</li>\n<li>column-rule-style: 列于列之间的边框样式   </li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n   .parent &#123;\n       background-color: #eee;\n\n       /* column-count: 6; */\n       /* column-width: 200px; */\n       /* 简写属性 */\n       columns: 5 auto;\n\n       column-gap: 20px;\n\n       /* column-rule-width: 5px;\n       column-rule-color: #ff0000;\n       column-rule-style: double; */\n       /* 简写属性 */\n       column-rule: 5px #ff0000 double;\n\n   &#125;\n&lt;/style&gt;\n</code></pre>\n<p> [ 横跨多列 ]</p>\n<ul>\n<li>column-span 属性 用于定义一个列元素是否跨列<ul>\n<li>none：表示元素不跨列</li>\n<li>all: 表示元素跨所有列 </li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n   .column6 &#123;\n       background-color: #00ff00;\n       column-span: all;\n   &#125;\n&lt;/style&gt;\n</code></pre>\n<p> [ 列的填充 ]</p>\n<ul>\n<li><p>column-fill 属性用于定义列的高度由内容决定，还是同一高度</p>\n<ul>\n<li><p>auto: 默认值，列的高度由内容绝对</p>\n</li>\n<li><p>balance: 列的高度根据内容最多的一列的高度为准</p>\n<pre><code class=\"html\">&lt;style&gt;\n.column6,\n.column7, \n.column8,\n.column9 &#123;\n    /* 浏览器兼容不好 包括chrome浏览器 */\n    column-fill: balance;\n&#125;\n&lt;/style&gt;   \n&lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;column6&quot;&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?&lt;/div&gt;\n\n        &lt;div class=&quot;column7&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam unde sed autem.&lt;/div&gt;\n\n        &lt;div class=&quot;column8&quot;&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi eveniet, error quis ex cum ut nulla sunt aut saepe?\n            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Facilis debitis officia distinctio cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n        &lt;/div&gt;\n        &lt;div class=&quot;column9&quot;&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum. Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa vitae accusantium nesciunt.&lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"等分布局与等高布局","comments":1,"abbrlink":1051762681,"date":"2019-10-31T16:00:00.000Z","_content":"### 什么是等分布局\n—— 一行被分成若干列，每一列的宽度相同\n<!-- more -->\n[ 实现方式 ]\n\n- float 属性实现等分布局效果\n- display 属性的值有关 table 的值实现\n#### float 属性实现等分布局效果\n```html\n<style>\n        /* \n         *   \n         *\n         */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n\n    .parent {\n        background-color: #eee;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n        width: 20%;\n        float: left;    \n    }\n    .column2 {\n        background-color: #ff66ff;\n    }\n    .column3 {\n        background-color: #00ffff;\n    }\n    .column1 {\n        background-color: #ffff00;\n    }\n    .column5 {\n        background-color: #ff0000;\n    }\n    .column6 {\n        background-color: #00ff00;\n    }\n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"column1\">1</div>\n        <div class=\"column2\">2</div>\n        <div class=\"column3\">3</div>\n        <div class=\"column5\">5</div>\n        <div class=\"column6\">6</div>\n    </div>\n</body>\n```\n#### display 属性的值有关 table 的值实现\n```html\n <style>\n    /* \n     * \n     *  \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n\n    .parent {\n        background-color: #eee;\n\n        width: 100%;\n        /* <table> 元素 */\n        display: table;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n\n        /* <td> 元素 */\n        display: table-cell;\n    }\n    .column2 {\n        background-color: #ff66ff;\n    }\n    .column3 {\n        background-color: #00ffff;\n    }\n    .column1 {\n        background-color: #ffff00;\n    }\n    .column5 {\n        background-color: #ff0000;\n    }\n    .column6 {\n        background-color: #00ff00;\n    }\n  \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"column1\">1</div>\n        <div class=\"column2\">2</div>\n        <div class=\"column3\">3</div>\n        <div class=\"column5\">5</div>\n        <div class=\"column6\">6</div>\n    </div>\n</body>\n```\n#### 等分布局的空白间距\n[ 方法一 代码修改 ]\n```html\n<style>\n    /* \n     * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n     *  \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent-fix {\n        /* 溢出隐藏 */\n        overflow: hidden;\n    }\n    .parent {\n        background-color: #eee;\n\n        /* 解决高度塌陷 */\n        overflow: hidden;\n        /* height: 500px; */\n        margin-left: -20px;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n        width: 20%;\n        float: left;\n\n        padding-left: 20px;\n        /* margin-left: 20px;  */\n         /*\n            box-sizing 属性 \n           */\n        box-sizing: border-box;\n    }\n    .column2 .inner {\n        background-color: #ff66ff;\n    }\n    .column3 .inner {\n        background-color: #00ffff;\n    }\n    .column1 .inner {\n        background-color: #ffff00;\n    }\n    .column5 .inner {\n        background-color: #ff0000;\n    }\n    .column6 .inner {\n        background-color: #00ff00;\n    }\n    .inner {\n        height: 500px;\n    }\n  \n    </style>\n<body>\n    <div class=\"parent-fix\">\n        <div class=\"parent\">\n            <div class=\"column1\"><div class=\"inner\"></div></div>\n            <div class=\"column2\"><div class=\"inner\"></div></div>\n            <div class=\"column3\"><div class=\"inner\"></div></div>\n            <div class=\"column5\"><div class=\"inner\"></div></div>\n            <div class=\"column6\"><div class=\"inner\"></div></div>\n        </div>\n    </div>\n</body>\n```\n[ 方法二 代码修改 ]\n```html\n    <style>\n    /* \n     * 实际开发中 parent 元素 width 的值是有一个范围\n     * 在此案例中 parent-fix 的宽度为  1369px - 20px\n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent-fix {\n        overflow: hidden;\n    }\n    .parent {\n        background-color: #eee;\n\n        width: 1369px;\n        /* <table> 元素 */\n        display: table;\n        margin-left: -20px;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n\n        /* <td> 元素 */\n        display: table-cell;\n\n        padding-left: 20px;\n        box-sizing: border-box;\n    }\n    .column2 .inner {\n        background-color: #ff66ff;\n    }\n    .column3 .inner {\n        background-color: #00ffff;\n    }\n    .column1 .inner {\n        background-color: #ffff00;\n    }\n    .column5 .inner {\n        background-color: #ff0000;\n    }\n    .column6 .inner {\n        background-color: #00ff00;\n    }\n    .inner {\n        height: 500px;\n    }  \n  \n    </style>\n<body>\n    <div class=\"parent-fix\">\n        <div class=\"parent\">\n            <div class=\"column1\"><div class=\"inner\"></div></div>\n            <div class=\"column2\"><div class=\"inner\"></div></div>\n            <div class=\"column3\"><div class=\"inner\"></div></div>\n            <div class=\"column5\"><div class=\"inner\"></div></div>\n            <div class=\"column6\"><div class=\"inner\"></div></div>\n        </div>\n    </div>\n</body>\n```\n### 什么是等高布局\n—— 一行被分成若干列，每一列的高度相同\n[ 实现方式 ]\n- display 属性的值有关 table 的值实现\n- padding + margin 实现等高布局效果\n#### display 属性的值有关 table 的值实现\n```html\n<style>\n    /* \n     * 表格中的单元格 默认是等高的，无论内容多少\n     * \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n\n        /* <table> 元素 */\n        display: table;\n        table-layout: fixed;\n    }\n    .left,\n    .right {\n        width: 300px;\n\n        /* <td> 元素 */\n        display: table-cell;\n\n    }\n    .left {\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff66ff;\n    }\n\n  \n  \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n    </div>\n</body>\n\n```\n#### padding + margin 实现等高布局效果\n```html\n    <style>\n    /* \n     * \n     * \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n\n    .parent {\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    }\n    .left,\n    .right {\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px; \n        margin-bottom: -99999px;   \n    }\n    .left {\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff66ff;\n    }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n    </div>\n</body>\n\n```","source":"_posts/前端领域/小专栏/页面布局/等分布局与等高布局.md","raw":"---\ntitle: 等分布局与等高布局\ncomments: true\ntags:\n  - css\n  - css 布局\n  - web\ncategories:\n  - - 前端领域\n    - 小专栏\n    - 布局方式\nabbrlink: 1051762681\ndate: 2019-11-01 00:00:00\n---\n### 什么是等分布局\n—— 一行被分成若干列，每一列的宽度相同\n<!-- more -->\n[ 实现方式 ]\n\n- float 属性实现等分布局效果\n- display 属性的值有关 table 的值实现\n#### float 属性实现等分布局效果\n```html\n<style>\n        /* \n         *   \n         *\n         */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n\n    .parent {\n        background-color: #eee;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n        width: 20%;\n        float: left;    \n    }\n    .column2 {\n        background-color: #ff66ff;\n    }\n    .column3 {\n        background-color: #00ffff;\n    }\n    .column1 {\n        background-color: #ffff00;\n    }\n    .column5 {\n        background-color: #ff0000;\n    }\n    .column6 {\n        background-color: #00ff00;\n    }\n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"column1\">1</div>\n        <div class=\"column2\">2</div>\n        <div class=\"column3\">3</div>\n        <div class=\"column5\">5</div>\n        <div class=\"column6\">6</div>\n    </div>\n</body>\n```\n#### display 属性的值有关 table 的值实现\n```html\n <style>\n    /* \n     * \n     *  \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n\n    .parent {\n        background-color: #eee;\n\n        width: 100%;\n        /* <table> 元素 */\n        display: table;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n\n        /* <td> 元素 */\n        display: table-cell;\n    }\n    .column2 {\n        background-color: #ff66ff;\n    }\n    .column3 {\n        background-color: #00ffff;\n    }\n    .column1 {\n        background-color: #ffff00;\n    }\n    .column5 {\n        background-color: #ff0000;\n    }\n    .column6 {\n        background-color: #00ff00;\n    }\n  \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"column1\">1</div>\n        <div class=\"column2\">2</div>\n        <div class=\"column3\">3</div>\n        <div class=\"column5\">5</div>\n        <div class=\"column6\">6</div>\n    </div>\n</body>\n```\n#### 等分布局的空白间距\n[ 方法一 代码修改 ]\n```html\n<style>\n    /* \n     * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n     *  \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent-fix {\n        /* 溢出隐藏 */\n        overflow: hidden;\n    }\n    .parent {\n        background-color: #eee;\n\n        /* 解决高度塌陷 */\n        overflow: hidden;\n        /* height: 500px; */\n        margin-left: -20px;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n        width: 20%;\n        float: left;\n\n        padding-left: 20px;\n        /* margin-left: 20px;  */\n         /*\n            box-sizing 属性 \n           */\n        box-sizing: border-box;\n    }\n    .column2 .inner {\n        background-color: #ff66ff;\n    }\n    .column3 .inner {\n        background-color: #00ffff;\n    }\n    .column1 .inner {\n        background-color: #ffff00;\n    }\n    .column5 .inner {\n        background-color: #ff0000;\n    }\n    .column6 .inner {\n        background-color: #00ff00;\n    }\n    .inner {\n        height: 500px;\n    }\n  \n    </style>\n<body>\n    <div class=\"parent-fix\">\n        <div class=\"parent\">\n            <div class=\"column1\"><div class=\"inner\"></div></div>\n            <div class=\"column2\"><div class=\"inner\"></div></div>\n            <div class=\"column3\"><div class=\"inner\"></div></div>\n            <div class=\"column5\"><div class=\"inner\"></div></div>\n            <div class=\"column6\"><div class=\"inner\"></div></div>\n        </div>\n    </div>\n</body>\n```\n[ 方法二 代码修改 ]\n```html\n    <style>\n    /* \n     * 实际开发中 parent 元素 width 的值是有一个范围\n     * 在此案例中 parent-fix 的宽度为  1369px - 20px\n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent-fix {\n        overflow: hidden;\n    }\n    .parent {\n        background-color: #eee;\n\n        width: 1369px;\n        /* <table> 元素 */\n        display: table;\n        margin-left: -20px;\n    }\n    .column1,\n    .column2,\n    .column3,\n    .column5,\n    .column6 {\n        height: 500px;\n\n        /* <td> 元素 */\n        display: table-cell;\n\n        padding-left: 20px;\n        box-sizing: border-box;\n    }\n    .column2 .inner {\n        background-color: #ff66ff;\n    }\n    .column3 .inner {\n        background-color: #00ffff;\n    }\n    .column1 .inner {\n        background-color: #ffff00;\n    }\n    .column5 .inner {\n        background-color: #ff0000;\n    }\n    .column6 .inner {\n        background-color: #00ff00;\n    }\n    .inner {\n        height: 500px;\n    }  \n  \n    </style>\n<body>\n    <div class=\"parent-fix\">\n        <div class=\"parent\">\n            <div class=\"column1\"><div class=\"inner\"></div></div>\n            <div class=\"column2\"><div class=\"inner\"></div></div>\n            <div class=\"column3\"><div class=\"inner\"></div></div>\n            <div class=\"column5\"><div class=\"inner\"></div></div>\n            <div class=\"column6\"><div class=\"inner\"></div></div>\n        </div>\n    </div>\n</body>\n```\n### 什么是等高布局\n—— 一行被分成若干列，每一列的高度相同\n[ 实现方式 ]\n- display 属性的值有关 table 的值实现\n- padding + margin 实现等高布局效果\n#### display 属性的值有关 table 的值实现\n```html\n<style>\n    /* \n     * 表格中的单元格 默认是等高的，无论内容多少\n     * \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n    .parent {\n        background-color: #eee;\n\n        /* <table> 元素 */\n        display: table;\n        table-layout: fixed;\n    }\n    .left,\n    .right {\n        width: 300px;\n\n        /* <td> 元素 */\n        display: table-cell;\n\n    }\n    .left {\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff66ff;\n    }\n\n  \n  \n    </style>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n    </div>\n</body>\n\n```\n#### padding + margin 实现等高布局效果\n```html\n    <style>\n    /* \n     * \n     * \n     *\n     */\n    * {\n       margin: 0;\n       padding: 0; \n    }\n\n    .parent {\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    }\n    .left,\n    .right {\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px; \n        margin-bottom: -99999px;   \n    }\n    .left {\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff66ff;\n    }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n    </div>\n</body>\n\n```","slug":"前端领域/小专栏/页面布局/等分布局与等高布局","published":1,"updated":"2022-02-04T09:45:53.701Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbx001tzc1b1cqi3p58","content":"<h3 id=\"什么是等分布局\"><a href=\"#什么是等分布局\" class=\"headerlink\" title=\"什么是等分布局\"></a>什么是等分布局</h3><p>—— 一行被分成若干列，每一列的宽度相同</p>\n<span id=\"more\"></span>\n<p>[ 实现方式 ]</p>\n<ul>\n<li><p>float 属性实现等分布局效果</p>\n</li>\n<li><p>display 属性的值有关 table 的值实现</p>\n<h4 id=\"float-属性实现等分布局效果\"><a href=\"#float-属性实现等分布局效果\" class=\"headerlink\" title=\"float 属性实现等分布局效果\"></a>float 属性实现等分布局效果</h4><pre><code class=\"html\">&lt;style&gt;\n      /* \n       *   \n       *\n       */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n\n  .parent &#123;\n      background-color: #eee;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n      width: 20%;\n      float: left;    \n  &#125;\n  .column2 &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n      background-color: #00ff00;\n  &#125;\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"display-属性的值有关-table-的值实现\"><a href=\"#display-属性的值有关-table-的值实现\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n   * \n   *  \n   *\n   */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n\n  .parent &#123;\n      background-color: #eee;\n\n      width: 100%;\n      /* &lt;table&gt; 元素 */\n      display: table;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n\n      /* &lt;td&gt; 元素 */\n      display: table-cell;\n  &#125;\n  .column2 &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n      background-color: #00ff00;\n  &#125;\n\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"等分布局的空白间距\"><a href=\"#等分布局的空白间距\" class=\"headerlink\" title=\"等分布局的空白间距\"></a>等分布局的空白间距</h4><p>[ 方法一 代码修改 ]</p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n   * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n   *  \n   *\n   */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n  .parent-fix &#123;\n      /* 溢出隐藏 */\n      overflow: hidden;\n  &#125;\n  .parent &#123;\n      background-color: #eee;\n\n      /* 解决高度塌陷 */\n      overflow: hidden;\n      /* height: 500px; */\n      margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n      width: 20%;\n      float: left;\n\n      padding-left: 20px;\n      /* margin-left: 20px;  */\n       /*\n          box-sizing 属性 \n         */\n      box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n      background-color: #00ff00;\n  &#125;\n  .inner &#123;\n      height: 500px;\n  &#125;\n\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n      &lt;div class=&quot;parent&quot;&gt;\n          &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 方法二 代码修改 ]</p>\n<pre><code class=\"html\">  &lt;style&gt;\n  /* \n   * 实际开发中 parent 元素 width 的值是有一个范围\n   * 在此案例中 parent-fix 的宽度为  1369px - 20px\n   *\n   */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n  .parent-fix &#123;\n      overflow: hidden;\n  &#125;\n  .parent &#123;\n      background-color: #eee;\n\n      width: 1369px;\n      /* &lt;table&gt; 元素 */\n      display: table;\n      margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n\n      /* &lt;td&gt; 元素 */\n      display: table-cell;\n\n      padding-left: 20px;\n      box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n      background-color: #00ff00;\n  &#125;\n  .inner &#123;\n      height: 500px;\n  &#125;  \n\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n      &lt;div class=&quot;parent&quot;&gt;\n          &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是等高布局\"><a href=\"#什么是等高布局\" class=\"headerlink\" title=\"什么是等高布局\"></a>什么是等高布局</h3><p>—— 一行被分成若干列，每一列的高度相同<br>[ 实现方式 ]</p>\n</li>\n<li><p>display 属性的值有关 table 的值实现</p>\n</li>\n<li><p>padding + margin 实现等高布局效果</p>\n<h4 id=\"display-属性的值有关-table-的值实现-1\"><a href=\"#display-属性的值有关-table-的值实现-1\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><p>```html</p>\n<style>\n  /* \n   * 表格中的单元格 默认是等高的，无论内容多少\n   * \n   *\n   */\n  * {\n     margin: 0;\n     padding: 0; \n  }\n  .parent {\n      background-color: #eee;\n\n      /* <table> 元素 */\n      display: table;\n      table-layout: fixed;\n  }\n  .left,\n  .right {\n      width: 300px;\n\n      /* <td> 元素 */\n      display: table-cell;\n\n  }\n  .left {\n      background-color: #ffff00;\n  }\n  .right {\n      background-color: #ff66ff;\n  }\n\n\n\n  </style>\n<body>\n  <div class=\"parent\">\n      <div class=\"left\">imooc</div>\n      <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n  </div>\n</body></li>\n</ul>\n<pre><code>#### padding + margin 实现等高布局效果\n```html\n    &lt;style&gt;\n    /* \n     * \n     * \n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n\n    .parent &#123;\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px; \n        margin-bottom: -99999px;   \n    &#125;\n    .left &#123;\n        background-color: #ffff00;\n    &#125;\n    .right &#123;\n        background-color: #ff66ff;\n    &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"<h3 id=\"什么是等分布局\"><a href=\"#什么是等分布局\" class=\"headerlink\" title=\"什么是等分布局\"></a>什么是等分布局</h3><p>—— 一行被分成若干列，每一列的宽度相同</p>","more":"<p>[ 实现方式 ]</p>\n<ul>\n<li><p>float 属性实现等分布局效果</p>\n</li>\n<li><p>display 属性的值有关 table 的值实现</p>\n<h4 id=\"float-属性实现等分布局效果\"><a href=\"#float-属性实现等分布局效果\" class=\"headerlink\" title=\"float 属性实现等分布局效果\"></a>float 属性实现等分布局效果</h4><pre><code class=\"html\">&lt;style&gt;\n      /* \n       *   \n       *\n       */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n\n  .parent &#123;\n      background-color: #eee;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n      width: 20%;\n      float: left;    \n  &#125;\n  .column2 &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n      background-color: #00ff00;\n  &#125;\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"display-属性的值有关-table-的值实现\"><a href=\"#display-属性的值有关-table-的值实现\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n   * \n   *  \n   *\n   */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n\n  .parent &#123;\n      background-color: #eee;\n\n      width: 100%;\n      /* &lt;table&gt; 元素 */\n      display: table;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n\n      /* &lt;td&gt; 元素 */\n      display: table-cell;\n  &#125;\n  .column2 &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n      background-color: #00ff00;\n  &#125;\n\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"等分布局的空白间距\"><a href=\"#等分布局的空白间距\" class=\"headerlink\" title=\"等分布局的空白间距\"></a>等分布局的空白间距</h4><p>[ 方法一 代码修改 ]</p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n   * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n   *  \n   *\n   */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n  .parent-fix &#123;\n      /* 溢出隐藏 */\n      overflow: hidden;\n  &#125;\n  .parent &#123;\n      background-color: #eee;\n\n      /* 解决高度塌陷 */\n      overflow: hidden;\n      /* height: 500px; */\n      margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n      width: 20%;\n      float: left;\n\n      padding-left: 20px;\n      /* margin-left: 20px;  */\n       /*\n          box-sizing 属性 \n         */\n      box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n      background-color: #00ff00;\n  &#125;\n  .inner &#123;\n      height: 500px;\n  &#125;\n\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n      &lt;div class=&quot;parent&quot;&gt;\n          &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 方法二 代码修改 ]</p>\n<pre><code class=\"html\">  &lt;style&gt;\n  /* \n   * 实际开发中 parent 元素 width 的值是有一个范围\n   * 在此案例中 parent-fix 的宽度为  1369px - 20px\n   *\n   */\n  * &#123;\n     margin: 0;\n     padding: 0; \n  &#125;\n  .parent-fix &#123;\n      overflow: hidden;\n  &#125;\n  .parent &#123;\n      background-color: #eee;\n\n      width: 1369px;\n      /* &lt;table&gt; 元素 */\n      display: table;\n      margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n      height: 500px;\n\n      /* &lt;td&gt; 元素 */\n      display: table-cell;\n\n      padding-left: 20px;\n      box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n      background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n      background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n      background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n      background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n      background-color: #00ff00;\n  &#125;\n  .inner &#123;\n      height: 500px;\n  &#125;  \n\n  &lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n      &lt;div class=&quot;parent&quot;&gt;\n          &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n          &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是等高布局\"><a href=\"#什么是等高布局\" class=\"headerlink\" title=\"什么是等高布局\"></a>什么是等高布局</h3><p>—— 一行被分成若干列，每一列的高度相同<br>[ 实现方式 ]</p>\n</li>\n<li><p>display 属性的值有关 table 的值实现</p>\n</li>\n<li><p>padding + margin 实现等高布局效果</p>\n<h4 id=\"display-属性的值有关-table-的值实现-1\"><a href=\"#display-属性的值有关-table-的值实现-1\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><p>```html</p>\n<style>\n  /* \n   * 表格中的单元格 默认是等高的，无论内容多少\n   * \n   *\n   */\n  * {\n     margin: 0;\n     padding: 0; \n  }\n  .parent {\n      background-color: #eee;\n\n      /* <table> 元素 */\n      display: table;\n      table-layout: fixed;\n  }\n  .left,\n  .right {\n      width: 300px;\n\n      /* <td> 元素 */\n      display: table-cell;\n\n  }\n  .left {\n      background-color: #ffff00;\n  }\n  .right {\n      background-color: #ff66ff;\n  }\n\n\n\n  </style>\n<body>\n  <div class=\"parent\">\n      <div class=\"left\">imooc</div>\n      <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n  </div>\n</body></li>\n</ul>\n<pre><code>#### padding + margin 实现等高布局效果\n```html\n    &lt;style&gt;\n    /* \n     * \n     * \n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0; \n    &#125;\n\n    .parent &#123;\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px; \n        margin-bottom: -99999px;   \n    &#125;\n    .left &#123;\n        background-color: #ffff00;\n    &#125;\n    .right &#123;\n        background-color: #ff66ff;\n    &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>"},{"title":"python 零基础","comments":1,"abbrlink":3308975195,"date":"2021-11-01T16:00:00.000Z","_content":"\n## Python 的语言特点\n\n\n\n","source":"_posts/后端领域/编程语言/Python/零基础 Python.md","raw":"---\ntitle: python 零基础\ntags:\n  - python 零基础\n  - 极客时间\ncategories:\n  - - 后端领域\n    - 编程语言\n    - python\ncomments: true\nabbrlink: 3308975195\ndate: 2021-11-02 00:00:00\n---\n\n## Python 的语言特点\n\n\n\n","slug":"后端领域/编程语言/Python/零基础 Python","published":1,"updated":"2022-02-04T10:12:51.677Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvby001wzc1bdjbhah7z","content":"<h2 id=\"Python-的语言特点\"><a href=\"#Python-的语言特点\" class=\"headerlink\" title=\"Python 的语言特点\"></a>Python 的语言特点</h2>","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"Python-的语言特点\"><a href=\"#Python-的语言特点\" class=\"headerlink\" title=\"Python 的语言特点\"></a>Python 的语言特点</h2>"},{"title":"python 基础","comments":1,"abbrlink":2562162005,"date":"2021-10-01T16:00:00.000Z","_content":"\n## Python 环境搭建\n\n- 下载安装\n\n```shell\n$ 下载页面：https://www.python.org/downloads/windows/\n\t2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n\t3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n\t2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n\t3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n```\n\n\n- pip 升级\n\n\n\n```shell\n$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n```\n\n\n- 虚拟环境\n\n\n\n```shell\n在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    => 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n\t创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n```\n\n\n- 第三方包本地安装\n\n\n\n```shell\n$  **.whl : \n$\t\tpip install  **.whl\n$  **.egg : \n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n\t\tpython setup.py install\n```\n## Python 数据类型\n\n\n**不可变数据类型：** Number（数字）、String（字符串）、Tuple（元组）\n\n\n**可变数据类型：**   List（列表）、Dictionary（字典）、Set（集合）\n\n\n**序列容器：** String（字符串）、List（列表）Tuple（元组）\n\n\n**非序列容器**：Dictionary（字典）、Set（集合）\n\n\n### 数据类型之间的运算规则\n\n\n- 算术运算符\n\n\n\n```\n常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 <==> 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n```\n\n\n- 赋值运算符\n\n\n\n```\n常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=\t: A //= B <==> A = A // B\n%=\t: A %= B <==> A = A % B\n**= : A **= B <==> A = A ** B\n```\n\n\n- 比较运算符\n\n\n\n```\n常见运算符：>, < , >=, <=, ==, != \n\nPython 中 没有 全等于 ===\n```\n\n\n- 逻辑运算符\n\n\n\n```python\n# 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n```\n\n\n- **数据类型之间运算规则**\n\n\n\n```\n总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n```\n\n\n### 数据类型转换\n\n\n**前提：可以转换为目标类型**\n\n\n- 转换为 Number 类型\n\n\n\n```python\nvalue = '666'\nint(value) # ==> 666\n```\n\n\n- 转换为 String 类型\n\n\n\n```python\nvalue = 666\nstr(value)  ==> '666'\n```\n\n\n- 转换为 float 类型\n\n\n\n```python\nvalue = 666 # ‘666’呢？\nfloat(value)  ==> 666.00\n```\n\n\n### 数字（Number）\n\n\n- 整数（integer）\n- 小数 / 浮点数（float）\n\n\n\n**[ 常用的数字函数 ]**\n\n\n```python\nabs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n```\n\n\n### 字符串（String）\n\n\n- 字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 \" )来创建字符串\n- 字符串切片索引\n\n\n\n```python\nstr = 'Runoob'\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + \"TEST\") # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n```\n\n\n**[ python三引号 ]**\n\n\npython 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符\n\n\n```python\npara_str = \"\"\"这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    \"\"\"\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [ \n]。\n```\n\n\n### 列表（List）\n\n\n- 列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型\n- 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可\n- 列表切片索引\n\n\n\n**[ 常用的列表函数 ]**\n\n\n```python\nlist.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n```\n\n\n### 元组（Tuple）\n\n\n- 元组与列表类似，不同之处在于元组的元素不能修改\n\n\n\n### 字典（Dictionary）\n\n\n- 字典是另一种可变容器模型，且可存储任意类型对象\n- **dict = {key1 : value1, key2 : value2 }：**每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中\n- **注意：**键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。\n\n\n\n**[ 访问字典的值 ]**\n\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n'''\n    del dict['Name']     # 删除键 'Name'\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    '''\nprint (\"dict['Name']: \", dict['Name'])\nprint (\"dict['Age']: \", dict['Age'])\n# 输出\ndict['Name']:  Runoob\n    dict['Age']:  7\n```\n\n\n**[ 字典键的特性 ]**\n\n\n- 不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住\n\n\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Name': '小菜鸟'}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\ndict['Name']:  小菜鸟\n    12\n```\n\n\n- 键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行\n\n\n\n```python\ndict = {['Name']: 'Runoob', 'Age': 7}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\nTraceback (most recent call last):\n    File \"test.py\", line 3, in <module>\n    dict = {['Name']: 'Runoob', 'Age': 7}\n    TypeError: unhashable type: 'list'\n```\n\n\n**[ 字典函数 ]**\n\n\n```python\nradiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n```\n\n\n### 集合（Set）\n\n\n- 集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合\n- **注意：**创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典\n\n\n\n```python\nbasket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\nprint(basket)                      # 去重功能\n#输出\n{'orange', 'banana', 'pear', 'apple'}\n\n'orange' in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n'crabgrass' in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\n#输出                                  \n{'a', 'r', 'b', 'c', 'd'}\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n{'d', 'b', 'r'}\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n{'c', 'b', 'r', 'z', 'l', 'm', 'a', 'd'}\n\nprint(a & b)                              # 集合a和b中都包含了的元素\n#输出\n{'a', 'c'}\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n{'l', 'b', 'z', 'r', 'm', 'd'}\n```\n\n\n**[ 添加元素 ]**\n\n\n- **s.add( x )** 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作\n\n\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.add(\"Facebook\")\nprint(thisset)\n#输出\n{'Taobao', 'Facebook', 'Google', 'Runoob'}\n```\n\n\n- **s.update( x )** 参数可以是列表，元组，字典等\n\n\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.update({1,3})\nprint(thisset)\n#输出\n{1, 3, 'Google', 'Taobao', 'Runoob'}\n\nthisset.update([1,4],[5,6])  \nprint(thisset)\n#输出\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n```\n\n\n**[ 移除元素 ]**\n\n\n```python\ns.remove( x )\t\t# 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )\t\t# 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()\t\t\t\t# 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n```\n\n\n**[ 集合函数 ]**\n\n\n```python\nadd()\t        #为集合添加元素\nclear()\t        #移除集合中的所有元素\ncopy()\t        #拷贝一个集合\nunion()\t        #返回两个集合的并集\nupdate()\t    #给集合添加元素\n```\n\n\n## Python 输入输出\n\n\n### 标准输入输出函数\n\n\n- **print()** 标准输出函数\n\n\n\n```python\n#  换行符  \\n,  end='\\n'\nprint('aaa' end='') # 不换行\nprint('bbb' end='#') # bbb 和 ccc 之间用 # 连接\nprint('ccc')\n\n# 格式化输出\nname = '鲁班'\nage = 20\n\n> %s ==> string\n> %d ==> digit(数字)\n> %f ==> float\n> %% ==> 输出 %\n\nprint('他的名字是' + name +',他的年龄是' + age + '。') # 输出格式\nprint('他的名字是%s,他的年龄是%d。' %(name, age))\n\nprint('胜率%d%%' % 87)  # %% 表示 %  ==> 87%\n```\n\n\n- **input()** 标准输入函数,输入的内容是字符串\n\n\n\n```python\nprint('请输入你的姓名：')\ninput()\n<==> input('请输入你的姓名：')\n\n# 保存输入的数据\n\ninput_content = input('请输入你的姓名：')\nprint( input_content)\n# 动态\nprint('欢迎您 %s !' % input_content)\n```\n\n\n## Python 分支语句\n\n\n### if 分支语句\n\n\n- 比较运算符\n\n\n\n```\n==  相等, !=  不相等, >   大于, <   小于, >=  大于等于, <=  小于等于\n```\n\n\n- if 语句\n\n\n\n```python\nif a > b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n```\n\n\n- 多个条件之间的关系\n\n\n\n```python\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a > b and a or b\n= false and a or b\n= false or b\n= b                 # ==> b 20\nret = a < b and a or b\n= true and a or b\n= a or b\n= a                 # ==> a 10\n# not(非)\n```\n\n\n### while 语句\n\n\n```python\n\"\"\"\n    我不喜欢这个世界，我只喜欢你！\n    \"\"\"\n# while 循环\n\n# i = 1\n# while i <= 100:\n#     print(i)\n#     i += 1\n#\n# print('END')\n\n# 1-100 偶数\n\n# i = 1\n# while i <= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input('开始数：'))\n# end = int(input('结束数：'))\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start <= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print('奇数和：',total)\n\n# 打印 *\n\n# n = 1\n# while n <= 5:\n#     print('*' * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i <= 100:\n#     if i > 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print('欢迎使用')\n    print('*' * 10 + '操作菜单' + '*' * 10)\n\n    print('1. 展示信息')\n    print('2. 新增信息')\n    print('3. 修改信息')\n    print('4. 删除信息')\n    print('5. 退出')\n    # 保存用户操作\n    user_operation = int(input('请输入您的操作：'))\n    if user_operation == 1:\n        print('姓名\\t年龄\\t')\n        print('鲁班\\t20\\t')\n        print('吕布\\t30\\t')\n        print('小乔\\t18\\t')\n        elif user_operation == 2:\n            name = input('请输入姓名：')\n            age = input('请输入年龄：')\n            print('%s 添加成功'% name)\n            elif user_operation == 3:\n                name = input('请输入修改姓名')\n                print('%s 修改成功'% name)\n\n\n                elif user_operation == 4:\n                    name = input('请输入修改姓名')\n                    print('%s 删除成功'% name)\n                    elif user_operation == 4:\n                        print('退出成功')\n                        break\n                        else:\n                            print('输入有误')\n\n                            print('*' * 27)\n```\n\n\n## Python 函数操作\n\n\n```python\n# 定义函数：\ndef 函数名():\n\t一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input('输入开始数字：'))\nend = int(input('输入结束数字：'))\ndef sum(start, end):\n    \"\"\"这是我的函数文档\"\"\"\n    if not isinstance(start, int):\n        print('请输入整数')\n        return None\n    if not isinstance(end, int):\n        print('请输入整数')\n        return None\n    if start > end:\n        print('start 必须小于 end')\n        return None\n    total = 0\n    whi le start <= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input('请输入运算符')\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == '+':\n                    result = a + b\n                    elif Oper == '-':\n                        result = a - b\n                        elif Oper == '*':\n                            result = a * b\n                            elif Oper == '/':\n                                result = a / b\n                                else:\n                                    print('输入有误')\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n```\n\n\n## 数据类型基础操作\n\n\n### 字符串（String）\n\n\n> 维度：方法的作用，参数，返回值，原数据是否改变\n\n\n\n##### 符串的遍历\n\n\n```python\nistr = 'hello'\n# 方法一\ni = 0\nwhile i < 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=' ')\n```\n\n\n##### 字符串的替换\n\n\n- **replace()** [ str.replace('old', 'new', 替换次数) ]\n\n\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nnewstr = strEmail.replace('y','#') # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace('y','#', 1) # 只替换第一次出现的 y\n```\n\n\n##### 字符串查找\n\n\n- **find()**\n- 返回第一次出现的位置，如果没有则返回 -1\n\n\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\n# 找到 @ 的位置\n\nstrEmail.find('@')\n```\n\n\n##### 字符串的切片\n\n\n```python\n# 以 @ 获取前后内容\n\nstrEmail = 'zxymaibox@yeah.net'\npossion = strEmail.find('@')  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  <==> print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username => print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui => print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n```\n\n\n##### 字符串拆分成列表\n\n\n- **split()**\n- 返回拆分后的列表\n\n\n\n```python\n# 以 @ 获取前后内容\nstrEmail = 'zxymaibox@yeah.net'\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count('@')\n\nif strCount == 1:\n    result = strEmail.split('@')\n\n    print(result)  # => ['zxymaibox', 'yeah.net']\n\n    username = result[0]\n    houzhui = result[1]\n```\n\n\n##### 查询某一字符出现的次数\n\n\n- **count()**\n\n\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nprint(strEmail.count('@')) # => 1\nprint(strEmail.count('y')) # => 2\n```\n\n\n##### 判断字符串是否全为字母\n\n\n- **isalpha()** [str.isalpha()]\n- 返回布尔值\n\n\n\n##### 字符串去除两侧空格\n\n\n- **strip()**\n- 返回新的字符串\n\n\n\n### 列表（List）\n\n\n```python\nlist = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n```\n\n\n##### 列表的遍历\n\n\n```python\nlist = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index < length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n```\n\n\n##### 列表元素插入\n\n\n```python\nlist = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n```\n\n\n##### 列表元素删除\n\n\n- **pop()** 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]\n- **remove()** 值删除， [ 默认删除第一次出现的值 ]\n- **clear() **清空列表，\n\n\n\n```python\nlist = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n```\n\n\n##### 列表元素查找和修改\n\n\n- **index(oldValue)** [ 如果值存在返回位置，不存在会报错 ]\n- **count(oldValue)** [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]\n\n\n\n```python\nlist = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n```\n\n\n##### 列表元素排序\n\n\n- **sort()** [默认从小到大, reverse= false ]\n- 参数： reverse=True 实现降序排列；\n- 逆序： reverse() [ 实现列表的逆序 ]\n\n\n\n```python\n# 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i < 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n```\n\n\n##### 两个列表元素追加\n\n\n- **extend()**\n\n\n\n```python\nlist1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n```\n\n\n### 元祖（Tuple）\n\n\n**可以理解为列表，但是他的元素不可修改**\n\n\n- 元组一旦创建不可修改\n- 元组只有一个元素时，需要在尾部添加一个逗号\n- 元组比列表更节省空间\n- 元组是序列式容器支持索引、切片操作\n\n\n\n```python\n# 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n```\n\n\n### 字典（Dictionary）\n\n\n```python\n# 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n```\n\n\n##### 字典元素访问\n\n\n```python\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 获取值\n1. print(dict['age'])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get('age', '我是默认返回值'))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict['score'] = 99       # 添加元素\ndict['name'] = '时光静好' # 修改元素\n```\n\n\n##### 字典元素删除\n\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 删除元素(也适用于列表)\ndel  person['age']\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n```\n\n\n##### 字典的遍历\n\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys(['name', 'gender', 'age'])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # ['name', 'gender', 'age']\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values(['serendipity', '女', '20'])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # ['serendipity', '女', '20']\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([('name': 'serendipity'),('gender': '女'), ('age' : '20')])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [('name': 'serendipity'),('gender': '女'), ('age' : '20')]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print('key:', value[0],'value:', value[1])\n\n\n        i = 0\n        while i < len(keyValList):\n            print('key:', keyValList[i][0], 'value:', keyValList[i][1] )\n            i += 1\n```\n\n\n### 集合（Set）\n\n\n## Python 文件操作\n\n\n### 文件的打开和关闭\n\n\n- **open(文件名, 访问模式)** 打开文件 [ 参数： 文件名 ， 访问模式]\n   - 访问模式： r 以只读方式打开文件（默认）\n   - 访问模式： w 打开文件只用于写入\n   - 访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n   - 访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头\n   - 访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入\n   - 访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n- **close()** 关闭文件\n\n\n\n** pyCharm 文件编码: file encodings: GBK **\n\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖\"\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open('test.md', 'r')\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n```\n\n\n### 文件读写\n\n\n- **write()**         一次只可以写一行\n- **writelines()**  一次写入多行，以列表形式\n- **read()**         没有参数读取文件所有数据，指定参数（1,2,3... ...）读取指定个数的数据\n- **readline()**    一次读取一行\n- **readlines()**   一次读取多行\n\n\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖!\"\nfileA.write(content)\n\nlines = ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open('test.md', 'r')\n\n\"\"\"文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    \"\"\"\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\n\n# 按行读取\nfor line in content4:\n    if line[-1] == '\\n':\n        print(line[:-1])\n        else: \n            print(line)\n\n            fileB.close()\n```\n\n\n### 文件拷贝\n\n\n```python\n# 获取要拷贝的文件名\n\nold_fileName = input('请输入您要拷贝的文件名：')\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + 'bk'\n\n# 打开新的文件\n\nfile_old = open(old_fileName, 'rb')\nfile_new = open(new_fileName, 'wb') \n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n```\n\n\n### 文件和目录操作\n\n\n```python\nimport os\n\n# 文件重命名\nos.rename('test.md', 'hello.txt')\n\n# 文件删除\nos.remove('test.md') # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir('abc')\nos.rmdir('abc')\n\n# 获取目录的文件列表\nos.listdir('abc')\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir('\\Users\\YII\\Desktop\\\\') # 设置默认工作目录\n```\n","source":"_posts/后端领域/编程语言/Python/Python 基础.md","raw":"---\ntitle: python 基础\ntags:\n  - python\ncategories:\n  - - 后端领域\n    - 编程语言\n    - python\ncomments: true\nabbrlink: 2562162005\ndate: 2021-10-02 00:00:00\n---\n\n## Python 环境搭建\n\n- 下载安装\n\n```shell\n$ 下载页面：https://www.python.org/downloads/windows/\n\t2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n\t3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n\t2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n\t3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n```\n\n\n- pip 升级\n\n\n\n```shell\n$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n```\n\n\n- 虚拟环境\n\n\n\n```shell\n在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    => 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n\t创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n```\n\n\n- 第三方包本地安装\n\n\n\n```shell\n$  **.whl : \n$\t\tpip install  **.whl\n$  **.egg : \n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n\t\tpython setup.py install\n```\n## Python 数据类型\n\n\n**不可变数据类型：** Number（数字）、String（字符串）、Tuple（元组）\n\n\n**可变数据类型：**   List（列表）、Dictionary（字典）、Set（集合）\n\n\n**序列容器：** String（字符串）、List（列表）Tuple（元组）\n\n\n**非序列容器**：Dictionary（字典）、Set（集合）\n\n\n### 数据类型之间的运算规则\n\n\n- 算术运算符\n\n\n\n```\n常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 <==> 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n```\n\n\n- 赋值运算符\n\n\n\n```\n常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=\t: A //= B <==> A = A // B\n%=\t: A %= B <==> A = A % B\n**= : A **= B <==> A = A ** B\n```\n\n\n- 比较运算符\n\n\n\n```\n常见运算符：>, < , >=, <=, ==, != \n\nPython 中 没有 全等于 ===\n```\n\n\n- 逻辑运算符\n\n\n\n```python\n# 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n```\n\n\n- **数据类型之间运算规则**\n\n\n\n```\n总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n```\n\n\n### 数据类型转换\n\n\n**前提：可以转换为目标类型**\n\n\n- 转换为 Number 类型\n\n\n\n```python\nvalue = '666'\nint(value) # ==> 666\n```\n\n\n- 转换为 String 类型\n\n\n\n```python\nvalue = 666\nstr(value)  ==> '666'\n```\n\n\n- 转换为 float 类型\n\n\n\n```python\nvalue = 666 # ‘666’呢？\nfloat(value)  ==> 666.00\n```\n\n\n### 数字（Number）\n\n\n- 整数（integer）\n- 小数 / 浮点数（float）\n\n\n\n**[ 常用的数字函数 ]**\n\n\n```python\nabs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n```\n\n\n### 字符串（String）\n\n\n- 字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 \" )来创建字符串\n- 字符串切片索引\n\n\n\n```python\nstr = 'Runoob'\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + \"TEST\") # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n```\n\n\n**[ python三引号 ]**\n\n\npython 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符\n\n\n```python\npara_str = \"\"\"这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    \"\"\"\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [ \n]。\n```\n\n\n### 列表（List）\n\n\n- 列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型\n- 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可\n- 列表切片索引\n\n\n\n**[ 常用的列表函数 ]**\n\n\n```python\nlist.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n```\n\n\n### 元组（Tuple）\n\n\n- 元组与列表类似，不同之处在于元组的元素不能修改\n\n\n\n### 字典（Dictionary）\n\n\n- 字典是另一种可变容器模型，且可存储任意类型对象\n- **dict = {key1 : value1, key2 : value2 }：**每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中\n- **注意：**键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。\n\n\n\n**[ 访问字典的值 ]**\n\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n'''\n    del dict['Name']     # 删除键 'Name'\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    '''\nprint (\"dict['Name']: \", dict['Name'])\nprint (\"dict['Age']: \", dict['Age'])\n# 输出\ndict['Name']:  Runoob\n    dict['Age']:  7\n```\n\n\n**[ 字典键的特性 ]**\n\n\n- 不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住\n\n\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Name': '小菜鸟'}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\ndict['Name']:  小菜鸟\n    12\n```\n\n\n- 键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行\n\n\n\n```python\ndict = {['Name']: 'Runoob', 'Age': 7}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\nTraceback (most recent call last):\n    File \"test.py\", line 3, in <module>\n    dict = {['Name']: 'Runoob', 'Age': 7}\n    TypeError: unhashable type: 'list'\n```\n\n\n**[ 字典函数 ]**\n\n\n```python\nradiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n```\n\n\n### 集合（Set）\n\n\n- 集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合\n- **注意：**创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典\n\n\n\n```python\nbasket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\nprint(basket)                      # 去重功能\n#输出\n{'orange', 'banana', 'pear', 'apple'}\n\n'orange' in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n'crabgrass' in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\n#输出                                  \n{'a', 'r', 'b', 'c', 'd'}\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n{'d', 'b', 'r'}\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n{'c', 'b', 'r', 'z', 'l', 'm', 'a', 'd'}\n\nprint(a & b)                              # 集合a和b中都包含了的元素\n#输出\n{'a', 'c'}\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n{'l', 'b', 'z', 'r', 'm', 'd'}\n```\n\n\n**[ 添加元素 ]**\n\n\n- **s.add( x )** 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作\n\n\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.add(\"Facebook\")\nprint(thisset)\n#输出\n{'Taobao', 'Facebook', 'Google', 'Runoob'}\n```\n\n\n- **s.update( x )** 参数可以是列表，元组，字典等\n\n\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.update({1,3})\nprint(thisset)\n#输出\n{1, 3, 'Google', 'Taobao', 'Runoob'}\n\nthisset.update([1,4],[5,6])  \nprint(thisset)\n#输出\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n```\n\n\n**[ 移除元素 ]**\n\n\n```python\ns.remove( x )\t\t# 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )\t\t# 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()\t\t\t\t# 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n```\n\n\n**[ 集合函数 ]**\n\n\n```python\nadd()\t        #为集合添加元素\nclear()\t        #移除集合中的所有元素\ncopy()\t        #拷贝一个集合\nunion()\t        #返回两个集合的并集\nupdate()\t    #给集合添加元素\n```\n\n\n## Python 输入输出\n\n\n### 标准输入输出函数\n\n\n- **print()** 标准输出函数\n\n\n\n```python\n#  换行符  \\n,  end='\\n'\nprint('aaa' end='') # 不换行\nprint('bbb' end='#') # bbb 和 ccc 之间用 # 连接\nprint('ccc')\n\n# 格式化输出\nname = '鲁班'\nage = 20\n\n> %s ==> string\n> %d ==> digit(数字)\n> %f ==> float\n> %% ==> 输出 %\n\nprint('他的名字是' + name +',他的年龄是' + age + '。') # 输出格式\nprint('他的名字是%s,他的年龄是%d。' %(name, age))\n\nprint('胜率%d%%' % 87)  # %% 表示 %  ==> 87%\n```\n\n\n- **input()** 标准输入函数,输入的内容是字符串\n\n\n\n```python\nprint('请输入你的姓名：')\ninput()\n<==> input('请输入你的姓名：')\n\n# 保存输入的数据\n\ninput_content = input('请输入你的姓名：')\nprint( input_content)\n# 动态\nprint('欢迎您 %s !' % input_content)\n```\n\n\n## Python 分支语句\n\n\n### if 分支语句\n\n\n- 比较运算符\n\n\n\n```\n==  相等, !=  不相等, >   大于, <   小于, >=  大于等于, <=  小于等于\n```\n\n\n- if 语句\n\n\n\n```python\nif a > b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n```\n\n\n- 多个条件之间的关系\n\n\n\n```python\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a > b and a or b\n= false and a or b\n= false or b\n= b                 # ==> b 20\nret = a < b and a or b\n= true and a or b\n= a or b\n= a                 # ==> a 10\n# not(非)\n```\n\n\n### while 语句\n\n\n```python\n\"\"\"\n    我不喜欢这个世界，我只喜欢你！\n    \"\"\"\n# while 循环\n\n# i = 1\n# while i <= 100:\n#     print(i)\n#     i += 1\n#\n# print('END')\n\n# 1-100 偶数\n\n# i = 1\n# while i <= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input('开始数：'))\n# end = int(input('结束数：'))\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start <= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print('奇数和：',total)\n\n# 打印 *\n\n# n = 1\n# while n <= 5:\n#     print('*' * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i <= 100:\n#     if i > 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print('欢迎使用')\n    print('*' * 10 + '操作菜单' + '*' * 10)\n\n    print('1. 展示信息')\n    print('2. 新增信息')\n    print('3. 修改信息')\n    print('4. 删除信息')\n    print('5. 退出')\n    # 保存用户操作\n    user_operation = int(input('请输入您的操作：'))\n    if user_operation == 1:\n        print('姓名\\t年龄\\t')\n        print('鲁班\\t20\\t')\n        print('吕布\\t30\\t')\n        print('小乔\\t18\\t')\n        elif user_operation == 2:\n            name = input('请输入姓名：')\n            age = input('请输入年龄：')\n            print('%s 添加成功'% name)\n            elif user_operation == 3:\n                name = input('请输入修改姓名')\n                print('%s 修改成功'% name)\n\n\n                elif user_operation == 4:\n                    name = input('请输入修改姓名')\n                    print('%s 删除成功'% name)\n                    elif user_operation == 4:\n                        print('退出成功')\n                        break\n                        else:\n                            print('输入有误')\n\n                            print('*' * 27)\n```\n\n\n## Python 函数操作\n\n\n```python\n# 定义函数：\ndef 函数名():\n\t一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input('输入开始数字：'))\nend = int(input('输入结束数字：'))\ndef sum(start, end):\n    \"\"\"这是我的函数文档\"\"\"\n    if not isinstance(start, int):\n        print('请输入整数')\n        return None\n    if not isinstance(end, int):\n        print('请输入整数')\n        return None\n    if start > end:\n        print('start 必须小于 end')\n        return None\n    total = 0\n    whi le start <= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input('请输入运算符')\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == '+':\n                    result = a + b\n                    elif Oper == '-':\n                        result = a - b\n                        elif Oper == '*':\n                            result = a * b\n                            elif Oper == '/':\n                                result = a / b\n                                else:\n                                    print('输入有误')\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n```\n\n\n## 数据类型基础操作\n\n\n### 字符串（String）\n\n\n> 维度：方法的作用，参数，返回值，原数据是否改变\n\n\n\n##### 符串的遍历\n\n\n```python\nistr = 'hello'\n# 方法一\ni = 0\nwhile i < 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=' ')\n```\n\n\n##### 字符串的替换\n\n\n- **replace()** [ str.replace('old', 'new', 替换次数) ]\n\n\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nnewstr = strEmail.replace('y','#') # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace('y','#', 1) # 只替换第一次出现的 y\n```\n\n\n##### 字符串查找\n\n\n- **find()**\n- 返回第一次出现的位置，如果没有则返回 -1\n\n\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\n# 找到 @ 的位置\n\nstrEmail.find('@')\n```\n\n\n##### 字符串的切片\n\n\n```python\n# 以 @ 获取前后内容\n\nstrEmail = 'zxymaibox@yeah.net'\npossion = strEmail.find('@')  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  <==> print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username => print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui => print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n```\n\n\n##### 字符串拆分成列表\n\n\n- **split()**\n- 返回拆分后的列表\n\n\n\n```python\n# 以 @ 获取前后内容\nstrEmail = 'zxymaibox@yeah.net'\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count('@')\n\nif strCount == 1:\n    result = strEmail.split('@')\n\n    print(result)  # => ['zxymaibox', 'yeah.net']\n\n    username = result[0]\n    houzhui = result[1]\n```\n\n\n##### 查询某一字符出现的次数\n\n\n- **count()**\n\n\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nprint(strEmail.count('@')) # => 1\nprint(strEmail.count('y')) # => 2\n```\n\n\n##### 判断字符串是否全为字母\n\n\n- **isalpha()** [str.isalpha()]\n- 返回布尔值\n\n\n\n##### 字符串去除两侧空格\n\n\n- **strip()**\n- 返回新的字符串\n\n\n\n### 列表（List）\n\n\n```python\nlist = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n```\n\n\n##### 列表的遍历\n\n\n```python\nlist = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index < length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n```\n\n\n##### 列表元素插入\n\n\n```python\nlist = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n```\n\n\n##### 列表元素删除\n\n\n- **pop()** 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]\n- **remove()** 值删除， [ 默认删除第一次出现的值 ]\n- **clear() **清空列表，\n\n\n\n```python\nlist = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n```\n\n\n##### 列表元素查找和修改\n\n\n- **index(oldValue)** [ 如果值存在返回位置，不存在会报错 ]\n- **count(oldValue)** [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]\n\n\n\n```python\nlist = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n```\n\n\n##### 列表元素排序\n\n\n- **sort()** [默认从小到大, reverse= false ]\n- 参数： reverse=True 实现降序排列；\n- 逆序： reverse() [ 实现列表的逆序 ]\n\n\n\n```python\n# 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i < 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n```\n\n\n##### 两个列表元素追加\n\n\n- **extend()**\n\n\n\n```python\nlist1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n```\n\n\n### 元祖（Tuple）\n\n\n**可以理解为列表，但是他的元素不可修改**\n\n\n- 元组一旦创建不可修改\n- 元组只有一个元素时，需要在尾部添加一个逗号\n- 元组比列表更节省空间\n- 元组是序列式容器支持索引、切片操作\n\n\n\n```python\n# 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n```\n\n\n### 字典（Dictionary）\n\n\n```python\n# 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n```\n\n\n##### 字典元素访问\n\n\n```python\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 获取值\n1. print(dict['age'])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get('age', '我是默认返回值'))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict['score'] = 99       # 添加元素\ndict['name'] = '时光静好' # 修改元素\n```\n\n\n##### 字典元素删除\n\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 删除元素(也适用于列表)\ndel  person['age']\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n```\n\n\n##### 字典的遍历\n\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys(['name', 'gender', 'age'])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # ['name', 'gender', 'age']\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values(['serendipity', '女', '20'])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # ['serendipity', '女', '20']\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([('name': 'serendipity'),('gender': '女'), ('age' : '20')])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [('name': 'serendipity'),('gender': '女'), ('age' : '20')]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print('key:', value[0],'value:', value[1])\n\n\n        i = 0\n        while i < len(keyValList):\n            print('key:', keyValList[i][0], 'value:', keyValList[i][1] )\n            i += 1\n```\n\n\n### 集合（Set）\n\n\n## Python 文件操作\n\n\n### 文件的打开和关闭\n\n\n- **open(文件名, 访问模式)** 打开文件 [ 参数： 文件名 ， 访问模式]\n   - 访问模式： r 以只读方式打开文件（默认）\n   - 访问模式： w 打开文件只用于写入\n   - 访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n   - 访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头\n   - 访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入\n   - 访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n- **close()** 关闭文件\n\n\n\n** pyCharm 文件编码: file encodings: GBK **\n\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖\"\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open('test.md', 'r')\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n```\n\n\n### 文件读写\n\n\n- **write()**         一次只可以写一行\n- **writelines()**  一次写入多行，以列表形式\n- **read()**         没有参数读取文件所有数据，指定参数（1,2,3... ...）读取指定个数的数据\n- **readline()**    一次读取一行\n- **readlines()**   一次读取多行\n\n\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖!\"\nfileA.write(content)\n\nlines = ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open('test.md', 'r')\n\n\"\"\"文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    \"\"\"\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\n\n# 按行读取\nfor line in content4:\n    if line[-1] == '\\n':\n        print(line[:-1])\n        else: \n            print(line)\n\n            fileB.close()\n```\n\n\n### 文件拷贝\n\n\n```python\n# 获取要拷贝的文件名\n\nold_fileName = input('请输入您要拷贝的文件名：')\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + 'bk'\n\n# 打开新的文件\n\nfile_old = open(old_fileName, 'rb')\nfile_new = open(new_fileName, 'wb') \n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n```\n\n\n### 文件和目录操作\n\n\n```python\nimport os\n\n# 文件重命名\nos.rename('test.md', 'hello.txt')\n\n# 文件删除\nos.remove('test.md') # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir('abc')\nos.rmdir('abc')\n\n# 获取目录的文件列表\nos.listdir('abc')\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir('\\Users\\YII\\Desktop\\\\') # 设置默认工作目录\n```\n","slug":"后端领域/编程语言/Python/Python 基础","published":1,"updated":"2022-02-04T10:12:23.203Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbz001xzc1b5h6ahn7o","content":"<h2 id=\"Python-环境搭建\"><a href=\"#Python-环境搭建\" class=\"headerlink\" title=\"Python 环境搭建\"></a>Python 环境搭建</h2><ul>\n<li>下载安装</li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面：https://www.python.org/downloads/windows/\n    2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n    3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n    2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n    3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n</code></pre>\n<ul>\n<li>pip 升级</li>\n</ul>\n<pre><code class=\"shell\">$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n</code></pre>\n<ul>\n<li>虚拟环境</li>\n</ul>\n<pre><code class=\"shell\">在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    =&gt; 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n    创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n</code></pre>\n<ul>\n<li>第三方包本地安装</li>\n</ul>\n<pre><code class=\"shell\">$  **.whl : \n$        pip install  **.whl\n$  **.egg : \n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n        python setup.py install\n</code></pre>\n<h2 id=\"Python-数据类型\"><a href=\"#Python-数据类型\" class=\"headerlink\" title=\"Python 数据类型\"></a>Python 数据类型</h2><p><strong>不可变数据类型：</strong> Number（数字）、String（字符串）、Tuple（元组）</p>\n<p><strong>可变数据类型：</strong>   List（列表）、Dictionary（字典）、Set（集合）</p>\n<p><strong>序列容器：</strong> String（字符串）、List（列表）Tuple（元组）</p>\n<p><strong>非序列容器</strong>：Dictionary（字典）、Set（集合）</p>\n<h3 id=\"数据类型之间的运算规则\"><a href=\"#数据类型之间的运算规则\" class=\"headerlink\" title=\"数据类型之间的运算规则\"></a>数据类型之间的运算规则</h3><ul>\n<li>算术运算符</li>\n</ul>\n<pre><code>常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 &lt;==&gt; 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n</code></pre>\n<ul>\n<li>赋值运算符</li>\n</ul>\n<pre><code>常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=    : A //= B &lt;==&gt; A = A // B\n%=    : A %= B &lt;==&gt; A = A % B\n**= : A **= B &lt;==&gt; A = A ** B\n</code></pre>\n<ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>常见运算符：&gt;, &lt; , &gt;=, &lt;=, ==, != \n\nPython 中 没有 全等于 ===\n</code></pre>\n<ul>\n<li>逻辑运算符</li>\n</ul>\n<pre><code class=\"python\"># 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n</code></pre>\n<ul>\n<li><strong>数据类型之间运算规则</strong></li>\n</ul>\n<pre><code>总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n</code></pre>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p><strong>前提：可以转换为目标类型</strong></p>\n<ul>\n<li>转换为 Number 类型</li>\n</ul>\n<pre><code class=\"python\">value = &#39;666&#39;\nint(value) # ==&gt; 666\n</code></pre>\n<ul>\n<li>转换为 String 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666\nstr(value)  ==&gt; &#39;666&#39;\n</code></pre>\n<ul>\n<li>转换为 float 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666 # ‘666’呢？\nfloat(value)  ==&gt; 666.00\n</code></pre>\n<h3 id=\"数字（Number）\"><a href=\"#数字（Number）\" class=\"headerlink\" title=\"数字（Number）\"></a>数字（Number）</h3><ul>\n<li>整数（integer）</li>\n<li>小数 / 浮点数（float）</li>\n</ul>\n<p><strong>[ 常用的数字函数 ]</strong></p>\n<pre><code class=\"python\">abs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n</code></pre>\n<h3 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><ul>\n<li>字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 “ )来创建字符串</li>\n<li>字符串切片索引</li>\n</ul>\n<pre><code class=\"python\">str = &#39;Runoob&#39;\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + &quot;TEST&quot;) # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n</code></pre>\n<p><strong>[ python三引号 ]</strong></p>\n<p>python 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p>\n<pre><code class=\"python\">para_str = &quot;&quot;&quot;这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    &quot;&quot;&quot;\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [ \n]。\n</code></pre>\n<h3 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><ul>\n<li>列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型</li>\n<li>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可</li>\n<li>列表切片索引</li>\n</ul>\n<p><strong>[ 常用的列表函数 ]</strong></p>\n<pre><code class=\"python\">list.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n</code></pre>\n<h3 id=\"元组（Tuple）\"><a href=\"#元组（Tuple）\" class=\"headerlink\" title=\"元组（Tuple）\"></a>元组（Tuple）</h3><ul>\n<li>元组与列表类似，不同之处在于元组的元素不能修改</li>\n</ul>\n<h3 id=\"字典（Dictionary）\"><a href=\"#字典（Dictionary）\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><ul>\n<li>字典是另一种可变容器模型，且可存储任意类型对象</li>\n<li><strong>dict = {key1 : value1, key2 : value2 }：</strong>每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</li>\n<li><strong>注意：</strong>键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。</li>\n</ul>\n<p><strong>[ 访问字典的值 ]</strong></p>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;\n&#39;&#39;&#39;\n    del dict[&#39;Name&#39;]     # 删除键 &#39;Name&#39;\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    &#39;&#39;&#39;\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])\n# 输出\ndict[&#39;Name&#39;]:  Runoob\n    dict[&#39;Age&#39;]:  7\n</code></pre>\n<p><strong>[ 字典键的特性 ]</strong></p>\n<ul>\n<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;小菜鸟&#39;&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\ndict[&#39;Name&#39;]:  小菜鸟\n    12\n</code></pre>\n<ul>\n<li>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\nTraceback (most recent call last):\n    File &quot;test.py&quot;, line 3, in &lt;module&gt;\n    dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n    TypeError: unhashable type: &#39;list&#39;\n</code></pre>\n<p><strong>[ 字典函数 ]</strong></p>\n<pre><code class=\"python\">radiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n</code></pre>\n<h3 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><ul>\n<li>集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合</li>\n<li><strong>注意：</strong>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</li>\n</ul>\n<pre><code class=\"python\">basket = &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;\nprint(basket)                      # 去重功能\n#输出\n&#123;&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;&#125;\n\n&#39;orange&#39; in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n&#39;crabgrass&#39; in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)\n#输出                                  \n&#123;&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n&#123;&#39;c&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;l&#39;, &#39;m&#39;, &#39;a&#39;, &#39;d&#39;&#125;\n\nprint(a &amp; b)                              # 集合a和b中都包含了的元素\n#输出\n&#123;&#39;a&#39;, &#39;c&#39;&#125;\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;m&#39;, &#39;d&#39;&#125;\n</code></pre>\n<p><strong>[ 添加元素 ]</strong></p>\n<ul>\n<li><strong>s.add( x )</strong> 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.add(&quot;Facebook&quot;)\nprint(thisset)\n#输出\n&#123;&#39;Taobao&#39;, &#39;Facebook&#39;, &#39;Google&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<ul>\n<li><strong>s.update( x )</strong> 参数可以是列表，元组，字典等</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.update(&#123;1,3&#125;)\nprint(thisset)\n#输出\n&#123;1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n\nthisset.update([1,4],[5,6])  \nprint(thisset)\n#输出\n&#123;1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<p><strong>[ 移除元素 ]</strong></p>\n<pre><code class=\"python\">s.remove( x )        # 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )        # 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()                # 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n</code></pre>\n<p><strong>[ 集合函数 ]</strong></p>\n<pre><code class=\"python\">add()            #为集合添加元素\nclear()            #移除集合中的所有元素\ncopy()            #拷贝一个集合\nunion()            #返回两个集合的并集\nupdate()        #给集合添加元素\n</code></pre>\n<h2 id=\"Python-输入输出\"><a href=\"#Python-输入输出\" class=\"headerlink\" title=\"Python 输入输出\"></a>Python 输入输出</h2><h3 id=\"标准输入输出函数\"><a href=\"#标准输入输出函数\" class=\"headerlink\" title=\"标准输入输出函数\"></a>标准输入输出函数</h3><ul>\n<li><strong>print()</strong> 标准输出函数</li>\n</ul>\n<pre><code class=\"python\">#  换行符  \\n,  end=&#39;\\n&#39;\nprint(&#39;aaa&#39; end=&#39;&#39;) # 不换行\nprint(&#39;bbb&#39; end=&#39;#&#39;) # bbb 和 ccc 之间用 # 连接\nprint(&#39;ccc&#39;)\n\n# 格式化输出\nname = &#39;鲁班&#39;\nage = 20\n\n&gt; %s ==&gt; string\n&gt; %d ==&gt; digit(数字)\n&gt; %f ==&gt; float\n&gt; %% ==&gt; 输出 %\n\nprint(&#39;他的名字是&#39; + name +&#39;,他的年龄是&#39; + age + &#39;。&#39;) # 输出格式\nprint(&#39;他的名字是%s,他的年龄是%d。&#39; %(name, age))\n\nprint(&#39;胜率%d%%&#39; % 87)  # %% 表示 %  ==&gt; 87%\n</code></pre>\n<ul>\n<li><strong>input()</strong> 标准输入函数,输入的内容是字符串</li>\n</ul>\n<pre><code class=\"python\">print(&#39;请输入你的姓名：&#39;)\ninput()\n&lt;==&gt; input(&#39;请输入你的姓名：&#39;)\n\n# 保存输入的数据\n\ninput_content = input(&#39;请输入你的姓名：&#39;)\nprint( input_content)\n# 动态\nprint(&#39;欢迎您 %s !&#39; % input_content)\n</code></pre>\n<h2 id=\"Python-分支语句\"><a href=\"#Python-分支语句\" class=\"headerlink\" title=\"Python 分支语句\"></a>Python 分支语句</h2><h3 id=\"if-分支语句\"><a href=\"#if-分支语句\" class=\"headerlink\" title=\"if 分支语句\"></a>if 分支语句</h3><ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>==  相等, !=  不相等, &gt;   大于, &lt;   小于, &gt;=  大于等于, &lt;=  小于等于\n</code></pre>\n<ul>\n<li>if 语句</li>\n</ul>\n<pre><code class=\"python\">if a &gt; b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n</code></pre>\n<ul>\n<li>多个条件之间的关系</li>\n</ul>\n<pre><code class=\"python\"># and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a &gt; b and a or b\n= false and a or b\n= false or b\n= b                 # ==&gt; b 20\nret = a &lt; b and a or b\n= true and a or b\n= a or b\n= a                 # ==&gt; a 10\n# not(非)\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"python\">&quot;&quot;&quot;\n    我不喜欢这个世界，我只喜欢你！\n    &quot;&quot;&quot;\n# while 循环\n\n# i = 1\n# while i &lt;= 100:\n#     print(i)\n#     i += 1\n#\n# print(&#39;END&#39;)\n\n# 1-100 偶数\n\n# i = 1\n# while i &lt;= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input(&#39;开始数：&#39;))\n# end = int(input(&#39;结束数：&#39;))\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start &lt;= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print(&#39;奇数和：&#39;,total)\n\n# 打印 *\n\n# n = 1\n# while n &lt;= 5:\n#     print(&#39;*&#39; * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i &lt;= 100:\n#     if i &gt; 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print(&#39;欢迎使用&#39;)\n    print(&#39;*&#39; * 10 + &#39;操作菜单&#39; + &#39;*&#39; * 10)\n\n    print(&#39;1. 展示信息&#39;)\n    print(&#39;2. 新增信息&#39;)\n    print(&#39;3. 修改信息&#39;)\n    print(&#39;4. 删除信息&#39;)\n    print(&#39;5. 退出&#39;)\n    # 保存用户操作\n    user_operation = int(input(&#39;请输入您的操作：&#39;))\n    if user_operation == 1:\n        print(&#39;姓名\\t年龄\\t&#39;)\n        print(&#39;鲁班\\t20\\t&#39;)\n        print(&#39;吕布\\t30\\t&#39;)\n        print(&#39;小乔\\t18\\t&#39;)\n        elif user_operation == 2:\n            name = input(&#39;请输入姓名：&#39;)\n            age = input(&#39;请输入年龄：&#39;)\n            print(&#39;%s 添加成功&#39;% name)\n            elif user_operation == 3:\n                name = input(&#39;请输入修改姓名&#39;)\n                print(&#39;%s 修改成功&#39;% name)\n\n\n                elif user_operation == 4:\n                    name = input(&#39;请输入修改姓名&#39;)\n                    print(&#39;%s 删除成功&#39;% name)\n                    elif user_operation == 4:\n                        print(&#39;退出成功&#39;)\n                        break\n                        else:\n                            print(&#39;输入有误&#39;)\n\n                            print(&#39;*&#39; * 27)\n</code></pre>\n<h2 id=\"Python-函数操作\"><a href=\"#Python-函数操作\" class=\"headerlink\" title=\"Python 函数操作\"></a>Python 函数操作</h2><pre><code class=\"python\"># 定义函数：\ndef 函数名():\n    一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input(&#39;输入开始数字：&#39;))\nend = int(input(&#39;输入结束数字：&#39;))\ndef sum(start, end):\n    &quot;&quot;&quot;这是我的函数文档&quot;&quot;&quot;\n    if not isinstance(start, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if not isinstance(end, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if start &gt; end:\n        print(&#39;start 必须小于 end&#39;)\n        return None\n    total = 0\n    whi le start &lt;= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input(&#39;请输入运算符&#39;)\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == &#39;+&#39;:\n                    result = a + b\n                    elif Oper == &#39;-&#39;:\n                        result = a - b\n                        elif Oper == &#39;*&#39;:\n                            result = a * b\n                            elif Oper == &#39;/&#39;:\n                                result = a / b\n                                else:\n                                    print(&#39;输入有误&#39;)\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n</code></pre>\n<h2 id=\"数据类型基础操作\"><a href=\"#数据类型基础操作\" class=\"headerlink\" title=\"数据类型基础操作\"></a>数据类型基础操作</h2><h3 id=\"字符串（String）-1\"><a href=\"#字符串（String）-1\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><blockquote>\n<p>维度：方法的作用，参数，返回值，原数据是否改变</p>\n</blockquote>\n<h5 id=\"符串的遍历\"><a href=\"#符串的遍历\" class=\"headerlink\" title=\"符串的遍历\"></a>符串的遍历</h5><pre><code class=\"python\">istr = &#39;hello&#39;\n# 方法一\ni = 0\nwhile i &lt; 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=&#39; &#39;)\n</code></pre>\n<h5 id=\"字符串的替换\"><a href=\"#字符串的替换\" class=\"headerlink\" title=\"字符串的替换\"></a>字符串的替换</h5><ul>\n<li><strong>replace()</strong> [ str.replace(‘old’, ‘new’, 替换次数) ]</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;) # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;, 1) # 只替换第一次出现的 y\n</code></pre>\n<h5 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h5><ul>\n<li><strong>find()</strong></li>\n<li>返回第一次出现的位置，如果没有则返回 -1</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 找到 @ 的位置\n\nstrEmail.find(&#39;@&#39;)\n</code></pre>\n<h5 id=\"字符串的切片\"><a href=\"#字符串的切片\" class=\"headerlink\" title=\"字符串的切片\"></a>字符串的切片</h5><pre><code class=\"python\"># 以 @ 获取前后内容\n\nstrEmail = &#39;zxymaibox@yeah.net&#39;\npossion = strEmail.find(&#39;@&#39;)  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  &lt;==&gt; print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username =&gt; print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui =&gt; print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n</code></pre>\n<h5 id=\"字符串拆分成列表\"><a href=\"#字符串拆分成列表\" class=\"headerlink\" title=\"字符串拆分成列表\"></a>字符串拆分成列表</h5><ul>\n<li><strong>split()</strong></li>\n<li>返回拆分后的列表</li>\n</ul>\n<pre><code class=\"python\"># 以 @ 获取前后内容\nstrEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count(&#39;@&#39;)\n\nif strCount == 1:\n    result = strEmail.split(&#39;@&#39;)\n\n    print(result)  # =&gt; [&#39;zxymaibox&#39;, &#39;yeah.net&#39;]\n\n    username = result[0]\n    houzhui = result[1]\n</code></pre>\n<h5 id=\"查询某一字符出现的次数\"><a href=\"#查询某一字符出现的次数\" class=\"headerlink\" title=\"查询某一字符出现的次数\"></a>查询某一字符出现的次数</h5><ul>\n<li><strong>count()</strong></li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nprint(strEmail.count(&#39;@&#39;)) # =&gt; 1\nprint(strEmail.count(&#39;y&#39;)) # =&gt; 2\n</code></pre>\n<h5 id=\"判断字符串是否全为字母\"><a href=\"#判断字符串是否全为字母\" class=\"headerlink\" title=\"判断字符串是否全为字母\"></a>判断字符串是否全为字母</h5><ul>\n<li><strong>isalpha()</strong> [str.isalpha()]</li>\n<li>返回布尔值</li>\n</ul>\n<h5 id=\"字符串去除两侧空格\"><a href=\"#字符串去除两侧空格\" class=\"headerlink\" title=\"字符串去除两侧空格\"></a>字符串去除两侧空格</h5><ul>\n<li><strong>strip()</strong></li>\n<li>返回新的字符串</li>\n</ul>\n<h3 id=\"列表（List）-1\"><a href=\"#列表（List）-1\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n</code></pre>\n<h5 id=\"列表的遍历\"><a href=\"#列表的遍历\" class=\"headerlink\" title=\"列表的遍历\"></a>列表的遍历</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index &lt; length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n</code></pre>\n<h5 id=\"列表元素插入\"><a href=\"#列表元素插入\" class=\"headerlink\" title=\"列表元素插入\"></a>列表元素插入</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n</code></pre>\n<h5 id=\"列表元素删除\"><a href=\"#列表元素删除\" class=\"headerlink\" title=\"列表元素删除\"></a>列表元素删除</h5><ul>\n<li><strong>pop()</strong> 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]</li>\n<li><strong>remove()</strong> 值删除， [ 默认删除第一次出现的值 ]</li>\n<li>**clear() **清空列表，</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n</code></pre>\n<h5 id=\"列表元素查找和修改\"><a href=\"#列表元素查找和修改\" class=\"headerlink\" title=\"列表元素查找和修改\"></a>列表元素查找和修改</h5><ul>\n<li><strong>index(oldValue)</strong> [ 如果值存在返回位置，不存在会报错 ]</li>\n<li><strong>count(oldValue)</strong> [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n</code></pre>\n<h5 id=\"列表元素排序\"><a href=\"#列表元素排序\" class=\"headerlink\" title=\"列表元素排序\"></a>列表元素排序</h5><ul>\n<li><strong>sort()</strong> [默认从小到大, reverse= false ]</li>\n<li>参数： reverse=True 实现降序排列；</li>\n<li>逆序： reverse() [ 实现列表的逆序 ]</li>\n</ul>\n<pre><code class=\"python\"># 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i &lt; 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n</code></pre>\n<h5 id=\"两个列表元素追加\"><a href=\"#两个列表元素追加\" class=\"headerlink\" title=\"两个列表元素追加\"></a>两个列表元素追加</h5><ul>\n<li><strong>extend()</strong></li>\n</ul>\n<pre><code class=\"python\">list1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n</code></pre>\n<h3 id=\"元祖（Tuple）\"><a href=\"#元祖（Tuple）\" class=\"headerlink\" title=\"元祖（Tuple）\"></a>元祖（Tuple）</h3><p><strong>可以理解为列表，但是他的元素不可修改</strong></p>\n<ul>\n<li>元组一旦创建不可修改</li>\n<li>元组只有一个元素时，需要在尾部添加一个逗号</li>\n<li>元组比列表更节省空间</li>\n<li>元组是序列式容器支持索引、切片操作</li>\n</ul>\n<pre><code class=\"python\"># 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n</code></pre>\n<h3 id=\"字典（Dictionary）-1\"><a href=\"#字典（Dictionary）-1\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><pre><code class=\"python\"># 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n</code></pre>\n<h5 id=\"字典元素访问\"><a href=\"#字典元素访问\" class=\"headerlink\" title=\"字典元素访问\"></a>字典元素访问</h5><pre><code class=\"python\">dict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 获取值\n1. print(dict[&#39;age&#39;])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get(&#39;age&#39;, &#39;我是默认返回值&#39;))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict[&#39;score&#39;] = 99       # 添加元素\ndict[&#39;name&#39;] = &#39;时光静好&#39; # 修改元素\n</code></pre>\n<h5 id=\"字典元素删除\"><a href=\"#字典元素删除\" class=\"headerlink\" title=\"字典元素删除\"></a>字典元素删除</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 删除元素(也适用于列表)\ndel  person[&#39;age&#39;]\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n</code></pre>\n<h5 id=\"字典的遍历\"><a href=\"#字典的遍历\" class=\"headerlink\" title=\"字典的遍历\"></a>字典的遍历</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys([&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # [&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;]\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values([&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # [&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;]\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print(&#39;key:&#39;, value[0],&#39;value:&#39;, value[1])\n\n\n        i = 0\n        while i &lt; len(keyValList):\n            print(&#39;key:&#39;, keyValList[i][0], &#39;value:&#39;, keyValList[i][1] )\n            i += 1\n</code></pre>\n<h3 id=\"集合（Set）-1\"><a href=\"#集合（Set）-1\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><h2 id=\"Python-文件操作\"><a href=\"#Python-文件操作\" class=\"headerlink\" title=\"Python 文件操作\"></a>Python 文件操作</h2><h3 id=\"文件的打开和关闭\"><a href=\"#文件的打开和关闭\" class=\"headerlink\" title=\"文件的打开和关闭\"></a>文件的打开和关闭</h3><ul>\n<li><strong>open(文件名, 访问模式)</strong> 打开文件 [ 参数： 文件名 ， 访问模式]<ul>\n<li>访问模式： r 以只读方式打开文件（默认）</li>\n<li>访问模式： w 打开文件只用于写入</li>\n<li>访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n<li>访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头</li>\n<li>访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入</li>\n<li>访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n</ul>\n</li>\n<li><strong>close()</strong> 关闭文件</li>\n</ul>\n<p>** pyCharm 文件编码: file encodings: GBK **</p>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖&quot;\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n</code></pre>\n<h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3><ul>\n<li><strong>write()</strong>         一次只可以写一行</li>\n<li><strong>writelines()</strong>  一次写入多行，以列表形式</li>\n<li><strong>read()</strong>         没有参数读取文件所有数据，指定参数（1,2,3… …）读取指定个数的数据</li>\n<li><strong>readline()</strong>    一次读取一行</li>\n<li><strong>readlines()</strong>   一次读取多行</li>\n</ul>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖!&quot;\nfileA.write(content)\n\nlines = [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\n&quot;&quot;&quot;文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    &quot;&quot;&quot;\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\n\n# 按行读取\nfor line in content4:\n    if line[-1] == &#39;\\n&#39;:\n        print(line[:-1])\n        else: \n            print(line)\n\n            fileB.close()\n</code></pre>\n<h3 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h3><pre><code class=\"python\"># 获取要拷贝的文件名\n\nold_fileName = input(&#39;请输入您要拷贝的文件名：&#39;)\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + &#39;bk&#39;\n\n# 打开新的文件\n\nfile_old = open(old_fileName, &#39;rb&#39;)\nfile_new = open(new_fileName, &#39;wb&#39;) \n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n</code></pre>\n<h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><pre><code class=\"python\">import os\n\n# 文件重命名\nos.rename(&#39;test.md&#39;, &#39;hello.txt&#39;)\n\n# 文件删除\nos.remove(&#39;test.md&#39;) # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir(&#39;abc&#39;)\nos.rmdir(&#39;abc&#39;)\n\n# 获取目录的文件列表\nos.listdir(&#39;abc&#39;)\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir(&#39;\\Users\\YII\\Desktop\\\\&#39;) # 设置默认工作目录\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"Python-环境搭建\"><a href=\"#Python-环境搭建\" class=\"headerlink\" title=\"Python 环境搭建\"></a>Python 环境搭建</h2><ul>\n<li>下载安装</li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面：https://www.python.org/downloads/windows/\n    2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n    3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n    2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n    3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n</code></pre>\n<ul>\n<li>pip 升级</li>\n</ul>\n<pre><code class=\"shell\">$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n</code></pre>\n<ul>\n<li>虚拟环境</li>\n</ul>\n<pre><code class=\"shell\">在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    =&gt; 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n    创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n</code></pre>\n<ul>\n<li>第三方包本地安装</li>\n</ul>\n<pre><code class=\"shell\">$  **.whl : \n$        pip install  **.whl\n$  **.egg : \n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n        python setup.py install\n</code></pre>\n<h2 id=\"Python-数据类型\"><a href=\"#Python-数据类型\" class=\"headerlink\" title=\"Python 数据类型\"></a>Python 数据类型</h2><p><strong>不可变数据类型：</strong> Number（数字）、String（字符串）、Tuple（元组）</p>\n<p><strong>可变数据类型：</strong>   List（列表）、Dictionary（字典）、Set（集合）</p>\n<p><strong>序列容器：</strong> String（字符串）、List（列表）Tuple（元组）</p>\n<p><strong>非序列容器</strong>：Dictionary（字典）、Set（集合）</p>\n<h3 id=\"数据类型之间的运算规则\"><a href=\"#数据类型之间的运算规则\" class=\"headerlink\" title=\"数据类型之间的运算规则\"></a>数据类型之间的运算规则</h3><ul>\n<li>算术运算符</li>\n</ul>\n<pre><code>常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 &lt;==&gt; 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n</code></pre>\n<ul>\n<li>赋值运算符</li>\n</ul>\n<pre><code>常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=    : A //= B &lt;==&gt; A = A // B\n%=    : A %= B &lt;==&gt; A = A % B\n**= : A **= B &lt;==&gt; A = A ** B\n</code></pre>\n<ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>常见运算符：&gt;, &lt; , &gt;=, &lt;=, ==, != \n\nPython 中 没有 全等于 ===\n</code></pre>\n<ul>\n<li>逻辑运算符</li>\n</ul>\n<pre><code class=\"python\"># 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n</code></pre>\n<ul>\n<li><strong>数据类型之间运算规则</strong></li>\n</ul>\n<pre><code>总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n</code></pre>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p><strong>前提：可以转换为目标类型</strong></p>\n<ul>\n<li>转换为 Number 类型</li>\n</ul>\n<pre><code class=\"python\">value = &#39;666&#39;\nint(value) # ==&gt; 666\n</code></pre>\n<ul>\n<li>转换为 String 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666\nstr(value)  ==&gt; &#39;666&#39;\n</code></pre>\n<ul>\n<li>转换为 float 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666 # ‘666’呢？\nfloat(value)  ==&gt; 666.00\n</code></pre>\n<h3 id=\"数字（Number）\"><a href=\"#数字（Number）\" class=\"headerlink\" title=\"数字（Number）\"></a>数字（Number）</h3><ul>\n<li>整数（integer）</li>\n<li>小数 / 浮点数（float）</li>\n</ul>\n<p><strong>[ 常用的数字函数 ]</strong></p>\n<pre><code class=\"python\">abs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n</code></pre>\n<h3 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><ul>\n<li>字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 “ )来创建字符串</li>\n<li>字符串切片索引</li>\n</ul>\n<pre><code class=\"python\">str = &#39;Runoob&#39;\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + &quot;TEST&quot;) # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n</code></pre>\n<p><strong>[ python三引号 ]</strong></p>\n<p>python 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p>\n<pre><code class=\"python\">para_str = &quot;&quot;&quot;这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    &quot;&quot;&quot;\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [ \n]。\n</code></pre>\n<h3 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><ul>\n<li>列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型</li>\n<li>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可</li>\n<li>列表切片索引</li>\n</ul>\n<p><strong>[ 常用的列表函数 ]</strong></p>\n<pre><code class=\"python\">list.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n</code></pre>\n<h3 id=\"元组（Tuple）\"><a href=\"#元组（Tuple）\" class=\"headerlink\" title=\"元组（Tuple）\"></a>元组（Tuple）</h3><ul>\n<li>元组与列表类似，不同之处在于元组的元素不能修改</li>\n</ul>\n<h3 id=\"字典（Dictionary）\"><a href=\"#字典（Dictionary）\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><ul>\n<li>字典是另一种可变容器模型，且可存储任意类型对象</li>\n<li><strong>dict = {key1 : value1, key2 : value2 }：</strong>每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</li>\n<li><strong>注意：</strong>键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。</li>\n</ul>\n<p><strong>[ 访问字典的值 ]</strong></p>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;\n&#39;&#39;&#39;\n    del dict[&#39;Name&#39;]     # 删除键 &#39;Name&#39;\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    &#39;&#39;&#39;\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])\n# 输出\ndict[&#39;Name&#39;]:  Runoob\n    dict[&#39;Age&#39;]:  7\n</code></pre>\n<p><strong>[ 字典键的特性 ]</strong></p>\n<ul>\n<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;小菜鸟&#39;&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\ndict[&#39;Name&#39;]:  小菜鸟\n    12\n</code></pre>\n<ul>\n<li>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\nTraceback (most recent call last):\n    File &quot;test.py&quot;, line 3, in &lt;module&gt;\n    dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n    TypeError: unhashable type: &#39;list&#39;\n</code></pre>\n<p><strong>[ 字典函数 ]</strong></p>\n<pre><code class=\"python\">radiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n</code></pre>\n<h3 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><ul>\n<li>集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合</li>\n<li><strong>注意：</strong>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</li>\n</ul>\n<pre><code class=\"python\">basket = &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;\nprint(basket)                      # 去重功能\n#输出\n&#123;&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;&#125;\n\n&#39;orange&#39; in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n&#39;crabgrass&#39; in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)\n#输出                                  \n&#123;&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n&#123;&#39;c&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;l&#39;, &#39;m&#39;, &#39;a&#39;, &#39;d&#39;&#125;\n\nprint(a &amp; b)                              # 集合a和b中都包含了的元素\n#输出\n&#123;&#39;a&#39;, &#39;c&#39;&#125;\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;m&#39;, &#39;d&#39;&#125;\n</code></pre>\n<p><strong>[ 添加元素 ]</strong></p>\n<ul>\n<li><strong>s.add( x )</strong> 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.add(&quot;Facebook&quot;)\nprint(thisset)\n#输出\n&#123;&#39;Taobao&#39;, &#39;Facebook&#39;, &#39;Google&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<ul>\n<li><strong>s.update( x )</strong> 参数可以是列表，元组，字典等</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.update(&#123;1,3&#125;)\nprint(thisset)\n#输出\n&#123;1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n\nthisset.update([1,4],[5,6])  \nprint(thisset)\n#输出\n&#123;1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<p><strong>[ 移除元素 ]</strong></p>\n<pre><code class=\"python\">s.remove( x )        # 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )        # 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()                # 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n</code></pre>\n<p><strong>[ 集合函数 ]</strong></p>\n<pre><code class=\"python\">add()            #为集合添加元素\nclear()            #移除集合中的所有元素\ncopy()            #拷贝一个集合\nunion()            #返回两个集合的并集\nupdate()        #给集合添加元素\n</code></pre>\n<h2 id=\"Python-输入输出\"><a href=\"#Python-输入输出\" class=\"headerlink\" title=\"Python 输入输出\"></a>Python 输入输出</h2><h3 id=\"标准输入输出函数\"><a href=\"#标准输入输出函数\" class=\"headerlink\" title=\"标准输入输出函数\"></a>标准输入输出函数</h3><ul>\n<li><strong>print()</strong> 标准输出函数</li>\n</ul>\n<pre><code class=\"python\">#  换行符  \\n,  end=&#39;\\n&#39;\nprint(&#39;aaa&#39; end=&#39;&#39;) # 不换行\nprint(&#39;bbb&#39; end=&#39;#&#39;) # bbb 和 ccc 之间用 # 连接\nprint(&#39;ccc&#39;)\n\n# 格式化输出\nname = &#39;鲁班&#39;\nage = 20\n\n&gt; %s ==&gt; string\n&gt; %d ==&gt; digit(数字)\n&gt; %f ==&gt; float\n&gt; %% ==&gt; 输出 %\n\nprint(&#39;他的名字是&#39; + name +&#39;,他的年龄是&#39; + age + &#39;。&#39;) # 输出格式\nprint(&#39;他的名字是%s,他的年龄是%d。&#39; %(name, age))\n\nprint(&#39;胜率%d%%&#39; % 87)  # %% 表示 %  ==&gt; 87%\n</code></pre>\n<ul>\n<li><strong>input()</strong> 标准输入函数,输入的内容是字符串</li>\n</ul>\n<pre><code class=\"python\">print(&#39;请输入你的姓名：&#39;)\ninput()\n&lt;==&gt; input(&#39;请输入你的姓名：&#39;)\n\n# 保存输入的数据\n\ninput_content = input(&#39;请输入你的姓名：&#39;)\nprint( input_content)\n# 动态\nprint(&#39;欢迎您 %s !&#39; % input_content)\n</code></pre>\n<h2 id=\"Python-分支语句\"><a href=\"#Python-分支语句\" class=\"headerlink\" title=\"Python 分支语句\"></a>Python 分支语句</h2><h3 id=\"if-分支语句\"><a href=\"#if-分支语句\" class=\"headerlink\" title=\"if 分支语句\"></a>if 分支语句</h3><ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>==  相等, !=  不相等, &gt;   大于, &lt;   小于, &gt;=  大于等于, &lt;=  小于等于\n</code></pre>\n<ul>\n<li>if 语句</li>\n</ul>\n<pre><code class=\"python\">if a &gt; b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n</code></pre>\n<ul>\n<li>多个条件之间的关系</li>\n</ul>\n<pre><code class=\"python\"># and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a &gt; b and a or b\n= false and a or b\n= false or b\n= b                 # ==&gt; b 20\nret = a &lt; b and a or b\n= true and a or b\n= a or b\n= a                 # ==&gt; a 10\n# not(非)\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"python\">&quot;&quot;&quot;\n    我不喜欢这个世界，我只喜欢你！\n    &quot;&quot;&quot;\n# while 循环\n\n# i = 1\n# while i &lt;= 100:\n#     print(i)\n#     i += 1\n#\n# print(&#39;END&#39;)\n\n# 1-100 偶数\n\n# i = 1\n# while i &lt;= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input(&#39;开始数：&#39;))\n# end = int(input(&#39;结束数：&#39;))\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start &lt;= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print(&#39;奇数和：&#39;,total)\n\n# 打印 *\n\n# n = 1\n# while n &lt;= 5:\n#     print(&#39;*&#39; * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i &lt;= 100:\n#     if i &gt; 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print(&#39;欢迎使用&#39;)\n    print(&#39;*&#39; * 10 + &#39;操作菜单&#39; + &#39;*&#39; * 10)\n\n    print(&#39;1. 展示信息&#39;)\n    print(&#39;2. 新增信息&#39;)\n    print(&#39;3. 修改信息&#39;)\n    print(&#39;4. 删除信息&#39;)\n    print(&#39;5. 退出&#39;)\n    # 保存用户操作\n    user_operation = int(input(&#39;请输入您的操作：&#39;))\n    if user_operation == 1:\n        print(&#39;姓名\\t年龄\\t&#39;)\n        print(&#39;鲁班\\t20\\t&#39;)\n        print(&#39;吕布\\t30\\t&#39;)\n        print(&#39;小乔\\t18\\t&#39;)\n        elif user_operation == 2:\n            name = input(&#39;请输入姓名：&#39;)\n            age = input(&#39;请输入年龄：&#39;)\n            print(&#39;%s 添加成功&#39;% name)\n            elif user_operation == 3:\n                name = input(&#39;请输入修改姓名&#39;)\n                print(&#39;%s 修改成功&#39;% name)\n\n\n                elif user_operation == 4:\n                    name = input(&#39;请输入修改姓名&#39;)\n                    print(&#39;%s 删除成功&#39;% name)\n                    elif user_operation == 4:\n                        print(&#39;退出成功&#39;)\n                        break\n                        else:\n                            print(&#39;输入有误&#39;)\n\n                            print(&#39;*&#39; * 27)\n</code></pre>\n<h2 id=\"Python-函数操作\"><a href=\"#Python-函数操作\" class=\"headerlink\" title=\"Python 函数操作\"></a>Python 函数操作</h2><pre><code class=\"python\"># 定义函数：\ndef 函数名():\n    一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input(&#39;输入开始数字：&#39;))\nend = int(input(&#39;输入结束数字：&#39;))\ndef sum(start, end):\n    &quot;&quot;&quot;这是我的函数文档&quot;&quot;&quot;\n    if not isinstance(start, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if not isinstance(end, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if start &gt; end:\n        print(&#39;start 必须小于 end&#39;)\n        return None\n    total = 0\n    whi le start &lt;= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input(&#39;请输入运算符&#39;)\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == &#39;+&#39;:\n                    result = a + b\n                    elif Oper == &#39;-&#39;:\n                        result = a - b\n                        elif Oper == &#39;*&#39;:\n                            result = a * b\n                            elif Oper == &#39;/&#39;:\n                                result = a / b\n                                else:\n                                    print(&#39;输入有误&#39;)\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n</code></pre>\n<h2 id=\"数据类型基础操作\"><a href=\"#数据类型基础操作\" class=\"headerlink\" title=\"数据类型基础操作\"></a>数据类型基础操作</h2><h3 id=\"字符串（String）-1\"><a href=\"#字符串（String）-1\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><blockquote>\n<p>维度：方法的作用，参数，返回值，原数据是否改变</p>\n</blockquote>\n<h5 id=\"符串的遍历\"><a href=\"#符串的遍历\" class=\"headerlink\" title=\"符串的遍历\"></a>符串的遍历</h5><pre><code class=\"python\">istr = &#39;hello&#39;\n# 方法一\ni = 0\nwhile i &lt; 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=&#39; &#39;)\n</code></pre>\n<h5 id=\"字符串的替换\"><a href=\"#字符串的替换\" class=\"headerlink\" title=\"字符串的替换\"></a>字符串的替换</h5><ul>\n<li><strong>replace()</strong> [ str.replace(‘old’, ‘new’, 替换次数) ]</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;) # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;, 1) # 只替换第一次出现的 y\n</code></pre>\n<h5 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h5><ul>\n<li><strong>find()</strong></li>\n<li>返回第一次出现的位置，如果没有则返回 -1</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 找到 @ 的位置\n\nstrEmail.find(&#39;@&#39;)\n</code></pre>\n<h5 id=\"字符串的切片\"><a href=\"#字符串的切片\" class=\"headerlink\" title=\"字符串的切片\"></a>字符串的切片</h5><pre><code class=\"python\"># 以 @ 获取前后内容\n\nstrEmail = &#39;zxymaibox@yeah.net&#39;\npossion = strEmail.find(&#39;@&#39;)  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  &lt;==&gt; print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username =&gt; print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui =&gt; print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n</code></pre>\n<h5 id=\"字符串拆分成列表\"><a href=\"#字符串拆分成列表\" class=\"headerlink\" title=\"字符串拆分成列表\"></a>字符串拆分成列表</h5><ul>\n<li><strong>split()</strong></li>\n<li>返回拆分后的列表</li>\n</ul>\n<pre><code class=\"python\"># 以 @ 获取前后内容\nstrEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count(&#39;@&#39;)\n\nif strCount == 1:\n    result = strEmail.split(&#39;@&#39;)\n\n    print(result)  # =&gt; [&#39;zxymaibox&#39;, &#39;yeah.net&#39;]\n\n    username = result[0]\n    houzhui = result[1]\n</code></pre>\n<h5 id=\"查询某一字符出现的次数\"><a href=\"#查询某一字符出现的次数\" class=\"headerlink\" title=\"查询某一字符出现的次数\"></a>查询某一字符出现的次数</h5><ul>\n<li><strong>count()</strong></li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nprint(strEmail.count(&#39;@&#39;)) # =&gt; 1\nprint(strEmail.count(&#39;y&#39;)) # =&gt; 2\n</code></pre>\n<h5 id=\"判断字符串是否全为字母\"><a href=\"#判断字符串是否全为字母\" class=\"headerlink\" title=\"判断字符串是否全为字母\"></a>判断字符串是否全为字母</h5><ul>\n<li><strong>isalpha()</strong> [str.isalpha()]</li>\n<li>返回布尔值</li>\n</ul>\n<h5 id=\"字符串去除两侧空格\"><a href=\"#字符串去除两侧空格\" class=\"headerlink\" title=\"字符串去除两侧空格\"></a>字符串去除两侧空格</h5><ul>\n<li><strong>strip()</strong></li>\n<li>返回新的字符串</li>\n</ul>\n<h3 id=\"列表（List）-1\"><a href=\"#列表（List）-1\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n</code></pre>\n<h5 id=\"列表的遍历\"><a href=\"#列表的遍历\" class=\"headerlink\" title=\"列表的遍历\"></a>列表的遍历</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index &lt; length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n</code></pre>\n<h5 id=\"列表元素插入\"><a href=\"#列表元素插入\" class=\"headerlink\" title=\"列表元素插入\"></a>列表元素插入</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n</code></pre>\n<h5 id=\"列表元素删除\"><a href=\"#列表元素删除\" class=\"headerlink\" title=\"列表元素删除\"></a>列表元素删除</h5><ul>\n<li><strong>pop()</strong> 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]</li>\n<li><strong>remove()</strong> 值删除， [ 默认删除第一次出现的值 ]</li>\n<li>**clear() **清空列表，</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n</code></pre>\n<h5 id=\"列表元素查找和修改\"><a href=\"#列表元素查找和修改\" class=\"headerlink\" title=\"列表元素查找和修改\"></a>列表元素查找和修改</h5><ul>\n<li><strong>index(oldValue)</strong> [ 如果值存在返回位置，不存在会报错 ]</li>\n<li><strong>count(oldValue)</strong> [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n</code></pre>\n<h5 id=\"列表元素排序\"><a href=\"#列表元素排序\" class=\"headerlink\" title=\"列表元素排序\"></a>列表元素排序</h5><ul>\n<li><strong>sort()</strong> [默认从小到大, reverse= false ]</li>\n<li>参数： reverse=True 实现降序排列；</li>\n<li>逆序： reverse() [ 实现列表的逆序 ]</li>\n</ul>\n<pre><code class=\"python\"># 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i &lt; 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n</code></pre>\n<h5 id=\"两个列表元素追加\"><a href=\"#两个列表元素追加\" class=\"headerlink\" title=\"两个列表元素追加\"></a>两个列表元素追加</h5><ul>\n<li><strong>extend()</strong></li>\n</ul>\n<pre><code class=\"python\">list1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n</code></pre>\n<h3 id=\"元祖（Tuple）\"><a href=\"#元祖（Tuple）\" class=\"headerlink\" title=\"元祖（Tuple）\"></a>元祖（Tuple）</h3><p><strong>可以理解为列表，但是他的元素不可修改</strong></p>\n<ul>\n<li>元组一旦创建不可修改</li>\n<li>元组只有一个元素时，需要在尾部添加一个逗号</li>\n<li>元组比列表更节省空间</li>\n<li>元组是序列式容器支持索引、切片操作</li>\n</ul>\n<pre><code class=\"python\"># 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n</code></pre>\n<h3 id=\"字典（Dictionary）-1\"><a href=\"#字典（Dictionary）-1\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><pre><code class=\"python\"># 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n</code></pre>\n<h5 id=\"字典元素访问\"><a href=\"#字典元素访问\" class=\"headerlink\" title=\"字典元素访问\"></a>字典元素访问</h5><pre><code class=\"python\">dict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 获取值\n1. print(dict[&#39;age&#39;])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get(&#39;age&#39;, &#39;我是默认返回值&#39;))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict[&#39;score&#39;] = 99       # 添加元素\ndict[&#39;name&#39;] = &#39;时光静好&#39; # 修改元素\n</code></pre>\n<h5 id=\"字典元素删除\"><a href=\"#字典元素删除\" class=\"headerlink\" title=\"字典元素删除\"></a>字典元素删除</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 删除元素(也适用于列表)\ndel  person[&#39;age&#39;]\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n</code></pre>\n<h5 id=\"字典的遍历\"><a href=\"#字典的遍历\" class=\"headerlink\" title=\"字典的遍历\"></a>字典的遍历</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys([&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # [&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;]\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values([&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # [&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;]\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print(&#39;key:&#39;, value[0],&#39;value:&#39;, value[1])\n\n\n        i = 0\n        while i &lt; len(keyValList):\n            print(&#39;key:&#39;, keyValList[i][0], &#39;value:&#39;, keyValList[i][1] )\n            i += 1\n</code></pre>\n<h3 id=\"集合（Set）-1\"><a href=\"#集合（Set）-1\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><h2 id=\"Python-文件操作\"><a href=\"#Python-文件操作\" class=\"headerlink\" title=\"Python 文件操作\"></a>Python 文件操作</h2><h3 id=\"文件的打开和关闭\"><a href=\"#文件的打开和关闭\" class=\"headerlink\" title=\"文件的打开和关闭\"></a>文件的打开和关闭</h3><ul>\n<li><strong>open(文件名, 访问模式)</strong> 打开文件 [ 参数： 文件名 ， 访问模式]<ul>\n<li>访问模式： r 以只读方式打开文件（默认）</li>\n<li>访问模式： w 打开文件只用于写入</li>\n<li>访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n<li>访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头</li>\n<li>访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入</li>\n<li>访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n</ul>\n</li>\n<li><strong>close()</strong> 关闭文件</li>\n</ul>\n<p>** pyCharm 文件编码: file encodings: GBK **</p>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖&quot;\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n</code></pre>\n<h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3><ul>\n<li><strong>write()</strong>         一次只可以写一行</li>\n<li><strong>writelines()</strong>  一次写入多行，以列表形式</li>\n<li><strong>read()</strong>         没有参数读取文件所有数据，指定参数（1,2,3… …）读取指定个数的数据</li>\n<li><strong>readline()</strong>    一次读取一行</li>\n<li><strong>readlines()</strong>   一次读取多行</li>\n</ul>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖!&quot;\nfileA.write(content)\n\nlines = [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\n&quot;&quot;&quot;文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    &quot;&quot;&quot;\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\n\n# 按行读取\nfor line in content4:\n    if line[-1] == &#39;\\n&#39;:\n        print(line[:-1])\n        else: \n            print(line)\n\n            fileB.close()\n</code></pre>\n<h3 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h3><pre><code class=\"python\"># 获取要拷贝的文件名\n\nold_fileName = input(&#39;请输入您要拷贝的文件名：&#39;)\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + &#39;bk&#39;\n\n# 打开新的文件\n\nfile_old = open(old_fileName, &#39;rb&#39;)\nfile_new = open(new_fileName, &#39;wb&#39;) \n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n</code></pre>\n<h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><pre><code class=\"python\">import os\n\n# 文件重命名\nos.rename(&#39;test.md&#39;, &#39;hello.txt&#39;)\n\n# 文件删除\nos.remove(&#39;test.md&#39;) # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir(&#39;abc&#39;)\nos.rmdir(&#39;abc&#39;)\n\n# 获取目录的文件列表\nos.listdir(&#39;abc&#39;)\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir(&#39;\\Users\\YII\\Desktop\\\\&#39;) # 设置默认工作目录\n</code></pre>\n"},{"title":"shell 编程","comments":1,"abbrlink":4046588353,"date":"2021-11-01T16:00:00.000Z","_content":"\n\n## shell 实例\n\n\n- echo 用于向窗口输出文本\n```shell\n#!/bin/bash\n\necho \"时光静好，岁月安然！\"\n```\n\n- 脚本运行\n```shell\n$ ./test.sh\n\n$  sh test.sh\n```\n\n\n## 变量\n\n[ **变量名的命名规则** ]\n\n1. 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头\n1. 中间不能有空格，可以使用下划线（_）\n1. 不能使用标点符号\n1. 不能使用bash里的关键字（可用help命令查看保留关键字）\n\n\n\n- **变量赋值**\n```shell\n#!/bin/bash\n\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 使用变量\necho ${string}\n\n# 语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\nfor file in `ls /etc` 或 for file in $(ls /etc)\n\tdo \n\techo \"文件： ${file}\"\n\tdone\n```\n\n- **只读变量( readonly  )**\n```shell\n#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=\"www.baidu.com\"\nreadonly base_url\nbase_url=\"www.google.com\"\n\n# 运行脚本，结果如下：\n\t/bin/bash: NAME: This variable is read only.\n```\n\n- **删除变量（unset ）**\n```shell\n#!/bin/bash\n\nvariable_name=\"System\"\nunset variable_name\n\necho ${variable_name}  # 没有任何输出\n```\n\n- **变量类型**\n```shell\n1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n```\n\n\n## 字符串\n\n\n- 字符串可以用单引号，也可以用双引号，也可以不用引号\n```shell\n#!/bin/bash\n\n# 单引号\nstr='this is a string'\n单引号字符串的限制：\n\t单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n\t单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n\t\n# 双引号\n_name='system'\nstr=\"Hello, I know you are \\\"${_name}\\\"! \\n\"\necho -e ${str}\n\n# 输出结果为：\n\tHello, I know you are \"runoob\"! \n\n双引号的优点：\n\t双引号里可以有变量\n\t双引号里可以出现转义字符\n```\n\n- **字符串拼接**\n```shell\n#!/bin/bash\n\n_name=\"system\"\n# 使用双引号拼接\ngreeting=\"hello, \"$_name\" !\"  \t# 双引号拼接\ngreeting_1=\"hello, ${_name} !\"\t# 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2='hello, '$_name' !'  # 单引号拼接\ngreeting_3='hello, ${_name} !'  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, ${_name} !   # 单引号字符串中存在变量，原样输出\n```\n\n- **获取字符串长度**\n```shell\n#!/bin/sh\nstring=\"abcd\"\necho ${#string} #输出 4\n```\n\n\n- **提取字符串**\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\necho ${string:0:6}  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0\n\n注意： \n  1. 不支持负数切片\n  2. 如果后一个数小于开始的数字，则该值表示向后延伸长度（如：${string:7:3} >> 夏天雨）\n  3. 如果后一个数大于开始的数字，则该值表示向后延伸位置（如：${string:3:7} >> 天冷呀 夏天雨）\n```\n\n- **查找字符串**\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\n\necho `expr index \"$string\" 呀秋` # 输出 6（从 1 开始 ）\n```\n\n\n## shell 数组\n\n\n- **定义数组**\n\n    在 Shell 中，用括号来表示数组，数组元素用\"空格\"符号分割开。定义数组的一般形式为\n```shell\n# 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen  # 可以不使用连续的下标，而且下标的范围没有限制\n```\n\n- **读取数组**\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" (value0 value1 value2 value3) )\n\necho ${array[0]}\n\n# 使用 @ 或 * 符号可以获取数组中的所有元素\necho ${array[@]} # 输出： 0 1 2 3 时光 静好\n```\n\n- **获取数组的长度**\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" )\n\n# 取得数组元素的个数 \nlength=${#array[@]}\n# 或者\nlength=${#array[*]}\necho ${length} # 6\n\n# 取得数组单个元素的长度\nlengthn=${#array_name[n]}\n\nlengthn=${#array_name[4]}\necho ${lengthn} # 2\n```\n\n\n## shell 注释\n\n\n- 以 **#** 开头的行就是注释，会被解释器忽略\n```shell\n#!/bin/bash\n\n#--------------------------------------------\n# 这是一个注释\n# author：\n# site：\n# slogan：\n#--------------------------------------------\n##### 用户配置区 开始 #####\n#\n#\n# 这里可以添加脚本描述信息\n# \n#\n##### 用户配置区 结束  #####\n```\n\n- **多行注释**\n```shell\n#!/bin/bash\n\n:<<EOF\n注释内容...\n注释内容...\n注释内容... \nEOF\n\n# EOF 也可以使用其他符号:\n\n:<<'\n注释内容...\n注释内容...\n注释内容...\n'\n\n:<<!\n注释内容...\n注释内容...\n注释内容...\n!\n```\n\n## shell 传递参数\n\n\n> 在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n**。**n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……\n\n\n\n- 实例\n```shell\n#!/bin/bash\n# file_name = test.sh\n# 以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\n\necho \"Shell 传递参数实例！\";\necho \"执行的文件名：$0\";\necho \"第一个参数为：$1\";\necho \"第二个参数为：$2\";\necho \"第三个参数为：$3\";\n\n# 执行脚本\nsh test.sh 1 2 3\n    Shell 传递参数实例！\n    执行的文件名：test.sh\n    第一个参数为：1\n    第二个参数为：2\n    第三个参数为：3\n    \n./test.sh 3 2 1\n    Shell 传递参数实例！\n    执行的文件名：./test.sh\n    第一个参数为：3\n    第二个参数为：2\n    第三个参数为：1\n```\n| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数。 如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。 |\n| $$ | 脚本运行的当前进程 ID 号 |\n| $! | 后台运行的最后一个进程的 ID号 |\n| $@ | 与 $$* 相同，但是使用时加引号，并在引号中返回每个参数。 如\"$$@\"用「\"」括起来的情况、以\"$1\" \"$$2\" … \"$$n\" 的形式输出所有参数。 |\n| $- | 显示Shell使用的当前选项，与 [set命令](https://www.runoob.com/linux/linux-comm-set.html) 功能相同。 |\n| $? | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。 |\n\n- **$_ 与 $@ 区别_\n```tex\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n```\n\n## shell 运算符\n\n\n> shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符\n> 原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。\n> expr 是一款表达式计算工具，使用它能完成表达式的求值操作。\n\n- 实例\n```shell\n#!/bin/bash\n\nval=`expr 5 + 5`\n\n# 等价于  \nval=$[a+b]\n\necho ${val} # 10\n```\n\n   - 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。\n   - 完整的表达式要被 ”``“ 包含\n- **算术运算符**\n```shell\n#!/bin/bash\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=      \n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho \"a + b : ${result}\"\n\nresult=`expr ${a} - ${b}`\necho \"a - b : ${result}\"\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 \"*\" 不需要转义符号 \"\\\" \nresult=`expr $a \\* $b`\necho \"a * b : ${result}\"\n\nresult=`expr $a / $b`\necho \"a / b : ${result}\"\n\nresult=`expr $a % $b`\necho \"a % b : ${result}\"\n\n# 注意空格 [ $a == $b ] \nif [ $a == $b ] \nthen \n  echo \" a 等于 b\"\nfi\n\nif [ $a != $b ] \nthen\n  echo \"a 不等于 b\"\nfi\n\n```\n\n- **关系运算符**\n> 关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n| :--- | :--- | :--- |\n| -eq | 检测两个数是否相等，相等返回 true。 | [ $a -eq $b ] 返回 false。 |\n| -ne | 检测两个数是否不相等，不相等返回 true。 | [ $a -ne $b ] 返回 true。 |\n| -gt | 检测左边的数是否大于右边的，如果是，则返回 true。 | [ $a -gt $b ] 返回 false。 |\n| -lt | 检测左边的数是否小于右边的，如果是，则返回 true。 | [ $a -lt $b ] 返回 true。 |\n| -ge | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | [ $a -ge $b ] 返回 false。 |\n| -le | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | [ $a -le $b ] 返回 true。 |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen \n  echo \"-eq : a 等于 b\"\nelse \n  echo \"-eq : a 不等于 b\"\nfi\n```\n\n- **布尔运算符**\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n| :--- | :--- | :--- |\n| ! | 非运算，表达式为 true 则返回 false，否则返回 true。 | [ ! false ] 返回 true。 |\n| -o | 或运算，有一个表达式为 true 则返回 true。 | [ $a -lt 20 -o $b -gt 100 ] 返回 true。 |\n| -a | 与运算，两个表达式都为 true 才返回 true。 | [ $a -lt 20 -a $b -gt 100 ] 返回 false。 |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen \n  echo \"a 不等于 b， 返回 true\"\nelse \n  echo \" a 等于 b\"\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n  echo \"a 大于 100或 b小于50 满足一个条件成立 \"\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n  echo \"a 大于 100 与 b小于50 返回 false \"\nelse \n  echo \"条件不成立， 必须同时满足， a 大于 100， b 小于 50\"\n```\n\n- **逻辑运算符**\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n| :--- | :--- | :--- |\n| && | 逻辑的 AND | [[ $a -lt 100 && $b -gt 100 ]] 返回 false |\n| &#124;&#124; | 逻辑的 OR | [[ $a -lt 100 &#124;&#124; $b -gt 100 ]] 返回 true |\n\n```shell\n#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n  echo \"a 大于 100 或 b 小于 50 条件成立 返回 true\"\nelse \n  echo \"a 大于 100 或 b 小于 50 条件不成立 返回 false\"\nfi\n\nif [[ $a -gt 100 && $b -lt 50 ]]\nthen\n  echo \"a 大于 100 与 b小于50 返回 true \"\nelse \n  echo \"条件不成立, false， 必须同时满足， a 大于 100， b 小于 50\"\nfi\n```\n\n- **字符串运算符**\n| 运算符 | 说明（假定变量 a 为 \"abc\"，变量 b 为 \"efg\"） | 举例 |\n| :--- | :--- | :--- |\n| = | 检测两个字符串是否相等，相等返回 true。 | [ $a = $b ] 返回 false。 |\n| != | 检测两个字符串是否相等，不相等返回 true。 | [ $a != $b ] 返回 true。 |\n| -z | 检测字符串长度是否为0，为0返回 true。 | [ -z $a ] 返回 false。 |\n| -n | 检测字符串长度是否不为 0，不为 0 返回 true。 | [ -n \"$a\" ] 返回 true。 |\n| $ | 检测字符串是否为空，不为空返回 true。 | [ $a ] 返回 true。 |\n\n- **文件测试运算符**\n> 文件测试运算符用于检测 Unix 文件的各种属性。\n\n| 操作符 | 说明 | 举例 |\n| :--- | :--- | :--- |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。 | [ -b $file ] 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。 | [ -c $file ] 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。 | [ -d $file ] 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | [ -f $file ] 返回 true。 |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。 | [ -g $file ] 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 | [ -k $file ] 返回 false。 |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。 | [ -p $file ] 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。 | [ -u $file ] 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。 | [ -r $file ] 返回 true。 |\n| -w file | 检测文件是否可写，如果是，则返回 true。 | [ -w $file ] 返回 true。 |\n| -x file | 检测文件是否可执行，如果是，则返回 true。 | [ -x $file ] 返回 true。 |\n| -s file | 检测文件是否为空（文件大小是否大于0），不为空返回 true。 | [ -s $file ] 返回 true。 |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。 | [ -e $file ] 返回 true。 |\n\n- 其他检查符：\n   - **-S**: 判断某文件是否 socket。\n   - **-L**: 检测文件是否存在并且是一个符号链接。\n```shell\n#!/bin/bash\n\nfile=\"/tmp/exlog/test.sh\"\n\nif [ -d $file ]\nthen\n   echo \"文件是个目录\"\nelse\n   echo \"文件不是个目录\"\nfi\nif [ -r $file ]\nthen\n   echo \"文件可读\"\nelse\n   echo \"文件不可读\"\nfi\nif [ -w $file ]\nthen\n   echo \"文件可写\"\nelse\n   echo \"文件不可写\"\nfi\nif [ -x $file ]\nthen\n   echo \"文件可执行\"\nelse\n   echo \"文件不可执行\"\nfi\n```\n\n\n\n## shell 输出\n\n\n#### echo命令\n\n\n```shell\n#!/bin/bash\n\necho \"It is a test\" / echo It is a test\n\n### 显示转义字符\necho \"\\\"It is a test\\\"\"\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf \"请输入变量： \"\nread name \necho \"$name It is a test\"\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh \n请输入变量：qwe\nqwe It is a test \n\n### 显示换行\necho -e \"OK! \\n\" # -e 开启转义\necho \"It is a test\"\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e \"OK! \\c\" # -e 开启转义 \\c 不换行\necho \"It is a test\"\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf \"请输入变量： \"\nread name \necho \"$name It is a test\" > test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho '$name\\\"'  \n\n# 输入结果  $name\\\"\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 '\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n```\n\n\n#### printf 命令\n\n\n> printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。\n> 默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n\n\n\n\n```shell\n#!/bin/bash\necho \"Hello, Shell\"\nprintf \"Hello, Shell\\n\"\n\nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg  \nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234\nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543\nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n```\n\n**%s %c %d %f** 都是格式替代符，**％s** 输出一个字符串，**％d** 整型输出，**％c** 输出一个字符，**％f** 输出实数，以小数形式输出。\n**%-10s** 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n**%-4.2f** 指格式化为小数，其中 **.2** 指保留2位小数。\n\n## Shell 输入/输出重定向\n| 命令 | 说明 |\n| :--- | :--- |\n| command > file | 将输出重定向到 file。 |\n| command < file | 将输入重定向到 file。 |\n| command >> file | 将输出以追加的方式重定向到 file。 |\n| n > file | 将文件描述符为 n 的文件重定向到 file。 |\n| n >> file | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m | 将输出文件 m 和 n 合并。 |\n| n <& m | 将输入文件 m 和 n 合并。 |\n| << tag | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n\n\n> _需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。_\n\n\n\n## shell 流程控制\n\n\n### if 控制语句\n\n\n```shell\n#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nelif [ $a -gt $b ]\nthen\n   echo \"a 大于 b\"\nelif [ $a -lt $b ]\nthen\n   echo \"a 小于 b\"\nelse\n   echo \"没有符合的条件\"\nfi\n```\n\n\n### for 循环\n\n\n```shell\n#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo \"The value is: $loop\"\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i<=5;i++));do\n    echo \"这是第 $i 次调用\";\ndone;\n```\n\n\n### while 语句\n\n\n```shell\n#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int<=5 ))\ndo\n    echo $int\n    let \"int++\"\ndone\n```\n\n\n> 以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量\n\n\n\n### 无限循环\n\n\n```shell\n#!/bin/bash\nwhile true\ndo\n  printf \"请输入内容：\"\n  read content\n  echo \"您输入额内容是 ${content}\"\ndone\n\n# 或者\n\nwhile ：\ndo\n  printf \"请输入内容：\"\n  read content\n  echo \"您输入额内容是 ${content}\"\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n  printf \"请输入内容：\"\n  read content\n  echo \"您输入额内容是 ${content}\"\ndone\n```\n\n\n### until 循环\n\n\n> until 循环执行一系列命令直至条件为 true 时停止。\n> until 循环与 while 循环在处理方式上刚好相反。\n> 一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。\n\n\n\n```shell\n#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n```\n\n\n### case ... esac\n\n\n> **case ... esac** 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 **;;** 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。\n> 可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。\n\n\n\n```shell\n\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n\n### 跳出循环\n\n\n- **break**\n> break 命令允许跳出所有循环（终止执行后面的所有循环）\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字:\"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n            break\n        ;;\n    esac\ndone\n```\n\n- **continue**\n> continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字: \"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的!\"\n            continue\n            echo \"游戏结束\"\n        ;;\n    esac\ndone\n```\n\n\n## Shell 函数\n\n\n```shell\n#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n{\n\n    action;\n\n    [return int;]\n\n}\n```\n\n\n> - 1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。\n> - 2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)\n\n\n\n- **实例**\n```shell\n#!/bin/bash\n\nfunction demo (){\n  echo \"这是一个 shell 函数！\"\n}\n\necho \"----- 函数开始执行 -----\"\n\ndemo()\n\necho \"----- 函数执行完毕 -----\"\n\n# 函数 return \n\nfunction demo_return(){\n  a=10\n  b=20\n  return $((a + b))\n  # return $(($a + $b))\n  # return $[a + b]\n}\n\ndemo_return\necho \"和：$?\"\n```\n> 函数返回值在调用该函数后通过 $? 来获得。\n> 注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可\n\n- **函数参数**\n> 在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n> 注意，$$10 不能获取第十个参数，获取第十个参数需要$${10}。当n>=10时，需要使用${n}来获取参数。\n\n| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本或函数的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数 |\n| $$ | 脚本运行的当前进程ID号 |\n| $! | 后台运行的最后一个进程的ID号 |\n| $@ | 与$*相同，但是使用时加引号，并在引号中返回每个参数。 |\n| $- | 显示Shell使用的当前选项，与set命令功能相同。 |\n| $? | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |\n\n```shell\n#!/bin/bash\n\nfunWithParam(){\n    echo \"第一个参数为 $1 !\"\n    echo \"第二个参数为 $2 !\"\n    echo \"第十个参数为 $10 !\"\n    echo \"第十个参数为 ${10} !\"\n    echo \"第十一个参数为 ${11} !\"\n    echo \"参数总数有 $# 个!\"\n    echo \"作为一个字符串输出所有参数 $* !\"\n    echo \"脚本运行的当前进程ID号: $$\"\n    echo \"后台运行的最后一个进程的ID号:$!\"\n    echo \"$-\"\n    echo \"$?\"\n    \n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n\n- **注意点**\n\n\n\n```shell\n#!/bin/bash\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\n\nfunction demoFun2(){\n echo \"这是我的第二个 shell 函数!\"\n expr 1 + 1\n}\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n```\n\n\n> 调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。\n> 第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。\n> 下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：\n\n\n\n```shell\n#!/bin/bash\n\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n```\n","source":"_posts/后端领域/编程语言/shell/shell 编程.md","raw":"---\ntitle: shell 编程\ntags:\n  - shell\ncategories:\n  - - 后端领域\n    - 编程语言\n    - shell\ncomments: true\nabbrlink: 4046588353\ndate: 2021-11-02 00:00:00\n---\n\n\n## shell 实例\n\n\n- echo 用于向窗口输出文本\n```shell\n#!/bin/bash\n\necho \"时光静好，岁月安然！\"\n```\n\n- 脚本运行\n```shell\n$ ./test.sh\n\n$  sh test.sh\n```\n\n\n## 变量\n\n[ **变量名的命名规则** ]\n\n1. 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头\n1. 中间不能有空格，可以使用下划线（_）\n1. 不能使用标点符号\n1. 不能使用bash里的关键字（可用help命令查看保留关键字）\n\n\n\n- **变量赋值**\n```shell\n#!/bin/bash\n\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 使用变量\necho ${string}\n\n# 语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\nfor file in `ls /etc` 或 for file in $(ls /etc)\n\tdo \n\techo \"文件： ${file}\"\n\tdone\n```\n\n- **只读变量( readonly  )**\n```shell\n#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=\"www.baidu.com\"\nreadonly base_url\nbase_url=\"www.google.com\"\n\n# 运行脚本，结果如下：\n\t/bin/bash: NAME: This variable is read only.\n```\n\n- **删除变量（unset ）**\n```shell\n#!/bin/bash\n\nvariable_name=\"System\"\nunset variable_name\n\necho ${variable_name}  # 没有任何输出\n```\n\n- **变量类型**\n```shell\n1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n```\n\n\n## 字符串\n\n\n- 字符串可以用单引号，也可以用双引号，也可以不用引号\n```shell\n#!/bin/bash\n\n# 单引号\nstr='this is a string'\n单引号字符串的限制：\n\t单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n\t单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n\t\n# 双引号\n_name='system'\nstr=\"Hello, I know you are \\\"${_name}\\\"! \\n\"\necho -e ${str}\n\n# 输出结果为：\n\tHello, I know you are \"runoob\"! \n\n双引号的优点：\n\t双引号里可以有变量\n\t双引号里可以出现转义字符\n```\n\n- **字符串拼接**\n```shell\n#!/bin/bash\n\n_name=\"system\"\n# 使用双引号拼接\ngreeting=\"hello, \"$_name\" !\"  \t# 双引号拼接\ngreeting_1=\"hello, ${_name} !\"\t# 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2='hello, '$_name' !'  # 单引号拼接\ngreeting_3='hello, ${_name} !'  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, ${_name} !   # 单引号字符串中存在变量，原样输出\n```\n\n- **获取字符串长度**\n```shell\n#!/bin/sh\nstring=\"abcd\"\necho ${#string} #输出 4\n```\n\n\n- **提取字符串**\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\necho ${string:0:6}  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0\n\n注意： \n  1. 不支持负数切片\n  2. 如果后一个数小于开始的数字，则该值表示向后延伸长度（如：${string:7:3} >> 夏天雨）\n  3. 如果后一个数大于开始的数字，则该值表示向后延伸位置（如：${string:3:7} >> 天冷呀 夏天雨）\n```\n\n- **查找字符串**\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\n\necho `expr index \"$string\" 呀秋` # 输出 6（从 1 开始 ）\n```\n\n\n## shell 数组\n\n\n- **定义数组**\n\n    在 Shell 中，用括号来表示数组，数组元素用\"空格\"符号分割开。定义数组的一般形式为\n```shell\n# 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen  # 可以不使用连续的下标，而且下标的范围没有限制\n```\n\n- **读取数组**\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" (value0 value1 value2 value3) )\n\necho ${array[0]}\n\n# 使用 @ 或 * 符号可以获取数组中的所有元素\necho ${array[@]} # 输出： 0 1 2 3 时光 静好\n```\n\n- **获取数组的长度**\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" )\n\n# 取得数组元素的个数 \nlength=${#array[@]}\n# 或者\nlength=${#array[*]}\necho ${length} # 6\n\n# 取得数组单个元素的长度\nlengthn=${#array_name[n]}\n\nlengthn=${#array_name[4]}\necho ${lengthn} # 2\n```\n\n\n## shell 注释\n\n\n- 以 **#** 开头的行就是注释，会被解释器忽略\n```shell\n#!/bin/bash\n\n#--------------------------------------------\n# 这是一个注释\n# author：\n# site：\n# slogan：\n#--------------------------------------------\n##### 用户配置区 开始 #####\n#\n#\n# 这里可以添加脚本描述信息\n# \n#\n##### 用户配置区 结束  #####\n```\n\n- **多行注释**\n```shell\n#!/bin/bash\n\n:<<EOF\n注释内容...\n注释内容...\n注释内容... \nEOF\n\n# EOF 也可以使用其他符号:\n\n:<<'\n注释内容...\n注释内容...\n注释内容...\n'\n\n:<<!\n注释内容...\n注释内容...\n注释内容...\n!\n```\n\n## shell 传递参数\n\n\n> 在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n**。**n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……\n\n\n\n- 实例\n```shell\n#!/bin/bash\n# file_name = test.sh\n# 以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\n\necho \"Shell 传递参数实例！\";\necho \"执行的文件名：$0\";\necho \"第一个参数为：$1\";\necho \"第二个参数为：$2\";\necho \"第三个参数为：$3\";\n\n# 执行脚本\nsh test.sh 1 2 3\n    Shell 传递参数实例！\n    执行的文件名：test.sh\n    第一个参数为：1\n    第二个参数为：2\n    第三个参数为：3\n    \n./test.sh 3 2 1\n    Shell 传递参数实例！\n    执行的文件名：./test.sh\n    第一个参数为：3\n    第二个参数为：2\n    第三个参数为：1\n```\n| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数。 如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。 |\n| $$ | 脚本运行的当前进程 ID 号 |\n| $! | 后台运行的最后一个进程的 ID号 |\n| $@ | 与 $$* 相同，但是使用时加引号，并在引号中返回每个参数。 如\"$$@\"用「\"」括起来的情况、以\"$1\" \"$$2\" … \"$$n\" 的形式输出所有参数。 |\n| $- | 显示Shell使用的当前选项，与 [set命令](https://www.runoob.com/linux/linux-comm-set.html) 功能相同。 |\n| $? | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。 |\n\n- **$_ 与 $@ 区别_\n```tex\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n```\n\n## shell 运算符\n\n\n> shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符\n> 原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。\n> expr 是一款表达式计算工具，使用它能完成表达式的求值操作。\n\n- 实例\n```shell\n#!/bin/bash\n\nval=`expr 5 + 5`\n\n# 等价于  \nval=$[a+b]\n\necho ${val} # 10\n```\n\n   - 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。\n   - 完整的表达式要被 ”``“ 包含\n- **算术运算符**\n```shell\n#!/bin/bash\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=      \n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho \"a + b : ${result}\"\n\nresult=`expr ${a} - ${b}`\necho \"a - b : ${result}\"\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 \"*\" 不需要转义符号 \"\\\" \nresult=`expr $a \\* $b`\necho \"a * b : ${result}\"\n\nresult=`expr $a / $b`\necho \"a / b : ${result}\"\n\nresult=`expr $a % $b`\necho \"a % b : ${result}\"\n\n# 注意空格 [ $a == $b ] \nif [ $a == $b ] \nthen \n  echo \" a 等于 b\"\nfi\n\nif [ $a != $b ] \nthen\n  echo \"a 不等于 b\"\nfi\n\n```\n\n- **关系运算符**\n> 关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n| :--- | :--- | :--- |\n| -eq | 检测两个数是否相等，相等返回 true。 | [ $a -eq $b ] 返回 false。 |\n| -ne | 检测两个数是否不相等，不相等返回 true。 | [ $a -ne $b ] 返回 true。 |\n| -gt | 检测左边的数是否大于右边的，如果是，则返回 true。 | [ $a -gt $b ] 返回 false。 |\n| -lt | 检测左边的数是否小于右边的，如果是，则返回 true。 | [ $a -lt $b ] 返回 true。 |\n| -ge | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | [ $a -ge $b ] 返回 false。 |\n| -le | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | [ $a -le $b ] 返回 true。 |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen \n  echo \"-eq : a 等于 b\"\nelse \n  echo \"-eq : a 不等于 b\"\nfi\n```\n\n- **布尔运算符**\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n| :--- | :--- | :--- |\n| ! | 非运算，表达式为 true 则返回 false，否则返回 true。 | [ ! false ] 返回 true。 |\n| -o | 或运算，有一个表达式为 true 则返回 true。 | [ $a -lt 20 -o $b -gt 100 ] 返回 true。 |\n| -a | 与运算，两个表达式都为 true 才返回 true。 | [ $a -lt 20 -a $b -gt 100 ] 返回 false。 |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen \n  echo \"a 不等于 b， 返回 true\"\nelse \n  echo \" a 等于 b\"\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n  echo \"a 大于 100或 b小于50 满足一个条件成立 \"\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n  echo \"a 大于 100 与 b小于50 返回 false \"\nelse \n  echo \"条件不成立， 必须同时满足， a 大于 100， b 小于 50\"\n```\n\n- **逻辑运算符**\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n| :--- | :--- | :--- |\n| && | 逻辑的 AND | [[ $a -lt 100 && $b -gt 100 ]] 返回 false |\n| &#124;&#124; | 逻辑的 OR | [[ $a -lt 100 &#124;&#124; $b -gt 100 ]] 返回 true |\n\n```shell\n#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n  echo \"a 大于 100 或 b 小于 50 条件成立 返回 true\"\nelse \n  echo \"a 大于 100 或 b 小于 50 条件不成立 返回 false\"\nfi\n\nif [[ $a -gt 100 && $b -lt 50 ]]\nthen\n  echo \"a 大于 100 与 b小于50 返回 true \"\nelse \n  echo \"条件不成立, false， 必须同时满足， a 大于 100， b 小于 50\"\nfi\n```\n\n- **字符串运算符**\n| 运算符 | 说明（假定变量 a 为 \"abc\"，变量 b 为 \"efg\"） | 举例 |\n| :--- | :--- | :--- |\n| = | 检测两个字符串是否相等，相等返回 true。 | [ $a = $b ] 返回 false。 |\n| != | 检测两个字符串是否相等，不相等返回 true。 | [ $a != $b ] 返回 true。 |\n| -z | 检测字符串长度是否为0，为0返回 true。 | [ -z $a ] 返回 false。 |\n| -n | 检测字符串长度是否不为 0，不为 0 返回 true。 | [ -n \"$a\" ] 返回 true。 |\n| $ | 检测字符串是否为空，不为空返回 true。 | [ $a ] 返回 true。 |\n\n- **文件测试运算符**\n> 文件测试运算符用于检测 Unix 文件的各种属性。\n\n| 操作符 | 说明 | 举例 |\n| :--- | :--- | :--- |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。 | [ -b $file ] 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。 | [ -c $file ] 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。 | [ -d $file ] 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | [ -f $file ] 返回 true。 |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。 | [ -g $file ] 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 | [ -k $file ] 返回 false。 |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。 | [ -p $file ] 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。 | [ -u $file ] 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。 | [ -r $file ] 返回 true。 |\n| -w file | 检测文件是否可写，如果是，则返回 true。 | [ -w $file ] 返回 true。 |\n| -x file | 检测文件是否可执行，如果是，则返回 true。 | [ -x $file ] 返回 true。 |\n| -s file | 检测文件是否为空（文件大小是否大于0），不为空返回 true。 | [ -s $file ] 返回 true。 |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。 | [ -e $file ] 返回 true。 |\n\n- 其他检查符：\n   - **-S**: 判断某文件是否 socket。\n   - **-L**: 检测文件是否存在并且是一个符号链接。\n```shell\n#!/bin/bash\n\nfile=\"/tmp/exlog/test.sh\"\n\nif [ -d $file ]\nthen\n   echo \"文件是个目录\"\nelse\n   echo \"文件不是个目录\"\nfi\nif [ -r $file ]\nthen\n   echo \"文件可读\"\nelse\n   echo \"文件不可读\"\nfi\nif [ -w $file ]\nthen\n   echo \"文件可写\"\nelse\n   echo \"文件不可写\"\nfi\nif [ -x $file ]\nthen\n   echo \"文件可执行\"\nelse\n   echo \"文件不可执行\"\nfi\n```\n\n\n\n## shell 输出\n\n\n#### echo命令\n\n\n```shell\n#!/bin/bash\n\necho \"It is a test\" / echo It is a test\n\n### 显示转义字符\necho \"\\\"It is a test\\\"\"\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf \"请输入变量： \"\nread name \necho \"$name It is a test\"\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh \n请输入变量：qwe\nqwe It is a test \n\n### 显示换行\necho -e \"OK! \\n\" # -e 开启转义\necho \"It is a test\"\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e \"OK! \\c\" # -e 开启转义 \\c 不换行\necho \"It is a test\"\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf \"请输入变量： \"\nread name \necho \"$name It is a test\" > test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho '$name\\\"'  \n\n# 输入结果  $name\\\"\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 '\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n```\n\n\n#### printf 命令\n\n\n> printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。\n> 默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n\n\n\n\n```shell\n#!/bin/bash\necho \"Hello, Shell\"\nprintf \"Hello, Shell\\n\"\n\nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg  \nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234\nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543\nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n```\n\n**%s %c %d %f** 都是格式替代符，**％s** 输出一个字符串，**％d** 整型输出，**％c** 输出一个字符，**％f** 输出实数，以小数形式输出。\n**%-10s** 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n**%-4.2f** 指格式化为小数，其中 **.2** 指保留2位小数。\n\n## Shell 输入/输出重定向\n| 命令 | 说明 |\n| :--- | :--- |\n| command > file | 将输出重定向到 file。 |\n| command < file | 将输入重定向到 file。 |\n| command >> file | 将输出以追加的方式重定向到 file。 |\n| n > file | 将文件描述符为 n 的文件重定向到 file。 |\n| n >> file | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m | 将输出文件 m 和 n 合并。 |\n| n <& m | 将输入文件 m 和 n 合并。 |\n| << tag | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n\n\n> _需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。_\n\n\n\n## shell 流程控制\n\n\n### if 控制语句\n\n\n```shell\n#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nelif [ $a -gt $b ]\nthen\n   echo \"a 大于 b\"\nelif [ $a -lt $b ]\nthen\n   echo \"a 小于 b\"\nelse\n   echo \"没有符合的条件\"\nfi\n```\n\n\n### for 循环\n\n\n```shell\n#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo \"The value is: $loop\"\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i<=5;i++));do\n    echo \"这是第 $i 次调用\";\ndone;\n```\n\n\n### while 语句\n\n\n```shell\n#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int<=5 ))\ndo\n    echo $int\n    let \"int++\"\ndone\n```\n\n\n> 以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量\n\n\n\n### 无限循环\n\n\n```shell\n#!/bin/bash\nwhile true\ndo\n  printf \"请输入内容：\"\n  read content\n  echo \"您输入额内容是 ${content}\"\ndone\n\n# 或者\n\nwhile ：\ndo\n  printf \"请输入内容：\"\n  read content\n  echo \"您输入额内容是 ${content}\"\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n  printf \"请输入内容：\"\n  read content\n  echo \"您输入额内容是 ${content}\"\ndone\n```\n\n\n### until 循环\n\n\n> until 循环执行一系列命令直至条件为 true 时停止。\n> until 循环与 while 循环在处理方式上刚好相反。\n> 一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。\n\n\n\n```shell\n#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n```\n\n\n### case ... esac\n\n\n> **case ... esac** 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 **;;** 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。\n> 可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。\n\n\n\n```shell\n\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n\n### 跳出循环\n\n\n- **break**\n> break 命令允许跳出所有循环（终止执行后面的所有循环）\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字:\"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n            break\n        ;;\n    esac\ndone\n```\n\n- **continue**\n> continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字: \"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的!\"\n            continue\n            echo \"游戏结束\"\n        ;;\n    esac\ndone\n```\n\n\n## Shell 函数\n\n\n```shell\n#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n{\n\n    action;\n\n    [return int;]\n\n}\n```\n\n\n> - 1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。\n> - 2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)\n\n\n\n- **实例**\n```shell\n#!/bin/bash\n\nfunction demo (){\n  echo \"这是一个 shell 函数！\"\n}\n\necho \"----- 函数开始执行 -----\"\n\ndemo()\n\necho \"----- 函数执行完毕 -----\"\n\n# 函数 return \n\nfunction demo_return(){\n  a=10\n  b=20\n  return $((a + b))\n  # return $(($a + $b))\n  # return $[a + b]\n}\n\ndemo_return\necho \"和：$?\"\n```\n> 函数返回值在调用该函数后通过 $? 来获得。\n> 注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可\n\n- **函数参数**\n> 在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n> 注意，$$10 不能获取第十个参数，获取第十个参数需要$${10}。当n>=10时，需要使用${n}来获取参数。\n\n| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本或函数的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数 |\n| $$ | 脚本运行的当前进程ID号 |\n| $! | 后台运行的最后一个进程的ID号 |\n| $@ | 与$*相同，但是使用时加引号，并在引号中返回每个参数。 |\n| $- | 显示Shell使用的当前选项，与set命令功能相同。 |\n| $? | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |\n\n```shell\n#!/bin/bash\n\nfunWithParam(){\n    echo \"第一个参数为 $1 !\"\n    echo \"第二个参数为 $2 !\"\n    echo \"第十个参数为 $10 !\"\n    echo \"第十个参数为 ${10} !\"\n    echo \"第十一个参数为 ${11} !\"\n    echo \"参数总数有 $# 个!\"\n    echo \"作为一个字符串输出所有参数 $* !\"\n    echo \"脚本运行的当前进程ID号: $$\"\n    echo \"后台运行的最后一个进程的ID号:$!\"\n    echo \"$-\"\n    echo \"$?\"\n    \n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n\n- **注意点**\n\n\n\n```shell\n#!/bin/bash\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\n\nfunction demoFun2(){\n echo \"这是我的第二个 shell 函数!\"\n expr 1 + 1\n}\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n```\n\n\n> 调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。\n> 第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。\n> 下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：\n\n\n\n```shell\n#!/bin/bash\n\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n```\n","slug":"后端领域/编程语言/shell/shell 编程","published":1,"updated":"2022-02-04T11:23:22.470Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvbz001zzc1bhnb4ekx4","content":"<h2 id=\"shell-实例\"><a href=\"#shell-实例\" class=\"headerlink\" title=\"shell 实例\"></a>shell 实例</h2><ul>\n<li>echo 用于向窗口输出文本<br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>echo “时光静好，岁月安然！”</p>\n<pre><code>\n- 脚本运行\n```shell\n$ ./test.sh\n\n$  sh test.sh\n</code></pre>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>[ <strong>变量名的命名规则</strong> ]</p>\n<ol>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>\n<li>中间不能有空格，可以使用下划线（_）</li>\n<li>不能使用标点符号</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）</li>\n</ol>\n<ul>\n<li><strong>变量赋值</strong><br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>string=”从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀”</p>\n<h1 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h1><p>echo ${string}</p>\n<h1 id=\"语句给变量赋值-将-etc-下目录的文件名循环出来。将文件名-赋值给-file\"><a href=\"#语句给变量赋值-将-etc-下目录的文件名循环出来。将文件名-赋值给-file\" class=\"headerlink\" title=\"语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\"></a>语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)</h1><p>for file in <code>ls /etc</code> 或 for file in $(ls /etc)<br>    do<br>    echo “文件： ${file}”<br>    done</p>\n<pre><code>\n- **只读变量( readonly  )**\n```shell\n#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=&quot;www.baidu.com&quot;\nreadonly base_url\nbase_url=&quot;www.google.com&quot;\n\n# 运行脚本，结果如下：\n    /bin/bash: NAME: This variable is read only.\n</code></pre>\n<ul>\n<li><strong>删除变量（unset ）</strong><br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>variable_name=”System”<br>unset variable_name</p>\n<p>echo ${variable_name}  # 没有任何输出</p>\n<pre><code>\n- **变量类型**\n```shell\n1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>字符串可以用单引号，也可以用双引号，也可以不用引号<br>```shell<br>#!/bin/bash</li>\n</ul>\n<h1 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h1><p>str=’this is a string’<br>单引号字符串的限制：<br>    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；<br>    单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p>\n<h1 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h1><p>_name=’system’<br>str=”Hello, I know you are &quot;${_name}&quot;! \\n”<br>echo -e ${str}</p>\n<h1 id=\"输出结果为：\"><a href=\"#输出结果为：\" class=\"headerlink\" title=\"输出结果为：\"></a>输出结果为：</h1><pre><code>Hello, I know you are &quot;runoob&quot;! \n</code></pre>\n<p>双引号的优点：<br>    双引号里可以有变量<br>    双引号里可以出现转义字符</p>\n<pre><code>\n- **字符串拼接**\n```shell\n#!/bin/bash\n\n_name=&quot;system&quot;\n# 使用双引号拼接\ngreeting=&quot;hello, &quot;$_name&quot; !&quot;      # 双引号拼接\ngreeting_1=&quot;hello, $&#123;_name&#125; !&quot;    # 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2=&#39;hello, &#39;$_name&#39; !&#39;  # 单引号拼接\ngreeting_3=&#39;hello, $&#123;_name&#125; !&#39;  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, $&#123;_name&#125; !   # 单引号字符串中存在变量，原样输出\n</code></pre>\n<ul>\n<li><strong>获取字符串长度</strong><pre><code class=\"shell\">#!/bin/sh\nstring=&quot;abcd&quot;\necho $&#123;#string&#125; #输出 4\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><strong>提取字符串</strong><br>```shell<br>#!/bin/sh<br>string=”从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀”</li>\n</ul>\n<p>echo ${string:0:6}  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0</p>\n<p>注意： </p>\n<ol>\n<li>不支持负数切片</li>\n<li>如果后一个数小于开始的数字，则该值表示向后延伸长度（如：${string:7:3} &gt;&gt; 夏天雨）</li>\n<li>如果后一个数大于开始的数字，则该值表示向后延伸位置（如：${string:3:7} &gt;&gt; 天冷呀 夏天雨）<br>```</li>\n</ol>\n<ul>\n<li><strong>查找字符串</strong><br>```shell<br>#!/bin/sh<br>string=”从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀”</li>\n</ul>\n<h1 id=\"查找字符-i-或-o-的位置-哪个字母先出现就计算哪个-：\"><a href=\"#查找字符-i-或-o-的位置-哪个字母先出现就计算哪个-：\" class=\"headerlink\" title=\"查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\"></a>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：</h1><p>echo <code>expr index &quot;$string&quot; 呀秋</code> # 输出 6（从 1 开始 ）</p>\n<pre><code>\n\n## shell 数组\n\n\n- **定义数组**\n\n    在 Shell 中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为\n```shell\n# 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen  # 可以不使用连续的下标，而且下标的范围没有限制\n</code></pre>\n<ul>\n<li><strong>读取数组</strong><br>```shell<br>#!/bin/bash<br>array=(0 1 2 3 “时光” “静好” (value0 value1 value2 value3) )</li>\n</ul>\n<p>echo ${array[0]}</p>\n<h1 id=\"使用-或-符号可以获取数组中的所有元素\"><a href=\"#使用-或-符号可以获取数组中的所有元素\" class=\"headerlink\" title=\"使用 @ 或 * 符号可以获取数组中的所有元素\"></a>使用 @ 或 * 符号可以获取数组中的所有元素</h1><p>echo ${array[@]} # 输出： 0 1 2 3 时光 静好</p>\n<pre><code>\n- **获取数组的长度**\n```shell\n#!/bin/bash\narray=(0 1 2 3 &quot;时光&quot; &quot;静好&quot; )\n\n# 取得数组元素的个数 \nlength=$&#123;#array[@]&#125;\n# 或者\nlength=$&#123;#array[*]&#125;\necho $&#123;length&#125; # 6\n\n# 取得数组单个元素的长度\nlengthn=$&#123;#array_name[n]&#125;\n\nlengthn=$&#123;#array_name[4]&#125;\necho $&#123;lengthn&#125; # 2\n</code></pre>\n<h2 id=\"shell-注释\"><a href=\"#shell-注释\" class=\"headerlink\" title=\"shell 注释\"></a>shell 注释</h2><ul>\n<li>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略<br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>#——————————————–</p>\n<h1 id=\"这是一个注释\"><a href=\"#这是一个注释\" class=\"headerlink\" title=\"这是一个注释\"></a>这是一个注释</h1><h1 id=\"author：\"><a href=\"#author：\" class=\"headerlink\" title=\"author：\"></a>author：</h1><h1 id=\"site：\"><a href=\"#site：\" class=\"headerlink\" title=\"site：\"></a>site：</h1><h1 id=\"slogan：\"><a href=\"#slogan：\" class=\"headerlink\" title=\"slogan：\"></a>slogan：</h1><p>#——————————————–</p>\n<h5 id=\"用户配置区-开始\"><a href=\"#用户配置区-开始\" class=\"headerlink\" title=\"用户配置区 开始\"></a>用户配置区 开始</h5><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"这里可以添加脚本描述信息\"><a href=\"#这里可以添加脚本描述信息\" class=\"headerlink\" title=\"这里可以添加脚本描述信息\"></a>这里可以添加脚本描述信息</h1><h1 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h1><h5 id=\"用户配置区-结束\"><a href=\"#用户配置区-结束\" class=\"headerlink\" title=\"用户配置区 结束\"></a>用户配置区 结束</h5><pre><code>\n- **多行注释**\n```shell\n#!/bin/bash\n\n:&lt;&lt;EOF\n注释内容...\n注释内容...\n注释内容... \nEOF\n\n# EOF 也可以使用其他符号:\n\n:&lt;&lt;&#39;\n注释内容...\n注释内容...\n注释内容...\n&#39;\n\n:&lt;&lt;!\n注释内容...\n注释内容...\n注释内容...\n!\n</code></pre>\n<h2 id=\"shell-传递参数\"><a href=\"#shell-传递参数\" class=\"headerlink\" title=\"shell 传递参数\"></a>shell 传递参数</h2><blockquote>\n<p>在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p>\n</blockquote>\n<ul>\n<li>实例<br>```shell<br>#!/bin/bash<h1 id=\"file-name-test-sh\"><a href=\"#file-name-test-sh\" class=\"headerlink\" title=\"file_name = test.sh\"></a>file_name = test.sh</h1><h1 id=\"以下实例我们向脚本传递三个参数，并分别输出，其中-0-为执行的文件名（包含文件路径）\"><a href=\"#以下实例我们向脚本传递三个参数，并分别输出，其中-0-为执行的文件名（包含文件路径）\" class=\"headerlink\" title=\"以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\"></a>以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）</h1></li>\n</ul>\n<p>echo “Shell 传递参数实例！”;<br>echo “执行的文件名：$0”;<br>echo “第一个参数为：$1”;<br>echo “第二个参数为：$2”;<br>echo “第三个参数为：$3”;</p>\n<h1 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h1><p>sh test.sh 1 2 3<br>    Shell 传递参数实例！<br>    执行的文件名：test.sh<br>    第一个参数为：1<br>    第二个参数为：2<br>    第三个参数为：3</p>\n<p>./test.sh 3 2 1<br>    Shell 传递参数实例！<br>    执行的文件名：./test.sh<br>    第一个参数为：3<br>    第二个参数为：2<br>    第三个参数为：1</p>\n<pre><code>| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数。 如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。 |\n| $$ | 脚本运行的当前进程 ID 号 |\n| $! | 后台运行的最后一个进程的 ID号 |\n| $@ | 与 $$* 相同，但是使用时加引号，并在引号中返回每个参数。 如&quot;$$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$$2&quot; … &quot;$$n&quot; 的形式输出所有参数。 |\n| $- | 显示Shell使用的当前选项，与 [set命令](https://www.runoob.com/linux/linux-comm-set.html) 功能相同。 |\n| $? | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。 |\n\n- **$_ 与 $@ 区别_\n```tex\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 &quot; * &quot; 等价于 &quot;1 2 3&quot;（传递了一个参数），而 &quot;@&quot; 等价于 &quot;1&quot; &quot;2&quot; &quot;3&quot;（传递了三个参数）。\n</code></pre>\n<h2 id=\"shell-运算符\"><a href=\"#shell-运算符\" class=\"headerlink\" title=\"shell 运算符\"></a>shell 运算符</h2><blockquote>\n<p>shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符<br>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。<br>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>\n</blockquote>\n<ul>\n<li>实例<br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>val=<code>expr 5 + 5</code></p>\n<h1 id=\"等价于\"><a href=\"#等价于\" class=\"headerlink\" title=\"等价于\"></a>等价于</h1><p>val=$[a+b]</p>\n<p>echo ${val} # 10</p>\n<pre><code>\n   - 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。\n   - 完整的表达式要被 ”``“ 包含\n- **算术运算符**\n```shell\n#!/bin/bash\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=      \n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho &quot;a + b : $&#123;result&#125;&quot;\n\nresult=`expr $&#123;a&#125; - $&#123;b&#125;`\necho &quot;a - b : $&#123;result&#125;&quot;\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 &quot;*&quot; 不需要转义符号 &quot;\\&quot; \nresult=`expr $a \\* $b`\necho &quot;a * b : $&#123;result&#125;&quot;\n\nresult=`expr $a / $b`\necho &quot;a / b : $&#123;result&#125;&quot;\n\nresult=`expr $a % $b`\necho &quot;a % b : $&#123;result&#125;&quot;\n\n# 注意空格 [ $a == $b ] \nif [ $a == $b ] \nthen \n  echo &quot; a 等于 b&quot;\nfi\n\nif [ $a != $b ] \nthen\n  echo &quot;a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>关系运算符</strong><blockquote>\n<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-eq</td>\n<td align=\"left\">检测两个数是否相等，相等返回 true。</td>\n<td align=\"left\">[ $a -eq $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-ne</td>\n<td align=\"left\">检测两个数是否不相等，不相等返回 true。</td>\n<td align=\"left\">[ $a -ne $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-gt</td>\n<td align=\"left\">检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -gt $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-lt</td>\n<td align=\"left\">检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -lt $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ge</td>\n<td align=\"left\">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -ge $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-le</td>\n<td align=\"left\">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -le $b ] 返回 true。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen \n  echo &quot;-eq : a 等于 b&quot;\nelse \n  echo &quot;-eq : a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>布尔运算符</strong><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">!</td>\n<td align=\"left\">非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td align=\"left\">[ ! false ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">或运算，有一个表达式为 true 则返回 true。</td>\n<td align=\"left\">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-a</td>\n<td align=\"left\">与运算，两个表达式都为 true 才返回 true。</td>\n<td align=\"left\">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen \n  echo &quot;a 不等于 b， 返回 true&quot;\nelse \n  echo &quot; a 等于 b&quot;\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n  echo &quot;a 大于 100或 b小于50 满足一个条件成立 &quot;\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n  echo &quot;a 大于 100 与 b小于50 返回 false &quot;\nelse \n  echo &quot;条件不成立， 必须同时满足， a 大于 100， b 小于 50&quot;\n</code></pre>\n<ul>\n<li><strong>逻辑运算符</strong><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑的 AND</td>\n<td align=\"left\">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>\n</tr>\n<tr>\n<td align=\"left\">&#124;&#124;</td>\n<td align=\"left\">逻辑的 OR</td>\n<td align=\"left\">[[ $a -lt 100 &#124;&#124; $b -gt 100 ]] 返回 true</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n  echo &quot;a 大于 100 或 b 小于 50 条件成立 返回 true&quot;\nelse \n  echo &quot;a 大于 100 或 b 小于 50 条件不成立 返回 false&quot;\nfi\n\nif [[ $a -gt 100 &amp;&amp; $b -lt 50 ]]\nthen\n  echo &quot;a 大于 100 与 b小于50 返回 true &quot;\nelse \n  echo &quot;条件不成立, false， 必须同时满足， a 大于 100， b 小于 50&quot;\nfi\n</code></pre>\n<ul>\n<li><p><strong>字符串运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 “abc”，变量 b 为 “efg”）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">检测两个字符串是否相等，相等返回 true。</td>\n<td align=\"left\">[ $a = $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">检测两个字符串是否相等，不相等返回 true。</td>\n<td align=\"left\">[ $a != $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-z</td>\n<td align=\"left\">检测字符串长度是否为0，为0返回 true。</td>\n<td align=\"left\">[ -z $a ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">检测字符串长度是否不为 0，不为 0 返回 true。</td>\n<td align=\"left\">[ -n “$a” ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">检测字符串是否为空，不为空返回 true。</td>\n<td align=\"left\">[ $a ] 返回 true。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>文件测试运算符</strong></p>\n<blockquote>\n<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td align=\"left\">检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td align=\"left\">[ -b $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td align=\"left\">检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td align=\"left\">[ -c $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td align=\"left\">检测文件是否是目录，如果是，则返回 true。</td>\n<td align=\"left\">[ -d $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td align=\"left\">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td align=\"left\">[ -f $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td align=\"left\">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td align=\"left\">[ -g $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td align=\"left\">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td align=\"left\">[ -k $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td align=\"left\">检测文件是否是有名管道，如果是，则返回 true。</td>\n<td align=\"left\">[ -p $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td align=\"left\">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td align=\"left\">[ -u $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td align=\"left\">检测文件是否可读，如果是，则返回 true。</td>\n<td align=\"left\">[ -r $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td align=\"left\">检测文件是否可写，如果是，则返回 true。</td>\n<td align=\"left\">[ -w $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td align=\"left\">检测文件是否可执行，如果是，则返回 true。</td>\n<td align=\"left\">[ -x $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td align=\"left\">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n<td align=\"left\">[ -s $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td align=\"left\">检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td align=\"left\">[ -e $file ] 返回 true。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其他检查符：<ul>\n<li><strong>-S</strong>: 判断某文件是否 socket。</li>\n<li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。<br>```shell<br>#!/bin/bash</li>\n</ul>\n</li>\n</ul>\n<p>file=”/tmp/exlog/test.sh”</p>\n<p>if [ -d $file ]<br>then<br>   echo “文件是个目录”<br>else<br>   echo “文件不是个目录”<br>fi<br>if [ -r $file ]<br>then<br>   echo “文件可读”<br>else<br>   echo “文件不可读”<br>fi<br>if [ -w $file ]<br>then<br>   echo “文件可写”<br>else<br>   echo “文件不可写”<br>fi<br>if [ -x $file ]<br>then<br>   echo “文件可执行”<br>else<br>   echo “文件不可执行”<br>fi</p>\n<pre><code>\n\n\n## shell 输出\n\n\n#### echo命令\n\n\n```shell\n#!/bin/bash\n\necho &quot;It is a test&quot; / echo It is a test\n\n### 显示转义字符\necho &quot;\\&quot;It is a test\\&quot;&quot;\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf &quot;请输入变量： &quot;\nread name \necho &quot;$name It is a test&quot;\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh \n请输入变量：qwe\nqwe It is a test \n\n### 显示换行\necho -e &quot;OK! \\n&quot; # -e 开启转义\necho &quot;It is a test&quot;\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e &quot;OK! \\c&quot; # -e 开启转义 \\c 不换行\necho &quot;It is a test&quot;\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf &quot;请输入变量： &quot;\nread name \necho &quot;$name It is a test&quot; &gt; test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho &#39;$name\\&quot;&#39;  \n\n# 输入结果  $name\\&quot;\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 &#39;\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n</code></pre>\n<h4 id=\"printf-命令\"><a href=\"#printf-命令\" class=\"headerlink\" title=\"printf 命令\"></a>printf 命令</h4><blockquote>\n<p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。<br>默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\necho &quot;Hello, Shell&quot;\nprintf &quot;Hello, Shell\\n&quot;\n\nprintf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg  \nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n</code></pre>\n<p><strong>%s %c %d %f</strong> 都是格式替代符，<strong>％s</strong> 输出一个字符串，<strong>％d</strong> 整型输出，<strong>％c</strong> 输出一个字符，<strong>％f</strong> 输出实数，以小数形式输出。<br><strong>%-10s</strong> 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br><strong>%-4.2f</strong> 指格式化为小数，其中 <strong>.2</strong> 指保留2位小数。</p>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><em>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</em></p>\n</blockquote>\n<h2 id=\"shell-流程控制\"><a href=\"#shell-流程控制\" class=\"headerlink\" title=\"shell 流程控制\"></a>shell 流程控制</h2><h3 id=\"if-控制语句\"><a href=\"#if-控制语句\" class=\"headerlink\" title=\"if 控制语句\"></a>if 控制语句</h3><pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo &quot;a 等于 b&quot;\nelif [ $a -gt $b ]\nthen\n   echo &quot;a 大于 b&quot;\nelif [ $a -lt $b ]\nthen\n   echo &quot;a 小于 b&quot;\nelse\n   echo &quot;没有符合的条件&quot;\nfi\n</code></pre>\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><pre><code class=\"shell\">#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo &quot;The value is: $loop&quot;\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i&lt;=5;i++));do\n    echo &quot;这是第 $i 次调用&quot;;\ndone;\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"shell\">#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int&lt;=5 ))\ndo\n    echo $int\n    let &quot;int++&quot;\ndone\n</code></pre>\n<blockquote>\n<p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量</p>\n</blockquote>\n<h3 id=\"无限循环\"><a href=\"#无限循环\" class=\"headerlink\" title=\"无限循环\"></a>无限循环</h3><pre><code class=\"shell\">#!/bin/bash\nwhile true\ndo\n  printf &quot;请输入内容：&quot;\n  read content\n  echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n# 或者\n\nwhile ：\ndo\n  printf &quot;请输入内容：&quot;\n  read content\n  echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n  printf &quot;请输入内容：&quot;\n  read content\n  echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n</code></pre>\n<h3 id=\"until-循环\"><a href=\"#until-循环\" class=\"headerlink\" title=\"until 循环\"></a>until 循环</h3><blockquote>\n<p>until 循环执行一系列命令直至条件为 true 时停止。<br>until 循环与 while 循环在处理方式上刚好相反。<br>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n</code></pre>\n<h3 id=\"case-…-esac\"><a href=\"#case-…-esac\" class=\"headerlink\" title=\"case … esac\"></a>case … esac</h3><blockquote>\n<p><strong>case … esac</strong> 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。<br>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p>\n</blockquote>\n<pre><code class=\"shell\">\necho &#39;输入 1 到 4 之间的数字:&#39;\necho &#39;你输入的数字为:&#39;\nread aNum\ncase $aNum in\n    1)  echo &#39;你选择了 1&#39;\n    ;;\n    2)  echo &#39;你选择了 2&#39;\n    ;;\n    3)  echo &#39;你选择了 3&#39;\n    ;;\n    4)  echo &#39;你选择了 4&#39;\n    ;;\n    *)  echo &#39;你没有输入 1 到 4 之间的数字&#39;\n    ;;\nesac\n</code></pre>\n<h3 id=\"跳出循环\"><a href=\"#跳出循环\" class=\"headerlink\" title=\"跳出循环\"></a>跳出循环</h3><ul>\n<li><strong>break</strong><blockquote>\n<p>break 命令允许跳出所有循环（终止执行后面的所有循环）</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字:&quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;\n            break\n        ;;\n    esac\ndone\n</code></pre>\n<ul>\n<li><strong>continue</strong><blockquote>\n<p>continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字: &quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;\n            continue\n            echo &quot;游戏结束&quot;\n        ;;\n    esac\ndone\n</code></pre>\n<h2 id=\"Shell-函数\"><a href=\"#Shell-函数\" class=\"headerlink\" title=\"Shell 函数\"></a>Shell 函数</h2><pre><code class=\"shell\">#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n&#123;\n\n    action;\n\n    [return int;]\n\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li>\n<li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>实例</strong><br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>function demo (){<br>  echo “这是一个 shell 函数！”<br>}</p>\n<p>echo “—– 函数开始执行 —–”</p>\n<p>demo()</p>\n<p>echo “—– 函数执行完毕 —–”</p>\n<h1 id=\"函数-return\"><a href=\"#函数-return\" class=\"headerlink\" title=\"函数 return\"></a>函数 return</h1><p>function demo_return(){<br>  a=10<br>  b=20<br>  return $((a + b))</p>\n<h1 id=\"return-a-b\"><a href=\"#return-a-b\" class=\"headerlink\" title=\"return $(($a + $b))\"></a>return $(($a + $b))</h1><h1 id=\"return-a-b-1\"><a href=\"#return-a-b-1\" class=\"headerlink\" title=\"return $[a + b]\"></a>return $[a + b]</h1><p>}</p>\n<p>demo_return<br>echo “和：$?”</p>\n<pre><code>&gt; 函数返回值在调用该函数后通过 $? 来获得。\n&gt; 注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可\n\n- **函数参数**\n&gt; 在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n&gt; 注意，$$10 不能获取第十个参数，获取第十个参数需要$$&#123;10&#125;。当n&gt;=10时，需要使用$&#123;n&#125;来获取参数。\n\n| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本或函数的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数 |\n| $$ | 脚本运行的当前进程ID号 |\n| $! | 后台运行的最后一个进程的ID号 |\n| $@ | 与$*相同，但是使用时加引号，并在引号中返回每个参数。 |\n| $- | 显示Shell使用的当前选项，与set命令功能相同。 |\n| $? | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |\n\n```shell\n#!/bin/bash\n\nfunWithParam()&#123;\n    echo &quot;第一个参数为 $1 !&quot;\n    echo &quot;第二个参数为 $2 !&quot;\n    echo &quot;第十个参数为 $10 !&quot;\n    echo &quot;第十个参数为 $&#123;10&#125; !&quot;\n    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;\n    echo &quot;参数总数有 $# 个!&quot;\n    echo &quot;作为一个字符串输出所有参数 $* !&quot;\n    echo &quot;脚本运行的当前进程ID号: $$&quot;\n    echo &quot;后台运行的最后一个进程的ID号:$!&quot;\n    echo &quot;$-&quot;\n    echo &quot;$?&quot;\n    \n&#125;\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n</code></pre>\n<ul>\n<li><strong>注意点</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\n\nfunction demoFun2()&#123;\n echo &quot;这是我的第二个 shell 函数!&quot;\n expr 1 + 1\n&#125;\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n</code></pre>\n<blockquote>\n<p>调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。<br>第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。<br>下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"shell-实例\"><a href=\"#shell-实例\" class=\"headerlink\" title=\"shell 实例\"></a>shell 实例</h2><ul>\n<li>echo 用于向窗口输出文本<br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>echo “时光静好，岁月安然！”</p>\n<pre><code>\n- 脚本运行\n```shell\n$ ./test.sh\n\n$  sh test.sh\n</code></pre>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>[ <strong>变量名的命名规则</strong> ]</p>\n<ol>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>\n<li>中间不能有空格，可以使用下划线（_）</li>\n<li>不能使用标点符号</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）</li>\n</ol>\n<ul>\n<li><strong>变量赋值</strong><br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>string=”从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀”</p>\n<h1 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h1><p>echo ${string}</p>\n<h1 id=\"语句给变量赋值-将-etc-下目录的文件名循环出来。将文件名-赋值给-file\"><a href=\"#语句给变量赋值-将-etc-下目录的文件名循环出来。将文件名-赋值给-file\" class=\"headerlink\" title=\"语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\"></a>语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)</h1><p>for file in <code>ls /etc</code> 或 for file in $(ls /etc)<br>    do<br>    echo “文件： ${file}”<br>    done</p>\n<pre><code>\n- **只读变量( readonly  )**\n```shell\n#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=&quot;www.baidu.com&quot;\nreadonly base_url\nbase_url=&quot;www.google.com&quot;\n\n# 运行脚本，结果如下：\n    /bin/bash: NAME: This variable is read only.\n</code></pre>\n<ul>\n<li><strong>删除变量（unset ）</strong><br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>variable_name=”System”<br>unset variable_name</p>\n<p>echo ${variable_name}  # 没有任何输出</p>\n<pre><code>\n- **变量类型**\n```shell\n1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>字符串可以用单引号，也可以用双引号，也可以不用引号<br>```shell<br>#!/bin/bash</li>\n</ul>\n<h1 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h1><p>str=’this is a string’<br>单引号字符串的限制：<br>    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；<br>    单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p>\n<h1 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h1><p>_name=’system’<br>str=”Hello, I know you are &quot;${_name}&quot;! \\n”<br>echo -e ${str}</p>\n<h1 id=\"输出结果为：\"><a href=\"#输出结果为：\" class=\"headerlink\" title=\"输出结果为：\"></a>输出结果为：</h1><pre><code>Hello, I know you are &quot;runoob&quot;! \n</code></pre>\n<p>双引号的优点：<br>    双引号里可以有变量<br>    双引号里可以出现转义字符</p>\n<pre><code>\n- **字符串拼接**\n```shell\n#!/bin/bash\n\n_name=&quot;system&quot;\n# 使用双引号拼接\ngreeting=&quot;hello, &quot;$_name&quot; !&quot;      # 双引号拼接\ngreeting_1=&quot;hello, $&#123;_name&#125; !&quot;    # 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2=&#39;hello, &#39;$_name&#39; !&#39;  # 单引号拼接\ngreeting_3=&#39;hello, $&#123;_name&#125; !&#39;  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, $&#123;_name&#125; !   # 单引号字符串中存在变量，原样输出\n</code></pre>\n<ul>\n<li><strong>获取字符串长度</strong><pre><code class=\"shell\">#!/bin/sh\nstring=&quot;abcd&quot;\necho $&#123;#string&#125; #输出 4\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><strong>提取字符串</strong><br>```shell<br>#!/bin/sh<br>string=”从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀”</li>\n</ul>\n<p>echo ${string:0:6}  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0</p>\n<p>注意： </p>\n<ol>\n<li>不支持负数切片</li>\n<li>如果后一个数小于开始的数字，则该值表示向后延伸长度（如：${string:7:3} &gt;&gt; 夏天雨）</li>\n<li>如果后一个数大于开始的数字，则该值表示向后延伸位置（如：${string:3:7} &gt;&gt; 天冷呀 夏天雨）<br>```</li>\n</ol>\n<ul>\n<li><strong>查找字符串</strong><br>```shell<br>#!/bin/sh<br>string=”从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀”</li>\n</ul>\n<h1 id=\"查找字符-i-或-o-的位置-哪个字母先出现就计算哪个-：\"><a href=\"#查找字符-i-或-o-的位置-哪个字母先出现就计算哪个-：\" class=\"headerlink\" title=\"查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\"></a>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：</h1><p>echo <code>expr index &quot;$string&quot; 呀秋</code> # 输出 6（从 1 开始 ）</p>\n<pre><code>\n\n## shell 数组\n\n\n- **定义数组**\n\n    在 Shell 中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为\n```shell\n# 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen  # 可以不使用连续的下标，而且下标的范围没有限制\n</code></pre>\n<ul>\n<li><strong>读取数组</strong><br>```shell<br>#!/bin/bash<br>array=(0 1 2 3 “时光” “静好” (value0 value1 value2 value3) )</li>\n</ul>\n<p>echo ${array[0]}</p>\n<h1 id=\"使用-或-符号可以获取数组中的所有元素\"><a href=\"#使用-或-符号可以获取数组中的所有元素\" class=\"headerlink\" title=\"使用 @ 或 * 符号可以获取数组中的所有元素\"></a>使用 @ 或 * 符号可以获取数组中的所有元素</h1><p>echo ${array[@]} # 输出： 0 1 2 3 时光 静好</p>\n<pre><code>\n- **获取数组的长度**\n```shell\n#!/bin/bash\narray=(0 1 2 3 &quot;时光&quot; &quot;静好&quot; )\n\n# 取得数组元素的个数 \nlength=$&#123;#array[@]&#125;\n# 或者\nlength=$&#123;#array[*]&#125;\necho $&#123;length&#125; # 6\n\n# 取得数组单个元素的长度\nlengthn=$&#123;#array_name[n]&#125;\n\nlengthn=$&#123;#array_name[4]&#125;\necho $&#123;lengthn&#125; # 2\n</code></pre>\n<h2 id=\"shell-注释\"><a href=\"#shell-注释\" class=\"headerlink\" title=\"shell 注释\"></a>shell 注释</h2><ul>\n<li>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略<br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>#——————————————–</p>\n<h1 id=\"这是一个注释\"><a href=\"#这是一个注释\" class=\"headerlink\" title=\"这是一个注释\"></a>这是一个注释</h1><h1 id=\"author：\"><a href=\"#author：\" class=\"headerlink\" title=\"author：\"></a>author：</h1><h1 id=\"site：\"><a href=\"#site：\" class=\"headerlink\" title=\"site：\"></a>site：</h1><h1 id=\"slogan：\"><a href=\"#slogan：\" class=\"headerlink\" title=\"slogan：\"></a>slogan：</h1><p>#——————————————–</p>\n<h5 id=\"用户配置区-开始\"><a href=\"#用户配置区-开始\" class=\"headerlink\" title=\"用户配置区 开始\"></a>用户配置区 开始</h5><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"这里可以添加脚本描述信息\"><a href=\"#这里可以添加脚本描述信息\" class=\"headerlink\" title=\"这里可以添加脚本描述信息\"></a>这里可以添加脚本描述信息</h1><h1 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h1><h5 id=\"用户配置区-结束\"><a href=\"#用户配置区-结束\" class=\"headerlink\" title=\"用户配置区 结束\"></a>用户配置区 结束</h5><pre><code>\n- **多行注释**\n```shell\n#!/bin/bash\n\n:&lt;&lt;EOF\n注释内容...\n注释内容...\n注释内容... \nEOF\n\n# EOF 也可以使用其他符号:\n\n:&lt;&lt;&#39;\n注释内容...\n注释内容...\n注释内容...\n&#39;\n\n:&lt;&lt;!\n注释内容...\n注释内容...\n注释内容...\n!\n</code></pre>\n<h2 id=\"shell-传递参数\"><a href=\"#shell-传递参数\" class=\"headerlink\" title=\"shell 传递参数\"></a>shell 传递参数</h2><blockquote>\n<p>在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p>\n</blockquote>\n<ul>\n<li>实例<br>```shell<br>#!/bin/bash<h1 id=\"file-name-test-sh\"><a href=\"#file-name-test-sh\" class=\"headerlink\" title=\"file_name = test.sh\"></a>file_name = test.sh</h1><h1 id=\"以下实例我们向脚本传递三个参数，并分别输出，其中-0-为执行的文件名（包含文件路径）\"><a href=\"#以下实例我们向脚本传递三个参数，并分别输出，其中-0-为执行的文件名（包含文件路径）\" class=\"headerlink\" title=\"以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\"></a>以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）</h1></li>\n</ul>\n<p>echo “Shell 传递参数实例！”;<br>echo “执行的文件名：$0”;<br>echo “第一个参数为：$1”;<br>echo “第二个参数为：$2”;<br>echo “第三个参数为：$3”;</p>\n<h1 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h1><p>sh test.sh 1 2 3<br>    Shell 传递参数实例！<br>    执行的文件名：test.sh<br>    第一个参数为：1<br>    第二个参数为：2<br>    第三个参数为：3</p>\n<p>./test.sh 3 2 1<br>    Shell 传递参数实例！<br>    执行的文件名：./test.sh<br>    第一个参数为：3<br>    第二个参数为：2<br>    第三个参数为：1</p>\n<pre><code>| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数。 如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。 |\n| $$ | 脚本运行的当前进程 ID 号 |\n| $! | 后台运行的最后一个进程的 ID号 |\n| $@ | 与 $$* 相同，但是使用时加引号，并在引号中返回每个参数。 如&quot;$$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$$2&quot; … &quot;$$n&quot; 的形式输出所有参数。 |\n| $- | 显示Shell使用的当前选项，与 [set命令](https://www.runoob.com/linux/linux-comm-set.html) 功能相同。 |\n| $? | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。 |\n\n- **$_ 与 $@ 区别_\n```tex\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 &quot; * &quot; 等价于 &quot;1 2 3&quot;（传递了一个参数），而 &quot;@&quot; 等价于 &quot;1&quot; &quot;2&quot; &quot;3&quot;（传递了三个参数）。\n</code></pre>\n<h2 id=\"shell-运算符\"><a href=\"#shell-运算符\" class=\"headerlink\" title=\"shell 运算符\"></a>shell 运算符</h2><blockquote>\n<p>shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符<br>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。<br>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>\n</blockquote>\n<ul>\n<li>实例<br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>val=<code>expr 5 + 5</code></p>\n<h1 id=\"等价于\"><a href=\"#等价于\" class=\"headerlink\" title=\"等价于\"></a>等价于</h1><p>val=$[a+b]</p>\n<p>echo ${val} # 10</p>\n<pre><code>\n   - 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。\n   - 完整的表达式要被 ”``“ 包含\n- **算术运算符**\n```shell\n#!/bin/bash\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=      \n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho &quot;a + b : $&#123;result&#125;&quot;\n\nresult=`expr $&#123;a&#125; - $&#123;b&#125;`\necho &quot;a - b : $&#123;result&#125;&quot;\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 &quot;*&quot; 不需要转义符号 &quot;\\&quot; \nresult=`expr $a \\* $b`\necho &quot;a * b : $&#123;result&#125;&quot;\n\nresult=`expr $a / $b`\necho &quot;a / b : $&#123;result&#125;&quot;\n\nresult=`expr $a % $b`\necho &quot;a % b : $&#123;result&#125;&quot;\n\n# 注意空格 [ $a == $b ] \nif [ $a == $b ] \nthen \n  echo &quot; a 等于 b&quot;\nfi\n\nif [ $a != $b ] \nthen\n  echo &quot;a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>关系运算符</strong><blockquote>\n<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-eq</td>\n<td align=\"left\">检测两个数是否相等，相等返回 true。</td>\n<td align=\"left\">[ $a -eq $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-ne</td>\n<td align=\"left\">检测两个数是否不相等，不相等返回 true。</td>\n<td align=\"left\">[ $a -ne $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-gt</td>\n<td align=\"left\">检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -gt $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-lt</td>\n<td align=\"left\">检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -lt $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ge</td>\n<td align=\"left\">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -ge $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-le</td>\n<td align=\"left\">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -le $b ] 返回 true。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen \n  echo &quot;-eq : a 等于 b&quot;\nelse \n  echo &quot;-eq : a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>布尔运算符</strong><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">!</td>\n<td align=\"left\">非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td align=\"left\">[ ! false ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">或运算，有一个表达式为 true 则返回 true。</td>\n<td align=\"left\">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-a</td>\n<td align=\"left\">与运算，两个表达式都为 true 才返回 true。</td>\n<td align=\"left\">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen \n  echo &quot;a 不等于 b， 返回 true&quot;\nelse \n  echo &quot; a 等于 b&quot;\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n  echo &quot;a 大于 100或 b小于50 满足一个条件成立 &quot;\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n  echo &quot;a 大于 100 与 b小于50 返回 false &quot;\nelse \n  echo &quot;条件不成立， 必须同时满足， a 大于 100， b 小于 50&quot;\n</code></pre>\n<ul>\n<li><strong>逻辑运算符</strong><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑的 AND</td>\n<td align=\"left\">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>\n</tr>\n<tr>\n<td align=\"left\">&#124;&#124;</td>\n<td align=\"left\">逻辑的 OR</td>\n<td align=\"left\">[[ $a -lt 100 &#124;&#124; $b -gt 100 ]] 返回 true</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n  echo &quot;a 大于 100 或 b 小于 50 条件成立 返回 true&quot;\nelse \n  echo &quot;a 大于 100 或 b 小于 50 条件不成立 返回 false&quot;\nfi\n\nif [[ $a -gt 100 &amp;&amp; $b -lt 50 ]]\nthen\n  echo &quot;a 大于 100 与 b小于50 返回 true &quot;\nelse \n  echo &quot;条件不成立, false， 必须同时满足， a 大于 100， b 小于 50&quot;\nfi\n</code></pre>\n<ul>\n<li><p><strong>字符串运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明（假定变量 a 为 “abc”，变量 b 为 “efg”）</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">检测两个字符串是否相等，相等返回 true。</td>\n<td align=\"left\">[ $a = $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">检测两个字符串是否相等，不相等返回 true。</td>\n<td align=\"left\">[ $a != $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-z</td>\n<td align=\"left\">检测字符串长度是否为0，为0返回 true。</td>\n<td align=\"left\">[ -z $a ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">检测字符串长度是否不为 0，不为 0 返回 true。</td>\n<td align=\"left\">[ -n “$a” ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">检测字符串是否为空，不为空返回 true。</td>\n<td align=\"left\">[ $a ] 返回 true。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>文件测试运算符</strong></p>\n<blockquote>\n<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td align=\"left\">检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td align=\"left\">[ -b $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td align=\"left\">检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td align=\"left\">[ -c $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td align=\"left\">检测文件是否是目录，如果是，则返回 true。</td>\n<td align=\"left\">[ -d $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td align=\"left\">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td align=\"left\">[ -f $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td align=\"left\">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td align=\"left\">[ -g $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td align=\"left\">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td align=\"left\">[ -k $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td align=\"left\">检测文件是否是有名管道，如果是，则返回 true。</td>\n<td align=\"left\">[ -p $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td align=\"left\">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td align=\"left\">[ -u $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td align=\"left\">检测文件是否可读，如果是，则返回 true。</td>\n<td align=\"left\">[ -r $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td align=\"left\">检测文件是否可写，如果是，则返回 true。</td>\n<td align=\"left\">[ -w $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td align=\"left\">检测文件是否可执行，如果是，则返回 true。</td>\n<td align=\"left\">[ -x $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td align=\"left\">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n<td align=\"left\">[ -s $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td align=\"left\">检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td align=\"left\">[ -e $file ] 返回 true。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其他检查符：<ul>\n<li><strong>-S</strong>: 判断某文件是否 socket。</li>\n<li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。<br>```shell<br>#!/bin/bash</li>\n</ul>\n</li>\n</ul>\n<p>file=”/tmp/exlog/test.sh”</p>\n<p>if [ -d $file ]<br>then<br>   echo “文件是个目录”<br>else<br>   echo “文件不是个目录”<br>fi<br>if [ -r $file ]<br>then<br>   echo “文件可读”<br>else<br>   echo “文件不可读”<br>fi<br>if [ -w $file ]<br>then<br>   echo “文件可写”<br>else<br>   echo “文件不可写”<br>fi<br>if [ -x $file ]<br>then<br>   echo “文件可执行”<br>else<br>   echo “文件不可执行”<br>fi</p>\n<pre><code>\n\n\n## shell 输出\n\n\n#### echo命令\n\n\n```shell\n#!/bin/bash\n\necho &quot;It is a test&quot; / echo It is a test\n\n### 显示转义字符\necho &quot;\\&quot;It is a test\\&quot;&quot;\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf &quot;请输入变量： &quot;\nread name \necho &quot;$name It is a test&quot;\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh \n请输入变量：qwe\nqwe It is a test \n\n### 显示换行\necho -e &quot;OK! \\n&quot; # -e 开启转义\necho &quot;It is a test&quot;\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e &quot;OK! \\c&quot; # -e 开启转义 \\c 不换行\necho &quot;It is a test&quot;\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf &quot;请输入变量： &quot;\nread name \necho &quot;$name It is a test&quot; &gt; test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho &#39;$name\\&quot;&#39;  \n\n# 输入结果  $name\\&quot;\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 &#39;\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n</code></pre>\n<h4 id=\"printf-命令\"><a href=\"#printf-命令\" class=\"headerlink\" title=\"printf 命令\"></a>printf 命令</h4><blockquote>\n<p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。<br>默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\necho &quot;Hello, Shell&quot;\nprintf &quot;Hello, Shell\\n&quot;\n\nprintf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg  \nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n</code></pre>\n<p><strong>%s %c %d %f</strong> 都是格式替代符，<strong>％s</strong> 输出一个字符串，<strong>％d</strong> 整型输出，<strong>％c</strong> 输出一个字符，<strong>％f</strong> 输出实数，以小数形式输出。<br><strong>%-10s</strong> 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br><strong>%-4.2f</strong> 指格式化为小数，其中 <strong>.2</strong> 指保留2位小数。</p>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><em>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</em></p>\n</blockquote>\n<h2 id=\"shell-流程控制\"><a href=\"#shell-流程控制\" class=\"headerlink\" title=\"shell 流程控制\"></a>shell 流程控制</h2><h3 id=\"if-控制语句\"><a href=\"#if-控制语句\" class=\"headerlink\" title=\"if 控制语句\"></a>if 控制语句</h3><pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo &quot;a 等于 b&quot;\nelif [ $a -gt $b ]\nthen\n   echo &quot;a 大于 b&quot;\nelif [ $a -lt $b ]\nthen\n   echo &quot;a 小于 b&quot;\nelse\n   echo &quot;没有符合的条件&quot;\nfi\n</code></pre>\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><pre><code class=\"shell\">#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo &quot;The value is: $loop&quot;\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i&lt;=5;i++));do\n    echo &quot;这是第 $i 次调用&quot;;\ndone;\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"shell\">#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int&lt;=5 ))\ndo\n    echo $int\n    let &quot;int++&quot;\ndone\n</code></pre>\n<blockquote>\n<p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量</p>\n</blockquote>\n<h3 id=\"无限循环\"><a href=\"#无限循环\" class=\"headerlink\" title=\"无限循环\"></a>无限循环</h3><pre><code class=\"shell\">#!/bin/bash\nwhile true\ndo\n  printf &quot;请输入内容：&quot;\n  read content\n  echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n# 或者\n\nwhile ：\ndo\n  printf &quot;请输入内容：&quot;\n  read content\n  echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n  printf &quot;请输入内容：&quot;\n  read content\n  echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n</code></pre>\n<h3 id=\"until-循环\"><a href=\"#until-循环\" class=\"headerlink\" title=\"until 循环\"></a>until 循环</h3><blockquote>\n<p>until 循环执行一系列命令直至条件为 true 时停止。<br>until 循环与 while 循环在处理方式上刚好相反。<br>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n</code></pre>\n<h3 id=\"case-…-esac\"><a href=\"#case-…-esac\" class=\"headerlink\" title=\"case … esac\"></a>case … esac</h3><blockquote>\n<p><strong>case … esac</strong> 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。<br>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p>\n</blockquote>\n<pre><code class=\"shell\">\necho &#39;输入 1 到 4 之间的数字:&#39;\necho &#39;你输入的数字为:&#39;\nread aNum\ncase $aNum in\n    1)  echo &#39;你选择了 1&#39;\n    ;;\n    2)  echo &#39;你选择了 2&#39;\n    ;;\n    3)  echo &#39;你选择了 3&#39;\n    ;;\n    4)  echo &#39;你选择了 4&#39;\n    ;;\n    *)  echo &#39;你没有输入 1 到 4 之间的数字&#39;\n    ;;\nesac\n</code></pre>\n<h3 id=\"跳出循环\"><a href=\"#跳出循环\" class=\"headerlink\" title=\"跳出循环\"></a>跳出循环</h3><ul>\n<li><strong>break</strong><blockquote>\n<p>break 命令允许跳出所有循环（终止执行后面的所有循环）</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字:&quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;\n            break\n        ;;\n    esac\ndone\n</code></pre>\n<ul>\n<li><strong>continue</strong><blockquote>\n<p>continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字: &quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;\n            continue\n            echo &quot;游戏结束&quot;\n        ;;\n    esac\ndone\n</code></pre>\n<h2 id=\"Shell-函数\"><a href=\"#Shell-函数\" class=\"headerlink\" title=\"Shell 函数\"></a>Shell 函数</h2><pre><code class=\"shell\">#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n&#123;\n\n    action;\n\n    [return int;]\n\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li>\n<li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>实例</strong><br>```shell<br>#!/bin/bash</li>\n</ul>\n<p>function demo (){<br>  echo “这是一个 shell 函数！”<br>}</p>\n<p>echo “—– 函数开始执行 —–”</p>\n<p>demo()</p>\n<p>echo “—– 函数执行完毕 —–”</p>\n<h1 id=\"函数-return\"><a href=\"#函数-return\" class=\"headerlink\" title=\"函数 return\"></a>函数 return</h1><p>function demo_return(){<br>  a=10<br>  b=20<br>  return $((a + b))</p>\n<h1 id=\"return-a-b\"><a href=\"#return-a-b\" class=\"headerlink\" title=\"return $(($a + $b))\"></a>return $(($a + $b))</h1><h1 id=\"return-a-b-1\"><a href=\"#return-a-b-1\" class=\"headerlink\" title=\"return $[a + b]\"></a>return $[a + b]</h1><p>}</p>\n<p>demo_return<br>echo “和：$?”</p>\n<pre><code>&gt; 函数返回值在调用该函数后通过 $? 来获得。\n&gt; 注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可\n\n- **函数参数**\n&gt; 在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n&gt; 注意，$$10 不能获取第十个参数，获取第十个参数需要$$&#123;10&#125;。当n&gt;=10时，需要使用$&#123;n&#125;来获取参数。\n\n| 参数处理 | 说明 |\n| :--- | :--- |\n| $# | 传递到脚本或函数的参数个数 |\n| $* | 以一个单字符串显示所有向脚本传递的参数 |\n| $$ | 脚本运行的当前进程ID号 |\n| $! | 后台运行的最后一个进程的ID号 |\n| $@ | 与$*相同，但是使用时加引号，并在引号中返回每个参数。 |\n| $- | 显示Shell使用的当前选项，与set命令功能相同。 |\n| $? | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |\n\n```shell\n#!/bin/bash\n\nfunWithParam()&#123;\n    echo &quot;第一个参数为 $1 !&quot;\n    echo &quot;第二个参数为 $2 !&quot;\n    echo &quot;第十个参数为 $10 !&quot;\n    echo &quot;第十个参数为 $&#123;10&#125; !&quot;\n    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;\n    echo &quot;参数总数有 $# 个!&quot;\n    echo &quot;作为一个字符串输出所有参数 $* !&quot;\n    echo &quot;脚本运行的当前进程ID号: $$&quot;\n    echo &quot;后台运行的最后一个进程的ID号:$!&quot;\n    echo &quot;$-&quot;\n    echo &quot;$?&quot;\n    \n&#125;\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n</code></pre>\n<ul>\n<li><strong>注意点</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\n\nfunction demoFun2()&#123;\n echo &quot;这是我的第二个 shell 函数!&quot;\n expr 1 + 1\n&#125;\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n</code></pre>\n<blockquote>\n<p>调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。<br>第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。<br>下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n</code></pre>\n"},{"title":"MySQL 基础","comments":1,"abbrlink":1206568676,"date":"2020-08-01T16:00:00.000Z","_content":"\n\n## 数据库基本操作\n\n> 关系型数据库： 以二维表存储数据\n\n### 数据表操作\n\n- 数据表的创建\n\n```sql\n-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n\n```\n\n- 数据表的删除\n\n```sql\n\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n```\n### 数据操作\n\n- 增\n```sql\n-- 单条添加\ninsert into demo values(null, \"鲁班\", 20);\n\n-- 多条添加\ninsert into demo(name, age) values(\"鲁班大师\", 50),(\"凯\", 32),(\"安琪拉\", 20), ... ...\n\n```\n- 删\n```sql\n-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =\"鲁班大师\";  ==> 删除 name 是 鲁班大师的整条数据\n\n```\n- 改\n```sql\nupdate demo set name = \"小乔\", age = 20 where id = 10;\n\n```\n- 查\n```sql\n\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, >, <, >=, <=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==> %, _ \n     + where name like '孙%'\n     + where name like '孙_'\n     + where name like '%孙%'\n     + where name like '_ _'\n   - 范围查询 in('男', 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n\n```\n- 去掉字段中重复的数据\n```sql\nselect distinct sex from student;\n\n-- 去掉多个字段中重复的数据\nselect distinct sex, class from student;\n\n```\n- 排序\n```sql\nselect * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n```\n\n### 聚合函数\n\n- count 统计\n```sql\nselect count(*) from student;  ==> 只要有值就统计\n       count(name)\n```\n- max 最大值\n```sql\nselect max(age) from student;  \n```\n- min 最小值\n```sql\nselect min(age) from student;  \n```\n- sum 求和\n```sql\nselect sum(age) from student;  \n```\n- avg 平均值\n```sql\nselect avg(age) from student;  \n```\n### 分组\n\n- group by 根据某一字段排序，可以去重\n```sql\n-- 每个班级的平均，最大年龄\nselect class, avg(age), max(age) from student group by class;\n```\n### 连接查询\n\n- 等值查询\n```sql\nselect * from student as stu, score as sc where stu.sid = sc.sid;\n```\n- 内查询\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n```\n- 多表连接(两两之间产生条件)\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n```\n- 自关联（同一个表查询多次，自己产生关联，表必须起别名）\n```sql\nselect * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n```\n- 左连接（jion 前边的表）\n```sql\nselect * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n```\n- 右连接\n```sql\nselect * from student as stu\nright join score as sc on stu.sid = sc.sid;\n```\n- 子查询\n```sql\n-- 查询大于平均年龄的学生\nselect * from student whrer age > (select avg(age) from student);\n```\n- 数据分表\n```sql\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n-- 查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）\ninsert into newStudent(id, name, age )  select id,name,age from student;\n\n-- 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    Sname varchar(10)\n) select name as Sname  from student;\n```\n### 索引（作用于某个字段）\n\n**加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。**\n- 查看索引\n```sql\n    show index from 表名;\n```\n- 创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）\n```sql\n-- 建表时创建索引 key (age)、primary key、unique\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10) unique\n    age int unsigned,\n    key (age)\n)\n\n-- 已经存在的表创建索引\ncreate index 索引名称 on 表名(字段名(长度))\ncreate index i_index on newStudent(name(10))\n\n```","source":"_posts/后端领域/数据库/MySQL/MySQL 基础.md","raw":"---\ntitle: MySQL 基础\ncomments: true\ntags:\n  - mysql\ncategories:\n  - - 后端领域\n    - 数据库\n    - MySQL\nabbrlink: 1206568676\ndate: 2020-08-02 00:00:00\n---\n\n\n## 数据库基本操作\n\n> 关系型数据库： 以二维表存储数据\n\n### 数据表操作\n\n- 数据表的创建\n\n```sql\n-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n\n```\n\n- 数据表的删除\n\n```sql\n\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n```\n### 数据操作\n\n- 增\n```sql\n-- 单条添加\ninsert into demo values(null, \"鲁班\", 20);\n\n-- 多条添加\ninsert into demo(name, age) values(\"鲁班大师\", 50),(\"凯\", 32),(\"安琪拉\", 20), ... ...\n\n```\n- 删\n```sql\n-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =\"鲁班大师\";  ==> 删除 name 是 鲁班大师的整条数据\n\n```\n- 改\n```sql\nupdate demo set name = \"小乔\", age = 20 where id = 10;\n\n```\n- 查\n```sql\n\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, >, <, >=, <=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==> %, _ \n     + where name like '孙%'\n     + where name like '孙_'\n     + where name like '%孙%'\n     + where name like '_ _'\n   - 范围查询 in('男', 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n\n```\n- 去掉字段中重复的数据\n```sql\nselect distinct sex from student;\n\n-- 去掉多个字段中重复的数据\nselect distinct sex, class from student;\n\n```\n- 排序\n```sql\nselect * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n```\n\n### 聚合函数\n\n- count 统计\n```sql\nselect count(*) from student;  ==> 只要有值就统计\n       count(name)\n```\n- max 最大值\n```sql\nselect max(age) from student;  \n```\n- min 最小值\n```sql\nselect min(age) from student;  \n```\n- sum 求和\n```sql\nselect sum(age) from student;  \n```\n- avg 平均值\n```sql\nselect avg(age) from student;  \n```\n### 分组\n\n- group by 根据某一字段排序，可以去重\n```sql\n-- 每个班级的平均，最大年龄\nselect class, avg(age), max(age) from student group by class;\n```\n### 连接查询\n\n- 等值查询\n```sql\nselect * from student as stu, score as sc where stu.sid = sc.sid;\n```\n- 内查询\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n```\n- 多表连接(两两之间产生条件)\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n```\n- 自关联（同一个表查询多次，自己产生关联，表必须起别名）\n```sql\nselect * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n```\n- 左连接（jion 前边的表）\n```sql\nselect * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n```\n- 右连接\n```sql\nselect * from student as stu\nright join score as sc on stu.sid = sc.sid;\n```\n- 子查询\n```sql\n-- 查询大于平均年龄的学生\nselect * from student whrer age > (select avg(age) from student);\n```\n- 数据分表\n```sql\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n-- 查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）\ninsert into newStudent(id, name, age )  select id,name,age from student;\n\n-- 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    Sname varchar(10)\n) select name as Sname  from student;\n```\n### 索引（作用于某个字段）\n\n**加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。**\n- 查看索引\n```sql\n    show index from 表名;\n```\n- 创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）\n```sql\n-- 建表时创建索引 key (age)、primary key、unique\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10) unique\n    age int unsigned,\n    key (age)\n)\n\n-- 已经存在的表创建索引\ncreate index 索引名称 on 表名(字段名(长度))\ncreate index i_index on newStudent(name(10))\n\n```","slug":"后端领域/数据库/MySQL/MySQL 基础","published":1,"updated":"2022-02-04T09:45:53.705Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvd4007azc1bgsic7t5y","content":"<h2 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h2><blockquote>\n<p>关系型数据库： 以二维表存储数据</p>\n</blockquote>\n<h3 id=\"数据表操作\"><a href=\"#数据表操作\" class=\"headerlink\" title=\"数据表操作\"></a>数据表操作</h3><ul>\n<li>数据表的创建</li>\n</ul>\n<pre><code class=\"sql\">-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<ul>\n<li>数据表的删除</li>\n</ul>\n<pre><code class=\"sql\">\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><ul>\n<li>增<br>```sql</li>\n<li><ul>\n<li>单条添加<br>insert into demo values(null, “鲁班”, 20);</li>\n</ul>\n</li>\n</ul>\n<p>– 多条添加<br>insert into demo(name, age) values(“鲁班大师”, 50),(“凯”, 32),(“安琪拉”, 20), … …</p>\n<pre><code>- 删\n```sql\n-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =&quot;鲁班大师&quot;;  ==&gt; 删除 name 是 鲁班大师的整条数据\n</code></pre>\n<ul>\n<li>改<br>```sql<br>update demo set name = “小乔”, age = 20 where id = 10;</li>\n</ul>\n<pre><code>- 查\n```sql\n\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, &gt;, &lt;, &gt;=, &lt;=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==&gt; %, _ \n     + where name like &#39;孙%&#39;\n     + where name like &#39;孙_&#39;\n     + where name like &#39;%孙%&#39;\n     + where name like &#39;_ _&#39;\n   - 范围查询 in(&#39;男&#39;, 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n</code></pre>\n<ul>\n<li>去掉字段中重复的数据<br>```sql<br>select distinct sex from student;</li>\n</ul>\n<p>– 去掉多个字段中重复的数据<br>select distinct sex, class from student;</p>\n<pre><code>- 排序\n```sql\nselect * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n</code></pre>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><ul>\n<li><p>count 统计</p>\n<pre><code class=\"sql\">select count(*) from student;  ==&gt; 只要有值就统计\n     count(name)\n</code></pre>\n</li>\n<li><p>max 最大值</p>\n<pre><code class=\"sql\">select max(age) from student;  \n</code></pre>\n</li>\n<li><p>min 最小值</p>\n<pre><code class=\"sql\">select min(age) from student;  \n</code></pre>\n</li>\n<li><p>sum 求和</p>\n<pre><code class=\"sql\">select sum(age) from student;  \n</code></pre>\n</li>\n<li><p>avg 平均值</p>\n<pre><code class=\"sql\">select avg(age) from student;  \n</code></pre>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3></li>\n<li><p>group by 根据某一字段排序，可以去重<br>```sql</p>\n</li>\n<li><ul>\n<li>每个班级的平均，最大年龄<br>select class, avg(age), max(age) from student group by class;<br>```<h3 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h3></li>\n</ul>\n</li>\n<li><p>等值查询</p>\n<pre><code class=\"sql\">select * from student as stu, score as sc where stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>内查询</p>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>多表连接(两两之间产生条件)</p>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n</code></pre>\n</li>\n<li><p>自关联（同一个表查询多次，自己产生关联，表必须起别名）</p>\n<pre><code class=\"sql\">select * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n</code></pre>\n</li>\n<li><p>左连接（jion 前边的表）</p>\n<pre><code class=\"sql\">select * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>右连接</p>\n<pre><code class=\"sql\">select * from student as stu\nright join score as sc on stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>子查询<br>```sql</p>\n</li>\n<li><ul>\n<li>查询大于平均年龄的学生<br>select * from student whrer age &gt; (select avg(age) from student);<br>```</li>\n</ul>\n</li>\n<li><p>数据分表<br>```sql<br>create table newStudent (<br>  id int unsigned primary key auto_increment,<br>  name varchar(10),<br>  age int unsigned<br>)</p>\n</li>\n<li><ul>\n<li>查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）<br>insert into newStudent(id, name, age )  select id,name,age from student;</li>\n</ul>\n</li>\n</ul>\n<p>– 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）<br>create table newStudent (<br>    id int unsigned primary key auto_increment,<br>    Sname varchar(10)<br>) select name as Sname  from student;</p>\n<pre><code>### 索引（作用于某个字段）\n\n**加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。**\n- 查看索引\n```sql\n    show index from 表名;\n</code></pre>\n<ul>\n<li>创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）<br>```sql</li>\n<li><ul>\n<li>建表时创建索引 key (age)、primary key、unique<br>create table newStudent (<br> id int unsigned primary key auto_increment,<br> name varchar(10) unique<br> age int unsigned,<br> key (age)<br>)</li>\n</ul>\n</li>\n</ul>\n<p>– 已经存在的表创建索引<br>create index 索引名称 on 表名(字段名(长度))<br>create index i_index on newStudent(name(10))</p>\n<p>```</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h2><blockquote>\n<p>关系型数据库： 以二维表存储数据</p>\n</blockquote>\n<h3 id=\"数据表操作\"><a href=\"#数据表操作\" class=\"headerlink\" title=\"数据表操作\"></a>数据表操作</h3><ul>\n<li>数据表的创建</li>\n</ul>\n<pre><code class=\"sql\">-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<ul>\n<li>数据表的删除</li>\n</ul>\n<pre><code class=\"sql\">\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><ul>\n<li>增<br>```sql</li>\n<li><ul>\n<li>单条添加<br>insert into demo values(null, “鲁班”, 20);</li>\n</ul>\n</li>\n</ul>\n<p>– 多条添加<br>insert into demo(name, age) values(“鲁班大师”, 50),(“凯”, 32),(“安琪拉”, 20), … …</p>\n<pre><code>- 删\n```sql\n-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =&quot;鲁班大师&quot;;  ==&gt; 删除 name 是 鲁班大师的整条数据\n</code></pre>\n<ul>\n<li>改<br>```sql<br>update demo set name = “小乔”, age = 20 where id = 10;</li>\n</ul>\n<pre><code>- 查\n```sql\n\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, &gt;, &lt;, &gt;=, &lt;=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==&gt; %, _ \n     + where name like &#39;孙%&#39;\n     + where name like &#39;孙_&#39;\n     + where name like &#39;%孙%&#39;\n     + where name like &#39;_ _&#39;\n   - 范围查询 in(&#39;男&#39;, 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n</code></pre>\n<ul>\n<li>去掉字段中重复的数据<br>```sql<br>select distinct sex from student;</li>\n</ul>\n<p>– 去掉多个字段中重复的数据<br>select distinct sex, class from student;</p>\n<pre><code>- 排序\n```sql\nselect * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n</code></pre>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><ul>\n<li><p>count 统计</p>\n<pre><code class=\"sql\">select count(*) from student;  ==&gt; 只要有值就统计\n     count(name)\n</code></pre>\n</li>\n<li><p>max 最大值</p>\n<pre><code class=\"sql\">select max(age) from student;  \n</code></pre>\n</li>\n<li><p>min 最小值</p>\n<pre><code class=\"sql\">select min(age) from student;  \n</code></pre>\n</li>\n<li><p>sum 求和</p>\n<pre><code class=\"sql\">select sum(age) from student;  \n</code></pre>\n</li>\n<li><p>avg 平均值</p>\n<pre><code class=\"sql\">select avg(age) from student;  \n</code></pre>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3></li>\n<li><p>group by 根据某一字段排序，可以去重<br>```sql</p>\n</li>\n<li><ul>\n<li>每个班级的平均，最大年龄<br>select class, avg(age), max(age) from student group by class;<br>```<h3 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h3></li>\n</ul>\n</li>\n<li><p>等值查询</p>\n<pre><code class=\"sql\">select * from student as stu, score as sc where stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>内查询</p>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>多表连接(两两之间产生条件)</p>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n</code></pre>\n</li>\n<li><p>自关联（同一个表查询多次，自己产生关联，表必须起别名）</p>\n<pre><code class=\"sql\">select * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n</code></pre>\n</li>\n<li><p>左连接（jion 前边的表）</p>\n<pre><code class=\"sql\">select * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>右连接</p>\n<pre><code class=\"sql\">select * from student as stu\nright join score as sc on stu.sid = sc.sid;\n</code></pre>\n</li>\n<li><p>子查询<br>```sql</p>\n</li>\n<li><ul>\n<li>查询大于平均年龄的学生<br>select * from student whrer age &gt; (select avg(age) from student);<br>```</li>\n</ul>\n</li>\n<li><p>数据分表<br>```sql<br>create table newStudent (<br>  id int unsigned primary key auto_increment,<br>  name varchar(10),<br>  age int unsigned<br>)</p>\n</li>\n<li><ul>\n<li>查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）<br>insert into newStudent(id, name, age )  select id,name,age from student;</li>\n</ul>\n</li>\n</ul>\n<p>– 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）<br>create table newStudent (<br>    id int unsigned primary key auto_increment,<br>    Sname varchar(10)<br>) select name as Sname  from student;</p>\n<pre><code>### 索引（作用于某个字段）\n\n**加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。**\n- 查看索引\n```sql\n    show index from 表名;\n</code></pre>\n<ul>\n<li>创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）<br>```sql</li>\n<li><ul>\n<li>建表时创建索引 key (age)、primary key、unique<br>create table newStudent (<br> id int unsigned primary key auto_increment,<br> name varchar(10) unique<br> age int unsigned,<br> key (age)<br>)</li>\n</ul>\n</li>\n</ul>\n<p>– 已经存在的表创建索引<br>create index 索引名称 on 表名(字段名(长度))<br>create index i_index on newStudent(name(10))</p>\n<p>```</p>\n"},{"title":"MySQL 刷题记录","comments":1,"abbrlink":2689587330,"date":"2020-10-12T16:00:00.000Z","_content":"\n\n## [组合两个表](https://leetcode-cn.com/problems/combine-two-tables/)\n\n表1: Person\n\n```\n+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n```\n\n表2: Address\n\n```\n+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n```\n\n\n编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\nselect FirstName, LastName, City, State from Person\nleft join Address on Address.PersonId = Person.PersonId;\n\n-- left join Address using(PersonId)\n```\n\n## [ 第二高的薪水](https://leetcode-cn.com/problems/second-highest-salary/)\n\n编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。\n\n```\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n```\n\n例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。\n\n```\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\n# 方法一\nselect MAX(Salary) as SecondHighestSalary from Employee WHERE Salary < (select max(Salary) from Employee)；\n\n# 方法二\n\n-- SELECT\n--     IFNULL(\n--       (SELECT DISTINCT Salary\n--        FROM Employee\n--        ORDER BY Salary DESC\n--         LIMIT 1 OFFSET 1),\n--     NULL) AS SecondHighestSalary；\n```\n\n## [超过经理收入的员工](https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/)\n\nEmployee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。\n\n```\n+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n```\n\n给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。\n\n```\n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\nselect A.Name as Employee  from Employee AS A,Employee AS B \nWHERE A.ManagerId = B.Id And A.Salary > B.Salary;\n```\n\n## [查找重复的电子邮箱](https://leetcode-cn.com/problems/duplicate-emails/)\n\n编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。\n\n```\n示例：\n\n+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n```\n\n根据以上输入，你的查询应返回以下结果：\n\n```\n\n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n说明：所有电子邮箱都是小写字母。\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\n-- select Email, count(*) as Num  from Person group by Email;\n\n-- select Email from t where Num >1\n\nselect Email from (select Email, count(*) as Num  from Person group by Email) t where t.Num > 1;\n```\n\n## [从不订购的客户](https://leetcode-cn.com/problems/customers-who-never-order/)\n\n某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。\n\nCustomers 表：\n\n```\n+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n```\n\nOrders 表：\n\n```\n+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n```\n\n例如给定上述表格，你的查询应返回：\n\n```\n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\n-- select Name as Customers from Customers Where Id not in (select Orders.CustomerId from Orders );\n\nselect c.Name as Customers from Customers c\n\nleft join Orders o on c.Id = O.CustomerId\nWhere o.CustomerId is null;\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n## 模板\n\n表1: Person\n\n```\n\n```\n\n表2: Address\n\n```\n\n```\n\n编写一个 SQL 查询\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\n\n```\n\n\n\n## 模板\n\n表1: Person\n\n```\n\n```\n\n表2: Address\n\n```\n\n```\n\n编写一个 SQL 查询\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\n\n```\n\n\n\n\n\n## 模板\n\n表1: Person\n\n```\n\n```\n\n表2: Address\n\n```\n\n```\n\n编写一个 SQL 查询\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\n\n```\n\n\n\n\n\n","source":"_posts/后端领域/数据库/MySQL/MySQL 刷题.md","raw":"---\ntitle: MySQL 刷题记录\ncomments: true\ntags:\n  - mysql\n  - leetcode\n  - 牛客\ncategories:\n  - - 后端领域\n    - 数据库\n    - MySQL\nabbrlink: 2689587330\ndate: 2020-10-13 00:00:00\n---\n\n\n## [组合两个表](https://leetcode-cn.com/problems/combine-two-tables/)\n\n表1: Person\n\n```\n+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n```\n\n表2: Address\n\n```\n+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n```\n\n\n编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\nselect FirstName, LastName, City, State from Person\nleft join Address on Address.PersonId = Person.PersonId;\n\n-- left join Address using(PersonId)\n```\n\n## [ 第二高的薪水](https://leetcode-cn.com/problems/second-highest-salary/)\n\n编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。\n\n```\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n```\n\n例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。\n\n```\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\n# 方法一\nselect MAX(Salary) as SecondHighestSalary from Employee WHERE Salary < (select max(Salary) from Employee)；\n\n# 方法二\n\n-- SELECT\n--     IFNULL(\n--       (SELECT DISTINCT Salary\n--        FROM Employee\n--        ORDER BY Salary DESC\n--         LIMIT 1 OFFSET 1),\n--     NULL) AS SecondHighestSalary；\n```\n\n## [超过经理收入的员工](https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/)\n\nEmployee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。\n\n```\n+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n```\n\n给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。\n\n```\n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\nselect A.Name as Employee  from Employee AS A,Employee AS B \nWHERE A.ManagerId = B.Id And A.Salary > B.Salary;\n```\n\n## [查找重复的电子邮箱](https://leetcode-cn.com/problems/duplicate-emails/)\n\n编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。\n\n```\n示例：\n\n+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n```\n\n根据以上输入，你的查询应返回以下结果：\n\n```\n\n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n说明：所有电子邮箱都是小写字母。\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\n-- select Email, count(*) as Num  from Person group by Email;\n\n-- select Email from t where Num >1\n\nselect Email from (select Email, count(*) as Num  from Person group by Email) t where t.Num > 1;\n```\n\n## [从不订购的客户](https://leetcode-cn.com/problems/customers-who-never-order/)\n\n某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。\n\nCustomers 表：\n\n```\n+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n```\n\nOrders 表：\n\n```\n+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n```\n\n例如给定上述表格，你的查询应返回：\n\n```\n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n```\n\n**[ 解题 ]**\n\n```mysql\n# Write your MySQL query statement below\n\n-- select Name as Customers from Customers Where Id not in (select Orders.CustomerId from Orders );\n\nselect c.Name as Customers from Customers c\n\nleft join Orders o on c.Id = O.CustomerId\nWhere o.CustomerId is null;\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n## 模板\n\n表1: Person\n\n```\n\n```\n\n表2: Address\n\n```\n\n```\n\n编写一个 SQL 查询\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\n\n```\n\n\n\n## 模板\n\n表1: Person\n\n```\n\n```\n\n表2: Address\n\n```\n\n```\n\n编写一个 SQL 查询\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\n\n```\n\n\n\n\n\n## 模板\n\n表1: Person\n\n```\n\n```\n\n表2: Address\n\n```\n\n```\n\n编写一个 SQL 查询\n\n```\nFirstName, LastName, City, State\n```\n\n**[ 解题 ]**\n\n```mysql\n\n```\n\n\n\n\n\n","slug":"后端领域/数据库/MySQL/MySQL 刷题","published":1,"updated":"2022-02-04T10:11:17.571Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvd4007bzc1b4esb8iml","content":"<h2 id=\"组合两个表\"><a href=\"#组合两个表\" class=\"headerlink\" title=\"组合两个表\"></a><a href=\"https://leetcode-cn.com/problems/combine-two-tables/\" rel=\"external nofollow noreferrer\">组合两个表</a></h2><p>表1: Person</p>\n<pre><code>+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n</code></pre>\n<p>表2: Address</p>\n<pre><code>+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n</code></pre>\n<p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">select FirstName, LastName, City, State from Person\nleft join Address on Address.PersonId = Person.PersonId;\n\n-- left join Address using(PersonId)\n</code></pre>\n<h2 id=\"第二高的薪水\"><a href=\"#第二高的薪水\" class=\"headerlink\" title=\" 第二高的薪水\"></a><a href=\"https://leetcode-cn.com/problems/second-highest-salary/\" rel=\"external nofollow noreferrer\"> 第二高的薪水</a></h2><p>编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。</p>\n<pre><code>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</code></pre>\n<p>例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。</p>\n<pre><code>+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\n# 方法一\nselect MAX(Salary) as SecondHighestSalary from Employee WHERE Salary &lt; (select max(Salary) from Employee)；\n\n# 方法二\n\n-- SELECT\n--     IFNULL(\n--       (SELECT DISTINCT Salary\n--        FROM Employee\n--        ORDER BY Salary DESC\n--         LIMIT 1 OFFSET 1),\n--     NULL) AS SecondHighestSalary；\n</code></pre>\n<h2 id=\"超过经理收入的员工\"><a href=\"#超过经理收入的员工\" class=\"headerlink\" title=\"超过经理收入的员工\"></a><a href=\"https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/\" rel=\"external nofollow noreferrer\">超过经理收入的员工</a></h2><p>Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p>\n<pre><code>+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n</code></pre>\n<p>给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p>\n<pre><code>+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\nselect A.Name as Employee  from Employee AS A,Employee AS B \nWHERE A.ManagerId = B.Id And A.Salary &gt; B.Salary;\n</code></pre>\n<h2 id=\"查找重复的电子邮箱\"><a href=\"#查找重复的电子邮箱\" class=\"headerlink\" title=\"查找重复的电子邮箱\"></a><a href=\"https://leetcode-cn.com/problems/duplicate-emails/\" rel=\"external nofollow noreferrer\">查找重复的电子邮箱</a></h2><p>编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。</p>\n<pre><code>示例：\n\n+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n</code></pre>\n<p>根据以上输入，你的查询应返回以下结果：</p>\n<pre><code>\n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n说明：所有电子邮箱都是小写字母。\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\n-- select Email, count(*) as Num  from Person group by Email;\n\n-- select Email from t where Num &gt;1\n\nselect Email from (select Email, count(*) as Num  from Person group by Email) t where t.Num &gt; 1;\n</code></pre>\n<h2 id=\"从不订购的客户\"><a href=\"#从不订购的客户\" class=\"headerlink\" title=\"从不订购的客户\"></a><a href=\"https://leetcode-cn.com/problems/customers-who-never-order/\" rel=\"external nofollow noreferrer\">从不订购的客户</a></h2><p>某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p>\n<p>Customers 表：</p>\n<pre><code>+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n</code></pre>\n<p>Orders 表：</p>\n<pre><code>+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n</code></pre>\n<p>例如给定上述表格，你的查询应返回：</p>\n<pre><code>+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\n-- select Name as Customers from Customers Where Id not in (select Orders.CustomerId from Orders );\n\nselect c.Name as Customers from Customers c\n\nleft join Orders o on c.Id = O.CustomerId\nWhere o.CustomerId is null;\n</code></pre>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>表1: Person</p>\n<pre><code>\n</code></pre>\n<p>表2: Address</p>\n<pre><code>\n</code></pre>\n<p>编写一个 SQL 查询</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">\n</code></pre>\n<h2 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>表1: Person</p>\n<pre><code>\n</code></pre>\n<p>表2: Address</p>\n<pre><code>\n</code></pre>\n<p>编写一个 SQL 查询</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">\n</code></pre>\n<h2 id=\"模板-2\"><a href=\"#模板-2\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>表1: Person</p>\n<pre><code>\n</code></pre>\n<p>表2: Address</p>\n<pre><code>\n</code></pre>\n<p>编写一个 SQL 查询</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"组合两个表\"><a href=\"#组合两个表\" class=\"headerlink\" title=\"组合两个表\"></a><a href=\"https://leetcode-cn.com/problems/combine-two-tables/\">组合两个表</a></h2><p>表1: Person</p>\n<pre><code>+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n</code></pre>\n<p>表2: Address</p>\n<pre><code>+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n</code></pre>\n<p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">select FirstName, LastName, City, State from Person\nleft join Address on Address.PersonId = Person.PersonId;\n\n-- left join Address using(PersonId)\n</code></pre>\n<h2 id=\"第二高的薪水\"><a href=\"#第二高的薪水\" class=\"headerlink\" title=\" 第二高的薪水\"></a><a href=\"https://leetcode-cn.com/problems/second-highest-salary/\"> 第二高的薪水</a></h2><p>编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。</p>\n<pre><code>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</code></pre>\n<p>例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。</p>\n<pre><code>+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\n# 方法一\nselect MAX(Salary) as SecondHighestSalary from Employee WHERE Salary &lt; (select max(Salary) from Employee)；\n\n# 方法二\n\n-- SELECT\n--     IFNULL(\n--       (SELECT DISTINCT Salary\n--        FROM Employee\n--        ORDER BY Salary DESC\n--         LIMIT 1 OFFSET 1),\n--     NULL) AS SecondHighestSalary；\n</code></pre>\n<h2 id=\"超过经理收入的员工\"><a href=\"#超过经理收入的员工\" class=\"headerlink\" title=\"超过经理收入的员工\"></a><a href=\"https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/\">超过经理收入的员工</a></h2><p>Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p>\n<pre><code>+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n</code></pre>\n<p>给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p>\n<pre><code>+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\nselect A.Name as Employee  from Employee AS A,Employee AS B \nWHERE A.ManagerId = B.Id And A.Salary &gt; B.Salary;\n</code></pre>\n<h2 id=\"查找重复的电子邮箱\"><a href=\"#查找重复的电子邮箱\" class=\"headerlink\" title=\"查找重复的电子邮箱\"></a><a href=\"https://leetcode-cn.com/problems/duplicate-emails/\">查找重复的电子邮箱</a></h2><p>编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。</p>\n<pre><code>示例：\n\n+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n</code></pre>\n<p>根据以上输入，你的查询应返回以下结果：</p>\n<pre><code>\n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n说明：所有电子邮箱都是小写字母。\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\n-- select Email, count(*) as Num  from Person group by Email;\n\n-- select Email from t where Num &gt;1\n\nselect Email from (select Email, count(*) as Num  from Person group by Email) t where t.Num &gt; 1;\n</code></pre>\n<h2 id=\"从不订购的客户\"><a href=\"#从不订购的客户\" class=\"headerlink\" title=\"从不订购的客户\"></a><a href=\"https://leetcode-cn.com/problems/customers-who-never-order/\">从不订购的客户</a></h2><p>某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p>\n<p>Customers 表：</p>\n<pre><code>+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n</code></pre>\n<p>Orders 表：</p>\n<pre><code>+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n</code></pre>\n<p>例如给定上述表格，你的查询应返回：</p>\n<pre><code>+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\"># Write your MySQL query statement below\n\n-- select Name as Customers from Customers Where Id not in (select Orders.CustomerId from Orders );\n\nselect c.Name as Customers from Customers c\n\nleft join Orders o on c.Id = O.CustomerId\nWhere o.CustomerId is null;\n</code></pre>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>表1: Person</p>\n<pre><code>\n</code></pre>\n<p>表2: Address</p>\n<pre><code>\n</code></pre>\n<p>编写一个 SQL 查询</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">\n</code></pre>\n<h2 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>表1: Person</p>\n<pre><code>\n</code></pre>\n<p>表2: Address</p>\n<pre><code>\n</code></pre>\n<p>编写一个 SQL 查询</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">\n</code></pre>\n<h2 id=\"模板-2\"><a href=\"#模板-2\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>表1: Person</p>\n<pre><code>\n</code></pre>\n<p>表2: Address</p>\n<pre><code>\n</code></pre>\n<p>编写一个 SQL 查询</p>\n<pre><code>FirstName, LastName, City, State\n</code></pre>\n<p><strong>[ 解题 ]</strong></p>\n<pre><code class=\"mysql\">\n</code></pre>\n"},{"title":"MySQL 经典面试题","comments":1,"abbrlink":4225305543,"date":"2020-08-31T16:00:00.000Z","_content":"\n### 取得每个部门最高薪水的人员名称\n\n```sql\n-- 分析\n-- 第一步： 求出每个部门最高的薪水\nSELECT \n\te.deptno,MAX(e.sal) as maxsal\nFROM emp e\nGROUP BY \n\te.deptno;\n-- 将以上查询结果当成一个临时表 t(deptno,maxsal)\n\n-- 最高薪水的人员名称（两张表的连接）\nSELECT \n\te.deptno,e.ename,t.maxsal,e.sal\nFROM \n\t(SELECT e.deptno,MAX(e.sal) AS maxsal \n     FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE t.maxsal = e.sal \nORDER BY e.deptno;\n\n```\n\n### 那些人的薪水在部门的平均薪水之上\n\n```sql\n-- 分析 \n-- 第一步，求出部门的平均薪水\nSELECT \n\te.deptno, AVG(e.sal) AS avgsal\nFROM \n\temp e\nGROUP BY e.deptno; \n-- 将以上查询结果当成一个临时表 t(deptno,avgsal)\n\n-- 薪水在部门的平均薪水之上的人员（两张表的连接）\nSELECT e.deptno,e.ename,e.sal,t.avgsal \nFROM \n\t(SELECT e.deptno, AVG(e.sal) AS avgsal \n\t FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE e.sal > t.avgsal\nORDER BY e.deptno;\n\n```\n\n","source":"_posts/后端领域/数据库/MySQL/MySQL 经典.md","raw":"---\ntitle: MySQL 经典面试题\ncomments: true\ntags:\n  - mysql\ncategories:\n  - - 后端领域\n    - 数据库\n    - MySQL\nabbrlink: 4225305543\ndate: 2020-09-01 00:00:00\n---\n\n### 取得每个部门最高薪水的人员名称\n\n```sql\n-- 分析\n-- 第一步： 求出每个部门最高的薪水\nSELECT \n\te.deptno,MAX(e.sal) as maxsal\nFROM emp e\nGROUP BY \n\te.deptno;\n-- 将以上查询结果当成一个临时表 t(deptno,maxsal)\n\n-- 最高薪水的人员名称（两张表的连接）\nSELECT \n\te.deptno,e.ename,t.maxsal,e.sal\nFROM \n\t(SELECT e.deptno,MAX(e.sal) AS maxsal \n     FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE t.maxsal = e.sal \nORDER BY e.deptno;\n\n```\n\n### 那些人的薪水在部门的平均薪水之上\n\n```sql\n-- 分析 \n-- 第一步，求出部门的平均薪水\nSELECT \n\te.deptno, AVG(e.sal) AS avgsal\nFROM \n\temp e\nGROUP BY e.deptno; \n-- 将以上查询结果当成一个临时表 t(deptno,avgsal)\n\n-- 薪水在部门的平均薪水之上的人员（两张表的连接）\nSELECT e.deptno,e.ename,e.sal,t.avgsal \nFROM \n\t(SELECT e.deptno, AVG(e.sal) AS avgsal \n\t FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE e.sal > t.avgsal\nORDER BY e.deptno;\n\n```\n\n","slug":"后端领域/数据库/MySQL/MySQL 经典","published":1,"updated":"2022-02-04T09:45:53.707Z","layout":"post","photos":[],"link":"","_id":"ckz8fkvd5007dzc1bbu9ya2rg","content":"<h3 id=\"取得每个部门最高薪水的人员名称\"><a href=\"#取得每个部门最高薪水的人员名称\" class=\"headerlink\" title=\"取得每个部门最高薪水的人员名称\"></a>取得每个部门最高薪水的人员名称</h3><pre><code class=\"sql\">-- 分析\n-- 第一步： 求出每个部门最高的薪水\nSELECT \n    e.deptno,MAX(e.sal) as maxsal\nFROM emp e\nGROUP BY \n    e.deptno;\n-- 将以上查询结果当成一个临时表 t(deptno,maxsal)\n\n-- 最高薪水的人员名称（两张表的连接）\nSELECT \n    e.deptno,e.ename,t.maxsal,e.sal\nFROM \n    (SELECT e.deptno,MAX(e.sal) AS maxsal \n     FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE t.maxsal = e.sal \nORDER BY e.deptno;\n</code></pre>\n<h3 id=\"那些人的薪水在部门的平均薪水之上\"><a href=\"#那些人的薪水在部门的平均薪水之上\" class=\"headerlink\" title=\"那些人的薪水在部门的平均薪水之上\"></a>那些人的薪水在部门的平均薪水之上</h3><pre><code class=\"sql\">-- 分析 \n-- 第一步，求出部门的平均薪水\nSELECT \n    e.deptno, AVG(e.sal) AS avgsal\nFROM \n    emp e\nGROUP BY e.deptno; \n-- 将以上查询结果当成一个临时表 t(deptno,avgsal)\n\n-- 薪水在部门的平均薪水之上的人员（两张表的连接）\nSELECT e.deptno,e.ename,e.sal,t.avgsal \nFROM \n    (SELECT e.deptno, AVG(e.sal) AS avgsal \n     FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE e.sal &gt; t.avgsal\nORDER BY e.deptno;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-crow":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h3 id=\"取得每个部门最高薪水的人员名称\"><a href=\"#取得每个部门最高薪水的人员名称\" class=\"headerlink\" title=\"取得每个部门最高薪水的人员名称\"></a>取得每个部门最高薪水的人员名称</h3><pre><code class=\"sql\">-- 分析\n-- 第一步： 求出每个部门最高的薪水\nSELECT \n    e.deptno,MAX(e.sal) as maxsal\nFROM emp e\nGROUP BY \n    e.deptno;\n-- 将以上查询结果当成一个临时表 t(deptno,maxsal)\n\n-- 最高薪水的人员名称（两张表的连接）\nSELECT \n    e.deptno,e.ename,t.maxsal,e.sal\nFROM \n    (SELECT e.deptno,MAX(e.sal) AS maxsal \n     FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE t.maxsal = e.sal \nORDER BY e.deptno;\n</code></pre>\n<h3 id=\"那些人的薪水在部门的平均薪水之上\"><a href=\"#那些人的薪水在部门的平均薪水之上\" class=\"headerlink\" title=\"那些人的薪水在部门的平均薪水之上\"></a>那些人的薪水在部门的平均薪水之上</h3><pre><code class=\"sql\">-- 分析 \n-- 第一步，求出部门的平均薪水\nSELECT \n    e.deptno, AVG(e.sal) AS avgsal\nFROM \n    emp e\nGROUP BY e.deptno; \n-- 将以上查询结果当成一个临时表 t(deptno,avgsal)\n\n-- 薪水在部门的平均薪水之上的人员（两张表的连接）\nSELECT e.deptno,e.ename,e.sal,t.avgsal \nFROM \n    (SELECT e.deptno, AVG(e.sal) AS avgsal \n     FROM emp e \n     GROUP BY e.deptno;) t\nJOIN emp e ON t.deptno = e.deptno\nWHERE e.sal &gt; t.avgsal\nORDER BY e.deptno;\n</code></pre>\n"},{"title":"Python 学习路线","urlname":"aagoit","date":"2021-10-17T12:23:57.000Z","abbrlink":163128104,"_content":"\n![微信图片_20211017202334.png](https://cdn.nlark.com/yuque/0/2021/png/518310/1634473525556-8e7c7365-a748-43d4-a70d-24cf6fc079d2.png#clientId=u80697c78-089a-4&from=drop&id=u3f585782&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017202334.png&originHeight=16777&originWidth=2507&originalType=binary∶=1&size=2765777&status=done&style=none&taskId=uf1c16268-3061-494a-ad5c-653b3b4e254)\n","source":"_posts/语雀/aagoit.md","raw":"---\ntitle: Python 学习路线\nurlname: aagoit\ndate: '2021-10-17 20:23:57 +0800'\ntags: []\ncategories: []\nabbrlink: 163128104\n---\n\n![微信图片_20211017202334.png](https://cdn.nlark.com/yuque/0/2021/png/518310/1634473525556-8e7c7365-a748-43d4-a70d-24cf6fc079d2.png#clientId=u80697c78-089a-4&from=drop&id=u3f585782&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017202334.png&originHeight=16777&originWidth=2507&originalType=binary∶=1&size=2765777&status=done&style=none&taskId=uf1c16268-3061-494a-ad5c-653b3b4e254)\n","slug":"语雀/aagoit","published":1,"updated":"2022-03-03T11:26:07.552Z","_id":"cl0awjjou0000081b0qjmddtx","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/518310/1634473525556-8e7c7365-a748-43d4-a70d-24cf6fc079d2.png#clientId=u80697c78-089a-4&from=drop&id=u3f585782&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017202334.png&originHeight=16777&originWidth=2507&originalType=binary%E2%88%B6=1&size=2765777&status=done&style=none&taskId=uf1c16268-3061-494a-ad5c-653b3b4e254\" alt=\"微信图片_20211017202334.png\"></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/518310/1634473525556-8e7c7365-a748-43d4-a70d-24cf6fc079d2.png#clientId=u80697c78-089a-4&from=drop&id=u3f585782&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017202334.png&originHeight=16777&originWidth=2507&originalType=binary%E2%88%B6=1&size=2765777&status=done&style=none&taskId=uf1c16268-3061-494a-ad5c-653b3b4e254\" alt=\"微信图片_20211017202334.png\"></p>\n"},{"title":"关于我","urlname":"about_me","date":"2020-01-04T14:38:29.000Z","abbrlink":2683804451,"_content":"\n​\n\n---\n\nHi, 远方的朋友，很高兴能在这里与你相遇。\n我是 张小剩。 一个代码小白～\n毕业于某不知名大学\n热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。\n\n喜欢猫猫… 更喜欢安静\n喧闹真令人头痛！\n\n---\n\n如果你对我感兴趣，可以通过以下方式找到我\n​\n\n**博客：**[张小剩的博客](https://alwayscn.github.io/alwaysblog/)\n​\n\n**GitHub：**[@alwayscn](https://github.com/alwayscn)\n​\n\n** Email：**[always@outlook.com](mailto:always.o@outlook.com)\n","source":"_posts/语雀/about_me.md","raw":"---\ntitle: 关于我\nurlname: about_me\ndate: '2020-01-04 22:38:29 +0800'\ntags: []\ncategories: []\nabbrlink: 2683804451\n---\n\n​\n\n---\n\nHi, 远方的朋友，很高兴能在这里与你相遇。\n我是 张小剩。 一个代码小白～\n毕业于某不知名大学\n热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。\n\n喜欢猫猫… 更喜欢安静\n喧闹真令人头痛！\n\n---\n\n如果你对我感兴趣，可以通过以下方式找到我\n​\n\n**博客：**[张小剩的博客](https://alwayscn.github.io/alwaysblog/)\n​\n\n**GitHub：**[@alwayscn](https://github.com/alwayscn)\n​\n\n** Email：**[always@outlook.com](mailto:always.o@outlook.com)\n","slug":"语雀/about_me","published":1,"updated":"2022-03-03T11:26:07.555Z","_id":"cl0awjjoz0001081b6gryfo9b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>​</p>\n<hr>\n<p>Hi, 远方的朋友，很高兴能在这里与你相遇。<br>我是 张小剩。 一个代码小白～<br>毕业于某不知名大学<br>热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。</p>\n<p>喜欢猫猫… 更喜欢安静<br>喧闹真令人头痛！</p>\n<hr>\n<p>如果你对我感兴趣，可以通过以下方式找到我<br>​</p>\n<p><strong>博客：</strong><a href=\"https://alwayscn.github.io/alwaysblog/\" rel=\"external nofollow noreferrer\">张小剩的博客</a><br>​</p>\n<p><strong>GitHub：</strong><a href=\"https://github.com/alwayscn\">@alwayscn</a><br>​</p>\n<p>** Email：**<a href=\"mailto:always.o@outlook.com\" rel=\"external nofollow noreferrer\">always@outlook.com</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p>​</p>\n<hr>\n<p>Hi, 远方的朋友，很高兴能在这里与你相遇。<br>我是 张小剩。 一个代码小白～<br>毕业于某不知名大学<br>热爱互联网，感兴趣的事情什么都会一点点, 但是什么也不精通。。。</p>\n<p>喜欢猫猫… 更喜欢安静<br>喧闹真令人头痛！</p>\n<hr>\n<p>如果你对我感兴趣，可以通过以下方式找到我<br>​</p>\n<p><strong>博客：</strong><a href=\"https://alwayscn.github.io/alwaysblog/\">张小剩的博客</a><br>​</p>\n<p><strong>GitHub：</strong><a href=\"https://github.com/alwayscn\">@alwayscn</a><br>​</p>\n<p>** Email：**<a href=\"mailto:always.o@outlook.com\">always@outlook.com</a></p>\n"},{"title":"Adb 常用命令","urlname":"aekcz3","date":"2020-05-30T15:32:30.000Z","abbrlink":1848810804,"_content":"\n- 列出所有的连接设备\n\n```\nadb devices\n```\n\n- 拷⻉⽂件/⽬录到设备\n\n```\n adb push E:/images/test.jpg /sdcard/\n```\n\n- 从设备拷⻉⽂件/⽬录\n\n```\n adb pull /sdcard/images/test.jpg E:\\tmp\n```\n\n- 浏览设备⽇志\n\n```\n adb logcat\n```\n\n- 列出所有包名\n\n```shell\n adb shell pm list packages\n```\n\n- 安装 apk ⽂件\n\n```\n adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n```\n\n- 卸载 app\n\n```\n adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n```\n\n- 查看 package name，启动应⽤后输⼊命令\n\n```\n windows环境下: adb shell dumpsys activity | findstr \"mFocusedActivity\"\n\n Linux、Mac环境下： adb shell dumpsys activity | grep \"mFocusedActivity\"\n```\n\n- 截图\n\n```\n adb shell screencap /sdcard/screen.png\n```\n\n- app 启动时间测试\n\n```\n 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n```\n\n**adb shell**\n\n- adb shell 进⼊ Android 设备环境\n- 设备基本信息：\n\n```\n 命令：cat /system/build.prop | grep \"product\"\n```\n\n```\n1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n```\n\n- 获取 cpu 信息\n\n```\n命令：cat /proc/cpuinfo\n```\n\n```\n1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n```\n\n- 获取设备内存\n\n```\n命令：cat /proc/meminfo\n```\n\n```\n1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n```\n","source":"_posts/语雀/aekcz3.md","raw":"---\ntitle: Adb 常用命令\nurlname: aekcz3\ndate: '2020-05-30 23:32:30 +0800'\ntags: []\ncategories: []\nabbrlink: 1848810804\n---\n\n- 列出所有的连接设备\n\n```\nadb devices\n```\n\n- 拷⻉⽂件/⽬录到设备\n\n```\n adb push E:/images/test.jpg /sdcard/\n```\n\n- 从设备拷⻉⽂件/⽬录\n\n```\n adb pull /sdcard/images/test.jpg E:\\tmp\n```\n\n- 浏览设备⽇志\n\n```\n adb logcat\n```\n\n- 列出所有包名\n\n```shell\n adb shell pm list packages\n```\n\n- 安装 apk ⽂件\n\n```\n adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n```\n\n- 卸载 app\n\n```\n adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n```\n\n- 查看 package name，启动应⽤后输⼊命令\n\n```\n windows环境下: adb shell dumpsys activity | findstr \"mFocusedActivity\"\n\n Linux、Mac环境下： adb shell dumpsys activity | grep \"mFocusedActivity\"\n```\n\n- 截图\n\n```\n adb shell screencap /sdcard/screen.png\n```\n\n- app 启动时间测试\n\n```\n 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n```\n\n**adb shell**\n\n- adb shell 进⼊ Android 设备环境\n- 设备基本信息：\n\n```\n 命令：cat /system/build.prop | grep \"product\"\n```\n\n```\n1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n```\n\n- 获取 cpu 信息\n\n```\n命令：cat /proc/cpuinfo\n```\n\n```\n1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n```\n\n- 获取设备内存\n\n```\n命令：cat /proc/meminfo\n```\n\n```\n1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n```\n","slug":"语雀/aekcz3","published":1,"updated":"2022-03-03T11:26:07.556Z","_id":"cl0awjjp00002081b4v3o636h","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>列出所有的连接设备</li>\n</ul>\n<pre><code>adb devices\n</code></pre>\n<ul>\n<li>拷⻉⽂件/⽬录到设备</li>\n</ul>\n<pre><code> adb push E:/images/test.jpg /sdcard/\n</code></pre>\n<ul>\n<li>从设备拷⻉⽂件/⽬录</li>\n</ul>\n<pre><code> adb pull /sdcard/images/test.jpg E:\\tmp\n</code></pre>\n<ul>\n<li>浏览设备⽇志</li>\n</ul>\n<pre><code> adb logcat\n</code></pre>\n<ul>\n<li>列出所有包名</li>\n</ul>\n<pre><code class=\"shell\"> adb shell pm list packages\n</code></pre>\n<ul>\n<li>安装 apk ⽂件</li>\n</ul>\n<pre><code> adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n</code></pre>\n<ul>\n<li>卸载 app</li>\n</ul>\n<pre><code> adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n</code></pre>\n<ul>\n<li>查看 package name，启动应⽤后输⼊命令</li>\n</ul>\n<pre><code> windows环境下: adb shell dumpsys activity | findstr &quot;mFocusedActivity&quot;\n\n Linux、Mac环境下： adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;\n</code></pre>\n<ul>\n<li>截图</li>\n</ul>\n<pre><code> adb shell screencap /sdcard/screen.png\n</code></pre>\n<ul>\n<li>app 启动时间测试</li>\n</ul>\n<pre><code> 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n</code></pre>\n<p><strong>adb shell</strong></p>\n<ul>\n<li>adb shell 进⼊ Android 设备环境</li>\n<li>设备基本信息：</li>\n</ul>\n<pre><code> 命令：cat /system/build.prop | grep &quot;product&quot;\n</code></pre>\n<pre><code>1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n</code></pre>\n<ul>\n<li>获取 cpu 信息</li>\n</ul>\n<pre><code>命令：cat /proc/cpuinfo\n</code></pre>\n<pre><code>1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n</code></pre>\n<ul>\n<li>获取设备内存</li>\n</ul>\n<pre><code>命令：cat /proc/meminfo\n</code></pre>\n<pre><code>1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<ul>\n<li>列出所有的连接设备</li>\n</ul>\n<pre><code>adb devices\n</code></pre>\n<ul>\n<li>拷⻉⽂件/⽬录到设备</li>\n</ul>\n<pre><code> adb push E:/images/test.jpg /sdcard/\n</code></pre>\n<ul>\n<li>从设备拷⻉⽂件/⽬录</li>\n</ul>\n<pre><code> adb pull /sdcard/images/test.jpg E:\\tmp\n</code></pre>\n<ul>\n<li>浏览设备⽇志</li>\n</ul>\n<pre><code> adb logcat\n</code></pre>\n<ul>\n<li>列出所有包名</li>\n</ul>\n<pre><code class=\"shell\"> adb shell pm list packages\n</code></pre>\n<ul>\n<li>安装 apk ⽂件</li>\n</ul>\n<pre><code> adb install [apk路径]\n\n 覆盖安装： adb install -r [apk路径]\n</code></pre>\n<ul>\n<li>卸载 app</li>\n</ul>\n<pre><code> adb uninstall com.xx.xx\n\n 保留app数据：  adb uninstall -k com.xx.xx\n</code></pre>\n<ul>\n<li>查看 package name，启动应⽤后输⼊命令</li>\n</ul>\n<pre><code> windows环境下: adb shell dumpsys activity | findstr &quot;mFocusedActivity&quot;\n\n Linux、Mac环境下： adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;\n</code></pre>\n<ul>\n<li>截图</li>\n</ul>\n<pre><code> adb shell screencap /sdcard/screen.png\n</code></pre>\n<ul>\n<li>app 启动时间测试</li>\n</ul>\n<pre><code> 1. logcat⽅法，命令：\n\n  adb shell logcat -v time |findstr ActivityManager\n  取第⼀个activity的启动时间点，最后⼀个activity的展示完成的时间点，相减得到启动时间。（系统⻆度）\n\n 2. 录屏⽅式\n\n ⼿⼯点击app到客户端启动，多次取平均值（⽤户⻆度）\n</code></pre>\n<p><strong>adb shell</strong></p>\n<ul>\n<li>adb shell 进⼊ Android 设备环境</li>\n<li>设备基本信息：</li>\n</ul>\n<pre><code> 命令：cat /system/build.prop | grep &quot;product&quot;\n</code></pre>\n<pre><code>1 ro.product.model          ⼿机代号也就是⼿机名\n2 ro.product.brand          ⼿机品牌\n3 ro.product.name           ⼿机正式名称\n4 ro.product.device         ⼿机采⽤的设备\n5 ro.product.board          ⼿机采⽤的处理器\n6 ro.product.cpu.abi        cpu的版本\n7 ro.product.cpu.abi2       cpu的品牌\n8 ro.product.manufacturer   ⼿机制造商\n9 o.product.locale.language ⼿机默认语⾔\n10 ro.product.locale.region 地区语⾔\n11 ro.build.product         建⽴产品\n</code></pre>\n<ul>\n<li>获取 cpu 信息</li>\n</ul>\n<pre><code>命令：cat /proc/cpuinfo\n</code></pre>\n<pre><code>1 processor：     系统中逻辑处理核的编号。对于单核处理器，则课认为是其CPU编号，对于多核处理器则可以是物理核、或者使⽤超线程技术虚拟的逻辑核\n2 vendor_id：     CPU制造商\n3 cpu family：    CPU产品系列代号\n4 model：         CPU属于其系列中的哪⼀代的代号\n5 model name：    CPU属于的名字及其编号、标称主频\n6 stepping ：     CPU属于制作更新版本\n7 cpu MHz ：      CPU的实际使⽤主频\n8 cache size ：   CPU⼆级缓存⼤⼩\n9 physical id ：  单个CPU的标号\n10 siblings ：    单个CPU逻辑物理核数\n11 core id ：     当前物理核在其所处CPU中的编号，这个编号不⼀定连续\n12 cpu cores ：   该逻辑核所处CPU的物理核数\n13 apicid ：      ⽤来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不⼀定连续\n14 fpu ：         是否具有浮点运算单元（Floating Point Unit）\n15 fpu_exception ：是否⽀持浮点计算异常\n16 cpuid level ：  执⾏cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容\n17 wp ：           表明当前CPU是否在内核态⽀持对⽤户空间的写保护（Write Protection）\n18 flags ：        当前CPU⽀持的功能\n19 bogomips ：     在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）\n20 clflush size ： 每次刷新缓存的⼤⼩单位\n21 cache_alignment：缓存地址对⻬单位\n22 address sizes ： 可访问地址空间位数\n</code></pre>\n<ul>\n<li>获取设备内存</li>\n</ul>\n<pre><code>命令：cat /proc/meminfo\n</code></pre>\n<pre><code>1 MemTotal:     所有可⽤RAM⼤⼩（即物理内存减去⼀些预留位和内核的⼆进制代码⼤⼩）\n2 MemFree:      LowFree与HighFree的总和，被系统留着未使⽤的内存\n3 Buffers:      ⽤来给⽂件做缓冲⼤⼩\n4 Cached:       被⾼速缓冲存储器（cache memory）⽤的内存的⼤⼩（等于 diskcache minus SwapCache ）\n5 SwapCached:   被⾼速缓冲存储器（cache memory）⽤的交换空间的⼤⼩，已经被交换出来的内存，但仍然被存放在swapfile中。⽤来在需要的时候很快的被替换⽽不需要再次打开\n6 Active:       在活跃使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，除⾮⾮常必要否则不会被移作他⽤\n7 Inactive:     在不经常使⽤中的缓冲或⾼速缓冲存储器⻚⾯⽂件的⼤⼩，可能被⽤于其他途径.\n8 HighTotal:\n9 HighFree:     该区域不是直接映射到内核空间。内核必须使⽤不同的⼿法使⽤该段内存。\n10 LowTotal:\n11 LowFree:     低位可以达到⾼位内存⼀样的作⽤，⽽且它还能够被内核⽤来记录⼀些⾃⼰的数据结构。Among many\n12 other things, it is where everything from the Slab is allocated\n13 SwapTotal:   交换空间的总⼤⼩\n14 SwapFree:    未被使⽤交换空间的⼤⼩\n15 Dirty:       等待被写回到磁盘的内存⼤⼩。\n16 Writeback:   正在被写回到磁盘的内存⼤⼩。\n17 AnonPages：  未映射⻚的内存⼤⼩\n18 Mapped:      设备和⽂件等映射的⼤⼩。\n19 Slab:        内核数据结构缓存的⼤⼩，可以减少申请和释放内存带来的消耗。\n20 SReclaimable:可收回Slab的⼤⼩\n21 SUnreclaim： 不可收回Slab的⼤⼩（SUnreclaim+SReclaimable＝Slab）\n22 PageTables： 管理内存分⻚⻚⾯的索引表的⼤⼩。\n23 NFS_Unstable:不稳定⻚表的⼤⼩\n24 VmallocTotal:可以vmalloc虚拟内存⼤⼩\n25 VmallocUsed: 已经被使⽤的虚拟内存⼤⼩。\n26 VmallocChunk: largest contigious block of vmalloc area which is free\n</code></pre>\n"},{"title":"CSS 主流布局","urlname":"aq3d2d","date":"2020-03-29T06:29:55.000Z","abbrlink":2616650365,"_content":"\n## 居中布局\n\n---\n\ntitle: 主流 CSS 布局(水平居中、垂直居中、居中 )\ndate: 2019-11-01 14:11:51\ntags:\n\n- CSS\n- CSS 布局\n\n- html 页面的整体结构或骨架\n- 布局不是某个技术内容 而是一种设计思想\n\n[ 布局方式 ]\n\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n\n### 什么是水平居中布局\n\n水平居中布局   元素相对于页面/元素相对于父元素水平居中\n[ 实现方式 ]\n\n- inline-block + text-align 属性配合使用\n\n**注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示**\n**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n    text-align: center;\n  }\n  .child {\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n    display: inline-block;\n  }\n</style>\n<body>\n  <!-- 居中布局 -->\n  <!-- 方法一： inline-block + text-align 属性配合使用 -->\n\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n- table + margin 属性配合使用\n\n**注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效**\n\n**解决方法：考虑第一种或第三种解决方案**\n\n[ 拓展 ]  CSS 中使元素脱离文档流的方式\n\n- 将元素设置浮动 float\n- 将元素设置为绝对定位 position: absolute\n- 将元素设置为固定定位 position: fixed\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n  }\n  .child {\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 方法二： gtable + margin 属性配合使用 */\n    /* display的值 为 table 或 block */\n    display: table;\n    /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n    margin: 0 auto;\n  }\n</style>\n```\n\n- absolute + transform 属性配合使用\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n**解决方法：考虑第一种或第二种解决方案 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  .parent {\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 相对定位 */\n    position: relative;\n  }\n\n  .child {\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 当把当前元素设置为绝对定位以后\n    - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n    - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n    */\n    position: absolute;\n    left: 50%;\n    /* 水平方向平移 */\n    transform: translateX(-50%);\n    /* margin-left: -50%; */\n  }\n</style>\n```\n\n- ... ...\n\n### 什么是垂直居中布局\n\n垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的\n[ 实现方式 ]\n\n- table-cell + vertical-align 属性配合使用\n\n**注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示**\n\n**如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    /*方法一： table-cell + vertical-align 属性配合使用 */\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n    /* display 属性：\n       - table: 设置当前元素为<table>元素\n       - table-cell：设置当前元素为<td>元素  单元格\n       - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n    \n     */\n    display: table-cell;\n    /* \n        vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n        - top： 顶部对齐\n        - middle: 居中对齐\n        - bottom: 底部对齐 \n     */\n    vertical-align: middle;\n  }\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n- absolute + transform 属性配合使用\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n\n**解决方法：考虑第一种解决方案 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n\n    position: relative;\n  }\n  /* 方法二： absolute + transform 属性配合使用 */\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n\n    position: absolute;\n    top: 50%;\n    /* 垂直方向 */\n    transform: translateY(-50%);\n  }\n</style>\n```\n\n### 什么是居中布局\n\n居中布局：（ 水平 + 垂直 ）居中\n[ 实现方式 ]\n\n- display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中\n\n**注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 实现垂直居中  */\n    /* <td> */\n    display: table-cell;\n    vertical-align: middle;\n  }\n\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 实现水居中 */\n    /* <table> */\n    /* display: table; */\n    display: block;\n    margin: 0 auto;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n- absolute + transform 属性实现水平和垂直方向的居中\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 相对定位 不脱离文档流*/\n    position: relative;\n  }\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 绝对定位 ———— 子绝父相 */\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n  }\n</style>\n```\n\n## 多列布局\n\n---\n\ntitle: 多列布局\ndate: 2019-11-01 20:42:12\ntags:\n\n- CSS\n- CSS 布局\n\n---\n\n### 什么是多列布局\n\n——几个元素呈现水平方式排列的效果\n[ 从元素分类角度 ]\n\n- 块级元素   默认垂直排列     设置浮动实现水平方式排列\n- 内联元素   默认水平方式排列\n- 行内块元素   默认水平方式排列\n\n[ 多列布局分类 ]\n\n- 两列布局   一列定宽，另外一列宽度自适应\n- 三列布局\n  - 两列定宽且相邻，另外一列宽度自适应\n  - 两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局\n- 等分布局   每一列宽度相同\n- 等高布局   每一列高度相同\n- CSS 3 三列布局\n\n### 什么是两列布局\n\n—— 左列确定宽度，右列自动填满剩余空间\n\n### 两列布局的实现\n\n#### float + margin 属性实现\n\n\\*\\*   此方案的优缺点\n优点：实现方式简单\n缺点：\n\n1. 自适应元素 margin 属性值必须与定宽元素的 width 值保持一致   高耦合\n1. 定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好\n1. 如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉\n\n\\*\\*\n\n```html\n    <style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n    .parent {\n        background-color: #eee;\n    }\n    .left,\n    .right {\n        height: 500px;\n    }\n\n    .left {\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    }\n    .right {\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    }\n    /* .inner {\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    } */\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右： 自适应\n          <!-- <div class=\"inner\"></div> -->\n        </div>\n    </div>\n</body>\n```\n\n** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动   没有解决高耦合的问题 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n  }\n  .left,\n  .right {\n    height: 200px;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n    /* 脱离文档流 */\n    float: left;\n    /* margin-left: -100%; */\n    /* 提高显示层级 */\n    position: relative;\n  }\n  .right-fix {\n    /* 由于设置浮动，默认宽度为 0 */\n    /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n    width: 100%;\n    /* 向左移动 此时覆盖掉 左侧*/\n    margin-left: -300px;\n    float: left;\n    background-color: #000000;\n  }\n  .right {\n    /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n    margin-left: 300px;\n    /* padding-left: 300px; */\n    background-color: #ff0000;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 定宽</div>\n    <div class=\"right-fix\">\n      <div class=\"right\">右： 自适应</div>\n    </div>\n  </div>\n</body>\n```\n\n#### float + overflow 属性实现\n\n**   此方案的优缺点\n优点：没有第一种解决方案中存在的问题\n缺点：overflow 属性开启 BFC 模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启 BFC 模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题\n**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n    height: 500px;\n  }\n  .left,\n  .right {\n    height: 300px;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n    float: left;\n  }\n  .right {\n    background-color: #ff0000;\n    /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n    overflow: hidden;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 左对齐</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n</body>\n```\n\n#### 使用 display 属性的 table 相关值\n\n**   此方案的优缺点\n优点：浏览器的兼容性比较好\n缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题\n**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n    height: 500px;\n\n    /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n    display: table;\n    /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n    table-layout: fixed;\n    width: 100%;\n  }\n  .left,\n  .right {\n    height: 300px;\n\n    display: table-cell;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n  }\n  .right {\n    background-color: #ff0000;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 左对齐</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n</body>\n```\n\n### 什么是三列布局\n\n—— 两列定宽且相邻，另外一列宽度自适应\n\n### 三列布局的实现\n\n实现方式与两列布局实现方式类似\n\n#### float + margin 属性实现\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n    height: 500px;\n  }\n  .left,\n  .center,\n  .right {\n    height: 300px;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n    /*  */\n    float: left;\n  }\n  .center {\n    width: 300px;\n    background-color: #ffff00;\n\n    float: left;\n  }\n  .right {\n    background-color: #ff0000;\n\n    margin-left: 600px;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 定宽</div>\n    <div class=\"center\">中：定宽</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n</body>\n```\n\n#### float + overflow 属性实现\n\n```html\n略，参考两列布局\n```\n\n#### 使用 display 属性的 table 相关值\n\n```html\n略，参考两列布局\n```\n\n### 什么是等分布局\n\n—— 一行被分成若干列，每一列的宽度相同\n\n### 等分布局的实现\n\n- float 属性实现等分布局效果\n- display 属性的值有关 table 的值实现\n\n#### float 属性实现等分布局效果\n\n```html\n<style>\n  /* \n         *   \n         *\n         */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  .parent {\n    background-color: #eee;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n    width: 20%;\n    float: left;\n  }\n  .column2 {\n    background-color: #ff66ff;\n  }\n  .column3 {\n    background-color: #00ffff;\n  }\n  .column1 {\n    background-color: #ffff00;\n  }\n  .column5 {\n    background-color: #ff0000;\n  }\n  .column6 {\n    background-color: #00ff00;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"column1\">1</div>\n    <div class=\"column2\">2</div>\n    <div class=\"column3\">3</div>\n    <div class=\"column5\">5</div>\n    <div class=\"column6\">6</div>\n  </div>\n</body>\n```\n\n#### display 属性的值有关 table 的值实现\n\n```html\n<style>\n  /* \n     * \n     *  \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  .parent {\n    background-color: #eee;\n\n    width: 100%;\n    /* <table> 元素 */\n    display: table;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n\n    /* <td> 元素 */\n    display: table-cell;\n  }\n  .column2 {\n    background-color: #ff66ff;\n  }\n  .column3 {\n    background-color: #00ffff;\n  }\n  .column1 {\n    background-color: #ffff00;\n  }\n  .column5 {\n    background-color: #ff0000;\n  }\n  .column6 {\n    background-color: #00ff00;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"column1\">1</div>\n    <div class=\"column2\">2</div>\n    <div class=\"column3\">3</div>\n    <div class=\"column5\">5</div>\n    <div class=\"column6\">6</div>\n  </div>\n</body>\n```\n\n#### 等分布局的空白间距\n\n[ 方法一 代码修改 ]\n\n```html\n<style>\n  /* \n     * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n     *  \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent-fix {\n    /* 溢出隐藏 */\n    overflow: hidden;\n  }\n  .parent {\n    background-color: #eee;\n\n    /* 解决高度塌陷 */\n    overflow: hidden;\n    /* height: 500px; */\n    margin-left: -20px;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n    width: 20%;\n    float: left;\n\n    padding-left: 20px;\n    /* margin-left: 20px;  */\n    /*\n            box-sizing 属性 \n           */\n    box-sizing: border-box;\n  }\n  .column2 .inner {\n    background-color: #ff66ff;\n  }\n  .column3 .inner {\n    background-color: #00ffff;\n  }\n  .column1 .inner {\n    background-color: #ffff00;\n  }\n  .column5 .inner {\n    background-color: #ff0000;\n  }\n  .column6 .inner {\n    background-color: #00ff00;\n  }\n  .inner {\n    height: 500px;\n  }\n</style>\n<body>\n  <div class=\"parent-fix\">\n    <div class=\"parent\">\n      <div class=\"column1\"><div class=\"inner\"></div></div>\n      <div class=\"column2\"><div class=\"inner\"></div></div>\n      <div class=\"column3\"><div class=\"inner\"></div></div>\n      <div class=\"column5\"><div class=\"inner\"></div></div>\n      <div class=\"column6\"><div class=\"inner\"></div></div>\n    </div>\n  </div>\n</body>\n```\n\n[ 方法二 代码修改 ]\n\n```html\n<style>\n  /* \n     * 实际开发中 parent 元素 width 的值是有一个范围\n     * 在此案例中 parent-fix 的宽度为  1369px - 20px\n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent-fix {\n    overflow: hidden;\n  }\n  .parent {\n    background-color: #eee;\n\n    width: 1369px;\n    /* <table> 元素 */\n    display: table;\n    margin-left: -20px;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n\n    /* <td> 元素 */\n    display: table-cell;\n\n    padding-left: 20px;\n    box-sizing: border-box;\n  }\n  .column2 .inner {\n    background-color: #ff66ff;\n  }\n  .column3 .inner {\n    background-color: #00ffff;\n  }\n  .column1 .inner {\n    background-color: #ffff00;\n  }\n  .column5 .inner {\n    background-color: #ff0000;\n  }\n  .column6 .inner {\n    background-color: #00ff00;\n  }\n  .inner {\n    height: 500px;\n  }\n</style>\n<body>\n  <div class=\"parent-fix\">\n    <div class=\"parent\">\n      <div class=\"column1\"><div class=\"inner\"></div></div>\n      <div class=\"column2\"><div class=\"inner\"></div></div>\n      <div class=\"column3\"><div class=\"inner\"></div></div>\n      <div class=\"column5\"><div class=\"inner\"></div></div>\n      <div class=\"column6\"><div class=\"inner\"></div></div>\n    </div>\n  </div>\n</body>\n```\n\n### 什么是等高布局\n\n—— 一行被分成若干列，每一列的高度相同\n\n### 等高布局的实现\n\n- display 属性的值有关 table 的值实现\n- padding + margin 实现等高布局效果\n\n#### display 属性的值有关 table 的值实现\n\n```html\n<style>\n  /* \n     * 表格中的单元格 默认是等高的，无论内容多少\n     * \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n\n    /* <table> 元素 */\n    display: table;\n    table-layout: fixed;\n  }\n  .left,\n  .right {\n    width: 300px;\n\n    /* <td> 元素 */\n    display: table-cell;\n  }\n  .left {\n    background-color: #ffff00;\n  }\n  .right {\n    background-color: #ff66ff;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">imooc</div>\n    <div class=\"right\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae\n      dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at\n      est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!\n    </div>\n  </div>\n</body>\n```\n\n#### padding + margin 实现等高布局效果\n\n```html\n    <style>\n    /*\n     *\n     *\n     *\n     */\n    * {\n       margin: 0;\n       padding: 0;\n    }\n\n    .parent {\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    }\n    .left,\n    .right {\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px;\n        margin-bottom: -99999px;\n    }\n    .left {\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff66ff;\n    }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n    </div>\n</body>\n```\n\n### CSS 3 多列布局\n\n[ column 属性 ]\n\n——column 属性是一个简写属性   包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度\n\n- column-count 属性 用于设置列的数量或允许的最大列数\n\n- auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定\n- number: 必须是正整数，用于表示定义列的数量\n\n- column-width 属性 用于设置列的宽度或列的最小宽度\n  - auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定\n  - length: 必须是正整数，用于表示定义列的宽度\n\n```html\n<style>\n  /* \n     *  \n     *  \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 6 auto;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 300px;\n  }\n  .column2 {\n    background-color: #ff66ff;\n  }\n  .column3 {\n    background-color: #00ffff;\n  }\n  .column1 {\n    background-color: #ffff00;\n  }\n  .column5 {\n    background-color: #ff0000;\n  }\n  .column6 {\n    background-color: #00ff00;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"column1\"></div>\n    <div class=\"column2\"></div>\n    <div class=\"column3\"></div>\n    <div class=\"column6\"></div>\n    <div class=\"column5\"></div>\n    <div class=\"column6\"></div>\n  </div>\n</body>\n```\n\n[ 列的间距 ]\n\n- column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置\n  - normal:   用于表示使用浏览器定义列的默认间距，默认值 1em\n  - length: 必须是正整数，用于表示定义列之间的间距\n\n```html\n<style>\n  .parent {\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n  }\n</style>\n```\n\n[列的边框 column-rule ]\n\n—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。\n\n- column-rule-width: 列于列之间的边框宽度\n- column-rule-color: 列于列之间的边框颜色\n- column-rule-style: 列于列之间的边框样式\n\n```html\n<style>\n  .parent {\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n\n    /* column-rule-width: 5px;\n       column-rule-color: #ff0000;\n       column-rule-style: double; */\n    /* 简写属性 */\n    column-rule: 5px #ff0000 double;\n  }\n</style>\n```\n\n[ 横跨多列 ]\n\n- column-span 属性 用于定义一个列元素是否跨列\n  - none：表示元素不跨列\n  - all: 表示元素跨所有列\n\n```html\n<style>\n  .column6 {\n    background-color: #00ff00;\n    column-span: all;\n  }\n</style>\n```\n\n[ 列的填充 ]\n\n- column-fill 属性用于定义列的高度由内容决定，还是同一高度\n  - auto: 默认值，列的高度由内容绝对\n  - balance: 列的高度根据内容最多的一列的高度为准\n\n```html\n<style>\n  .column6,\n  .column7,\n  .column8,\n  .column9 {\n    /* 浏览器兼容不好 包括chrome浏览器 */\n    column-fill: balance;\n  }\n</style>\n<div class=\"parent\">\n  <div class=\"column6\">\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum\n    ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe\n    harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?\n  </div>\n\n  <div class=\"column7\">\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure\n    dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente\n    necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam\n    unde sed autem.\n  </div>\n\n  <div class=\"column8\">\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat\n    blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi\n    eveniet, error quis ex cum ut nulla sunt aut saepe? Lorem ipsum dolor sit\n    amet consectetur, adipisicing elit. Facilis debitis officia distinctio\n    cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic\n    alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n  </div>\n  <div class=\"column9\">\n    Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum.\n    Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit\n    perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa\n    vitae accusantium nesciunt.\n  </div>\n</div>\n```\n\n## 经典布局\n\n### 什么是圣杯布局\n\n- 布局效果类似于圣杯而得名，也叫做三行三列布局。\n- 定宽 — 自适应 — 定宽\n\n![圣杯布局.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png#align=left&display=inline&height=634&name=%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.png&originHeight=634&originWidth=1184&size=80271&status=done&style=none&width=1184)\n\n[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]\n\n```html\n   <style>\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同\n     *\n     */\n    * {\n       margin: 0;\n       padding: 0;\n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        background-color: #eee;\n        padding: 10px;\n    }\n    .left,\n    .center,\n    .right {\n        height: 300px;\n    }\n    .left,\n    .right {\n        width: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    }\n    .center {\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    .right {\n        background-color: #ff0000;\n        float: right;\n    }\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    </style>\n</head>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n        <div class=\"center\"> 中：定宽 </div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n```\n\n### 圣杯布局的实现  \n\n```html\n<style>\n  /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .header,\n  .footer {\n    height: 100px;\n    background-color: #000;\n  }\n  .parent {\n    background-color: #eee;\n    /* 解决父级元素高度塌陷 */\n    height: 300px;\n    /* 对应 left 的宽度 */\n    margin-left: 300px;\n    /* 对应 right 的宽度  */\n    margin-right: 300px;\n  }\n  .left,\n  .center,\n  .right {\n    height: 300px;\n    /* 使三个div 浮动 */\n    float: left;\n  }\n  .left,\n  .right {\n    width: 300px;\n  }\n\n  .left {\n    background-color: #00ffff;\n    /* 将当前元素从当前行移动到上一行同一个位置*/\n    margin-left: -100%;\n    /* 将当前元素移动到理想位置 */\n    position: relative;\n    left: -300px;\n  }\n  .center {\n    width: 100%;\n    background-color: #ffff00;\n  }\n  .right {\n    background-color: #ff0000;\n    margin-left: -300px;\n    position: relative;\n    right: -300px;\n  }\n</style>\n<body>\n  <div class=\"header\"></div>\n  <div class=\"parent\">\n    <div class=\"center\">中：定宽</div>\n    <div class=\"left\">左： 定宽</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n  <div class=\"footer\"></div>\n</body>\n```\n\n### 什么是双飞翼布局\n\n—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。\n\n###   双飞翼布局的实现  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>双飞翼布局</title>\n    <style>\n        /*\n         *\n         *\n         */\n    * {\n       margin: 0;\n       padding: 0;\n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        height: 300px;\n        background-color: #eee;\n\n    }\n    .left {\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    }\n    .center {\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    }\n    .right {\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    }\n    .inner {\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    </style>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"center\">\n            <div class=\"inner\">中：定宽</div>\n        </div>\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n</html>\n```\n\n## 全屏布局\n\n---\n\ntitle: 全屏布局\ndate: 2019-11-01 20:43:24\ntags:\n\n- CSS\n- CSS 布局\n\n---\n\n### 什么是全屏布局？\n\n—— HTML 页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。\n![全屏布局.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png#align=left&display=inline&height=639&name=%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80.png&originHeight=639&originWidth=1228&size=85361&status=done&style=none&width=1228)\n\n```html\n<style>\n  /* \n     * .content .right {\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        }\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n  html,\n  body {\n    margin: 0;\n    padding: 0;\n    /* 避免全屏出现滚动条*/\n    overflow: hidden;\n  }\n  header {\n    height: 100px;\n    background-color: #eee;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .content {\n    /* 提供滚动条 */\n    overflow: auto;\n    background-color: rgb(14, 197, 221);\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 100px;\n    bottom: 100px;\n  }\n  .content .left {\n    width: 300px;\n    height: 100%;\n    background-color: rgb(247, 54, 54);\n\n    position: fixed;\n    left: 0;\n    top: 100px;\n    bottom: 100px;\n  }\n  .content .right {\n    height: 1000px;\n    background-color: rgb(243, 239, 12);\n    margin-left: 300px;\n  }\n  footer {\n    height: 100px;\n    background-color: rgb(39, 38, 38);\n\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n</style>\n<body>\n  <header></header>\n  <div class=\"content\">\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n  </div>\n  <footer></footer>\n</body>\n```\n\n## 总结\n\n### 居中布局\n\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n\n### 多列布局\n\n- 两列布局\n- 三列布局\n- 等分布局\n- 等高布局\n- CSS 3 多列布局\n\n### 经典布局\n\n- 圣杯布局\n- 双飞翼布局\n\n### 全屏布局\n\n### 未涉及的布局\n\n- 网格布局\n- 弹性盒子布局 CSS3\n\n** \\*\\***没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式\\*\\*\n","source":"_posts/语雀/aq3d2d.md","raw":"---\ntitle: CSS 主流布局\nurlname: aq3d2d\ndate: '2020-03-29 14:29:55 +0800'\ntags: []\ncategories: []\nabbrlink: 2616650365\n---\n\n## 居中布局\n\n---\n\ntitle: 主流 CSS 布局(水平居中、垂直居中、居中 )\ndate: 2019-11-01 14:11:51\ntags:\n\n- CSS\n- CSS 布局\n\n- html 页面的整体结构或骨架\n- 布局不是某个技术内容 而是一种设计思想\n\n[ 布局方式 ]\n\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n\n### 什么是水平居中布局\n\n水平居中布局   元素相对于页面/元素相对于父元素水平居中\n[ 实现方式 ]\n\n- inline-block + text-align 属性配合使用\n\n**注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示**\n**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n    text-align: center;\n  }\n  .child {\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n    display: inline-block;\n  }\n</style>\n<body>\n  <!-- 居中布局 -->\n  <!-- 方法一： inline-block + text-align 属性配合使用 -->\n\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n- table + margin 属性配合使用\n\n**注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效**\n\n**解决方法：考虑第一种或第三种解决方案**\n\n[ 拓展 ]  CSS 中使元素脱离文档流的方式\n\n- 将元素设置浮动 float\n- 将元素设置为绝对定位 position: absolute\n- 将元素设置为固定定位 position: fixed\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n  }\n  .child {\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 方法二： gtable + margin 属性配合使用 */\n    /* display的值 为 table 或 block */\n    display: table;\n    /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n    margin: 0 auto;\n  }\n</style>\n```\n\n- absolute + transform 属性配合使用\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n**解决方法：考虑第一种或第二种解决方案 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  .parent {\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 相对定位 */\n    position: relative;\n  }\n\n  .child {\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 当把当前元素设置为绝对定位以后\n    - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n    - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n    */\n    position: absolute;\n    left: 50%;\n    /* 水平方向平移 */\n    transform: translateX(-50%);\n    /* margin-left: -50%; */\n  }\n</style>\n```\n\n- ... ...\n\n### 什么是垂直居中布局\n\n垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的\n[ 实现方式 ]\n\n- table-cell + vertical-align 属性配合使用\n\n**注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示**\n\n**如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    /*方法一： table-cell + vertical-align 属性配合使用 */\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n    /* display 属性：\n       - table: 设置当前元素为<table>元素\n       - table-cell：设置当前元素为<td>元素  单元格\n       - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n    \n     */\n    display: table-cell;\n    /* \n        vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n        - top： 顶部对齐\n        - middle: 居中对齐\n        - bottom: 底部对齐 \n     */\n    vertical-align: middle;\n  }\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n- absolute + transform 属性配合使用\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好**\n\n**解决方法：考虑第一种解决方案 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n\n    position: relative;\n  }\n  /* 方法二： absolute + transform 属性配合使用 */\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n\n    position: absolute;\n    top: 50%;\n    /* 垂直方向 */\n    transform: translateY(-50%);\n  }\n</style>\n```\n\n### 什么是居中布局\n\n居中布局：（ 水平 + 垂直 ）居中\n[ 实现方式 ]\n\n- display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中\n\n**注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 实现垂直居中  */\n    /* <td> */\n    display: table-cell;\n    vertical-align: middle;\n  }\n\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 实现水居中 */\n    /* <table> */\n    /* display: table; */\n    display: block;\n    margin: 0 auto;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n- absolute + transform 属性实现水平和垂直方向的居中\n\n**注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 相对定位 不脱离文档流*/\n    position: relative;\n  }\n  .child {\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 绝对定位 ———— 子绝父相 */\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n  }\n</style>\n```\n\n## 多列布局\n\n---\n\ntitle: 多列布局\ndate: 2019-11-01 20:42:12\ntags:\n\n- CSS\n- CSS 布局\n\n---\n\n### 什么是多列布局\n\n——几个元素呈现水平方式排列的效果\n[ 从元素分类角度 ]\n\n- 块级元素   默认垂直排列     设置浮动实现水平方式排列\n- 内联元素   默认水平方式排列\n- 行内块元素   默认水平方式排列\n\n[ 多列布局分类 ]\n\n- 两列布局   一列定宽，另外一列宽度自适应\n- 三列布局\n  - 两列定宽且相邻，另外一列宽度自适应\n  - 两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局\n- 等分布局   每一列宽度相同\n- 等高布局   每一列高度相同\n- CSS 3 三列布局\n\n### 什么是两列布局\n\n—— 左列确定宽度，右列自动填满剩余空间\n\n### 两列布局的实现\n\n#### float + margin 属性实现\n\n\\*\\*   此方案的优缺点\n优点：实现方式简单\n缺点：\n\n1. 自适应元素 margin 属性值必须与定宽元素的 width 值保持一致   高耦合\n1. 定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好\n1. 如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉\n\n\\*\\*\n\n```html\n    <style>\n    * {\n        margin: 0;\n        padding: 0;\n    }\n    .parent {\n        background-color: #eee;\n    }\n    .left,\n    .right {\n        height: 500px;\n    }\n\n    .left {\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    }\n    .right {\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    }\n    /* .inner {\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    } */\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右： 自适应\n          <!-- <div class=\"inner\"></div> -->\n        </div>\n    </div>\n</body>\n```\n\n** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动   没有解决高耦合的问题 **\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n  }\n  .left,\n  .right {\n    height: 200px;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n    /* 脱离文档流 */\n    float: left;\n    /* margin-left: -100%; */\n    /* 提高显示层级 */\n    position: relative;\n  }\n  .right-fix {\n    /* 由于设置浮动，默认宽度为 0 */\n    /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n    width: 100%;\n    /* 向左移动 此时覆盖掉 左侧*/\n    margin-left: -300px;\n    float: left;\n    background-color: #000000;\n  }\n  .right {\n    /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n    margin-left: 300px;\n    /* padding-left: 300px; */\n    background-color: #ff0000;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 定宽</div>\n    <div class=\"right-fix\">\n      <div class=\"right\">右： 自适应</div>\n    </div>\n  </div>\n</body>\n```\n\n#### float + overflow 属性实现\n\n**   此方案的优缺点\n优点：没有第一种解决方案中存在的问题\n缺点：overflow 属性开启 BFC 模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启 BFC 模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题\n**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n    height: 500px;\n  }\n  .left,\n  .right {\n    height: 300px;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n    float: left;\n  }\n  .right {\n    background-color: #ff0000;\n    /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n    overflow: hidden;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 左对齐</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n</body>\n```\n\n#### 使用 display 属性的 table 相关值\n\n**   此方案的优缺点\n优点：浏览器的兼容性比较好\n缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题\n**\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n    height: 500px;\n\n    /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n    display: table;\n    /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n    table-layout: fixed;\n    width: 100%;\n  }\n  .left,\n  .right {\n    height: 300px;\n\n    display: table-cell;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n  }\n  .right {\n    background-color: #ff0000;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 左对齐</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n</body>\n```\n\n### 什么是三列布局\n\n—— 两列定宽且相邻，另外一列宽度自适应\n\n### 三列布局的实现\n\n实现方式与两列布局实现方式类似\n\n#### float + margin 属性实现\n\n```html\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n    height: 500px;\n  }\n  .left,\n  .center,\n  .right {\n    height: 300px;\n  }\n  .left {\n    width: 300px;\n    background-color: #00ffff;\n    /*  */\n    float: left;\n  }\n  .center {\n    width: 300px;\n    background-color: #ffff00;\n\n    float: left;\n  }\n  .right {\n    background-color: #ff0000;\n\n    margin-left: 600px;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">左： 定宽</div>\n    <div class=\"center\">中：定宽</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n</body>\n```\n\n#### float + overflow 属性实现\n\n```html\n略，参考两列布局\n```\n\n#### 使用 display 属性的 table 相关值\n\n```html\n略，参考两列布局\n```\n\n### 什么是等分布局\n\n—— 一行被分成若干列，每一列的宽度相同\n\n### 等分布局的实现\n\n- float 属性实现等分布局效果\n- display 属性的值有关 table 的值实现\n\n#### float 属性实现等分布局效果\n\n```html\n<style>\n  /* \n         *   \n         *\n         */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  .parent {\n    background-color: #eee;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n    width: 20%;\n    float: left;\n  }\n  .column2 {\n    background-color: #ff66ff;\n  }\n  .column3 {\n    background-color: #00ffff;\n  }\n  .column1 {\n    background-color: #ffff00;\n  }\n  .column5 {\n    background-color: #ff0000;\n  }\n  .column6 {\n    background-color: #00ff00;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"column1\">1</div>\n    <div class=\"column2\">2</div>\n    <div class=\"column3\">3</div>\n    <div class=\"column5\">5</div>\n    <div class=\"column6\">6</div>\n  </div>\n</body>\n```\n\n#### display 属性的值有关 table 的值实现\n\n```html\n<style>\n  /* \n     * \n     *  \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  .parent {\n    background-color: #eee;\n\n    width: 100%;\n    /* <table> 元素 */\n    display: table;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n\n    /* <td> 元素 */\n    display: table-cell;\n  }\n  .column2 {\n    background-color: #ff66ff;\n  }\n  .column3 {\n    background-color: #00ffff;\n  }\n  .column1 {\n    background-color: #ffff00;\n  }\n  .column5 {\n    background-color: #ff0000;\n  }\n  .column6 {\n    background-color: #00ff00;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"column1\">1</div>\n    <div class=\"column2\">2</div>\n    <div class=\"column3\">3</div>\n    <div class=\"column5\">5</div>\n    <div class=\"column6\">6</div>\n  </div>\n</body>\n```\n\n#### 等分布局的空白间距\n\n[ 方法一 代码修改 ]\n\n```html\n<style>\n  /* \n     * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n     *  \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent-fix {\n    /* 溢出隐藏 */\n    overflow: hidden;\n  }\n  .parent {\n    background-color: #eee;\n\n    /* 解决高度塌陷 */\n    overflow: hidden;\n    /* height: 500px; */\n    margin-left: -20px;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n    width: 20%;\n    float: left;\n\n    padding-left: 20px;\n    /* margin-left: 20px;  */\n    /*\n            box-sizing 属性 \n           */\n    box-sizing: border-box;\n  }\n  .column2 .inner {\n    background-color: #ff66ff;\n  }\n  .column3 .inner {\n    background-color: #00ffff;\n  }\n  .column1 .inner {\n    background-color: #ffff00;\n  }\n  .column5 .inner {\n    background-color: #ff0000;\n  }\n  .column6 .inner {\n    background-color: #00ff00;\n  }\n  .inner {\n    height: 500px;\n  }\n</style>\n<body>\n  <div class=\"parent-fix\">\n    <div class=\"parent\">\n      <div class=\"column1\"><div class=\"inner\"></div></div>\n      <div class=\"column2\"><div class=\"inner\"></div></div>\n      <div class=\"column3\"><div class=\"inner\"></div></div>\n      <div class=\"column5\"><div class=\"inner\"></div></div>\n      <div class=\"column6\"><div class=\"inner\"></div></div>\n    </div>\n  </div>\n</body>\n```\n\n[ 方法二 代码修改 ]\n\n```html\n<style>\n  /* \n     * 实际开发中 parent 元素 width 的值是有一个范围\n     * 在此案例中 parent-fix 的宽度为  1369px - 20px\n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent-fix {\n    overflow: hidden;\n  }\n  .parent {\n    background-color: #eee;\n\n    width: 1369px;\n    /* <table> 元素 */\n    display: table;\n    margin-left: -20px;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 500px;\n\n    /* <td> 元素 */\n    display: table-cell;\n\n    padding-left: 20px;\n    box-sizing: border-box;\n  }\n  .column2 .inner {\n    background-color: #ff66ff;\n  }\n  .column3 .inner {\n    background-color: #00ffff;\n  }\n  .column1 .inner {\n    background-color: #ffff00;\n  }\n  .column5 .inner {\n    background-color: #ff0000;\n  }\n  .column6 .inner {\n    background-color: #00ff00;\n  }\n  .inner {\n    height: 500px;\n  }\n</style>\n<body>\n  <div class=\"parent-fix\">\n    <div class=\"parent\">\n      <div class=\"column1\"><div class=\"inner\"></div></div>\n      <div class=\"column2\"><div class=\"inner\"></div></div>\n      <div class=\"column3\"><div class=\"inner\"></div></div>\n      <div class=\"column5\"><div class=\"inner\"></div></div>\n      <div class=\"column6\"><div class=\"inner\"></div></div>\n    </div>\n  </div>\n</body>\n```\n\n### 什么是等高布局\n\n—— 一行被分成若干列，每一列的高度相同\n\n### 等高布局的实现\n\n- display 属性的值有关 table 的值实现\n- padding + margin 实现等高布局效果\n\n#### display 属性的值有关 table 的值实现\n\n```html\n<style>\n  /* \n     * 表格中的单元格 默认是等高的，无论内容多少\n     * \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n\n    /* <table> 元素 */\n    display: table;\n    table-layout: fixed;\n  }\n  .left,\n  .right {\n    width: 300px;\n\n    /* <td> 元素 */\n    display: table-cell;\n  }\n  .left {\n    background-color: #ffff00;\n  }\n  .right {\n    background-color: #ff66ff;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"left\">imooc</div>\n    <div class=\"right\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae\n      dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at\n      est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!\n    </div>\n  </div>\n</body>\n```\n\n#### padding + margin 实现等高布局效果\n\n```html\n    <style>\n    /*\n     *\n     *\n     *\n     */\n    * {\n       margin: 0;\n       padding: 0;\n    }\n\n    .parent {\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    }\n    .left,\n    .right {\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px;\n        margin-bottom: -99999px;\n    }\n    .left {\n        background-color: #ffff00;\n    }\n    .right {\n        background-color: #ff66ff;\n    }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n        <div class=\"left\">imooc</div>\n        <div class=\"right\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!</div>\n    </div>\n</body>\n```\n\n### CSS 3 多列布局\n\n[ column 属性 ]\n\n——column 属性是一个简写属性   包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度\n\n- column-count 属性 用于设置列的数量或允许的最大列数\n\n- auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定\n- number: 必须是正整数，用于表示定义列的数量\n\n- column-width 属性 用于设置列的宽度或列的最小宽度\n  - auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定\n  - length: 必须是正整数，用于表示定义列的宽度\n\n```html\n<style>\n  /* \n     *  \n     *  \n     *\n     */\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .parent {\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 6 auto;\n  }\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 {\n    height: 300px;\n  }\n  .column2 {\n    background-color: #ff66ff;\n  }\n  .column3 {\n    background-color: #00ffff;\n  }\n  .column1 {\n    background-color: #ffff00;\n  }\n  .column5 {\n    background-color: #ff0000;\n  }\n  .column6 {\n    background-color: #00ff00;\n  }\n</style>\n<body>\n  <div class=\"parent\">\n    <div class=\"column1\"></div>\n    <div class=\"column2\"></div>\n    <div class=\"column3\"></div>\n    <div class=\"column6\"></div>\n    <div class=\"column5\"></div>\n    <div class=\"column6\"></div>\n  </div>\n</body>\n```\n\n[ 列的间距 ]\n\n- column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置\n  - normal:   用于表示使用浏览器定义列的默认间距，默认值 1em\n  - length: 必须是正整数，用于表示定义列之间的间距\n\n```html\n<style>\n  .parent {\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n  }\n</style>\n```\n\n[列的边框 column-rule ]\n\n—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。\n\n- column-rule-width: 列于列之间的边框宽度\n- column-rule-color: 列于列之间的边框颜色\n- column-rule-style: 列于列之间的边框样式\n\n```html\n<style>\n  .parent {\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n\n    /* column-rule-width: 5px;\n       column-rule-color: #ff0000;\n       column-rule-style: double; */\n    /* 简写属性 */\n    column-rule: 5px #ff0000 double;\n  }\n</style>\n```\n\n[ 横跨多列 ]\n\n- column-span 属性 用于定义一个列元素是否跨列\n  - none：表示元素不跨列\n  - all: 表示元素跨所有列\n\n```html\n<style>\n  .column6 {\n    background-color: #00ff00;\n    column-span: all;\n  }\n</style>\n```\n\n[ 列的填充 ]\n\n- column-fill 属性用于定义列的高度由内容决定，还是同一高度\n  - auto: 默认值，列的高度由内容绝对\n  - balance: 列的高度根据内容最多的一列的高度为准\n\n```html\n<style>\n  .column6,\n  .column7,\n  .column8,\n  .column9 {\n    /* 浏览器兼容不好 包括chrome浏览器 */\n    column-fill: balance;\n  }\n</style>\n<div class=\"parent\">\n  <div class=\"column6\">\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum\n    ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe\n    harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?\n  </div>\n\n  <div class=\"column7\">\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure\n    dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente\n    necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam\n    unde sed autem.\n  </div>\n\n  <div class=\"column8\">\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat\n    blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi\n    eveniet, error quis ex cum ut nulla sunt aut saepe? Lorem ipsum dolor sit\n    amet consectetur, adipisicing elit. Facilis debitis officia distinctio\n    cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic\n    alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n  </div>\n  <div class=\"column9\">\n    Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum.\n    Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit\n    perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa\n    vitae accusantium nesciunt.\n  </div>\n</div>\n```\n\n## 经典布局\n\n### 什么是圣杯布局\n\n- 布局效果类似于圣杯而得名，也叫做三行三列布局。\n- 定宽 — 自适应 — 定宽\n\n![圣杯布局.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png#align=left&display=inline&height=634&name=%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.png&originHeight=634&originWidth=1184&size=80271&status=done&style=none&width=1184)\n\n[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]\n\n```html\n   <style>\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同\n     *\n     */\n    * {\n       margin: 0;\n       padding: 0;\n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        background-color: #eee;\n        padding: 10px;\n    }\n    .left,\n    .center,\n    .right {\n        height: 300px;\n    }\n    .left,\n    .right {\n        width: 300px;\n    }\n    .left {\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    }\n    .center {\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    .right {\n        background-color: #ff0000;\n        float: right;\n    }\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    </style>\n</head>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n        <div class=\"center\"> 中：定宽 </div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n```\n\n### 圣杯布局的实现  \n\n```html\n<style>\n  /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  .header,\n  .footer {\n    height: 100px;\n    background-color: #000;\n  }\n  .parent {\n    background-color: #eee;\n    /* 解决父级元素高度塌陷 */\n    height: 300px;\n    /* 对应 left 的宽度 */\n    margin-left: 300px;\n    /* 对应 right 的宽度  */\n    margin-right: 300px;\n  }\n  .left,\n  .center,\n  .right {\n    height: 300px;\n    /* 使三个div 浮动 */\n    float: left;\n  }\n  .left,\n  .right {\n    width: 300px;\n  }\n\n  .left {\n    background-color: #00ffff;\n    /* 将当前元素从当前行移动到上一行同一个位置*/\n    margin-left: -100%;\n    /* 将当前元素移动到理想位置 */\n    position: relative;\n    left: -300px;\n  }\n  .center {\n    width: 100%;\n    background-color: #ffff00;\n  }\n  .right {\n    background-color: #ff0000;\n    margin-left: -300px;\n    position: relative;\n    right: -300px;\n  }\n</style>\n<body>\n  <div class=\"header\"></div>\n  <div class=\"parent\">\n    <div class=\"center\">中：定宽</div>\n    <div class=\"left\">左： 定宽</div>\n    <div class=\"right\">右：自适应</div>\n  </div>\n  <div class=\"footer\"></div>\n</body>\n```\n\n### 什么是双飞翼布局\n\n—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。\n\n###   双飞翼布局的实现  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>双飞翼布局</title>\n    <style>\n        /*\n         *\n         *\n         */\n    * {\n       margin: 0;\n       padding: 0;\n    }\n    .header,\n    .footer {\n        height: 100px;\n        background-color: #000;\n    }\n    .parent {\n        height: 300px;\n        background-color: #eee;\n\n    }\n    .left {\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    }\n    .center {\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    }\n    .right {\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    }\n    .inner {\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    }\n    </style>\n<body>\n    <div class=\"header\"></div>\n    <div class=\"parent\">\n        <div class=\"center\">\n            <div class=\"inner\">中：定宽</div>\n        </div>\n        <div class=\"left\"> 左： 定宽</div>\n        <div class=\"right\"> 右：自适应</div>\n    </div>\n    <div class=\"footer\"></div>\n</body>\n</html>\n```\n\n## 全屏布局\n\n---\n\ntitle: 全屏布局\ndate: 2019-11-01 20:43:24\ntags:\n\n- CSS\n- CSS 布局\n\n---\n\n### 什么是全屏布局？\n\n—— HTML 页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。\n![全屏布局.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png#align=left&display=inline&height=639&name=%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80.png&originHeight=639&originWidth=1228&size=85361&status=done&style=none&width=1228)\n\n```html\n<style>\n  /* \n     * .content .right {\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        }\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n  html,\n  body {\n    margin: 0;\n    padding: 0;\n    /* 避免全屏出现滚动条*/\n    overflow: hidden;\n  }\n  header {\n    height: 100px;\n    background-color: #eee;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .content {\n    /* 提供滚动条 */\n    overflow: auto;\n    background-color: rgb(14, 197, 221);\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 100px;\n    bottom: 100px;\n  }\n  .content .left {\n    width: 300px;\n    height: 100%;\n    background-color: rgb(247, 54, 54);\n\n    position: fixed;\n    left: 0;\n    top: 100px;\n    bottom: 100px;\n  }\n  .content .right {\n    height: 1000px;\n    background-color: rgb(243, 239, 12);\n    margin-left: 300px;\n  }\n  footer {\n    height: 100px;\n    background-color: rgb(39, 38, 38);\n\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n</style>\n<body>\n  <header></header>\n  <div class=\"content\">\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n  </div>\n  <footer></footer>\n</body>\n```\n\n## 总结\n\n### 居中布局\n\n- 水平居中布局\n- 垂直居中布局\n- 居中布局（ 水平 + 垂直 ）\n\n### 多列布局\n\n- 两列布局\n- 三列布局\n- 等分布局\n- 等高布局\n- CSS 3 多列布局\n\n### 经典布局\n\n- 圣杯布局\n- 双飞翼布局\n\n### 全屏布局\n\n### 未涉及的布局\n\n- 网格布局\n- 弹性盒子布局 CSS3\n\n** \\*\\***没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式\\*\\*\n","slug":"语雀/aq3d2d","published":1,"updated":"2022-03-03T11:26:07.557Z","_id":"cl0awjjp00003081bfxj4c47y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h2><hr>\n<p>title: 主流 CSS 布局(水平居中、垂直居中、居中 )<br>date: 2019-11-01 14:11:51<br>tags:</p>\n<ul>\n<li><p>CSS</p>\n</li>\n<li><p>CSS 布局</p>\n</li>\n<li><p>html 页面的整体结构或骨架</p>\n</li>\n<li><p>布局不是某个技术内容 而是一种设计思想</p>\n</li>\n</ul>\n<p>[ 布局方式 ]</p>\n<ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）</li>\n</ul>\n<h3 id=\"什么是水平居中布局\"><a href=\"#什么是水平居中布局\" class=\"headerlink\" title=\"什么是水平居中布局\"></a>什么是水平居中布局</h3><p>水平居中布局   元素相对于页面/元素相对于父元素水平居中<br>[ 实现方式 ]</p>\n<ul>\n<li>inline-block + text-align 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示</strong><br>**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n    text-align: center;\n  &#125;\n  .child &#123;\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n    display: inline-block;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;!-- 居中布局 --&gt;\n  &lt;!-- 方法一： inline-block + text-align 属性配合使用 --&gt;\n\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>table + margin 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效</strong></p>\n<p><strong>解决方法：考虑第一种或第三种解决方案</strong></p>\n<p>[ 拓展 ]  CSS 中使元素脱离文档流的方式</p>\n<ul>\n<li>将元素设置浮动 float</li>\n<li>将元素设置为绝对定位 position: absolute</li>\n<li>将元素设置为固定定位 position: fixed</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n  &#125;\n  .child &#123;\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 方法二： gtable + margin 属性配合使用 */\n    /* display的值 为 table 或 block */\n    display: table;\n    /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n    margin: 0 auto;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong><br>**解决方法：考虑第一种或第二种解决方案 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n\n  .parent &#123;\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 相对定位 */\n    position: relative;\n  &#125;\n\n  .child &#123;\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 当把当前元素设置为绝对定位以后\n    - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n    - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n    */\n    position: absolute;\n    left: 50%;\n    /* 水平方向平移 */\n    transform: translateX(-50%);\n    /* margin-left: -50%; */\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>… …</li>\n</ul>\n<h3 id=\"什么是垂直居中布局\"><a href=\"#什么是垂直居中布局\" class=\"headerlink\" title=\"什么是垂直居中布局\"></a>什么是垂直居中布局</h3><p>垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的<br>[ 实现方式 ]</p>\n<ul>\n<li>table-cell + vertical-align 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示</strong></p>\n<p>**如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    /*方法一： table-cell + vertical-align 属性配合使用 */\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n    /* display 属性：\n       - table: 设置当前元素为&lt;table&gt;元素\n       - table-cell：设置当前元素为&lt;td&gt;元素  单元格\n       - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n    \n     */\n    display: table-cell;\n    /* \n        vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n        - top： 顶部对齐\n        - middle: 居中对齐\n        - bottom: 底部对齐 \n     */\n    vertical-align: middle;\n  &#125;\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong></p>\n<p>**解决方法：考虑第一种解决方案 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n\n    position: relative;\n  &#125;\n  /* 方法二： absolute + transform 属性配合使用 */\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n\n    position: absolute;\n    top: 50%;\n    /* 垂直方向 */\n    transform: translateY(-50%);\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"什么是居中布局\"><a href=\"#什么是居中布局\" class=\"headerlink\" title=\"什么是居中布局\"></a>什么是居中布局</h3><p>居中布局：（ 水平 + 垂直 ）居中<br>[ 实现方式 ]</p>\n<ul>\n<li>display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中</li>\n</ul>\n<p><strong>注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码</strong></p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 实现垂直居中  */\n    /* &lt;td&gt; */\n    display: table-cell;\n    vertical-align: middle;\n  &#125;\n\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 实现水居中 */\n    /* &lt;table&gt; */\n    /* display: table; */\n    display: block;\n    margin: 0 auto;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性实现水平和垂直方向的居中</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码</strong></p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 相对定位 不脱离文档流*/\n    position: relative;\n  &#125;\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 绝对定位 ———— 子绝父相 */\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h2><hr>\n<p>title: 多列布局<br>date: 2019-11-01 20:42:12<br>tags:</p>\n<ul>\n<li>CSS</li>\n<li>CSS 布局</li>\n</ul>\n<hr>\n<h3 id=\"什么是多列布局\"><a href=\"#什么是多列布局\" class=\"headerlink\" title=\"什么是多列布局\"></a>什么是多列布局</h3><p>——几个元素呈现水平方式排列的效果<br>[ 从元素分类角度 ]</p>\n<ul>\n<li>块级元素   默认垂直排列     设置浮动实现水平方式排列</li>\n<li>内联元素   默认水平方式排列</li>\n<li>行内块元素   默认水平方式排列</li>\n</ul>\n<p>[ 多列布局分类 ]</p>\n<ul>\n<li>两列布局   一列定宽，另外一列宽度自适应</li>\n<li>三列布局<ul>\n<li>两列定宽且相邻，另外一列宽度自适应</li>\n<li>两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局</li>\n</ul>\n</li>\n<li>等分布局   每一列宽度相同</li>\n<li>等高布局   每一列高度相同</li>\n<li>CSS 3 三列布局</li>\n</ul>\n<h3 id=\"什么是两列布局\"><a href=\"#什么是两列布局\" class=\"headerlink\" title=\"什么是两列布局\"></a>什么是两列布局</h3><p>—— 左列确定宽度，右列自动填满剩余空间</p>\n<h3 id=\"两列布局的实现\"><a href=\"#两列布局的实现\" class=\"headerlink\" title=\"两列布局的实现\"></a>两列布局的实现</h3><h4 id=\"float-margin-属性实现\"><a href=\"#float-margin-属性实现\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><p>**   此方案的优缺点<br>优点：实现方式简单<br>缺点：</p>\n<ol>\n<li>自适应元素 margin 属性值必须与定宽元素的 width 值保持一致   高耦合</li>\n<li>定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好</li>\n<li>如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉</li>\n</ol>\n<p>**</p>\n<pre><code class=\"html\">    &lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n    &#125;\n    .left,\n    .right &#123;\n        height: 500px;\n    &#125;\n\n    .left &#123;\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    &#125;\n    .right &#123;\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    &#125;\n    /* .inner &#123;\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    &#125; */\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右： 自适应\n          &lt;!-- &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动   没有解决高耦合的问题 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n  &#125;\n  .left,\n  .right &#123;\n    height: 200px;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n    /* 脱离文档流 */\n    float: left;\n    /* margin-left: -100%; */\n    /* 提高显示层级 */\n    position: relative;\n  &#125;\n  .right-fix &#123;\n    /* 由于设置浮动，默认宽度为 0 */\n    /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n    width: 100%;\n    /* 向左移动 此时覆盖掉 左侧*/\n    margin-left: -300px;\n    float: left;\n    background-color: #000000;\n  &#125;\n  .right &#123;\n    /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n    margin-left: 300px;\n    /* padding-left: 300px; */\n    background-color: #ff0000;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 定宽&lt;/div&gt;\n    &lt;div class=&quot;right-fix&quot;&gt;\n      &lt;div class=&quot;right&quot;&gt;右： 自适应&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现\"><a href=\"#float-overflow-属性实现\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><p>**   此方案的优缺点<br>优点：没有第一种解决方案中存在的问题<br>缺点：overflow 属性开启 BFC 模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启 BFC 模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题<br>**</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    height: 500px;\n  &#125;\n  .left,\n  .right &#123;\n    height: 300px;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n    float: left;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n    /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n    overflow: hidden;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 左对齐&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值\"><a href=\"#使用-display-属性的-table-相关值\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><p>**   此方案的优缺点<br>优点：浏览器的兼容性比较好<br>缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题<br>**</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    height: 500px;\n\n    /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n    display: table;\n    /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n    table-layout: fixed;\n    width: 100%;\n  &#125;\n  .left,\n  .right &#123;\n    height: 300px;\n\n    display: table-cell;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 左对齐&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是三列布局\"><a href=\"#什么是三列布局\" class=\"headerlink\" title=\"什么是三列布局\"></a>什么是三列布局</h3><p>—— 两列定宽且相邻，另外一列宽度自适应</p>\n<h3 id=\"三列布局的实现\"><a href=\"#三列布局的实现\" class=\"headerlink\" title=\"三列布局的实现\"></a>三列布局的实现</h3><p>实现方式与两列布局实现方式类似</p>\n<h4 id=\"float-margin-属性实现-1\"><a href=\"#float-margin-属性实现-1\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    height: 500px;\n  &#125;\n  .left,\n  .center,\n  .right &#123;\n    height: 300px;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n    /*  */\n    float: left;\n  &#125;\n  .center &#123;\n    width: 300px;\n    background-color: #ffff00;\n\n    float: left;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n\n    margin-left: 600px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 定宽&lt;/div&gt;\n    &lt;div class=&quot;center&quot;&gt;中：定宽&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现-1\"><a href=\"#float-overflow-属性实现-1\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值-1\"><a href=\"#使用-display-属性的-table-相关值-1\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n<h3 id=\"什么是等分布局\"><a href=\"#什么是等分布局\" class=\"headerlink\" title=\"什么是等分布局\"></a>什么是等分布局</h3><p>—— 一行被分成若干列，每一列的宽度相同</p>\n<h3 id=\"等分布局的实现\"><a href=\"#等分布局的实现\" class=\"headerlink\" title=\"等分布局的实现\"></a>等分布局的实现</h3><ul>\n<li>float 属性实现等分布局效果</li>\n<li>display 属性的值有关 table 的值实现</li>\n</ul>\n<h4 id=\"float-属性实现等分布局效果\"><a href=\"#float-属性实现等分布局效果\" class=\"headerlink\" title=\"float 属性实现等分布局效果\"></a>float 属性实现等分布局效果</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n         *   \n         *\n         */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n\n  .parent &#123;\n    background-color: #eee;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n    width: 20%;\n    float: left;\n  &#125;\n  .column2 &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n    background-color: #00ff00;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n    &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n    &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n    &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"display-属性的值有关-table-的值实现\"><a href=\"#display-属性的值有关-table-的值实现\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n     * \n     *  \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n\n  .parent &#123;\n    background-color: #eee;\n\n    width: 100%;\n    /* &lt;table&gt; 元素 */\n    display: table;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n\n    /* &lt;td&gt; 元素 */\n    display: table-cell;\n  &#125;\n  .column2 &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n    background-color: #00ff00;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n    &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n    &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n    &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"等分布局的空白间距\"><a href=\"#等分布局的空白间距\" class=\"headerlink\" title=\"等分布局的空白间距\"></a>等分布局的空白间距</h4><p>[ 方法一 代码修改 ]</p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n     *  \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent-fix &#123;\n    /* 溢出隐藏 */\n    overflow: hidden;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    /* 解决高度塌陷 */\n    overflow: hidden;\n    /* height: 500px; */\n    margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n    width: 20%;\n    float: left;\n\n    padding-left: 20px;\n    /* margin-left: 20px;  */\n    /*\n            box-sizing 属性 \n           */\n    box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n    background-color: #00ff00;\n  &#125;\n  .inner &#123;\n    height: 500px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 方法二 代码修改 ]</p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     * 实际开发中 parent 元素 width 的值是有一个范围\n     * 在此案例中 parent-fix 的宽度为  1369px - 20px\n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent-fix &#123;\n    overflow: hidden;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    width: 1369px;\n    /* &lt;table&gt; 元素 */\n    display: table;\n    margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n\n    /* &lt;td&gt; 元素 */\n    display: table-cell;\n\n    padding-left: 20px;\n    box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n    background-color: #00ff00;\n  &#125;\n  .inner &#123;\n    height: 500px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是等高布局\"><a href=\"#什么是等高布局\" class=\"headerlink\" title=\"什么是等高布局\"></a>什么是等高布局</h3><p>—— 一行被分成若干列，每一列的高度相同</p>\n<h3 id=\"等高布局的实现\"><a href=\"#等高布局的实现\" class=\"headerlink\" title=\"等高布局的实现\"></a>等高布局的实现</h3><ul>\n<li>display 属性的值有关 table 的值实现</li>\n<li>padding + margin 实现等高布局效果</li>\n</ul>\n<h4 id=\"display-属性的值有关-table-的值实现-1\"><a href=\"#display-属性的值有关-table-的值实现-1\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n     * 表格中的单元格 默认是等高的，无论内容多少\n     * \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    /* &lt;table&gt; 元素 */\n    display: table;\n    table-layout: fixed;\n  &#125;\n  .left,\n  .right &#123;\n    width: 300px;\n\n    /* &lt;td&gt; 元素 */\n    display: table-cell;\n  &#125;\n  .left &#123;\n    background-color: #ffff00;\n  &#125;\n  .right &#123;\n    background-color: #ff66ff;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae\n      dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at\n      est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"padding-margin-实现等高布局效果\"><a href=\"#padding-margin-实现等高布局效果\" class=\"headerlink\" title=\"padding + margin 实现等高布局效果\"></a>padding + margin 实现等高布局效果</h4><pre><code class=\"html\">    &lt;style&gt;\n    /*\n     *\n     *\n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0;\n    &#125;\n\n    .parent &#123;\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px;\n        margin-bottom: -99999px;\n    &#125;\n    .left &#123;\n        background-color: #ffff00;\n    &#125;\n    .right &#123;\n        background-color: #ff66ff;\n    &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"CSS-3-多列布局\"><a href=\"#CSS-3-多列布局\" class=\"headerlink\" title=\"CSS 3 多列布局\"></a>CSS 3 多列布局</h3><p>[ column 属性 ]</p>\n<p>——column 属性是一个简写属性   包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度</p>\n<ul>\n<li><p>column-count 属性 用于设置列的数量或允许的最大列数</p>\n</li>\n<li><p>auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定</p>\n</li>\n<li><p>number: 必须是正整数，用于表示定义列的数量</p>\n</li>\n<li><p>column-width 属性 用于设置列的宽度或列的最小宽度</p>\n<ul>\n<li>auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定</li>\n<li>length: 必须是正整数，用于表示定义列的宽度</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     *  \n     *  \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 6 auto;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 300px;\n  &#125;\n  .column2 &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n    background-color: #00ff00;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;column1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column5&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 列的间距 ]</p>\n<ul>\n<li>column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置<ul>\n<li>normal:   用于表示使用浏览器定义列的默认间距，默认值 1em</li>\n<li>length: 必须是正整数，用于表示定义列之间的间距</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<p>[列的边框 column-rule ]</p>\n<p>—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。</p>\n<ul>\n<li>column-rule-width: 列于列之间的边框宽度</li>\n<li>column-rule-color: 列于列之间的边框颜色</li>\n<li>column-rule-style: 列于列之间的边框样式</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n\n    /* column-rule-width: 5px;\n       column-rule-color: #ff0000;\n       column-rule-style: double; */\n    /* 简写属性 */\n    column-rule: 5px #ff0000 double;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<p>[ 横跨多列 ]</p>\n<ul>\n<li>column-span 属性 用于定义一个列元素是否跨列<ul>\n<li>none：表示元素不跨列</li>\n<li>all: 表示元素跨所有列</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .column6 &#123;\n    background-color: #00ff00;\n    column-span: all;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<p>[ 列的填充 ]</p>\n<ul>\n<li>column-fill 属性用于定义列的高度由内容决定，还是同一高度<ul>\n<li>auto: 默认值，列的高度由内容绝对</li>\n<li>balance: 列的高度根据内容最多的一列的高度为准</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .column6,\n  .column7,\n  .column8,\n  .column9 &#123;\n    /* 浏览器兼容不好 包括chrome浏览器 */\n    column-fill: balance;\n  &#125;\n&lt;/style&gt;\n&lt;div class=&quot;parent&quot;&gt;\n  &lt;div class=&quot;column6&quot;&gt;\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum\n    ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe\n    harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?\n  &lt;/div&gt;\n\n  &lt;div class=&quot;column7&quot;&gt;\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure\n    dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente\n    necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam\n    unde sed autem.\n  &lt;/div&gt;\n\n  &lt;div class=&quot;column8&quot;&gt;\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat\n    blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi\n    eveniet, error quis ex cum ut nulla sunt aut saepe? Lorem ipsum dolor sit\n    amet consectetur, adipisicing elit. Facilis debitis officia distinctio\n    cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic\n    alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n  &lt;/div&gt;\n  &lt;div class=&quot;column9&quot;&gt;\n    Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum.\n    Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit\n    perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa\n    vitae accusantium nesciunt.\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"经典布局\"><a href=\"#经典布局\" class=\"headerlink\" title=\"经典布局\"></a>经典布局</h2><h3 id=\"什么是圣杯布局\"><a href=\"#什么是圣杯布局\" class=\"headerlink\" title=\"什么是圣杯布局\"></a>什么是圣杯布局</h3><ul>\n<li>布局效果类似于圣杯而得名，也叫做三行三列布局。</li>\n<li>定宽 — 自适应 — 定宽</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png#align=left&display=inline&height=634&name=%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.png&originHeight=634&originWidth=1184&size=80271&status=done&style=none&width=1184\" alt=\"圣杯布局.png\"></p>\n<p>[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]</p>\n<pre><code class=\"html\">   &lt;style&gt;\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同\n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0;\n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        padding: 10px;\n    &#125;\n    .left,\n    .center,\n    .right &#123;\n        height: 300px;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    &#125;\n    .center &#123;\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        float: right;\n    &#125;\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"圣杯布局的实现\"><a href=\"#圣杯布局的实现\" class=\"headerlink\" title=\"圣杯布局的实现\"></a>圣杯布局的实现</h3><pre><code class=\"html\">&lt;style&gt;\n  /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .header,\n  .footer &#123;\n    height: 100px;\n    background-color: #000;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    /* 解决父级元素高度塌陷 */\n    height: 300px;\n    /* 对应 left 的宽度 */\n    margin-left: 300px;\n    /* 对应 right 的宽度  */\n    margin-right: 300px;\n  &#125;\n  .left,\n  .center,\n  .right &#123;\n    height: 300px;\n    /* 使三个div 浮动 */\n    float: left;\n  &#125;\n  .left,\n  .right &#123;\n    width: 300px;\n  &#125;\n\n  .left &#123;\n    background-color: #00ffff;\n    /* 将当前元素从当前行移动到上一行同一个位置*/\n    margin-left: -100%;\n    /* 将当前元素移动到理想位置 */\n    position: relative;\n    left: -300px;\n  &#125;\n  .center &#123;\n    width: 100%;\n    background-color: #ffff00;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n    margin-left: -300px;\n    position: relative;\n    right: -300px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;center&quot;&gt;中：定宽&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 定宽&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是双飞翼布局\"><a href=\"#什么是双飞翼布局\" class=\"headerlink\" title=\"什么是双飞翼布局\"></a>什么是双飞翼布局</h3><p>—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。</p>\n<h3 id=\"双飞翼布局的实现\"><a href=\"#双飞翼布局的实现\" class=\"headerlink\" title=\"双飞翼布局的实现\"></a>双飞翼布局的实现</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;双飞翼布局&lt;/title&gt;\n    &lt;style&gt;\n        /*\n         *\n         *\n         */\n    * &#123;\n       margin: 0;\n       padding: 0;\n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        height: 300px;\n        background-color: #eee;\n\n    &#125;\n    .left &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    &#125;\n    .center &#123;\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    &#125;\n    .right &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    &#125;\n    .inner &#123;\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;center&quot;&gt;\n            &lt;div class=&quot;inner&quot;&gt;中：定宽&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"全屏布局\"><a href=\"#全屏布局\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h2><hr>\n<p>title: 全屏布局<br>date: 2019-11-01 20:43:24<br>tags:</p>\n<ul>\n<li>CSS</li>\n<li>CSS 布局</li>\n</ul>\n<hr>\n<h3 id=\"什么是全屏布局？\"><a href=\"#什么是全屏布局？\" class=\"headerlink\" title=\"什么是全屏布局？\"></a>什么是全屏布局？</h3><p>—— HTML 页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png#align=left&display=inline&height=639&name=%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80.png&originHeight=639&originWidth=1228&size=85361&status=done&style=none&width=1228\" alt=\"全屏布局.png\"></p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     * .content .right &#123;\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        &#125;\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n  html,\n  body &#123;\n    margin: 0;\n    padding: 0;\n    /* 避免全屏出现滚动条*/\n    overflow: hidden;\n  &#125;\n  header &#123;\n    height: 100px;\n    background-color: #eee;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n  &#125;\n\n  .content &#123;\n    /* 提供滚动条 */\n    overflow: auto;\n    background-color: rgb(14, 197, 221);\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 100px;\n    bottom: 100px;\n  &#125;\n  .content .left &#123;\n    width: 300px;\n    height: 100%;\n    background-color: rgb(247, 54, 54);\n\n    position: fixed;\n    left: 0;\n    top: 100px;\n    bottom: 100px;\n  &#125;\n  .content .right &#123;\n    height: 1000px;\n    background-color: rgb(243, 239, 12);\n    margin-left: 300px;\n  &#125;\n  footer &#123;\n    height: 100px;\n    background-color: rgb(39, 38, 38);\n\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;header&gt;&lt;/header&gt;\n  &lt;div class=&quot;content&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;footer&gt;&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"居中布局-1\"><a href=\"#居中布局-1\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h3><ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）</li>\n</ul>\n<h3 id=\"多列布局-1\"><a href=\"#多列布局-1\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h3><ul>\n<li>两列布局</li>\n<li>三列布局</li>\n<li>等分布局</li>\n<li>等高布局</li>\n<li>CSS 3 多列布局</li>\n</ul>\n<h3 id=\"经典布局-1\"><a href=\"#经典布局-1\" class=\"headerlink\" title=\"经典布局\"></a>经典布局</h3><ul>\n<li>圣杯布局</li>\n<li>双飞翼布局</li>\n</ul>\n<h3 id=\"全屏布局-1\"><a href=\"#全屏布局-1\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h3><h3 id=\"未涉及的布局\"><a href=\"#未涉及的布局\" class=\"headerlink\" title=\"未涉及的布局\"></a>未涉及的布局</h3><ul>\n<li>网格布局</li>\n<li>弹性盒子布局 CSS3</li>\n</ul>\n<p>** ****没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式**</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h2><hr>\n<p>title: 主流 CSS 布局(水平居中、垂直居中、居中 )<br>date: 2019-11-01 14:11:51<br>tags:</p>\n<ul>\n<li><p>CSS</p>\n</li>\n<li><p>CSS 布局</p>\n</li>\n<li><p>html 页面的整体结构或骨架</p>\n</li>\n<li><p>布局不是某个技术内容 而是一种设计思想</p>\n</li>\n</ul>\n<p>[ 布局方式 ]</p>\n<ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）</li>\n</ul>\n<h3 id=\"什么是水平居中布局\"><a href=\"#什么是水平居中布局\" class=\"headerlink\" title=\"什么是水平居中布局\"></a>什么是水平居中布局</h3><p>水平居中布局   元素相对于页面/元素相对于父元素水平居中<br>[ 实现方式 ]</p>\n<ul>\n<li>inline-block + text-align 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 浏览器兼容性比较好  [缺点] text-align 属性具有继承性 导致子级元素的文本居中显示</strong><br>**解决方法：在子级元素重新设置 text-align 属性覆盖掉父级元素的 text-align 属性  **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 方法一： inline-block + text-align 属性配合使用  为父元素 添加 text-align 属性  为子元素添加 display 属性\n           - text-align 属性 为文本内容设置对其方式\n             + left: 左对齐 \n             + center: 居中对齐\n             + right: 右对齐   \n        */\n    text-align: center;\n  &#125;\n  .child &#123;\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* display 属性:\n           - block: 块级元素\n           - inline: 内联元素 (text-align 有效)\n             + width 和 height 属性无效\n           - inline-block: 行内块元素 (块级 + 内联 )\n         */\n    display: inline-block;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;!-- 居中布局 --&gt;\n  &lt;!-- 方法一： inline-block + text-align 属性配合使用 --&gt;\n\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>table + margin 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 只需要对子级元素进行设置就可以实现水平居中  [缺点] 如果子级元素脱离文档流，导致 margin 属性失效</strong></p>\n<p><strong>解决方法：考虑第一种或第三种解决方案</strong></p>\n<p>[ 拓展 ]  CSS 中使元素脱离文档流的方式</p>\n<ul>\n<li>将元素设置浮动 float</li>\n<li>将元素设置为绝对定位 position: absolute</li>\n<li>将元素设置为固定定位 position: fixed</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n  &#125;\n  .child &#123;\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 方法二： gtable + margin 属性配合使用 */\n    /* display的值 为 table 或 block */\n    display: table;\n    /* margin 属性： 外边距\n           - 一个值： 上下左右\n           - 两个值： 上下，左右\n             + auto 根据浏览器自动分配    \n           - 三个值： 上，左右，下 \n           - 四个值： 上，右，下，左\n         */\n    margin: 0 auto;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素水平居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong><br>**解决方法：考虑第一种或第二种解决方案 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n\n  .parent &#123;\n    width: 100%;\n    height: 200px;\n    background-color: #00ffff;\n    /* 相对定位 */\n    position: relative;\n  &#125;\n\n  .child &#123;\n    width: 300px;\n    height: 200px;\n    background-color: #ff0000;\n    /* 当把当前元素设置为绝对定位以后\n    - 如果父级元素没有设置定位，当前元素是相对于页面定位的\n    - 如果父级元素设置了定位，当前元素是相对于父级元素定位的 \n    */\n    position: absolute;\n    left: 50%;\n    /* 水平方向平移 */\n    transform: translateX(-50%);\n    /* margin-left: -50%; */\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>… …</li>\n</ul>\n<h3 id=\"什么是垂直居中布局\"><a href=\"#什么是垂直居中布局\" class=\"headerlink\" title=\"什么是垂直居中布局\"></a>什么是垂直居中布局</h3><p>垂直居中布局 ：当前元素相对于页面/父元素垂直方向是居中显示的<br>[ 实现方式 ]</p>\n<ul>\n<li>table-cell + vertical-align 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 浏览器的兼容性比较好  [缺点]  vertical-align 属性 具有继承性 导致子级元素的文本居中显示</strong></p>\n<p>**如果父级元素中包含除子级元素以外的文本内容，此方法不适用 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    /*方法一： table-cell + vertical-align 属性配合使用 */\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n    /* display 属性：\n       - table: 设置当前元素为&lt;table&gt;元素\n       - table-cell：设置当前元素为&lt;td&gt;元素  单元格\n       - 设置完成以后 作为子级元素的div就相当于单元格中的内容了，设置对齐方式即可\n    \n     */\n    display: table-cell;\n    /* \n        vertical-align 属性: 用于设置文本内容的垂直方向的定对齐方式\n        - top： 顶部对齐\n        - middle: 居中对齐\n        - bottom: 底部对齐 \n     */\n    vertical-align: middle;\n  &#125;\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性配合使用</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好</strong></p>\n<p>**解决方法：考虑第一种解决方案 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 200px;\n    height: 600px;\n    background-color: #00ffff;\n\n    position: relative;\n  &#125;\n  /* 方法二： absolute + transform 属性配合使用 */\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n\n    position: absolute;\n    top: 50%;\n    /* 垂直方向 */\n    transform: translateY(-50%);\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"什么是居中布局\"><a href=\"#什么是居中布局\" class=\"headerlink\" title=\"什么是居中布局\"></a>什么是居中布局</h3><p>居中布局：（ 水平 + 垂直 ）居中<br>[ 实现方式 ]</p>\n<ul>\n<li>display:block + margin 属性实现水平方向居中，table-cell + vertical-align 属性实现垂直方向居中</li>\n</ul>\n<p><strong>注：[优点] 浏览器兼容性比较好   [缺点] 父元素与子元素都需要增加代码</strong></p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 实现垂直居中  */\n    /* &lt;td&gt; */\n    display: table-cell;\n    vertical-align: middle;\n  &#125;\n\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 实现水居中 */\n    /* &lt;table&gt; */\n    /* display: table; */\n    display: block;\n    margin: 0 auto;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>absolute + transform 属性实现水平和垂直方向的居中</li>\n</ul>\n<p><strong>注：[优点] 无论父级元素是否脱离文档流，不影响子级元素的垂直居中的效果，不考虑浏览器兼容性，优于第一中方案  [缺点]  transform 属性是 CSS 3 中新增的属性 浏览器支持情况不好同时子父元素都增加了代码</strong></p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    width: 1000px;\n    height: 600px;\n    background-color: #00ffff;\n    /* 相对定位 不脱离文档流*/\n    position: relative;\n  &#125;\n  .child &#123;\n    width: 200px;\n    height: 300px;\n    background-color: #ff0000;\n    /* 绝对定位 ———— 子绝父相 */\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    /* transform: translateX(-50%);\n        transform: translateY(-50%); */\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"多列布局\"><a href=\"#多列布局\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h2><hr>\n<p>title: 多列布局<br>date: 2019-11-01 20:42:12<br>tags:</p>\n<ul>\n<li>CSS</li>\n<li>CSS 布局</li>\n</ul>\n<hr>\n<h3 id=\"什么是多列布局\"><a href=\"#什么是多列布局\" class=\"headerlink\" title=\"什么是多列布局\"></a>什么是多列布局</h3><p>——几个元素呈现水平方式排列的效果<br>[ 从元素分类角度 ]</p>\n<ul>\n<li>块级元素   默认垂直排列     设置浮动实现水平方式排列</li>\n<li>内联元素   默认水平方式排列</li>\n<li>行内块元素   默认水平方式排列</li>\n</ul>\n<p>[ 多列布局分类 ]</p>\n<ul>\n<li>两列布局   一列定宽，另外一列宽度自适应</li>\n<li>三列布局<ul>\n<li>两列定宽且相邻，另外一列宽度自适应</li>\n<li>两边定宽 中间自适应，即圣杯布局和双飞翼布局 先有圣杯布局然后演变出双飞翼布局</li>\n</ul>\n</li>\n<li>等分布局   每一列宽度相同</li>\n<li>等高布局   每一列高度相同</li>\n<li>CSS 3 三列布局</li>\n</ul>\n<h3 id=\"什么是两列布局\"><a href=\"#什么是两列布局\" class=\"headerlink\" title=\"什么是两列布局\"></a>什么是两列布局</h3><p>—— 左列确定宽度，右列自动填满剩余空间</p>\n<h3 id=\"两列布局的实现\"><a href=\"#两列布局的实现\" class=\"headerlink\" title=\"两列布局的实现\"></a>两列布局的实现</h3><h4 id=\"float-margin-属性实现\"><a href=\"#float-margin-属性实现\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><p>**   此方案的优缺点<br>优点：实现方式简单<br>缺点：</p>\n<ol>\n<li>自适应元素 margin 属性值必须与定宽元素的 width 值保持一致   高耦合</li>\n<li>定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好</li>\n<li>如果右侧容器存在子级元素，为子级元素清除浮动之后，整个页面布局会乱掉</li>\n</ol>\n<p>**</p>\n<pre><code class=\"html\">    &lt;style&gt;\n    * &#123;\n        margin: 0;\n        padding: 0;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n    &#125;\n    .left,\n    .right &#123;\n        height: 500px;\n    &#125;\n\n    .left &#123;\n        width:300px;\n        background-color: #00ffff;\n        /* 脱离文档流 */\n        float: left;\n    &#125;\n    .right &#123;\n        /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n        background-color: #ff0000;\n        /*  */\n        margin-left: 300px;\n    &#125;\n    /* .inner &#123;\n        height: 200px;\n        background-color: #00ff00;\n        /*清除浮动  */\n      /*  clear: both;\n    &#125; */\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右： 自适应\n          &lt;!-- &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>** 注：以下是代码优化 为自适应元素添加父级元素并设置浮动   没有解决高耦合的问题 **</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n  &#125;\n  .left,\n  .right &#123;\n    height: 200px;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n    /* 脱离文档流 */\n    float: left;\n    /* margin-left: -100%; */\n    /* 提高显示层级 */\n    position: relative;\n  &#125;\n  .right-fix &#123;\n    /* 由于设置浮动，默认宽度为 0 */\n    /* 由于设置 父级元素 的 width: 100%;所以 宽度不够 而掉到第二行*/\n    width: 100%;\n    /* 向左移动 此时覆盖掉 左侧*/\n    margin-left: -300px;\n    float: left;\n    background-color: #000000;\n  &#125;\n  .right &#123;\n    /* 自动撑满父盒子 宽度默认父盒子宽度的100% */\n    margin-left: 300px;\n    /* padding-left: 300px; */\n    background-color: #ff0000;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 定宽&lt;/div&gt;\n    &lt;div class=&quot;right-fix&quot;&gt;\n      &lt;div class=&quot;right&quot;&gt;右： 自适应&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现\"><a href=\"#float-overflow-属性实现\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><p>**   此方案的优缺点<br>优点：没有第一种解决方案中存在的问题<br>缺点：overflow 属性开启 BFC 模式的同时，也存在溢出隐藏，右列内容溢出的时候就会被隐藏 ，由于开启 BFC 模式，所以不存在第一种解决方案中的同级元素要浮动都浮动的浏览器兼容性问题<br>**</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    height: 500px;\n  &#125;\n  .left,\n  .right &#123;\n    height: 300px;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n    float: left;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n    /* \n            overflow 属性： \n            - hidden 溢出隐藏 和 开启BFC模式，当前元素的内部环境与外界完全隔离\n         */\n    overflow: hidden;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 左对齐&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值\"><a href=\"#使用-display-属性的-table-相关值\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><p>**   此方案的优缺点<br>优点：浏览器的兼容性比较好<br>缺点：将所有元素的 display 属性设置为 table 相关值，受到相应制约，同时也需要重新设置表格的特性，比如双边框、文本内容等问题<br>**</p>\n<pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    height: 500px;\n\n    /* 表格的单元格的宽度会自动分配，左侧固定，右侧则自适应 */\n    display: table;\n    /* \n            table-layout 属性 用来显示表格单元格、行、列的算法规则\n            - automatic: 默认，列宽度有单元格内容设定\n            - fixed: 列宽由表格宽度和列宽度设定\n            - inherit： 规定应该从父元素继承 table-layout 属性的值 \n         */\n    table-layout: fixed;\n    width: 100%;\n  &#125;\n  .left,\n  .right &#123;\n    height: 300px;\n\n    display: table-cell;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 左对齐&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是三列布局\"><a href=\"#什么是三列布局\" class=\"headerlink\" title=\"什么是三列布局\"></a>什么是三列布局</h3><p>—— 两列定宽且相邻，另外一列宽度自适应</p>\n<h3 id=\"三列布局的实现\"><a href=\"#三列布局的实现\" class=\"headerlink\" title=\"三列布局的实现\"></a>三列布局的实现</h3><p>实现方式与两列布局实现方式类似</p>\n<h4 id=\"float-margin-属性实现-1\"><a href=\"#float-margin-属性实现-1\" class=\"headerlink\" title=\"float + margin 属性实现\"></a>float + margin 属性实现</h4><pre><code class=\"html\">&lt;style&gt;\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    height: 500px;\n  &#125;\n  .left,\n  .center,\n  .right &#123;\n    height: 300px;\n  &#125;\n  .left &#123;\n    width: 300px;\n    background-color: #00ffff;\n    /*  */\n    float: left;\n  &#125;\n  .center &#123;\n    width: 300px;\n    background-color: #ffff00;\n\n    float: left;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n\n    margin-left: 600px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 定宽&lt;/div&gt;\n    &lt;div class=&quot;center&quot;&gt;中：定宽&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"float-overflow-属性实现-1\"><a href=\"#float-overflow-属性实现-1\" class=\"headerlink\" title=\"float + overflow 属性实现\"></a>float + overflow 属性实现</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n<h4 id=\"使用-display-属性的-table-相关值-1\"><a href=\"#使用-display-属性的-table-相关值-1\" class=\"headerlink\" title=\"使用 display 属性的 table 相关值\"></a>使用 display 属性的 table 相关值</h4><pre><code class=\"html\">略，参考两列布局\n</code></pre>\n<h3 id=\"什么是等分布局\"><a href=\"#什么是等分布局\" class=\"headerlink\" title=\"什么是等分布局\"></a>什么是等分布局</h3><p>—— 一行被分成若干列，每一列的宽度相同</p>\n<h3 id=\"等分布局的实现\"><a href=\"#等分布局的实现\" class=\"headerlink\" title=\"等分布局的实现\"></a>等分布局的实现</h3><ul>\n<li>float 属性实现等分布局效果</li>\n<li>display 属性的值有关 table 的值实现</li>\n</ul>\n<h4 id=\"float-属性实现等分布局效果\"><a href=\"#float-属性实现等分布局效果\" class=\"headerlink\" title=\"float 属性实现等分布局效果\"></a>float 属性实现等分布局效果</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n         *   \n         *\n         */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n\n  .parent &#123;\n    background-color: #eee;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n    width: 20%;\n    float: left;\n  &#125;\n  .column2 &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n    background-color: #00ff00;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n    &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n    &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n    &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"display-属性的值有关-table-的值实现\"><a href=\"#display-属性的值有关-table-的值实现\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n     * \n     *  \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n\n  .parent &#123;\n    background-color: #eee;\n\n    width: 100%;\n    /* &lt;table&gt; 元素 */\n    display: table;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n\n    /* &lt;td&gt; 元素 */\n    display: table-cell;\n  &#125;\n  .column2 &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n    background-color: #00ff00;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;column1&quot;&gt;1&lt;/div&gt;\n    &lt;div class=&quot;column2&quot;&gt;2&lt;/div&gt;\n    &lt;div class=&quot;column3&quot;&gt;3&lt;/div&gt;\n    &lt;div class=&quot;column5&quot;&gt;5&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;6&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"等分布局的空白间距\"><a href=\"#等分布局的空白间距\" class=\"headerlink\" title=\"等分布局的空白间距\"></a>等分布局的空白间距</h4><p>[ 方法一 代码修改 ]</p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     * 间距 + 容器宽度 = (间距 + 列宽度) * N列数 \n     *  \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent-fix &#123;\n    /* 溢出隐藏 */\n    overflow: hidden;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    /* 解决高度塌陷 */\n    overflow: hidden;\n    /* height: 500px; */\n    margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n    width: 20%;\n    float: left;\n\n    padding-left: 20px;\n    /* margin-left: 20px;  */\n    /*\n            box-sizing 属性 \n           */\n    box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n    background-color: #00ff00;\n  &#125;\n  .inner &#123;\n    height: 500px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 方法二 代码修改 ]</p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     * 实际开发中 parent 元素 width 的值是有一个范围\n     * 在此案例中 parent-fix 的宽度为  1369px - 20px\n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent-fix &#123;\n    overflow: hidden;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    width: 1369px;\n    /* &lt;table&gt; 元素 */\n    display: table;\n    margin-left: -20px;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 500px;\n\n    /* &lt;td&gt; 元素 */\n    display: table-cell;\n\n    padding-left: 20px;\n    box-sizing: border-box;\n  &#125;\n  .column2 .inner &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 .inner &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 .inner &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 .inner &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 .inner &#123;\n    background-color: #00ff00;\n  &#125;\n  .inner &#123;\n    height: 500px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent-fix&quot;&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n      &lt;div class=&quot;column1&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column2&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column3&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column5&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n      &lt;div class=&quot;column6&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是等高布局\"><a href=\"#什么是等高布局\" class=\"headerlink\" title=\"什么是等高布局\"></a>什么是等高布局</h3><p>—— 一行被分成若干列，每一列的高度相同</p>\n<h3 id=\"等高布局的实现\"><a href=\"#等高布局的实现\" class=\"headerlink\" title=\"等高布局的实现\"></a>等高布局的实现</h3><ul>\n<li>display 属性的值有关 table 的值实现</li>\n<li>padding + margin 实现等高布局效果</li>\n</ul>\n<h4 id=\"display-属性的值有关-table-的值实现-1\"><a href=\"#display-属性的值有关-table-的值实现-1\" class=\"headerlink\" title=\"display 属性的值有关 table 的值实现\"></a>display 属性的值有关 table 的值实现</h4><pre><code class=\"html\">&lt;style&gt;\n  /* \n     * 表格中的单元格 默认是等高的，无论内容多少\n     * \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    /* &lt;table&gt; 元素 */\n    display: table;\n    table-layout: fixed;\n  &#125;\n  .left,\n  .right &#123;\n    width: 300px;\n\n    /* &lt;td&gt; 元素 */\n    display: table-cell;\n  &#125;\n  .left &#123;\n    background-color: #ffff00;\n  &#125;\n  .right &#123;\n    background-color: #ff66ff;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae\n      dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at\n      est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"padding-margin-实现等高布局效果\"><a href=\"#padding-margin-实现等高布局效果\" class=\"headerlink\" title=\"padding + margin 实现等高布局效果\"></a>padding + margin 实现等高布局效果</h4><pre><code class=\"html\">    &lt;style&gt;\n    /*\n     *\n     *\n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0;\n    &#125;\n\n    .parent &#123;\n        background-color: #eee;\n        /* 解决高度塌陷 */\n        overflow: hidden;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n\n        float: left;\n\n        padding-bottom: 99999px;\n        margin-bottom: -99999px;\n    &#125;\n    .left &#123;\n        background-color: #ffff00;\n    &#125;\n    .right &#123;\n        background-color: #ff66ff;\n    &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt;imooc&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis repudiandae dolore minus maxime ex quos consectetur cumque autem iure vero corrupti at est cupiditate, praesentium dolorem itaque doloremque soluta veritatis!&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"CSS-3-多列布局\"><a href=\"#CSS-3-多列布局\" class=\"headerlink\" title=\"CSS 3 多列布局\"></a>CSS 3 多列布局</h3><p>[ column 属性 ]</p>\n<p>——column 属性是一个简写属性   包含 column-count 属性 定义列的数量 和 column-width 属性定义列的宽度</p>\n<ul>\n<li><p>column-count 属性 用于设置列的数量或允许的最大列数</p>\n</li>\n<li><p>auto: 默认值，用于表示列的数量由其他 CSS 属性绝对决定</p>\n</li>\n<li><p>number: 必须是正整数，用于表示定义列的数量</p>\n</li>\n<li><p>column-width 属性 用于设置列的宽度或列的最小宽度</p>\n<ul>\n<li>auto: 默认值，用于表示列的宽度由其他 CSS 属性绝对决定</li>\n<li>length: 必须是正整数，用于表示定义列的宽度</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     *  \n     *  \n     *\n     */\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 6 auto;\n  &#125;\n  .column1,\n  .column2,\n  .column3,\n  .column5,\n  .column6 &#123;\n    height: 300px;\n  &#125;\n  .column2 &#123;\n    background-color: #ff66ff;\n  &#125;\n  .column3 &#123;\n    background-color: #00ffff;\n  &#125;\n  .column1 &#123;\n    background-color: #ffff00;\n  &#125;\n  .column5 &#123;\n    background-color: #ff0000;\n  &#125;\n  .column6 &#123;\n    background-color: #00ff00;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;column1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column5&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column6&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>[ 列的间距 ]</p>\n<ul>\n<li>column-gap 属性用于设置列于列之间的间距，该属性需要为多列显示时的元素设置<ul>\n<li>normal:   用于表示使用浏览器定义列的默认间距，默认值 1em</li>\n<li>length: 必须是正整数，用于表示定义列之间的间距</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<p>[列的边框 column-rule ]</p>\n<p>—— column-rule 属性用于定义列于列之间的边框，其中包括边框宽度、边框颜色、边框样式。</p>\n<ul>\n<li>column-rule-width: 列于列之间的边框宽度</li>\n<li>column-rule-color: 列于列之间的边框颜色</li>\n<li>column-rule-style: 列于列之间的边框样式</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .parent &#123;\n    background-color: #eee;\n\n    /* column-count: 6; */\n    /* column-width: 200px; */\n    /* 简写属性 */\n    columns: 5 auto;\n\n    column-gap: 20px;\n\n    /* column-rule-width: 5px;\n       column-rule-color: #ff0000;\n       column-rule-style: double; */\n    /* 简写属性 */\n    column-rule: 5px #ff0000 double;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<p>[ 横跨多列 ]</p>\n<ul>\n<li>column-span 属性 用于定义一个列元素是否跨列<ul>\n<li>none：表示元素不跨列</li>\n<li>all: 表示元素跨所有列</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .column6 &#123;\n    background-color: #00ff00;\n    column-span: all;\n  &#125;\n&lt;/style&gt;\n</code></pre>\n<p>[ 列的填充 ]</p>\n<ul>\n<li>column-fill 属性用于定义列的高度由内容决定，还是同一高度<ul>\n<li>auto: 默认值，列的高度由内容绝对</li>\n<li>balance: 列的高度根据内容最多的一列的高度为准</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .column6,\n  .column7,\n  .column8,\n  .column9 &#123;\n    /* 浏览器兼容不好 包括chrome浏览器 */\n    column-fill: balance;\n  &#125;\n&lt;/style&gt;\n&lt;div class=&quot;parent&quot;&gt;\n  &lt;div class=&quot;column6&quot;&gt;\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsum eum dolorum\n    ad quod velit. Corporis inventore alias nostrum dignissimos nihil saepe\n    harum vitae, sint, id voluptate, reprehenderit officiis magnam repellat?\n  &lt;/div&gt;\n\n  &lt;div class=&quot;column7&quot;&gt;\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur iure\n    dolorum deleniti soluta ipsum at ratione magni recusandae, sapiente\n    necessitatibus, expedita nobis, animi corrupti exercitationem delectus ullam\n    unde sed autem.\n  &lt;/div&gt;\n\n  &lt;div class=&quot;column8&quot;&gt;\n    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius placeat\n    blanditiis harum? Eum, sit corporis illo maxime, nemo excepturi nisi\n    eveniet, error quis ex cum ut nulla sunt aut saepe? Lorem ipsum dolor sit\n    amet consectetur, adipisicing elit. Facilis debitis officia distinctio\n    cupiditate tempora! Debitis corrupti omnis rerum voluptates laboriosam hic\n    alias repellat nostrum, expedita rem perspiciatis totam maxime labore!\n  &lt;/div&gt;\n  &lt;div class=&quot;column9&quot;&gt;\n    Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laborum, earum.\n    Nobis illo maxime necessitatibus voluptatibus quam nemo blanditiis impedit\n    perferendis, porro delectus eligendi laboriosam voluptate adipisci, culpa\n    vitae accusantium nesciunt.\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"经典布局\"><a href=\"#经典布局\" class=\"headerlink\" title=\"经典布局\"></a>经典布局</h2><h3 id=\"什么是圣杯布局\"><a href=\"#什么是圣杯布局\" class=\"headerlink\" title=\"什么是圣杯布局\"></a>什么是圣杯布局</h3><ul>\n<li>布局效果类似于圣杯而得名，也叫做三行三列布局。</li>\n<li>定宽 — 自适应 — 定宽</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465022554-4c8f3ae6-2497-40a8-a62b-436225a96465.png#align=left&display=inline&height=634&name=%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.png&originHeight=634&originWidth=1184&size=80271&status=done&style=none&width=1184\" alt=\"圣杯布局.png\"></p>\n<p>[根据两列布局实现 定宽 — 自适应 — 定宽 布局方式]</p>\n<pre><code class=\"html\">   &lt;style&gt;\n    /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同\n     *\n     */\n    * &#123;\n       margin: 0;\n       padding: 0;\n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        background-color: #eee;\n        padding: 10px;\n    &#125;\n    .left,\n    .center,\n    .right &#123;\n        height: 300px;\n    &#125;\n    .left,\n    .right &#123;\n        width: 300px;\n    &#125;\n    .left &#123;\n        width: 300px;\n        background-color: #00ffff;\n        float: left;\n    &#125;\n    .center &#123;\n        background-color: #ffff00;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    .right &#123;\n        background-color: #ff0000;\n        float: right;\n    &#125;\n    /* 中间自适应部分没有浮动，右边元素浮动，在兄弟元素中，前边元素没有浮动，后边的元素浮动，浮动的元素不允许超过前边的元素，依旧垂直方向排列，把right的结构位置调到前面*/\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n        &lt;div class=&quot;center&quot;&gt; 中：定宽 &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"圣杯布局的实现\"><a href=\"#圣杯布局的实现\" class=\"headerlink\" title=\"圣杯布局的实现\"></a>圣杯布局的实现</h3><pre><code class=\"html\">&lt;style&gt;\n  /* 改变了结构顺序，搜索引擎抓取主要内容变为最后\n     * 结构不同，解决方案也会不同  \n     * 根据问题，把center调至最前，但是需要其他方法解决，即给三个div添加父元素 \n     */\n\n  * &#123;\n    margin: 0;\n    padding: 0;\n  &#125;\n  .header,\n  .footer &#123;\n    height: 100px;\n    background-color: #000;\n  &#125;\n  .parent &#123;\n    background-color: #eee;\n    /* 解决父级元素高度塌陷 */\n    height: 300px;\n    /* 对应 left 的宽度 */\n    margin-left: 300px;\n    /* 对应 right 的宽度  */\n    margin-right: 300px;\n  &#125;\n  .left,\n  .center,\n  .right &#123;\n    height: 300px;\n    /* 使三个div 浮动 */\n    float: left;\n  &#125;\n  .left,\n  .right &#123;\n    width: 300px;\n  &#125;\n\n  .left &#123;\n    background-color: #00ffff;\n    /* 将当前元素从当前行移动到上一行同一个位置*/\n    margin-left: -100%;\n    /* 将当前元素移动到理想位置 */\n    position: relative;\n    left: -300px;\n  &#125;\n  .center &#123;\n    width: 100%;\n    background-color: #ffff00;\n  &#125;\n  .right &#123;\n    background-color: #ff0000;\n    margin-left: -300px;\n    position: relative;\n    right: -300px;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;center&quot;&gt;中：定宽&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;左： 定宽&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右：自适应&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"什么是双飞翼布局\"><a href=\"#什么是双飞翼布局\" class=\"headerlink\" title=\"什么是双飞翼布局\"></a>什么是双飞翼布局</h3><p>—— 最早由淘宝团队提出，是针对圣杯布局的局部优化解决方案，主要优化了圣杯布局中开启定位的问题。</p>\n<h3 id=\"双飞翼布局的实现\"><a href=\"#双飞翼布局的实现\" class=\"headerlink\" title=\"双飞翼布局的实现\"></a>双飞翼布局的实现</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;双飞翼布局&lt;/title&gt;\n    &lt;style&gt;\n        /*\n         *\n         *\n         */\n    * &#123;\n       margin: 0;\n       padding: 0;\n    &#125;\n    .header,\n    .footer &#123;\n        height: 100px;\n        background-color: #000;\n    &#125;\n    .parent &#123;\n        height: 300px;\n        background-color: #eee;\n\n    &#125;\n    .left &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #00ffff;\n\n        float: left;\n        margin-left: -100%;\n    &#125;\n    .center &#123;\n        width: 100%;\n        height: 300px;\n        background-color: #ffff00;\n\n        float: left;\n    &#125;\n    .right &#123;\n        width: 300px;\n        height: 300px;\n        background-color: #ff0000;\n\n        float: left;\n        margin-left: -300px;\n    &#125;\n    .inner &#123;\n        height: 300px;\n        background-color: #ff66ff;\n        margin-left: 300px;\n        margin-right: 300px;\n    &#125;\n    &lt;/style&gt;\n&lt;body&gt;\n    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;center&quot;&gt;\n            &lt;div class=&quot;inner&quot;&gt;中：定宽&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;left&quot;&gt; 左： 定宽&lt;/div&gt;\n        &lt;div class=&quot;right&quot;&gt; 右：自适应&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"全屏布局\"><a href=\"#全屏布局\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h2><hr>\n<p>title: 全屏布局<br>date: 2019-11-01 20:43:24<br>tags:</p>\n<ul>\n<li>CSS</li>\n<li>CSS 布局</li>\n</ul>\n<hr>\n<h3 id=\"什么是全屏布局？\"><a href=\"#什么是全屏布局？\" class=\"headerlink\" title=\"什么是全屏布局？\"></a>什么是全屏布局？</h3><p>—— HTML 页面铺满整个浏览器串口窗口，并且没有横竖滚动条，而且可以跟随浏览器窗口的大小变化而变化。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585465562542-153aa1a9-15a9-49fd-b0e4-da921a11a670.png#align=left&display=inline&height=639&name=%E5%85%A8%E5%B1%8F%E5%B8%83%E5%B1%80.png&originHeight=639&originWidth=1228&size=85361&status=done&style=none&width=1228\" alt=\"全屏布局.png\"></p>\n<pre><code class=\"html\">&lt;style&gt;\n  /* \n     * .content .right &#123;\n        height: 1000px;\n        background-color: rgb(243, 239, 12);\n        margin-left: 300px;\n        &#125;\n     *  此元素的高度可以不用设置，由内容高度撑开。\n     *\n     */\n  html,\n  body &#123;\n    margin: 0;\n    padding: 0;\n    /* 避免全屏出现滚动条*/\n    overflow: hidden;\n  &#125;\n  header &#123;\n    height: 100px;\n    background-color: #eee;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n  &#125;\n\n  .content &#123;\n    /* 提供滚动条 */\n    overflow: auto;\n    background-color: rgb(14, 197, 221);\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 100px;\n    bottom: 100px;\n  &#125;\n  .content .left &#123;\n    width: 300px;\n    height: 100%;\n    background-color: rgb(247, 54, 54);\n\n    position: fixed;\n    left: 0;\n    top: 100px;\n    bottom: 100px;\n  &#125;\n  .content .right &#123;\n    height: 1000px;\n    background-color: rgb(243, 239, 12);\n    margin-left: 300px;\n  &#125;\n  footer &#123;\n    height: 100px;\n    background-color: rgb(39, 38, 38);\n\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  &#125;\n&lt;/style&gt;\n&lt;body&gt;\n  &lt;header&gt;&lt;/header&gt;\n  &lt;div class=&quot;content&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;footer&gt;&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"居中布局-1\"><a href=\"#居中布局-1\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h3><ul>\n<li>水平居中布局</li>\n<li>垂直居中布局</li>\n<li>居中布局（ 水平 + 垂直 ）</li>\n</ul>\n<h3 id=\"多列布局-1\"><a href=\"#多列布局-1\" class=\"headerlink\" title=\"多列布局\"></a>多列布局</h3><ul>\n<li>两列布局</li>\n<li>三列布局</li>\n<li>等分布局</li>\n<li>等高布局</li>\n<li>CSS 3 多列布局</li>\n</ul>\n<h3 id=\"经典布局-1\"><a href=\"#经典布局-1\" class=\"headerlink\" title=\"经典布局\"></a>经典布局</h3><ul>\n<li>圣杯布局</li>\n<li>双飞翼布局</li>\n</ul>\n<h3 id=\"全屏布局-1\"><a href=\"#全屏布局-1\" class=\"headerlink\" title=\"全屏布局\"></a>全屏布局</h3><h3 id=\"未涉及的布局\"><a href=\"#未涉及的布局\" class=\"headerlink\" title=\"未涉及的布局\"></a>未涉及的布局</h3><ul>\n<li>网格布局</li>\n<li>弹性盒子布局 CSS3</li>\n</ul>\n<p>** ****没有任何一种布局方式是全优的，在实际应用中根据实际情况选择最合理的布局方式**</p>\n"},{"title":"JavaScript 基础","urlname":"awf89w","date":"2020-01-04T14:05:46.000Z","abbrlink":3807719240,"_content":"\n## JavaScript\n\nJS:轻量级的客户端脚本编程语言\n\n书籍:\n\n1.编程语言\n\nHTML+CSS 是标记语言。\n\n编程语言是具备一定逻辑的,拥有自己的编程思想(面向对象编程[OOP],面向过程编程)\n\n- 面向对象\n  - C++\n  - JAVA\n  - PHP\n  - C#(.NET)\n  - JS\n  - ...\n- 面向过程\n\n  - C\n\n  2.目前的 JS 是基于 NODE 可以做服务器端程序，所以 JS 是全栈编程语言。\n\n  3.JS 学习\n\n- ECMAScript(ES): JS 核心语法\n- DOM: document object model 文档对象模型，提供各种 API(属性和方法),让 JS 可以获取或操作页面中的 HTML 元素(DOM 和元素)\n- BOM: browser object model 浏览器对象模型，提供各种 API,让 JS 操作浏览器\n\n  4.ECMAScript\n\n它是 JS 语法规划，规定:JS 中的变量、数据类型、语法规范、操作语句、设计模式等等\n\n- 版本\n  - 1997 ES1.0\n  - 1998 ES2.0\n  - 1999 ES3.0(广泛应用)\n  - 2000 ES4(夭折)\n  - 2015/6 ES6\n  - ...\n\n---\n\n## 变量(varibale)\n\n它不是具体的值，只是一个用来存储具体值的容器或者代名词。存储的值可以改变，即变量。\n\n基于 ES 语法规范，在 JS 中创建变量的方式\n\n- var (ES3)\n- function(ES3)   创建函数(函数名也是变量，只不过存储的值是函数类型)\n- let (ES6)\n- const (ES6) 创建的是常量\n- import (ES6) 基于 ES6 的模块规范导出需要的信息\n- class (ES6) 基于 ES6 创建类\n\n```javascript\n/* 语法:\n * var [变量名]=值;\n * let [变量名]=值;\n * const [变量名]=值;\n * function 函数名() {\n *\n * }\n *   ...\n */\nvar n = 13;\nn = 15;\nalert(n + 10);\n\nconst m = 100;\nm = 150; // => Uncaught TypeError: Assignment to constant variable. 不能给一个常量重新赋值，常量存储的值不能被修改。\n```\n\n创建变量，命名的时候要遵循一些规范\n\n- 严格区分大小写\n\n```javascript\nvar n = 12;\nvar N = 13; //=> 两个N不是同一个变量\n```\n\n- 遵循驼峰命名法:按照数字、字母、下划线或者$来命名，数字不能作为名字的开头，命名的时候基于英文单词组成一个完整的名字，第一个单词字母小写，其余每一个有意义的单词的首字母都大写。一般“ \\_ ” 在前的，都是公共变量，如: `_studentInfo`\n- 不能使用关键字和保留字\n\n---\n\n## 数据类型\n\n数据值是一门编程语言进行生产的材料，JS 中的数据类型:\n\n- 基本数据类型/值类型\n  - 数字 number\n  - 字符串 string\n  - 布尔 boolean\n  - null\n  - undefined\n- 引用数据类型\n  - 对象 object\n    - 普通对象\n    - 数组对象\n    - 正则对象\n    - 日期对象\n    - ...\n  - 函数 function\n- Symbol (唯一的值，ES6 中新增加的一个特殊的类型)\n\n```javascript\n[基本数据类型]\nvar n = 13; //=>0 -13 13.2 数字类型中有一个特殊的值NaN(not a number 表示不是一个有效的数字，但是属于number类型)\n\nvar s = ''; //=> \"\" '13' “{}”，一个字符串由零到多个字符串组成\n\n\nvar b = true; //=> 布尔 true真 flase假\n\n[引用数据类型]\nvar o = {name: 'serendity',age: 10 }; //=> 普通对象:由大括号包括起来。里面包含多组属性名和属性值/包含多组键值对，{} 空对象\n\nvar ary = [12,23,20, 21]; //=>数组对象:中括号包裹，包含零到多项内容 [] 空数组\n\nvar reg = /-?(\\d|([1-9]\\d+))(\\.\\d+)?/g; //=>正则对象:由元字符组成一个完整的正则  。验证是否为有效数字 ；至少包含一个字符，没有空正则\n\nfunction fn() {\n\n}\n\n[Symbol] 创建出来的是一个唯一的值/没有其他的与它相等\nvar a = Symbol(‘n’)\nvar b = Symbol(‘n’)\na===b // => false\nconst a = Symbol(‘n’); // => 只是唯一的并且不可以被更改，用const声明。\n```\n\n扩展: JS 代码如何被运行以及运行后如何输出结果\n\n[如何被运行]\n\n- 把代码运行在浏览器中/浏览器内核来渲染解析\n- 基于 NODE 来运行/Node 也是一个基于 V8 引擎渲染和解析 JS 的工具，注:node 不是一种语言，是渲染 JS 的工具或平台。\n\n[如何输出结果]\n\n- alert: 在浏览器中通过弹窗的方式输出/浏览器提示框\n\n```javascript\nwindow.alert();\nalert(1 + 1); // => '2',基于alert输出的结果都会转换为字符串:把值(如果是表达式先计算出结果)通过toString这个方法转换为字符串，然后输出\nalert(true); // => 'true'\n// alert({name:'xxx'}); => '[object object]'\n// {name:'xxx'}.toString =>'[object object]' 为什么？\n// 对象.toString后的结果是object object.\n```\n\n- confirm: 和 alert 的用法一致。只不过提示框中有确定和取消两个按钮。 即确认提示框。\n\n```javascript\nvar flag = confirm(\"确定要退出吗？\");\nif (flag) {\n  //=>flag:true 用户点击确定\n} else {\n  //=>flag:flase 用户点击取消\n}\n```\n\n- prompt: 在 confirm 的基础上增加输入框 点击取消 输出 null, 确定 输出空字符串\n- console.log: 在浏览器控制台输出日志\n  - Elements\n  - Console: 控制台\n  - Sources: 网站源文件\n  - ...\n- console.dir: 比 log 输出的更加详细一些，尤其输出对象数据值时\n- console.table: 把 JSON 数据按照表格的方式输出\n- ...更多 console 输出方法\n\n---\n\n## 数据类型的详细刨析\n\n### number 数字类型\n\n1. number 数字类型\n\nNaN : not a number 但是它是数字类型的\n\nisNaN: 检测当前的值是否不是有效数字 返回  true 表示不是有效数字，flase 是有效数字\n\n```javascript\n// = > isNaN ([value])\nvar num = 12\nisNaN(num); // = > 检测 num 变量存储的值是否为有效数字 flase\nisNaN('13');  = > false\nisNaN('num');  = > true\nisNaN(true); = > false\nisNaN(false); = > false\nisNaN(undefined); = > true\nisNaN({age:'9'}); = > true\nisNaN([12,23]); = > true\nisNaN([12]); = > false\nisNaN(/^$/); = > true\nisNaN(function() {}); = > true\n/*\n重要： isNaN 检测机制\n1. 首先验证当前值是否为数字类型，如果不是浏览器默认把值转换为数字类型\n    把非数字类型转换为数字\n    - 其他数字类型转换位数字： 使用 Number 方法转换\n    [字符串转数字]\n        Number('13') -> 13\n        Number('13px') -> NaN 如果字符串出现任意一个非有效数字的字符 结果则为 NaN\n        Number('13.5') -> 13.5\n        Number('13.5.0') -> NaN\n    [布尔转数字]\n        Number(true) -> 1\n        Number(false) -> 0\n    [其他]\n    \tNumber(null) -> 0\n    \tNumber(undefined) -> NaN\n    - 把引用数据类型转换为数字： 先把引用值调取 toString 转换为字符串，然后再把字符串调取 Number 转换为数字。\n   [对像转数字]\n       所有对象 toString() => '[object object]'\n       ({}）).toString() -> '[object object]' - > NaN\n   [数组转数字]\n       ([12,23]).toString() -> '12,23' - > NaN\n       ([12]).toString() -> '12' - > 12\n   [函数转数字]\n       (function() {}).toString() -> \"function() {}\" -> NaN\n   [正则]\n       /^$/.toString() -> '/^$/' - > NaN\n\nNumber('') - > 0\n\n[].toString() -> ''=> isNaN([]) => false\n\n2. 当前值已经是数字类型，是有效数字返回 false，不是返回 true (数字类型中 只有 NaN 不是有效数字 其余都是有效数字)\n\n*/\n```\n\n2. parseInt / parseFloat\n\n> 等同于 Number ,也是为了把其他类型的值转换为数字类型\n\n和 Number 区别在于字符串的转换分析\n\nNumber: 出现任意非有效数字字符 结果就是 NaN;\n\nparseInt: 把一个字符串中的整数部分解析出来\n\nparseFloat:把一个字符串中的小数（浮点数）部分解析出来\n\n```javascript\nparseInt('13.5px') => 13\nparseFloat('13.5px') = > 13.5\n\nparseInt('width:13.5px') => NaN 从字符串最左边字符串开始查找有效数字字符并且转换为数字，一旦遇到一个非有效数字字符，查找结束。\n```\n\n3. NaN 的比较\n\nNaN: 不是一个数，可以是其他任何东西\n\n```javascript\nNaN == NaN  => false NaN 和谁都不相等 包括自己\n\n思考： 有一个变量 num ;存储的值不知道，检测是否为一个有效数字，一下方案是否可以\n\n if(Number(num) == NaN) {\n   alert('不是')\n }\n NaN 和谁都不相等，假设 num 不是有效数字，=> NaN; 此条件永远不成立，即使 num 确实不是有效数字。\n\n // 有效数字 检测只有这一种方案\nif(isNaN(num)) { // true 不是有效数字\n   alert('不是')\n }\n```\n\n### 布尔类型\n\n> 只有两个值： true / false\n\n1. 如何把其他数据类型转换为布尔类型?\n\n- Boolan(); 数字中除了 0 和 NaN 是 false 其他都是 true\n- !\n- !!\n\n```javascript\nBoolean(1) = > true\nBoolean(0) = > false\n\nBoolean(-1) = > true\nBoolean(NaN) = > false\n\n!'Serendipity' // 先把其他数据类型转换为布尔类型 然后取反  ！true => false\n\n!!'' // 先把其他数据类型转换为布尔类型 然后取两次反，等价于没取反，即剩下布尔值   => false\n```\n\n**规律： `在 JS 中只有“ 0 / NaN / 空字符串 / null / undefined ”这五个值转换为布尔类型为 false,其余都转换为 true`**\n\n### null 和 undefined\n\n> null 和 undefined 都代表空或没有\n>\n> - null: 空对象指针\n> - undefined: 未定义\n\n1. null 和 undefined 的区别\n\n> - null: 一般独使意料之中的没有一般都是手动的先赋值为 null,后面程序会再次赋值\n> - undefined: 意料之外的没有，一般都不是人为手动控制，大部分都是浏览器自主为空，后面赋值也可以不赋值\n\n### Object 对象数据类型\n\n> 普通对象\n>\n> - 由大括号包裹起来\n> - 由零到多组属性名和属性值（键值对）组成\n\n`属性是用来描述当前对像特征的，属性名是对当前具备这个特征，属性值是对这个特征的描述（专业语法：属性名称为键[key],属性值称为值[value],一组属性名和属性值称为一组键值对）`\n\n```javascript\nvar obj = {\n  name: 'serendipity'\n  age: 9\n}\n// => 对象的操作： 对键值对的增删改查\n\n[获取]\n语法： 对象.属性名 / 对象[属性名]\nobj.name\nobj['name'] 一般来说，对象的属性名都是字符串格式的。（属性值不固定，任何格式都可以）\n\n[增/改]\nJS的一个对象中属性名是唯一的，不允许重复\n语法：对象.属性名 = xxx / 对象[属性名] = xxx\nobj.name = '某某某某'； // => 原有对象中存在 name 属性，此处属于修改属性值\nobj.sex = '男'； // => 原有对象中不存在 sex 属性，此处属于增加属性\nobj['age'] = 23;\n\n[删]\n彻底删除：对象中不存在这个属性\ndelete obj['age'];\n假删除：并没有移除这个属性，只是让当前的属性值为空\nobj.sex = null;\n\n在获取属性值的时候，如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）,如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）如果当前对象没有有这个属性名，则获取结果是 undefined;\n```\n\n```javascript\n思考题：\n    var obj = {\n  name: 'serendipity'\n  age: 9\n};\n\nvar name = 'cherish';\nobj.name = >  serendipity    获取的是 name 属性的值\nobj['name'] = > serendipity  获取的是 name 属性的值\nobj.[name] = > undefined     此处的 name 是一个变量 我们获取的属性名不叫做 name ,是 name 存储的值 ‘cherish’,\nobj['cherish'] = > 没有这个属性 ，undefined\n\n----\n 'name' 和 name 的区别\n\n  = > 'name' 是一个字符串值  代表的是本身\n  = > name 是一个变量 不是值 代表本身存储的这个值\n```\n\n[一个对象中的属性名不仅仅是字符串格式，还可能是数字格式的。遇到]\n\n```javascript\nvar obj = {\n    name: 'serendipity'\n     0: 100\n  }\n  obj[0] => 100\n  obj['0'] => 100\n  obj.0 => 报错 SyntaxError 语法错误\n\n\n  ----\n  当我们存储的属性名不是字符串也不是数字的时候，浏览器会把这个值转换为字符串（toString),然后再进行存储\n\n  obj.[{}] = 300; => 先把 ({}).toString() 后的结果作为对象的属性名存储起来 obj.['[object object]'] = 300;\n\n  // 获取的时候\n  obj.[{}]; => 获取的时候也是先把对象转化为字符串'[object object]' ，然后获取之前存储的 300;\n\n\n\n  obj[1]  '1': 100\n  ----\n  数组对象（对象由键值对组成）\n\n  var oo = {\n    a : 12;\n\n  }\n  // 数组也是对象\n\n  var arr = [12,23] // 12 和 23 都是属性值，属性名呢？\n\n  通过观察结果： 数组对象的属性名是数字，（我们把数字属性名称为当前对象的索引）\n\n  arr[0] => 12;\n  arr['0'] => 12;\n  arr.0 => 报错 SyntaxError 语法错误\n  arr.length\n  arr['length']\n\n  []，的语法不支持直接添加属性名 如：[age:12]\n```\n\n**数组也是对象，对象所拥有的操作，都可以运用到数组，可以添加非数字索引，数组的索引也是属性名，但是比较特殊可以递增。所有的对象 object 都可以运用对象的操作 函数也是对象**\n\n## 浅分析 JS 的运行机制\n\n```javascript\nvar a = 12;\nvar b = a;\nb = 13;\nconsole.log(a); // => 12\n\nvar obj1 = { n: 100 };\nvar obj2 = obj1;\nobj2[\"n\"] = 200;\nconsole.log(obj1.n); // => 200\n\n/**\n * 浅分析 JS 运行机制\n * 1.当浏览器（他的内核 / 引擎）渲染和解析 js 的时候，会提供一个供 js 代码运行的环境我们把这个环境称为全局作用域（global/windowscope)\n *\n * 2.代码自上而下执行（之前还有一个变量提升阶段）\n *   = > 基本数据类型的值会存储再当前作用域下\n *     var a = 12 ;\n *     1）首先开辟一个空间（栈内存空间）存储 12\n *     2）在当前作用域中声明一个变量 a\n *     3）让声明的变量和存储的 12 进行关联（把存储的 12 赋值给 a =>赋值操作叫做定义）\n *\n *     - > 基本数据类型值（值类型），是按照值来操作的：把原有的值复制一份放到新的空间或位置上，和原来的值没有关系\n *\n *   = > 引用数据类型的值不能直接存储到当前的作用域下（因为可能存储的内容过去复杂），需要先开辟一个新的空间（理解为仓库），把内容存储到这个空间中。\n *     var obj = {n: 100};\n *     1) 首先开辟一个新的内存空间(堆内存空间)，把对象中的键值对依次存储（为了保证后面查找该空间，此空间有一个 16 进制的地址）\n *     2）声明一个变量\n *     3）让变量和空间地址关联一起（把空间地址赋值给变量）\n *\n *     - > 引用类型不是按照值来操作，它操作的是空间的引用地址：把原来空间的地址赋值给新的变量，但是原来的空间没有被克隆，还是一个空间，这样就会出现多个变量关联的是相同的空间，相互之间存在影响。\n *\n *    栈内存 和 堆内存\n *\n *  栈内存：提供一个代码运行的环境 本身就是代码运行的环境，所有的基本类型值都会在栈内存中开辟一个对应的位置进行存储。\n *\n *  堆内存：独立，用来存储引用类型中的信息值（对象存储的是键值对，函数存储的是代码字符串）\n *\n */\n```\n\n[ 堆栈练习 ]\n\n```javascript\nvar obj = {\n  n: 10,\n  m: obj.n * 10,\n  //  property 'n' of undefined 报错\n};\nconsole.log(obj.m);\n\n/**\n * 1. 形成一个全局作用域\n * 2. 代码自上而下执行\n *    1.首先开辟一个堆内存，把键值对存储到堆内存中，\n *          n: 10,\n            m: obj.n * 10 = > obj.n 此时堆内存还没有存储完成，空间地址还没有给 obj ,此时的 obj 是 undefined,\n\n            obj.n <=> undefined.n \n            undefined 是基本数据类型 没有属性，故报错  Uncaught TypeError: Cannot read property 'n' of undefined\n    at 2.js:15\n\n * \n */\n\nvar ary1 = [3, 4];\nvar ary2 = ary1;\nary2[0] = 1;\nary2 = [4, 5];\nary2[1] = 2;\narr[1] = 0;\nconsole.log(ary1, ar2); // => 1,0  4,2\n```\n\n## JS 中的操作语句\n\n### 判断语句\n\n1. if / else if / else\n2. if / else if / else\n","source":"_posts/语雀/awf89w.md","raw":"---\ntitle: JavaScript 基础\nurlname: awf89w\ndate: '2020-01-04 22:05:46 +0800'\ntags: []\ncategories: []\nabbrlink: 3807719240\n---\n\n## JavaScript\n\nJS:轻量级的客户端脚本编程语言\n\n书籍:\n\n1.编程语言\n\nHTML+CSS 是标记语言。\n\n编程语言是具备一定逻辑的,拥有自己的编程思想(面向对象编程[OOP],面向过程编程)\n\n- 面向对象\n  - C++\n  - JAVA\n  - PHP\n  - C#(.NET)\n  - JS\n  - ...\n- 面向过程\n\n  - C\n\n  2.目前的 JS 是基于 NODE 可以做服务器端程序，所以 JS 是全栈编程语言。\n\n  3.JS 学习\n\n- ECMAScript(ES): JS 核心语法\n- DOM: document object model 文档对象模型，提供各种 API(属性和方法),让 JS 可以获取或操作页面中的 HTML 元素(DOM 和元素)\n- BOM: browser object model 浏览器对象模型，提供各种 API,让 JS 操作浏览器\n\n  4.ECMAScript\n\n它是 JS 语法规划，规定:JS 中的变量、数据类型、语法规范、操作语句、设计模式等等\n\n- 版本\n  - 1997 ES1.0\n  - 1998 ES2.0\n  - 1999 ES3.0(广泛应用)\n  - 2000 ES4(夭折)\n  - 2015/6 ES6\n  - ...\n\n---\n\n## 变量(varibale)\n\n它不是具体的值，只是一个用来存储具体值的容器或者代名词。存储的值可以改变，即变量。\n\n基于 ES 语法规范，在 JS 中创建变量的方式\n\n- var (ES3)\n- function(ES3)   创建函数(函数名也是变量，只不过存储的值是函数类型)\n- let (ES6)\n- const (ES6) 创建的是常量\n- import (ES6) 基于 ES6 的模块规范导出需要的信息\n- class (ES6) 基于 ES6 创建类\n\n```javascript\n/* 语法:\n * var [变量名]=值;\n * let [变量名]=值;\n * const [变量名]=值;\n * function 函数名() {\n *\n * }\n *   ...\n */\nvar n = 13;\nn = 15;\nalert(n + 10);\n\nconst m = 100;\nm = 150; // => Uncaught TypeError: Assignment to constant variable. 不能给一个常量重新赋值，常量存储的值不能被修改。\n```\n\n创建变量，命名的时候要遵循一些规范\n\n- 严格区分大小写\n\n```javascript\nvar n = 12;\nvar N = 13; //=> 两个N不是同一个变量\n```\n\n- 遵循驼峰命名法:按照数字、字母、下划线或者$来命名，数字不能作为名字的开头，命名的时候基于英文单词组成一个完整的名字，第一个单词字母小写，其余每一个有意义的单词的首字母都大写。一般“ \\_ ” 在前的，都是公共变量，如: `_studentInfo`\n- 不能使用关键字和保留字\n\n---\n\n## 数据类型\n\n数据值是一门编程语言进行生产的材料，JS 中的数据类型:\n\n- 基本数据类型/值类型\n  - 数字 number\n  - 字符串 string\n  - 布尔 boolean\n  - null\n  - undefined\n- 引用数据类型\n  - 对象 object\n    - 普通对象\n    - 数组对象\n    - 正则对象\n    - 日期对象\n    - ...\n  - 函数 function\n- Symbol (唯一的值，ES6 中新增加的一个特殊的类型)\n\n```javascript\n[基本数据类型]\nvar n = 13; //=>0 -13 13.2 数字类型中有一个特殊的值NaN(not a number 表示不是一个有效的数字，但是属于number类型)\n\nvar s = ''; //=> \"\" '13' “{}”，一个字符串由零到多个字符串组成\n\n\nvar b = true; //=> 布尔 true真 flase假\n\n[引用数据类型]\nvar o = {name: 'serendity',age: 10 }; //=> 普通对象:由大括号包括起来。里面包含多组属性名和属性值/包含多组键值对，{} 空对象\n\nvar ary = [12,23,20, 21]; //=>数组对象:中括号包裹，包含零到多项内容 [] 空数组\n\nvar reg = /-?(\\d|([1-9]\\d+))(\\.\\d+)?/g; //=>正则对象:由元字符组成一个完整的正则  。验证是否为有效数字 ；至少包含一个字符，没有空正则\n\nfunction fn() {\n\n}\n\n[Symbol] 创建出来的是一个唯一的值/没有其他的与它相等\nvar a = Symbol(‘n’)\nvar b = Symbol(‘n’)\na===b // => false\nconst a = Symbol(‘n’); // => 只是唯一的并且不可以被更改，用const声明。\n```\n\n扩展: JS 代码如何被运行以及运行后如何输出结果\n\n[如何被运行]\n\n- 把代码运行在浏览器中/浏览器内核来渲染解析\n- 基于 NODE 来运行/Node 也是一个基于 V8 引擎渲染和解析 JS 的工具，注:node 不是一种语言，是渲染 JS 的工具或平台。\n\n[如何输出结果]\n\n- alert: 在浏览器中通过弹窗的方式输出/浏览器提示框\n\n```javascript\nwindow.alert();\nalert(1 + 1); // => '2',基于alert输出的结果都会转换为字符串:把值(如果是表达式先计算出结果)通过toString这个方法转换为字符串，然后输出\nalert(true); // => 'true'\n// alert({name:'xxx'}); => '[object object]'\n// {name:'xxx'}.toString =>'[object object]' 为什么？\n// 对象.toString后的结果是object object.\n```\n\n- confirm: 和 alert 的用法一致。只不过提示框中有确定和取消两个按钮。 即确认提示框。\n\n```javascript\nvar flag = confirm(\"确定要退出吗？\");\nif (flag) {\n  //=>flag:true 用户点击确定\n} else {\n  //=>flag:flase 用户点击取消\n}\n```\n\n- prompt: 在 confirm 的基础上增加输入框 点击取消 输出 null, 确定 输出空字符串\n- console.log: 在浏览器控制台输出日志\n  - Elements\n  - Console: 控制台\n  - Sources: 网站源文件\n  - ...\n- console.dir: 比 log 输出的更加详细一些，尤其输出对象数据值时\n- console.table: 把 JSON 数据按照表格的方式输出\n- ...更多 console 输出方法\n\n---\n\n## 数据类型的详细刨析\n\n### number 数字类型\n\n1. number 数字类型\n\nNaN : not a number 但是它是数字类型的\n\nisNaN: 检测当前的值是否不是有效数字 返回  true 表示不是有效数字，flase 是有效数字\n\n```javascript\n// = > isNaN ([value])\nvar num = 12\nisNaN(num); // = > 检测 num 变量存储的值是否为有效数字 flase\nisNaN('13');  = > false\nisNaN('num');  = > true\nisNaN(true); = > false\nisNaN(false); = > false\nisNaN(undefined); = > true\nisNaN({age:'9'}); = > true\nisNaN([12,23]); = > true\nisNaN([12]); = > false\nisNaN(/^$/); = > true\nisNaN(function() {}); = > true\n/*\n重要： isNaN 检测机制\n1. 首先验证当前值是否为数字类型，如果不是浏览器默认把值转换为数字类型\n    把非数字类型转换为数字\n    - 其他数字类型转换位数字： 使用 Number 方法转换\n    [字符串转数字]\n        Number('13') -> 13\n        Number('13px') -> NaN 如果字符串出现任意一个非有效数字的字符 结果则为 NaN\n        Number('13.5') -> 13.5\n        Number('13.5.0') -> NaN\n    [布尔转数字]\n        Number(true) -> 1\n        Number(false) -> 0\n    [其他]\n    \tNumber(null) -> 0\n    \tNumber(undefined) -> NaN\n    - 把引用数据类型转换为数字： 先把引用值调取 toString 转换为字符串，然后再把字符串调取 Number 转换为数字。\n   [对像转数字]\n       所有对象 toString() => '[object object]'\n       ({}）).toString() -> '[object object]' - > NaN\n   [数组转数字]\n       ([12,23]).toString() -> '12,23' - > NaN\n       ([12]).toString() -> '12' - > 12\n   [函数转数字]\n       (function() {}).toString() -> \"function() {}\" -> NaN\n   [正则]\n       /^$/.toString() -> '/^$/' - > NaN\n\nNumber('') - > 0\n\n[].toString() -> ''=> isNaN([]) => false\n\n2. 当前值已经是数字类型，是有效数字返回 false，不是返回 true (数字类型中 只有 NaN 不是有效数字 其余都是有效数字)\n\n*/\n```\n\n2. parseInt / parseFloat\n\n> 等同于 Number ,也是为了把其他类型的值转换为数字类型\n\n和 Number 区别在于字符串的转换分析\n\nNumber: 出现任意非有效数字字符 结果就是 NaN;\n\nparseInt: 把一个字符串中的整数部分解析出来\n\nparseFloat:把一个字符串中的小数（浮点数）部分解析出来\n\n```javascript\nparseInt('13.5px') => 13\nparseFloat('13.5px') = > 13.5\n\nparseInt('width:13.5px') => NaN 从字符串最左边字符串开始查找有效数字字符并且转换为数字，一旦遇到一个非有效数字字符，查找结束。\n```\n\n3. NaN 的比较\n\nNaN: 不是一个数，可以是其他任何东西\n\n```javascript\nNaN == NaN  => false NaN 和谁都不相等 包括自己\n\n思考： 有一个变量 num ;存储的值不知道，检测是否为一个有效数字，一下方案是否可以\n\n if(Number(num) == NaN) {\n   alert('不是')\n }\n NaN 和谁都不相等，假设 num 不是有效数字，=> NaN; 此条件永远不成立，即使 num 确实不是有效数字。\n\n // 有效数字 检测只有这一种方案\nif(isNaN(num)) { // true 不是有效数字\n   alert('不是')\n }\n```\n\n### 布尔类型\n\n> 只有两个值： true / false\n\n1. 如何把其他数据类型转换为布尔类型?\n\n- Boolan(); 数字中除了 0 和 NaN 是 false 其他都是 true\n- !\n- !!\n\n```javascript\nBoolean(1) = > true\nBoolean(0) = > false\n\nBoolean(-1) = > true\nBoolean(NaN) = > false\n\n!'Serendipity' // 先把其他数据类型转换为布尔类型 然后取反  ！true => false\n\n!!'' // 先把其他数据类型转换为布尔类型 然后取两次反，等价于没取反，即剩下布尔值   => false\n```\n\n**规律： `在 JS 中只有“ 0 / NaN / 空字符串 / null / undefined ”这五个值转换为布尔类型为 false,其余都转换为 true`**\n\n### null 和 undefined\n\n> null 和 undefined 都代表空或没有\n>\n> - null: 空对象指针\n> - undefined: 未定义\n\n1. null 和 undefined 的区别\n\n> - null: 一般独使意料之中的没有一般都是手动的先赋值为 null,后面程序会再次赋值\n> - undefined: 意料之外的没有，一般都不是人为手动控制，大部分都是浏览器自主为空，后面赋值也可以不赋值\n\n### Object 对象数据类型\n\n> 普通对象\n>\n> - 由大括号包裹起来\n> - 由零到多组属性名和属性值（键值对）组成\n\n`属性是用来描述当前对像特征的，属性名是对当前具备这个特征，属性值是对这个特征的描述（专业语法：属性名称为键[key],属性值称为值[value],一组属性名和属性值称为一组键值对）`\n\n```javascript\nvar obj = {\n  name: 'serendipity'\n  age: 9\n}\n// => 对象的操作： 对键值对的增删改查\n\n[获取]\n语法： 对象.属性名 / 对象[属性名]\nobj.name\nobj['name'] 一般来说，对象的属性名都是字符串格式的。（属性值不固定，任何格式都可以）\n\n[增/改]\nJS的一个对象中属性名是唯一的，不允许重复\n语法：对象.属性名 = xxx / 对象[属性名] = xxx\nobj.name = '某某某某'； // => 原有对象中存在 name 属性，此处属于修改属性值\nobj.sex = '男'； // => 原有对象中不存在 sex 属性，此处属于增加属性\nobj['age'] = 23;\n\n[删]\n彻底删除：对象中不存在这个属性\ndelete obj['age'];\n假删除：并没有移除这个属性，只是让当前的属性值为空\nobj.sex = null;\n\n在获取属性值的时候，如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）,如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）如果当前对象没有有这个属性名，则获取结果是 undefined;\n```\n\n```javascript\n思考题：\n    var obj = {\n  name: 'serendipity'\n  age: 9\n};\n\nvar name = 'cherish';\nobj.name = >  serendipity    获取的是 name 属性的值\nobj['name'] = > serendipity  获取的是 name 属性的值\nobj.[name] = > undefined     此处的 name 是一个变量 我们获取的属性名不叫做 name ,是 name 存储的值 ‘cherish’,\nobj['cherish'] = > 没有这个属性 ，undefined\n\n----\n 'name' 和 name 的区别\n\n  = > 'name' 是一个字符串值  代表的是本身\n  = > name 是一个变量 不是值 代表本身存储的这个值\n```\n\n[一个对象中的属性名不仅仅是字符串格式，还可能是数字格式的。遇到]\n\n```javascript\nvar obj = {\n    name: 'serendipity'\n     0: 100\n  }\n  obj[0] => 100\n  obj['0'] => 100\n  obj.0 => 报错 SyntaxError 语法错误\n\n\n  ----\n  当我们存储的属性名不是字符串也不是数字的时候，浏览器会把这个值转换为字符串（toString),然后再进行存储\n\n  obj.[{}] = 300; => 先把 ({}).toString() 后的结果作为对象的属性名存储起来 obj.['[object object]'] = 300;\n\n  // 获取的时候\n  obj.[{}]; => 获取的时候也是先把对象转化为字符串'[object object]' ，然后获取之前存储的 300;\n\n\n\n  obj[1]  '1': 100\n  ----\n  数组对象（对象由键值对组成）\n\n  var oo = {\n    a : 12;\n\n  }\n  // 数组也是对象\n\n  var arr = [12,23] // 12 和 23 都是属性值，属性名呢？\n\n  通过观察结果： 数组对象的属性名是数字，（我们把数字属性名称为当前对象的索引）\n\n  arr[0] => 12;\n  arr['0'] => 12;\n  arr.0 => 报错 SyntaxError 语法错误\n  arr.length\n  arr['length']\n\n  []，的语法不支持直接添加属性名 如：[age:12]\n```\n\n**数组也是对象，对象所拥有的操作，都可以运用到数组，可以添加非数字索引，数组的索引也是属性名，但是比较特殊可以递增。所有的对象 object 都可以运用对象的操作 函数也是对象**\n\n## 浅分析 JS 的运行机制\n\n```javascript\nvar a = 12;\nvar b = a;\nb = 13;\nconsole.log(a); // => 12\n\nvar obj1 = { n: 100 };\nvar obj2 = obj1;\nobj2[\"n\"] = 200;\nconsole.log(obj1.n); // => 200\n\n/**\n * 浅分析 JS 运行机制\n * 1.当浏览器（他的内核 / 引擎）渲染和解析 js 的时候，会提供一个供 js 代码运行的环境我们把这个环境称为全局作用域（global/windowscope)\n *\n * 2.代码自上而下执行（之前还有一个变量提升阶段）\n *   = > 基本数据类型的值会存储再当前作用域下\n *     var a = 12 ;\n *     1）首先开辟一个空间（栈内存空间）存储 12\n *     2）在当前作用域中声明一个变量 a\n *     3）让声明的变量和存储的 12 进行关联（把存储的 12 赋值给 a =>赋值操作叫做定义）\n *\n *     - > 基本数据类型值（值类型），是按照值来操作的：把原有的值复制一份放到新的空间或位置上，和原来的值没有关系\n *\n *   = > 引用数据类型的值不能直接存储到当前的作用域下（因为可能存储的内容过去复杂），需要先开辟一个新的空间（理解为仓库），把内容存储到这个空间中。\n *     var obj = {n: 100};\n *     1) 首先开辟一个新的内存空间(堆内存空间)，把对象中的键值对依次存储（为了保证后面查找该空间，此空间有一个 16 进制的地址）\n *     2）声明一个变量\n *     3）让变量和空间地址关联一起（把空间地址赋值给变量）\n *\n *     - > 引用类型不是按照值来操作，它操作的是空间的引用地址：把原来空间的地址赋值给新的变量，但是原来的空间没有被克隆，还是一个空间，这样就会出现多个变量关联的是相同的空间，相互之间存在影响。\n *\n *    栈内存 和 堆内存\n *\n *  栈内存：提供一个代码运行的环境 本身就是代码运行的环境，所有的基本类型值都会在栈内存中开辟一个对应的位置进行存储。\n *\n *  堆内存：独立，用来存储引用类型中的信息值（对象存储的是键值对，函数存储的是代码字符串）\n *\n */\n```\n\n[ 堆栈练习 ]\n\n```javascript\nvar obj = {\n  n: 10,\n  m: obj.n * 10,\n  //  property 'n' of undefined 报错\n};\nconsole.log(obj.m);\n\n/**\n * 1. 形成一个全局作用域\n * 2. 代码自上而下执行\n *    1.首先开辟一个堆内存，把键值对存储到堆内存中，\n *          n: 10,\n            m: obj.n * 10 = > obj.n 此时堆内存还没有存储完成，空间地址还没有给 obj ,此时的 obj 是 undefined,\n\n            obj.n <=> undefined.n \n            undefined 是基本数据类型 没有属性，故报错  Uncaught TypeError: Cannot read property 'n' of undefined\n    at 2.js:15\n\n * \n */\n\nvar ary1 = [3, 4];\nvar ary2 = ary1;\nary2[0] = 1;\nary2 = [4, 5];\nary2[1] = 2;\narr[1] = 0;\nconsole.log(ary1, ar2); // => 1,0  4,2\n```\n\n## JS 中的操作语句\n\n### 判断语句\n\n1. if / else if / else\n2. if / else if / else\n","slug":"语雀/awf89w","published":1,"updated":"2022-03-03T11:26:07.560Z","_id":"cl0awjjp10004081baiwxhsuq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>JS:轻量级的客户端脚本编程语言</p>\n<p>书籍:</p>\n<p>1.编程语言</p>\n<p>HTML+CSS 是标记语言。</p>\n<p>编程语言是具备一定逻辑的,拥有自己的编程思想(面向对象编程[OOP],面向过程编程)</p>\n<ul>\n<li><p>面向对象</p>\n<ul>\n<li>C++</li>\n<li>JAVA</li>\n<li>PHP</li>\n<li>C#(.NET)</li>\n<li>JS</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>面向过程</p>\n<ul>\n<li>C</li>\n</ul>\n<p>2.目前的 JS 是基于 NODE 可以做服务器端程序，所以 JS 是全栈编程语言。</p>\n<p>3.JS 学习</p>\n</li>\n<li><p>ECMAScript(ES): JS 核心语法</p>\n</li>\n<li><p>DOM: document object model 文档对象模型，提供各种 API(属性和方法),让 JS 可以获取或操作页面中的 HTML 元素(DOM 和元素)</p>\n</li>\n<li><p>BOM: browser object model 浏览器对象模型，提供各种 API,让 JS 操作浏览器</p>\n<p>4.ECMAScript</p>\n</li>\n</ul>\n<p>它是 JS 语法规划，规定:JS 中的变量、数据类型、语法规范、操作语句、设计模式等等</p>\n<ul>\n<li>版本<ul>\n<li>1997 ES1.0</li>\n<li>1998 ES2.0</li>\n<li>1999 ES3.0(广泛应用)</li>\n<li>2000 ES4(夭折)</li>\n<li>2015/6 ES6</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"变量-varibale\"><a href=\"#变量-varibale\" class=\"headerlink\" title=\"变量(varibale)\"></a>变量(varibale)</h2><p>它不是具体的值，只是一个用来存储具体值的容器或者代名词。存储的值可以改变，即变量。</p>\n<p>基于 ES 语法规范，在 JS 中创建变量的方式</p>\n<ul>\n<li>var (ES3)</li>\n<li>function(ES3)   创建函数(函数名也是变量，只不过存储的值是函数类型)</li>\n<li>let (ES6)</li>\n<li>const (ES6) 创建的是常量</li>\n<li>import (ES6) 基于 ES6 的模块规范导出需要的信息</li>\n<li>class (ES6) 基于 ES6 创建类</li>\n</ul>\n<pre><code class=\"javascript\">/* 语法:\n * var [变量名]=值;\n * let [变量名]=值;\n * const [变量名]=值;\n * function 函数名() &#123;\n *\n * &#125;\n *   ...\n */\nvar n = 13;\nn = 15;\nalert(n + 10);\n\nconst m = 100;\nm = 150; // =&gt; Uncaught TypeError: Assignment to constant variable. 不能给一个常量重新赋值，常量存储的值不能被修改。\n</code></pre>\n<p>创建变量，命名的时候要遵循一些规范</p>\n<ul>\n<li>严格区分大小写</li>\n</ul>\n<pre><code class=\"javascript\">var n = 12;\nvar N = 13; //=&gt; 两个N不是同一个变量\n</code></pre>\n<ul>\n<li>遵循驼峰命名法:按照数字、字母、下划线或者$来命名，数字不能作为名字的开头，命名的时候基于英文单词组成一个完整的名字，第一个单词字母小写，其余每一个有意义的单词的首字母都大写。一般“ _ ” 在前的，都是公共变量，如: <code>_studentInfo</code></li>\n<li>不能使用关键字和保留字</li>\n</ul>\n<hr>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>数据值是一门编程语言进行生产的材料，JS 中的数据类型:</p>\n<ul>\n<li>基本数据类型/值类型<ul>\n<li>数字 number</li>\n<li>字符串 string</li>\n<li>布尔 boolean</li>\n<li>null</li>\n<li>undefined</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>对象 object<ul>\n<li>普通对象</li>\n<li>数组对象</li>\n<li>正则对象</li>\n<li>日期对象</li>\n<li>…</li>\n</ul>\n</li>\n<li>函数 function</li>\n</ul>\n</li>\n<li>Symbol (唯一的值，ES6 中新增加的一个特殊的类型)</li>\n</ul>\n<pre><code class=\"javascript\">[基本数据类型]\nvar n = 13; //=&gt;0 -13 13.2 数字类型中有一个特殊的值NaN(not a number 表示不是一个有效的数字，但是属于number类型)\n\nvar s = &#39;&#39;; //=&gt; &quot;&quot; &#39;13&#39; “&#123;&#125;”，一个字符串由零到多个字符串组成\n\n\nvar b = true; //=&gt; 布尔 true真 flase假\n\n[引用数据类型]\nvar o = &#123;name: &#39;serendity&#39;,age: 10 &#125;; //=&gt; 普通对象:由大括号包括起来。里面包含多组属性名和属性值/包含多组键值对，&#123;&#125; 空对象\n\nvar ary = [12,23,20, 21]; //=&gt;数组对象:中括号包裹，包含零到多项内容 [] 空数组\n\nvar reg = /-?(\\d|([1-9]\\d+))(\\.\\d+)?/g; //=&gt;正则对象:由元字符组成一个完整的正则  。验证是否为有效数字 ；至少包含一个字符，没有空正则\n\nfunction fn() &#123;\n\n&#125;\n\n[Symbol] 创建出来的是一个唯一的值/没有其他的与它相等\nvar a = Symbol(‘n’)\nvar b = Symbol(‘n’)\na===b // =&gt; false\nconst a = Symbol(‘n’); // =&gt; 只是唯一的并且不可以被更改，用const声明。\n</code></pre>\n<p>扩展: JS 代码如何被运行以及运行后如何输出结果</p>\n<p>[如何被运行]</p>\n<ul>\n<li>把代码运行在浏览器中/浏览器内核来渲染解析</li>\n<li>基于 NODE 来运行/Node 也是一个基于 V8 引擎渲染和解析 JS 的工具，注:node 不是一种语言，是渲染 JS 的工具或平台。</li>\n</ul>\n<p>[如何输出结果]</p>\n<ul>\n<li>alert: 在浏览器中通过弹窗的方式输出/浏览器提示框</li>\n</ul>\n<pre><code class=\"javascript\">window.alert();\nalert(1 + 1); // =&gt; &#39;2&#39;,基于alert输出的结果都会转换为字符串:把值(如果是表达式先计算出结果)通过toString这个方法转换为字符串，然后输出\nalert(true); // =&gt; &#39;true&#39;\n// alert(&#123;name:&#39;xxx&#39;&#125;); =&gt; &#39;[object object]&#39;\n// &#123;name:&#39;xxx&#39;&#125;.toString =&gt;&#39;[object object]&#39; 为什么？\n// 对象.toString后的结果是object object.\n</code></pre>\n<ul>\n<li>confirm: 和 alert 的用法一致。只不过提示框中有确定和取消两个按钮。 即确认提示框。</li>\n</ul>\n<pre><code class=\"javascript\">var flag = confirm(&quot;确定要退出吗？&quot;);\nif (flag) &#123;\n  //=&gt;flag:true 用户点击确定\n&#125; else &#123;\n  //=&gt;flag:flase 用户点击取消\n&#125;\n</code></pre>\n<ul>\n<li>prompt: 在 confirm 的基础上增加输入框 点击取消 输出 null, 确定 输出空字符串</li>\n<li>console.log: 在浏览器控制台输出日志<ul>\n<li>Elements</li>\n<li>Console: 控制台</li>\n<li>Sources: 网站源文件</li>\n<li>…</li>\n</ul>\n</li>\n<li>console.dir: 比 log 输出的更加详细一些，尤其输出对象数据值时</li>\n<li>console.table: 把 JSON 数据按照表格的方式输出</li>\n<li>…更多 console 输出方法</li>\n</ul>\n<hr>\n<h2 id=\"数据类型的详细刨析\"><a href=\"#数据类型的详细刨析\" class=\"headerlink\" title=\"数据类型的详细刨析\"></a>数据类型的详细刨析</h2><h3 id=\"number-数字类型\"><a href=\"#number-数字类型\" class=\"headerlink\" title=\"number 数字类型\"></a>number 数字类型</h3><ol>\n<li>number 数字类型</li>\n</ol>\n<p>NaN : not a number 但是它是数字类型的</p>\n<p>isNaN: 检测当前的值是否不是有效数字 返回  true 表示不是有效数字，flase 是有效数字</p>\n<pre><code class=\"javascript\">// = &gt; isNaN ([value])\nvar num = 12\nisNaN(num); // = &gt; 检测 num 变量存储的值是否为有效数字 flase\nisNaN(&#39;13&#39;);  = &gt; false\nisNaN(&#39;num&#39;);  = &gt; true\nisNaN(true); = &gt; false\nisNaN(false); = &gt; false\nisNaN(undefined); = &gt; true\nisNaN(&#123;age:&#39;9&#39;&#125;); = &gt; true\nisNaN([12,23]); = &gt; true\nisNaN([12]); = &gt; false\nisNaN(/^$/); = &gt; true\nisNaN(function() &#123;&#125;); = &gt; true\n/*\n重要： isNaN 检测机制\n1. 首先验证当前值是否为数字类型，如果不是浏览器默认把值转换为数字类型\n    把非数字类型转换为数字\n    - 其他数字类型转换位数字： 使用 Number 方法转换\n    [字符串转数字]\n        Number(&#39;13&#39;) -&gt; 13\n        Number(&#39;13px&#39;) -&gt; NaN 如果字符串出现任意一个非有效数字的字符 结果则为 NaN\n        Number(&#39;13.5&#39;) -&gt; 13.5\n        Number(&#39;13.5.0&#39;) -&gt; NaN\n    [布尔转数字]\n        Number(true) -&gt; 1\n        Number(false) -&gt; 0\n    [其他]\n        Number(null) -&gt; 0\n        Number(undefined) -&gt; NaN\n    - 把引用数据类型转换为数字： 先把引用值调取 toString 转换为字符串，然后再把字符串调取 Number 转换为数字。\n   [对像转数字]\n       所有对象 toString() =&gt; &#39;[object object]&#39;\n       (&#123;&#125;）).toString() -&gt; &#39;[object object]&#39; - &gt; NaN\n   [数组转数字]\n       ([12,23]).toString() -&gt; &#39;12,23&#39; - &gt; NaN\n       ([12]).toString() -&gt; &#39;12&#39; - &gt; 12\n   [函数转数字]\n       (function() &#123;&#125;).toString() -&gt; &quot;function() &#123;&#125;&quot; -&gt; NaN\n   [正则]\n       /^$/.toString() -&gt; &#39;/^$/&#39; - &gt; NaN\n\nNumber(&#39;&#39;) - &gt; 0\n\n[].toString() -&gt; &#39;&#39;=&gt; isNaN([]) =&gt; false\n\n2. 当前值已经是数字类型，是有效数字返回 false，不是返回 true (数字类型中 只有 NaN 不是有效数字 其余都是有效数字)\n\n*/\n</code></pre>\n<ol start=\"2\">\n<li>parseInt / parseFloat</li>\n</ol>\n<blockquote>\n<p>等同于 Number ,也是为了把其他类型的值转换为数字类型</p>\n</blockquote>\n<p>和 Number 区别在于字符串的转换分析</p>\n<p>Number: 出现任意非有效数字字符 结果就是 NaN;</p>\n<p>parseInt: 把一个字符串中的整数部分解析出来</p>\n<p>parseFloat:把一个字符串中的小数（浮点数）部分解析出来</p>\n<pre><code class=\"javascript\">parseInt(&#39;13.5px&#39;) =&gt; 13\nparseFloat(&#39;13.5px&#39;) = &gt; 13.5\n\nparseInt(&#39;width:13.5px&#39;) =&gt; NaN 从字符串最左边字符串开始查找有效数字字符并且转换为数字，一旦遇到一个非有效数字字符，查找结束。\n</code></pre>\n<ol start=\"3\">\n<li>NaN 的比较</li>\n</ol>\n<p>NaN: 不是一个数，可以是其他任何东西</p>\n<pre><code class=\"javascript\">NaN == NaN  =&gt; false NaN 和谁都不相等 包括自己\n\n思考： 有一个变量 num ;存储的值不知道，检测是否为一个有效数字，一下方案是否可以\n\n if(Number(num) == NaN) &#123;\n   alert(&#39;不是&#39;)\n &#125;\n NaN 和谁都不相等，假设 num 不是有效数字，=&gt; NaN; 此条件永远不成立，即使 num 确实不是有效数字。\n\n // 有效数字 检测只有这一种方案\nif(isNaN(num)) &#123; // true 不是有效数字\n   alert(&#39;不是&#39;)\n &#125;\n</code></pre>\n<h3 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h3><blockquote>\n<p>只有两个值： true / false</p>\n</blockquote>\n<ol>\n<li>如何把其他数据类型转换为布尔类型?</li>\n</ol>\n<ul>\n<li>Boolan(); 数字中除了 0 和 NaN 是 false 其他都是 true</li>\n<li>!</li>\n<li>!!</li>\n</ul>\n<pre><code class=\"javascript\">Boolean(1) = &gt; true\nBoolean(0) = &gt; false\n\nBoolean(-1) = &gt; true\nBoolean(NaN) = &gt; false\n\n!&#39;Serendipity&#39; // 先把其他数据类型转换为布尔类型 然后取反  ！true =&gt; false\n\n!!&#39;&#39; // 先把其他数据类型转换为布尔类型 然后取两次反，等价于没取反，即剩下布尔值   =&gt; false\n</code></pre>\n<p><strong>规律： <code>在 JS 中只有“ 0 / NaN / 空字符串 / null / undefined ”这五个值转换为布尔类型为 false,其余都转换为 true</code></strong></p>\n<h3 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h3><blockquote>\n<p>null 和 undefined 都代表空或没有</p>\n<ul>\n<li>null: 空对象指针</li>\n<li>undefined: 未定义</li>\n</ul>\n</blockquote>\n<ol>\n<li>null 和 undefined 的区别</li>\n</ol>\n<blockquote>\n<ul>\n<li>null: 一般独使意料之中的没有一般都是手动的先赋值为 null,后面程序会再次赋值</li>\n<li>undefined: 意料之外的没有，一般都不是人为手动控制，大部分都是浏览器自主为空，后面赋值也可以不赋值</li>\n</ul>\n</blockquote>\n<h3 id=\"Object-对象数据类型\"><a href=\"#Object-对象数据类型\" class=\"headerlink\" title=\"Object 对象数据类型\"></a>Object 对象数据类型</h3><blockquote>\n<p>普通对象</p>\n<ul>\n<li>由大括号包裹起来</li>\n<li>由零到多组属性名和属性值（键值对）组成</li>\n</ul>\n</blockquote>\n<p><code>属性是用来描述当前对像特征的，属性名是对当前具备这个特征，属性值是对这个特征的描述（专业语法：属性名称为键[key],属性值称为值[value],一组属性名和属性值称为一组键值对）</code></p>\n<pre><code class=\"javascript\">var obj = &#123;\n  name: &#39;serendipity&#39;\n  age: 9\n&#125;\n// =&gt; 对象的操作： 对键值对的增删改查\n\n[获取]\n语法： 对象.属性名 / 对象[属性名]\nobj.name\nobj[&#39;name&#39;] 一般来说，对象的属性名都是字符串格式的。（属性值不固定，任何格式都可以）\n\n[增/改]\nJS的一个对象中属性名是唯一的，不允许重复\n语法：对象.属性名 = xxx / 对象[属性名] = xxx\nobj.name = &#39;某某某某&#39;； // =&gt; 原有对象中存在 name 属性，此处属于修改属性值\nobj.sex = &#39;男&#39;； // =&gt; 原有对象中不存在 sex 属性，此处属于增加属性\nobj[&#39;age&#39;] = 23;\n\n[删]\n彻底删除：对象中不存在这个属性\ndelete obj[&#39;age&#39;];\n假删除：并没有移除这个属性，只是让当前的属性值为空\nobj.sex = null;\n\n在获取属性值的时候，如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）,如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）如果当前对象没有有这个属性名，则获取结果是 undefined;\n</code></pre>\n<pre><code class=\"javascript\">思考题：\n    var obj = &#123;\n  name: &#39;serendipity&#39;\n  age: 9\n&#125;;\n\nvar name = &#39;cherish&#39;;\nobj.name = &gt;  serendipity    获取的是 name 属性的值\nobj[&#39;name&#39;] = &gt; serendipity  获取的是 name 属性的值\nobj.[name] = &gt; undefined     此处的 name 是一个变量 我们获取的属性名不叫做 name ,是 name 存储的值 ‘cherish’,\nobj[&#39;cherish&#39;] = &gt; 没有这个属性 ，undefined\n\n----\n &#39;name&#39; 和 name 的区别\n\n  = &gt; &#39;name&#39; 是一个字符串值  代表的是本身\n  = &gt; name 是一个变量 不是值 代表本身存储的这个值\n</code></pre>\n<p>[一个对象中的属性名不仅仅是字符串格式，还可能是数字格式的。遇到]</p>\n<pre><code class=\"javascript\">var obj = &#123;\n    name: &#39;serendipity&#39;\n     0: 100\n  &#125;\n  obj[0] =&gt; 100\n  obj[&#39;0&#39;] =&gt; 100\n  obj.0 =&gt; 报错 SyntaxError 语法错误\n\n\n  ----\n  当我们存储的属性名不是字符串也不是数字的时候，浏览器会把这个值转换为字符串（toString),然后再进行存储\n\n  obj.[&#123;&#125;] = 300; =&gt; 先把 (&#123;&#125;).toString() 后的结果作为对象的属性名存储起来 obj.[&#39;[object object]&#39;] = 300;\n\n  // 获取的时候\n  obj.[&#123;&#125;]; =&gt; 获取的时候也是先把对象转化为字符串&#39;[object object]&#39; ，然后获取之前存储的 300;\n\n\n\n  obj[1]  &#39;1&#39;: 100\n  ----\n  数组对象（对象由键值对组成）\n\n  var oo = &#123;\n    a : 12;\n\n  &#125;\n  // 数组也是对象\n\n  var arr = [12,23] // 12 和 23 都是属性值，属性名呢？\n\n  通过观察结果： 数组对象的属性名是数字，（我们把数字属性名称为当前对象的索引）\n\n  arr[0] =&gt; 12;\n  arr[&#39;0&#39;] =&gt; 12;\n  arr.0 =&gt; 报错 SyntaxError 语法错误\n  arr.length\n  arr[&#39;length&#39;]\n\n  []，的语法不支持直接添加属性名 如：[age:12]\n</code></pre>\n<p><strong>数组也是对象，对象所拥有的操作，都可以运用到数组，可以添加非数字索引，数组的索引也是属性名，但是比较特殊可以递增。所有的对象 object 都可以运用对象的操作 函数也是对象</strong></p>\n<h2 id=\"浅分析-JS-的运行机制\"><a href=\"#浅分析-JS-的运行机制\" class=\"headerlink\" title=\"浅分析 JS 的运行机制\"></a>浅分析 JS 的运行机制</h2><pre><code class=\"javascript\">var a = 12;\nvar b = a;\nb = 13;\nconsole.log(a); // =&gt; 12\n\nvar obj1 = &#123; n: 100 &#125;;\nvar obj2 = obj1;\nobj2[&quot;n&quot;] = 200;\nconsole.log(obj1.n); // =&gt; 200\n\n/**\n * 浅分析 JS 运行机制\n * 1.当浏览器（他的内核 / 引擎）渲染和解析 js 的时候，会提供一个供 js 代码运行的环境我们把这个环境称为全局作用域（global/windowscope)\n *\n * 2.代码自上而下执行（之前还有一个变量提升阶段）\n *   = &gt; 基本数据类型的值会存储再当前作用域下\n *     var a = 12 ;\n *     1）首先开辟一个空间（栈内存空间）存储 12\n *     2）在当前作用域中声明一个变量 a\n *     3）让声明的变量和存储的 12 进行关联（把存储的 12 赋值给 a =&gt;赋值操作叫做定义）\n *\n *     - &gt; 基本数据类型值（值类型），是按照值来操作的：把原有的值复制一份放到新的空间或位置上，和原来的值没有关系\n *\n *   = &gt; 引用数据类型的值不能直接存储到当前的作用域下（因为可能存储的内容过去复杂），需要先开辟一个新的空间（理解为仓库），把内容存储到这个空间中。\n *     var obj = &#123;n: 100&#125;;\n *     1) 首先开辟一个新的内存空间(堆内存空间)，把对象中的键值对依次存储（为了保证后面查找该空间，此空间有一个 16 进制的地址）\n *     2）声明一个变量\n *     3）让变量和空间地址关联一起（把空间地址赋值给变量）\n *\n *     - &gt; 引用类型不是按照值来操作，它操作的是空间的引用地址：把原来空间的地址赋值给新的变量，但是原来的空间没有被克隆，还是一个空间，这样就会出现多个变量关联的是相同的空间，相互之间存在影响。\n *\n *    栈内存 和 堆内存\n *\n *  栈内存：提供一个代码运行的环境 本身就是代码运行的环境，所有的基本类型值都会在栈内存中开辟一个对应的位置进行存储。\n *\n *  堆内存：独立，用来存储引用类型中的信息值（对象存储的是键值对，函数存储的是代码字符串）\n *\n */\n</code></pre>\n<p>[ 堆栈练习 ]</p>\n<pre><code class=\"javascript\">var obj = &#123;\n  n: 10,\n  m: obj.n * 10,\n  //  property &#39;n&#39; of undefined 报错\n&#125;;\nconsole.log(obj.m);\n\n/**\n * 1. 形成一个全局作用域\n * 2. 代码自上而下执行\n *    1.首先开辟一个堆内存，把键值对存储到堆内存中，\n *          n: 10,\n            m: obj.n * 10 = &gt; obj.n 此时堆内存还没有存储完成，空间地址还没有给 obj ,此时的 obj 是 undefined,\n\n            obj.n &lt;=&gt; undefined.n \n            undefined 是基本数据类型 没有属性，故报错  Uncaught TypeError: Cannot read property &#39;n&#39; of undefined\n    at 2.js:15\n\n * \n */\n\nvar ary1 = [3, 4];\nvar ary2 = ary1;\nary2[0] = 1;\nary2 = [4, 5];\nary2[1] = 2;\narr[1] = 0;\nconsole.log(ary1, ar2); // =&gt; 1,0  4,2\n</code></pre>\n<h2 id=\"JS-中的操作语句\"><a href=\"#JS-中的操作语句\" class=\"headerlink\" title=\"JS 中的操作语句\"></a>JS 中的操作语句</h2><h3 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h3><ol>\n<li>if / else if / else</li>\n<li>if / else if / else</li>\n</ol>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>JS:轻量级的客户端脚本编程语言</p>\n<p>书籍:</p>\n<p>1.编程语言</p>\n<p>HTML+CSS 是标记语言。</p>\n<p>编程语言是具备一定逻辑的,拥有自己的编程思想(面向对象编程[OOP],面向过程编程)</p>\n<ul>\n<li><p>面向对象</p>\n<ul>\n<li>C++</li>\n<li>JAVA</li>\n<li>PHP</li>\n<li>C#(.NET)</li>\n<li>JS</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>面向过程</p>\n<ul>\n<li>C</li>\n</ul>\n<p>2.目前的 JS 是基于 NODE 可以做服务器端程序，所以 JS 是全栈编程语言。</p>\n<p>3.JS 学习</p>\n</li>\n<li><p>ECMAScript(ES): JS 核心语法</p>\n</li>\n<li><p>DOM: document object model 文档对象模型，提供各种 API(属性和方法),让 JS 可以获取或操作页面中的 HTML 元素(DOM 和元素)</p>\n</li>\n<li><p>BOM: browser object model 浏览器对象模型，提供各种 API,让 JS 操作浏览器</p>\n<p>4.ECMAScript</p>\n</li>\n</ul>\n<p>它是 JS 语法规划，规定:JS 中的变量、数据类型、语法规范、操作语句、设计模式等等</p>\n<ul>\n<li>版本<ul>\n<li>1997 ES1.0</li>\n<li>1998 ES2.0</li>\n<li>1999 ES3.0(广泛应用)</li>\n<li>2000 ES4(夭折)</li>\n<li>2015/6 ES6</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"变量-varibale\"><a href=\"#变量-varibale\" class=\"headerlink\" title=\"变量(varibale)\"></a>变量(varibale)</h2><p>它不是具体的值，只是一个用来存储具体值的容器或者代名词。存储的值可以改变，即变量。</p>\n<p>基于 ES 语法规范，在 JS 中创建变量的方式</p>\n<ul>\n<li>var (ES3)</li>\n<li>function(ES3)   创建函数(函数名也是变量，只不过存储的值是函数类型)</li>\n<li>let (ES6)</li>\n<li>const (ES6) 创建的是常量</li>\n<li>import (ES6) 基于 ES6 的模块规范导出需要的信息</li>\n<li>class (ES6) 基于 ES6 创建类</li>\n</ul>\n<pre><code class=\"javascript\">/* 语法:\n * var [变量名]=值;\n * let [变量名]=值;\n * const [变量名]=值;\n * function 函数名() &#123;\n *\n * &#125;\n *   ...\n */\nvar n = 13;\nn = 15;\nalert(n + 10);\n\nconst m = 100;\nm = 150; // =&gt; Uncaught TypeError: Assignment to constant variable. 不能给一个常量重新赋值，常量存储的值不能被修改。\n</code></pre>\n<p>创建变量，命名的时候要遵循一些规范</p>\n<ul>\n<li>严格区分大小写</li>\n</ul>\n<pre><code class=\"javascript\">var n = 12;\nvar N = 13; //=&gt; 两个N不是同一个变量\n</code></pre>\n<ul>\n<li>遵循驼峰命名法:按照数字、字母、下划线或者$来命名，数字不能作为名字的开头，命名的时候基于英文单词组成一个完整的名字，第一个单词字母小写，其余每一个有意义的单词的首字母都大写。一般“ _ ” 在前的，都是公共变量，如: <code>_studentInfo</code></li>\n<li>不能使用关键字和保留字</li>\n</ul>\n<hr>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>数据值是一门编程语言进行生产的材料，JS 中的数据类型:</p>\n<ul>\n<li>基本数据类型/值类型<ul>\n<li>数字 number</li>\n<li>字符串 string</li>\n<li>布尔 boolean</li>\n<li>null</li>\n<li>undefined</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>对象 object<ul>\n<li>普通对象</li>\n<li>数组对象</li>\n<li>正则对象</li>\n<li>日期对象</li>\n<li>…</li>\n</ul>\n</li>\n<li>函数 function</li>\n</ul>\n</li>\n<li>Symbol (唯一的值，ES6 中新增加的一个特殊的类型)</li>\n</ul>\n<pre><code class=\"javascript\">[基本数据类型]\nvar n = 13; //=&gt;0 -13 13.2 数字类型中有一个特殊的值NaN(not a number 表示不是一个有效的数字，但是属于number类型)\n\nvar s = &#39;&#39;; //=&gt; &quot;&quot; &#39;13&#39; “&#123;&#125;”，一个字符串由零到多个字符串组成\n\n\nvar b = true; //=&gt; 布尔 true真 flase假\n\n[引用数据类型]\nvar o = &#123;name: &#39;serendity&#39;,age: 10 &#125;; //=&gt; 普通对象:由大括号包括起来。里面包含多组属性名和属性值/包含多组键值对，&#123;&#125; 空对象\n\nvar ary = [12,23,20, 21]; //=&gt;数组对象:中括号包裹，包含零到多项内容 [] 空数组\n\nvar reg = /-?(\\d|([1-9]\\d+))(\\.\\d+)?/g; //=&gt;正则对象:由元字符组成一个完整的正则  。验证是否为有效数字 ；至少包含一个字符，没有空正则\n\nfunction fn() &#123;\n\n&#125;\n\n[Symbol] 创建出来的是一个唯一的值/没有其他的与它相等\nvar a = Symbol(‘n’)\nvar b = Symbol(‘n’)\na===b // =&gt; false\nconst a = Symbol(‘n’); // =&gt; 只是唯一的并且不可以被更改，用const声明。\n</code></pre>\n<p>扩展: JS 代码如何被运行以及运行后如何输出结果</p>\n<p>[如何被运行]</p>\n<ul>\n<li>把代码运行在浏览器中/浏览器内核来渲染解析</li>\n<li>基于 NODE 来运行/Node 也是一个基于 V8 引擎渲染和解析 JS 的工具，注:node 不是一种语言，是渲染 JS 的工具或平台。</li>\n</ul>\n<p>[如何输出结果]</p>\n<ul>\n<li>alert: 在浏览器中通过弹窗的方式输出/浏览器提示框</li>\n</ul>\n<pre><code class=\"javascript\">window.alert();\nalert(1 + 1); // =&gt; &#39;2&#39;,基于alert输出的结果都会转换为字符串:把值(如果是表达式先计算出结果)通过toString这个方法转换为字符串，然后输出\nalert(true); // =&gt; &#39;true&#39;\n// alert(&#123;name:&#39;xxx&#39;&#125;); =&gt; &#39;[object object]&#39;\n// &#123;name:&#39;xxx&#39;&#125;.toString =&gt;&#39;[object object]&#39; 为什么？\n// 对象.toString后的结果是object object.\n</code></pre>\n<ul>\n<li>confirm: 和 alert 的用法一致。只不过提示框中有确定和取消两个按钮。 即确认提示框。</li>\n</ul>\n<pre><code class=\"javascript\">var flag = confirm(&quot;确定要退出吗？&quot;);\nif (flag) &#123;\n  //=&gt;flag:true 用户点击确定\n&#125; else &#123;\n  //=&gt;flag:flase 用户点击取消\n&#125;\n</code></pre>\n<ul>\n<li>prompt: 在 confirm 的基础上增加输入框 点击取消 输出 null, 确定 输出空字符串</li>\n<li>console.log: 在浏览器控制台输出日志<ul>\n<li>Elements</li>\n<li>Console: 控制台</li>\n<li>Sources: 网站源文件</li>\n<li>…</li>\n</ul>\n</li>\n<li>console.dir: 比 log 输出的更加详细一些，尤其输出对象数据值时</li>\n<li>console.table: 把 JSON 数据按照表格的方式输出</li>\n<li>…更多 console 输出方法</li>\n</ul>\n<hr>\n<h2 id=\"数据类型的详细刨析\"><a href=\"#数据类型的详细刨析\" class=\"headerlink\" title=\"数据类型的详细刨析\"></a>数据类型的详细刨析</h2><h3 id=\"number-数字类型\"><a href=\"#number-数字类型\" class=\"headerlink\" title=\"number 数字类型\"></a>number 数字类型</h3><ol>\n<li>number 数字类型</li>\n</ol>\n<p>NaN : not a number 但是它是数字类型的</p>\n<p>isNaN: 检测当前的值是否不是有效数字 返回  true 表示不是有效数字，flase 是有效数字</p>\n<pre><code class=\"javascript\">// = &gt; isNaN ([value])\nvar num = 12\nisNaN(num); // = &gt; 检测 num 变量存储的值是否为有效数字 flase\nisNaN(&#39;13&#39;);  = &gt; false\nisNaN(&#39;num&#39;);  = &gt; true\nisNaN(true); = &gt; false\nisNaN(false); = &gt; false\nisNaN(undefined); = &gt; true\nisNaN(&#123;age:&#39;9&#39;&#125;); = &gt; true\nisNaN([12,23]); = &gt; true\nisNaN([12]); = &gt; false\nisNaN(/^$/); = &gt; true\nisNaN(function() &#123;&#125;); = &gt; true\n/*\n重要： isNaN 检测机制\n1. 首先验证当前值是否为数字类型，如果不是浏览器默认把值转换为数字类型\n    把非数字类型转换为数字\n    - 其他数字类型转换位数字： 使用 Number 方法转换\n    [字符串转数字]\n        Number(&#39;13&#39;) -&gt; 13\n        Number(&#39;13px&#39;) -&gt; NaN 如果字符串出现任意一个非有效数字的字符 结果则为 NaN\n        Number(&#39;13.5&#39;) -&gt; 13.5\n        Number(&#39;13.5.0&#39;) -&gt; NaN\n    [布尔转数字]\n        Number(true) -&gt; 1\n        Number(false) -&gt; 0\n    [其他]\n        Number(null) -&gt; 0\n        Number(undefined) -&gt; NaN\n    - 把引用数据类型转换为数字： 先把引用值调取 toString 转换为字符串，然后再把字符串调取 Number 转换为数字。\n   [对像转数字]\n       所有对象 toString() =&gt; &#39;[object object]&#39;\n       (&#123;&#125;）).toString() -&gt; &#39;[object object]&#39; - &gt; NaN\n   [数组转数字]\n       ([12,23]).toString() -&gt; &#39;12,23&#39; - &gt; NaN\n       ([12]).toString() -&gt; &#39;12&#39; - &gt; 12\n   [函数转数字]\n       (function() &#123;&#125;).toString() -&gt; &quot;function() &#123;&#125;&quot; -&gt; NaN\n   [正则]\n       /^$/.toString() -&gt; &#39;/^$/&#39; - &gt; NaN\n\nNumber(&#39;&#39;) - &gt; 0\n\n[].toString() -&gt; &#39;&#39;=&gt; isNaN([]) =&gt; false\n\n2. 当前值已经是数字类型，是有效数字返回 false，不是返回 true (数字类型中 只有 NaN 不是有效数字 其余都是有效数字)\n\n*/\n</code></pre>\n<ol start=\"2\">\n<li>parseInt / parseFloat</li>\n</ol>\n<blockquote>\n<p>等同于 Number ,也是为了把其他类型的值转换为数字类型</p>\n</blockquote>\n<p>和 Number 区别在于字符串的转换分析</p>\n<p>Number: 出现任意非有效数字字符 结果就是 NaN;</p>\n<p>parseInt: 把一个字符串中的整数部分解析出来</p>\n<p>parseFloat:把一个字符串中的小数（浮点数）部分解析出来</p>\n<pre><code class=\"javascript\">parseInt(&#39;13.5px&#39;) =&gt; 13\nparseFloat(&#39;13.5px&#39;) = &gt; 13.5\n\nparseInt(&#39;width:13.5px&#39;) =&gt; NaN 从字符串最左边字符串开始查找有效数字字符并且转换为数字，一旦遇到一个非有效数字字符，查找结束。\n</code></pre>\n<ol start=\"3\">\n<li>NaN 的比较</li>\n</ol>\n<p>NaN: 不是一个数，可以是其他任何东西</p>\n<pre><code class=\"javascript\">NaN == NaN  =&gt; false NaN 和谁都不相等 包括自己\n\n思考： 有一个变量 num ;存储的值不知道，检测是否为一个有效数字，一下方案是否可以\n\n if(Number(num) == NaN) &#123;\n   alert(&#39;不是&#39;)\n &#125;\n NaN 和谁都不相等，假设 num 不是有效数字，=&gt; NaN; 此条件永远不成立，即使 num 确实不是有效数字。\n\n // 有效数字 检测只有这一种方案\nif(isNaN(num)) &#123; // true 不是有效数字\n   alert(&#39;不是&#39;)\n &#125;\n</code></pre>\n<h3 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h3><blockquote>\n<p>只有两个值： true / false</p>\n</blockquote>\n<ol>\n<li>如何把其他数据类型转换为布尔类型?</li>\n</ol>\n<ul>\n<li>Boolan(); 数字中除了 0 和 NaN 是 false 其他都是 true</li>\n<li>!</li>\n<li>!!</li>\n</ul>\n<pre><code class=\"javascript\">Boolean(1) = &gt; true\nBoolean(0) = &gt; false\n\nBoolean(-1) = &gt; true\nBoolean(NaN) = &gt; false\n\n!&#39;Serendipity&#39; // 先把其他数据类型转换为布尔类型 然后取反  ！true =&gt; false\n\n!!&#39;&#39; // 先把其他数据类型转换为布尔类型 然后取两次反，等价于没取反，即剩下布尔值   =&gt; false\n</code></pre>\n<p><strong>规律： <code>在 JS 中只有“ 0 / NaN / 空字符串 / null / undefined ”这五个值转换为布尔类型为 false,其余都转换为 true</code></strong></p>\n<h3 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h3><blockquote>\n<p>null 和 undefined 都代表空或没有</p>\n<ul>\n<li>null: 空对象指针</li>\n<li>undefined: 未定义</li>\n</ul>\n</blockquote>\n<ol>\n<li>null 和 undefined 的区别</li>\n</ol>\n<blockquote>\n<ul>\n<li>null: 一般独使意料之中的没有一般都是手动的先赋值为 null,后面程序会再次赋值</li>\n<li>undefined: 意料之外的没有，一般都不是人为手动控制，大部分都是浏览器自主为空，后面赋值也可以不赋值</li>\n</ul>\n</blockquote>\n<h3 id=\"Object-对象数据类型\"><a href=\"#Object-对象数据类型\" class=\"headerlink\" title=\"Object 对象数据类型\"></a>Object 对象数据类型</h3><blockquote>\n<p>普通对象</p>\n<ul>\n<li>由大括号包裹起来</li>\n<li>由零到多组属性名和属性值（键值对）组成</li>\n</ul>\n</blockquote>\n<p><code>属性是用来描述当前对像特征的，属性名是对当前具备这个特征，属性值是对这个特征的描述（专业语法：属性名称为键[key],属性值称为值[value],一组属性名和属性值称为一组键值对）</code></p>\n<pre><code class=\"javascript\">var obj = &#123;\n  name: &#39;serendipity&#39;\n  age: 9\n&#125;\n// =&gt; 对象的操作： 对键值对的增删改查\n\n[获取]\n语法： 对象.属性名 / 对象[属性名]\nobj.name\nobj[&#39;name&#39;] 一般来说，对象的属性名都是字符串格式的。（属性值不固定，任何格式都可以）\n\n[增/改]\nJS的一个对象中属性名是唯一的，不允许重复\n语法：对象.属性名 = xxx / 对象[属性名] = xxx\nobj.name = &#39;某某某某&#39;； // =&gt; 原有对象中存在 name 属性，此处属于修改属性值\nobj.sex = &#39;男&#39;； // =&gt; 原有对象中不存在 sex 属性，此处属于增加属性\nobj[&#39;age&#39;] = 23;\n\n[删]\n彻底删除：对象中不存在这个属性\ndelete obj[&#39;age&#39;];\n假删除：并没有移除这个属性，只是让当前的属性值为空\nobj.sex = null;\n\n在获取属性值的时候，如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）,如果当前对象有这个属性名，则可以获取到值（哪怕是 null ）如果当前对象没有有这个属性名，则获取结果是 undefined;\n</code></pre>\n<pre><code class=\"javascript\">思考题：\n    var obj = &#123;\n  name: &#39;serendipity&#39;\n  age: 9\n&#125;;\n\nvar name = &#39;cherish&#39;;\nobj.name = &gt;  serendipity    获取的是 name 属性的值\nobj[&#39;name&#39;] = &gt; serendipity  获取的是 name 属性的值\nobj.[name] = &gt; undefined     此处的 name 是一个变量 我们获取的属性名不叫做 name ,是 name 存储的值 ‘cherish’,\nobj[&#39;cherish&#39;] = &gt; 没有这个属性 ，undefined\n\n----\n &#39;name&#39; 和 name 的区别\n\n  = &gt; &#39;name&#39; 是一个字符串值  代表的是本身\n  = &gt; name 是一个变量 不是值 代表本身存储的这个值\n</code></pre>\n<p>[一个对象中的属性名不仅仅是字符串格式，还可能是数字格式的。遇到]</p>\n<pre><code class=\"javascript\">var obj = &#123;\n    name: &#39;serendipity&#39;\n     0: 100\n  &#125;\n  obj[0] =&gt; 100\n  obj[&#39;0&#39;] =&gt; 100\n  obj.0 =&gt; 报错 SyntaxError 语法错误\n\n\n  ----\n  当我们存储的属性名不是字符串也不是数字的时候，浏览器会把这个值转换为字符串（toString),然后再进行存储\n\n  obj.[&#123;&#125;] = 300; =&gt; 先把 (&#123;&#125;).toString() 后的结果作为对象的属性名存储起来 obj.[&#39;[object object]&#39;] = 300;\n\n  // 获取的时候\n  obj.[&#123;&#125;]; =&gt; 获取的时候也是先把对象转化为字符串&#39;[object object]&#39; ，然后获取之前存储的 300;\n\n\n\n  obj[1]  &#39;1&#39;: 100\n  ----\n  数组对象（对象由键值对组成）\n\n  var oo = &#123;\n    a : 12;\n\n  &#125;\n  // 数组也是对象\n\n  var arr = [12,23] // 12 和 23 都是属性值，属性名呢？\n\n  通过观察结果： 数组对象的属性名是数字，（我们把数字属性名称为当前对象的索引）\n\n  arr[0] =&gt; 12;\n  arr[&#39;0&#39;] =&gt; 12;\n  arr.0 =&gt; 报错 SyntaxError 语法错误\n  arr.length\n  arr[&#39;length&#39;]\n\n  []，的语法不支持直接添加属性名 如：[age:12]\n</code></pre>\n<p><strong>数组也是对象，对象所拥有的操作，都可以运用到数组，可以添加非数字索引，数组的索引也是属性名，但是比较特殊可以递增。所有的对象 object 都可以运用对象的操作 函数也是对象</strong></p>\n<h2 id=\"浅分析-JS-的运行机制\"><a href=\"#浅分析-JS-的运行机制\" class=\"headerlink\" title=\"浅分析 JS 的运行机制\"></a>浅分析 JS 的运行机制</h2><pre><code class=\"javascript\">var a = 12;\nvar b = a;\nb = 13;\nconsole.log(a); // =&gt; 12\n\nvar obj1 = &#123; n: 100 &#125;;\nvar obj2 = obj1;\nobj2[&quot;n&quot;] = 200;\nconsole.log(obj1.n); // =&gt; 200\n\n/**\n * 浅分析 JS 运行机制\n * 1.当浏览器（他的内核 / 引擎）渲染和解析 js 的时候，会提供一个供 js 代码运行的环境我们把这个环境称为全局作用域（global/windowscope)\n *\n * 2.代码自上而下执行（之前还有一个变量提升阶段）\n *   = &gt; 基本数据类型的值会存储再当前作用域下\n *     var a = 12 ;\n *     1）首先开辟一个空间（栈内存空间）存储 12\n *     2）在当前作用域中声明一个变量 a\n *     3）让声明的变量和存储的 12 进行关联（把存储的 12 赋值给 a =&gt;赋值操作叫做定义）\n *\n *     - &gt; 基本数据类型值（值类型），是按照值来操作的：把原有的值复制一份放到新的空间或位置上，和原来的值没有关系\n *\n *   = &gt; 引用数据类型的值不能直接存储到当前的作用域下（因为可能存储的内容过去复杂），需要先开辟一个新的空间（理解为仓库），把内容存储到这个空间中。\n *     var obj = &#123;n: 100&#125;;\n *     1) 首先开辟一个新的内存空间(堆内存空间)，把对象中的键值对依次存储（为了保证后面查找该空间，此空间有一个 16 进制的地址）\n *     2）声明一个变量\n *     3）让变量和空间地址关联一起（把空间地址赋值给变量）\n *\n *     - &gt; 引用类型不是按照值来操作，它操作的是空间的引用地址：把原来空间的地址赋值给新的变量，但是原来的空间没有被克隆，还是一个空间，这样就会出现多个变量关联的是相同的空间，相互之间存在影响。\n *\n *    栈内存 和 堆内存\n *\n *  栈内存：提供一个代码运行的环境 本身就是代码运行的环境，所有的基本类型值都会在栈内存中开辟一个对应的位置进行存储。\n *\n *  堆内存：独立，用来存储引用类型中的信息值（对象存储的是键值对，函数存储的是代码字符串）\n *\n */\n</code></pre>\n<p>[ 堆栈练习 ]</p>\n<pre><code class=\"javascript\">var obj = &#123;\n  n: 10,\n  m: obj.n * 10,\n  //  property &#39;n&#39; of undefined 报错\n&#125;;\nconsole.log(obj.m);\n\n/**\n * 1. 形成一个全局作用域\n * 2. 代码自上而下执行\n *    1.首先开辟一个堆内存，把键值对存储到堆内存中，\n *          n: 10,\n            m: obj.n * 10 = &gt; obj.n 此时堆内存还没有存储完成，空间地址还没有给 obj ,此时的 obj 是 undefined,\n\n            obj.n &lt;=&gt; undefined.n \n            undefined 是基本数据类型 没有属性，故报错  Uncaught TypeError: Cannot read property &#39;n&#39; of undefined\n    at 2.js:15\n\n * \n */\n\nvar ary1 = [3, 4];\nvar ary2 = ary1;\nary2[0] = 1;\nary2 = [4, 5];\nary2[1] = 2;\narr[1] = 0;\nconsole.log(ary1, ar2); // =&gt; 1,0  4,2\n</code></pre>\n<h2 id=\"JS-中的操作语句\"><a href=\"#JS-中的操作语句\" class=\"headerlink\" title=\"JS 中的操作语句\"></a>JS 中的操作语句</h2><h3 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h3><ol>\n<li>if / else if / else</li>\n<li>if / else if / else</li>\n</ol>\n"},{"title":"Robot Framework ","urlname":"been08","date":"2020-08-14T09:47:36.000Z","abbrlink":1901669330,"_content":"\n---\n\n**特点**\n\n- 提供可视化界面 ride、 eclipse\n- txt、html 等格式编写测试用例，而不是编程语言\n- 支持**关键字驱动**（直接调用已有的关键字，组成自动化用例）\n- 支持 web 、app、api 自动化测试\n- 开源，基于 Python 编写\n\n## Robot Framework 环境搭建\n\n- **安装 wxPython**\n\n```shell\n$ 下载页面： http://wxpython.org/download.php#stable\n\t在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n\t比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n\t下载完成后，选择默认项进行安装即可。\n```\n\n- **安装 Robot Framwork**\n\n```shell\n$\tpip install robotframwork\n\t图形化界面：RIDE\n\t\tpip install robotframework-ride\n\t\tpip install robotframework-ride==1.7.4.1（指定版本安装）\n```\n\n- **安装 selenium2library**\n\n```shell\n$\tpip install robotframework-selenium2library\n\tRobot Framework 引入 Selenium2Library\n```\n\n- 第三方包本地安装\n\n```shell\n$  **.whl :\n$\t\tpip install  **.whl\n$  **.egg :\n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n\t\tpython setup.py install\n```\n\n### 安装后确认\n\n- 启动 RIDE\n  - 通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide 下的 **init**.py 文件）\n  - 通过命令启动（运行 -> ride.py 回车 / 确认）\n\n```\n    cd C:\\Python27\\Scripts\\\n    运行：\n    python ride.py\n```\n\n- 将 C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。\n- 查看 pybot 版本\n\n```\n    $ cd C:\\Python27\\Scripts\n    # 运行\n    $ pybot --version\n```\n\n## Robot Framework + pyCharm\n\n- **pyCharm 插件**\n\n```shell\n$\tFile >> Settings >> Plugins >> intelliBot 插件 install\n```\n\n- **RobotFramework 的文件类型识别配置**\n\n```shell\n$\tFile >> Settings >> Editor >> File Types\n$\t\t列表中 找到 Robot Feature 选中\n$\t\tFile Name Patterns: 点击 +  >> 分别添加 *.txt 和 *.\n```\n\n- **Suite 和 Case 的执行配置**\n\n```shell\n$\t在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$ \tFile >> Settings >> Tools >> External Tools >> 点击 +\n$ \t\tName：Robot Run SingleTestCase\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t \"$SelectedText$\" ./\n$       Working directory：$FileDir$\n$\t点击 +\n$       Name：Robot Run TestSuite\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n```\n\n- **问题解决**\n\n```shell\n解决：‘chromedriver’ executable needs to be in PATH 问题\n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n\n\tEdge:\tWebDriverException: Message: 'MicrosoftWebDriver.exe' executable needs to be in PATH\n\t\t1. 前往 http://go.microsoft.com/fwlink/?LinkId=619687 选择对应的浏览器版本下载\n\t\t2. 解压后就OK了，把里面的 msedgedriver.exe 放到 python.exe 目录下和所在浏览器目录下\n\t\t\t比如 我的浏览器目录; C:\\Program Files (x86)\\Microsoft\\Edge\\Application\n\t\t\tPython 目录： C:\\Python27\n```\n\n## Robot Framework + Eclipse\n\n## Robot Framework + RIDE\n\n### RIDE 日志输出乱码\n\n#### Python3.7 环境\n\n```\n将Lib\\site-packages\\robotide\\contrib\\testrunner下testrunnerplugin.py中565行     将SYSTEM修改为OUTPUT\n\ntextctrl.AppendTextRaw(bytes(string, encoding['OUTPUT']))  # DEBUG .encode('utf-8'))\n```\n\n#### Python2.7 环境\n\n```\n步骤1：\nLib\\site-packages\\robot\\utils目录下，unic.py文件\n增加：import json，增加以下代码(cp936也可用utf-8或gbk编码格式替换)\nif isinstance(item, (list, dict, tuple)):\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding='cp936')\nexcept UnicodeDecodeError:\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding='cp936')\nexcept:\npass\nexcept:\npass\n\n\n重启RIDE后看下是否还乱码》如果还有问题继续往下进行\n\n步骤2：\n检查Python的默认编码格式：\n\nPython命令窗口：\n\n>>>import sys\n>>>sys.getdefaultencoding()\n如果是Ascii，在Python的Lib\\site-packages文件夹下，新建一个sitecustomize.py文件，内容如下：\n\n#coding=utf8\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf8')\n```\n\n#### 控制台乱码解决方法\n\n```\nib\\site-packages\\robotide\\contrib\\testrunner目录下 testrunner.py 中将 latinl 修改为 mbcs。\n\n（mbcs为多字节字符集，会根据系统自动显示为对应的语言字符集，中文系统中展示GB2312）\n```\n\n### RIDE 的使用\n\n```shell\n工程创建：\n\tFile => New Project\n\t\t\t=> Type: Directory(方便管理) 如果内容简单选择 file\n\t\t\t=> Format: 推荐 txt\n\t\t => New Suite(测试套件)\n\t\t \t=> Type: file\n\t\t \t=> Format: robot\n\t\t => New Test Case\n\t注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径\n\nSettings:\n\tDocumentation：文档，每一项都有。可以给当前的对象加入文档说明。\n\tSetup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n\tSuite Stetup: 套件启动\n\tSuite Teardown: 套件停止\n\tTest Steup: 案例启动\n\tTest Teardown: 案例停止\n\tForce Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n\t右键 工程名称 => New Resource\n\t或\n\t右键 External Resources => Add Resource\n\n用户关键字：（Resource 用来保存用户关键字）\n\t右键新创建的资源 => New User Keyword\nUser Keyword 工作区：\n\tTags：\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n\n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n```\n\n##### 测试套件（TestSuite）\n\n```\n测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n\tDocumentation：\n\tSuite Stetup:\n\tSuite Teardown:\n\tTest Steup:\n\tTest Teardown:\n\tTest Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n\tTest Timeout：\n\tForce Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n\n\n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n\tAdd Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n```\n\n##### 测试用例（TestCase）\n\n```shell\n测试用例工作区：\n\nSettings:\n\tDocumentation：略\n\tStetup: 略\n\tTeardown: 略\n\tTemplate：略\n\tTimeout：略\n```\n\n##### Run 页面\n\n```shell\nExecution Profile：选择运行方式\n\t=> pybot :\n\t=> jybot : 需要安装 Jython 的支持\n\t=> custom script : 选择自定义的脚本来运行\nArguments: pybot 的参数（或者 jybot 等），比如我后面截图里加上了一个参数。\n\t\t   完整版的参数可以在 doc 命令行输入 pybot.bat --help\nOnly Run Tests with these Tags: 只运行这些标记的测试案例\nSkip Tests with these Tags: 跳过这些标记的测试案例\n```\n","source":"_posts/语雀/been08.md","raw":"---\ntitle: 'Robot Framework '\nurlname: been08\ndate: '2020-08-14 17:47:36 +0800'\ntags: []\ncategories: []\nabbrlink: 1901669330\n---\n\n---\n\n**特点**\n\n- 提供可视化界面 ride、 eclipse\n- txt、html 等格式编写测试用例，而不是编程语言\n- 支持**关键字驱动**（直接调用已有的关键字，组成自动化用例）\n- 支持 web 、app、api 自动化测试\n- 开源，基于 Python 编写\n\n## Robot Framework 环境搭建\n\n- **安装 wxPython**\n\n```shell\n$ 下载页面： http://wxpython.org/download.php#stable\n\t在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n\t比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n\t下载完成后，选择默认项进行安装即可。\n```\n\n- **安装 Robot Framwork**\n\n```shell\n$\tpip install robotframwork\n\t图形化界面：RIDE\n\t\tpip install robotframework-ride\n\t\tpip install robotframework-ride==1.7.4.1（指定版本安装）\n```\n\n- **安装 selenium2library**\n\n```shell\n$\tpip install robotframework-selenium2library\n\tRobot Framework 引入 Selenium2Library\n```\n\n- 第三方包本地安装\n\n```shell\n$  **.whl :\n$\t\tpip install  **.whl\n$  **.egg :\n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n\t\tpython setup.py install\n```\n\n### 安装后确认\n\n- 启动 RIDE\n  - 通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide 下的 **init**.py 文件）\n  - 通过命令启动（运行 -> ride.py 回车 / 确认）\n\n```\n    cd C:\\Python27\\Scripts\\\n    运行：\n    python ride.py\n```\n\n- 将 C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。\n- 查看 pybot 版本\n\n```\n    $ cd C:\\Python27\\Scripts\n    # 运行\n    $ pybot --version\n```\n\n## Robot Framework + pyCharm\n\n- **pyCharm 插件**\n\n```shell\n$\tFile >> Settings >> Plugins >> intelliBot 插件 install\n```\n\n- **RobotFramework 的文件类型识别配置**\n\n```shell\n$\tFile >> Settings >> Editor >> File Types\n$\t\t列表中 找到 Robot Feature 选中\n$\t\tFile Name Patterns: 点击 +  >> 分别添加 *.txt 和 *.\n```\n\n- **Suite 和 Case 的执行配置**\n\n```shell\n$\t在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$ \tFile >> Settings >> Tools >> External Tools >> 点击 +\n$ \t\tName：Robot Run SingleTestCase\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t \"$SelectedText$\" ./\n$       Working directory：$FileDir$\n$\t点击 +\n$       Name：Robot Run TestSuite\n$\t\tProgram: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n```\n\n- **问题解决**\n\n```shell\n解决：‘chromedriver’ executable needs to be in PATH 问题\n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n\n\tEdge:\tWebDriverException: Message: 'MicrosoftWebDriver.exe' executable needs to be in PATH\n\t\t1. 前往 http://go.microsoft.com/fwlink/?LinkId=619687 选择对应的浏览器版本下载\n\t\t2. 解压后就OK了，把里面的 msedgedriver.exe 放到 python.exe 目录下和所在浏览器目录下\n\t\t\t比如 我的浏览器目录; C:\\Program Files (x86)\\Microsoft\\Edge\\Application\n\t\t\tPython 目录： C:\\Python27\n```\n\n## Robot Framework + Eclipse\n\n## Robot Framework + RIDE\n\n### RIDE 日志输出乱码\n\n#### Python3.7 环境\n\n```\n将Lib\\site-packages\\robotide\\contrib\\testrunner下testrunnerplugin.py中565行     将SYSTEM修改为OUTPUT\n\ntextctrl.AppendTextRaw(bytes(string, encoding['OUTPUT']))  # DEBUG .encode('utf-8'))\n```\n\n#### Python2.7 环境\n\n```\n步骤1：\nLib\\site-packages\\robot\\utils目录下，unic.py文件\n增加：import json，增加以下代码(cp936也可用utf-8或gbk编码格式替换)\nif isinstance(item, (list, dict, tuple)):\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding='cp936')\nexcept UnicodeDecodeError:\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding='cp936')\nexcept:\npass\nexcept:\npass\n\n\n重启RIDE后看下是否还乱码》如果还有问题继续往下进行\n\n步骤2：\n检查Python的默认编码格式：\n\nPython命令窗口：\n\n>>>import sys\n>>>sys.getdefaultencoding()\n如果是Ascii，在Python的Lib\\site-packages文件夹下，新建一个sitecustomize.py文件，内容如下：\n\n#coding=utf8\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf8')\n```\n\n#### 控制台乱码解决方法\n\n```\nib\\site-packages\\robotide\\contrib\\testrunner目录下 testrunner.py 中将 latinl 修改为 mbcs。\n\n（mbcs为多字节字符集，会根据系统自动显示为对应的语言字符集，中文系统中展示GB2312）\n```\n\n### RIDE 的使用\n\n```shell\n工程创建：\n\tFile => New Project\n\t\t\t=> Type: Directory(方便管理) 如果内容简单选择 file\n\t\t\t=> Format: 推荐 txt\n\t\t => New Suite(测试套件)\n\t\t \t=> Type: file\n\t\t \t=> Format: robot\n\t\t => New Test Case\n\t注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径\n\nSettings:\n\tDocumentation：文档，每一项都有。可以给当前的对象加入文档说明。\n\tSetup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n\tSuite Stetup: 套件启动\n\tSuite Teardown: 套件停止\n\tTest Steup: 案例启动\n\tTest Teardown: 案例停止\n\tForce Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n\t右键 工程名称 => New Resource\n\t或\n\t右键 External Resources => Add Resource\n\n用户关键字：（Resource 用来保存用户关键字）\n\t右键新创建的资源 => New User Keyword\nUser Keyword 工作区：\n\tTags：\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n\n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n```\n\n##### 测试套件（TestSuite）\n\n```\n测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n\tDocumentation：\n\tSuite Stetup:\n\tSuite Teardown:\n\tTest Steup:\n\tTest Teardown:\n\tTest Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n\tTest Timeout：\n\tForce Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n\n\n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n\tAdd Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n```\n\n##### 测试用例（TestCase）\n\n```shell\n测试用例工作区：\n\nSettings:\n\tDocumentation：略\n\tStetup: 略\n\tTeardown: 略\n\tTemplate：略\n\tTimeout：略\n```\n\n##### Run 页面\n\n```shell\nExecution Profile：选择运行方式\n\t=> pybot :\n\t=> jybot : 需要安装 Jython 的支持\n\t=> custom script : 选择自定义的脚本来运行\nArguments: pybot 的参数（或者 jybot 等），比如我后面截图里加上了一个参数。\n\t\t   完整版的参数可以在 doc 命令行输入 pybot.bat --help\nOnly Run Tests with these Tags: 只运行这些标记的测试案例\nSkip Tests with these Tags: 跳过这些标记的测试案例\n```\n","slug":"语雀/been08","published":1,"updated":"2022-03-03T11:26:07.561Z","_id":"cl0awjjp10005081bflt345ll","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p><strong>特点</strong></p>\n<ul>\n<li>提供可视化界面 ride、 eclipse</li>\n<li>txt、html 等格式编写测试用例，而不是编程语言</li>\n<li>支持<strong>关键字驱动</strong>（直接调用已有的关键字，组成自动化用例）</li>\n<li>支持 web 、app、api 自动化测试</li>\n<li>开源，基于 Python 编写</li>\n</ul>\n<h2 id=\"Robot-Framework-环境搭建\"><a href=\"#Robot-Framework-环境搭建\" class=\"headerlink\" title=\"Robot Framework 环境搭建\"></a>Robot Framework 环境搭建</h2><ul>\n<li><strong>安装 wxPython</strong></li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面： http://wxpython.org/download.php#stable\n    在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n    比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n    下载完成后，选择默认项进行安装即可。\n</code></pre>\n<ul>\n<li><strong>安装 Robot Framwork</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframwork\n    图形化界面：RIDE\n        pip install robotframework-ride\n        pip install robotframework-ride==1.7.4.1（指定版本安装）\n</code></pre>\n<ul>\n<li><strong>安装 selenium2library</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframework-selenium2library\n    Robot Framework 引入 Selenium2Library\n</code></pre>\n<ul>\n<li>第三方包本地安装</li>\n</ul>\n<pre><code class=\"shell\">$  **.whl :\n$        pip install  **.whl\n$  **.egg :\n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n        python setup.py install\n</code></pre>\n<h3 id=\"安装后确认\"><a href=\"#安装后确认\" class=\"headerlink\" title=\"安装后确认\"></a>安装后确认</h3><ul>\n<li>启动 RIDE<ul>\n<li>通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide 下的 <strong>init</strong>.py 文件）</li>\n<li>通过命令启动（运行 -&gt; ride.py 回车 / 确认）</li>\n</ul>\n</li>\n</ul>\n<pre><code>    cd C:\\Python27\\Scripts\\\n    运行：\n    python ride.py\n</code></pre>\n<ul>\n<li>将 C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。</li>\n<li>查看 pybot 版本</li>\n</ul>\n<pre><code>    $ cd C:\\Python27\\Scripts\n    # 运行\n    $ pybot --version\n</code></pre>\n<h2 id=\"Robot-Framework-pyCharm\"><a href=\"#Robot-Framework-pyCharm\" class=\"headerlink\" title=\"Robot Framework + pyCharm\"></a>Robot Framework + pyCharm</h2><ul>\n<li><strong>pyCharm 插件</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Plugins &gt;&gt; intelliBot 插件 install\n</code></pre>\n<ul>\n<li><strong>RobotFramework 的文件类型识别配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Editor &gt;&gt; File Types\n$        列表中 找到 Robot Feature 选中\n$        File Name Patterns: 点击 +  &gt;&gt; 分别添加 *.txt 和 *.\n</code></pre>\n<ul>\n<li><strong>Suite 和 Case 的执行配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$     File &gt;&gt; Settings &gt;&gt; Tools &gt;&gt; External Tools &gt;&gt; 点击 +\n$         Name：Robot Run SingleTestCase\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t &quot;$SelectedText$&quot; ./\n$       Working directory：$FileDir$\n$    点击 +\n$       Name：Robot Run TestSuite\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n</code></pre>\n<ul>\n<li><strong>问题解决</strong></li>\n</ul>\n<pre><code class=\"shell\">解决：‘chromedriver’ executable needs to be in PATH 问题\n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n\n    Edge:    WebDriverException: Message: &#39;MicrosoftWebDriver.exe&#39; executable needs to be in PATH\n        1. 前往 http://go.microsoft.com/fwlink/?LinkId=619687 选择对应的浏览器版本下载\n        2. 解压后就OK了，把里面的 msedgedriver.exe 放到 python.exe 目录下和所在浏览器目录下\n            比如 我的浏览器目录; C:\\Program Files (x86)\\Microsoft\\Edge\\Application\n            Python 目录： C:\\Python27\n</code></pre>\n<h2 id=\"Robot-Framework-Eclipse\"><a href=\"#Robot-Framework-Eclipse\" class=\"headerlink\" title=\"Robot Framework + Eclipse\"></a>Robot Framework + Eclipse</h2><h2 id=\"Robot-Framework-RIDE\"><a href=\"#Robot-Framework-RIDE\" class=\"headerlink\" title=\"Robot Framework + RIDE\"></a>Robot Framework + RIDE</h2><h3 id=\"RIDE-日志输出乱码\"><a href=\"#RIDE-日志输出乱码\" class=\"headerlink\" title=\"RIDE 日志输出乱码\"></a>RIDE 日志输出乱码</h3><h4 id=\"Python3-7-环境\"><a href=\"#Python3-7-环境\" class=\"headerlink\" title=\"Python3.7 环境\"></a>Python3.7 环境</h4><pre><code>将Lib\\site-packages\\robotide\\contrib\\testrunner下testrunnerplugin.py中565行     将SYSTEM修改为OUTPUT\n\ntextctrl.AppendTextRaw(bytes(string, encoding[&#39;OUTPUT&#39;]))  # DEBUG .encode(&#39;utf-8&#39;))\n</code></pre>\n<h4 id=\"Python2-7-环境\"><a href=\"#Python2-7-环境\" class=\"headerlink\" title=\"Python2.7 环境\"></a>Python2.7 环境</h4><pre><code>步骤1：\nLib\\site-packages\\robot\\utils目录下，unic.py文件\n增加：import json，增加以下代码(cp936也可用utf-8或gbk编码格式替换)\nif isinstance(item, (list, dict, tuple)):\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding=&#39;cp936&#39;)\nexcept UnicodeDecodeError:\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding=&#39;cp936&#39;)\nexcept:\npass\nexcept:\npass\n\n\n重启RIDE后看下是否还乱码》如果还有问题继续往下进行\n\n步骤2：\n检查Python的默认编码格式：\n\nPython命令窗口：\n\n&gt;&gt;&gt;import sys\n&gt;&gt;&gt;sys.getdefaultencoding()\n如果是Ascii，在Python的Lib\\site-packages文件夹下，新建一个sitecustomize.py文件，内容如下：\n\n#coding=utf8\nimport sys\nreload(sys)\nsys.setdefaultencoding(&#39;utf8&#39;)\n</code></pre>\n<h4 id=\"控制台乱码解决方法\"><a href=\"#控制台乱码解决方法\" class=\"headerlink\" title=\"控制台乱码解决方法\"></a>控制台乱码解决方法</h4><pre><code>ib\\site-packages\\robotide\\contrib\\testrunner目录下 testrunner.py 中将 latinl 修改为 mbcs。\n\n（mbcs为多字节字符集，会根据系统自动显示为对应的语言字符集，中文系统中展示GB2312）\n</code></pre>\n<h3 id=\"RIDE-的使用\"><a href=\"#RIDE-的使用\" class=\"headerlink\" title=\"RIDE 的使用\"></a>RIDE 的使用</h3><pre><code class=\"shell\">工程创建：\n    File =&gt; New Project\n            =&gt; Type: Directory(方便管理) 如果内容简单选择 file\n            =&gt; Format: 推荐 txt\n         =&gt; New Suite(测试套件)\n             =&gt; Type: file\n             =&gt; Format: robot\n         =&gt; New Test Case\n    注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径\n\nSettings:\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n    Setup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n    Suite Stetup: 套件启动\n    Suite Teardown: 套件停止\n    Test Steup: 案例启动\n    Test Teardown: 案例停止\n    Force Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n    右键 工程名称 =&gt; New Resource\n    或\n    右键 External Resources =&gt; Add Resource\n\n用户关键字：（Resource 用来保存用户关键字）\n    右键新创建的资源 =&gt; New User Keyword\nUser Keyword 工作区：\n    Tags：\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n\n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n</code></pre>\n<h5 id=\"测试套件（TestSuite）\"><a href=\"#测试套件（TestSuite）\" class=\"headerlink\" title=\"测试套件（TestSuite）\"></a>测试套件（TestSuite）</h5><pre><code>测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n    Documentation：\n    Suite Stetup:\n    Suite Teardown:\n    Test Steup:\n    Test Teardown:\n    Test Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n    Test Timeout：\n    Force Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n\n\n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n    Add Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n</code></pre>\n<h5 id=\"测试用例（TestCase）\"><a href=\"#测试用例（TestCase）\" class=\"headerlink\" title=\"测试用例（TestCase）\"></a>测试用例（TestCase）</h5><pre><code class=\"shell\">测试用例工作区：\n\nSettings:\n    Documentation：略\n    Stetup: 略\n    Teardown: 略\n    Template：略\n    Timeout：略\n</code></pre>\n<h5 id=\"Run-页面\"><a href=\"#Run-页面\" class=\"headerlink\" title=\"Run 页面\"></a>Run 页面</h5><pre><code class=\"shell\">Execution Profile：选择运行方式\n    =&gt; pybot :\n    =&gt; jybot : 需要安装 Jython 的支持\n    =&gt; custom script : 选择自定义的脚本来运行\nArguments: pybot 的参数（或者 jybot 等），比如我后面截图里加上了一个参数。\n           完整版的参数可以在 doc 命令行输入 pybot.bat --help\nOnly Run Tests with these Tags: 只运行这些标记的测试案例\nSkip Tests with these Tags: 跳过这些标记的测试案例\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<hr>\n<p><strong>特点</strong></p>\n<ul>\n<li>提供可视化界面 ride、 eclipse</li>\n<li>txt、html 等格式编写测试用例，而不是编程语言</li>\n<li>支持<strong>关键字驱动</strong>（直接调用已有的关键字，组成自动化用例）</li>\n<li>支持 web 、app、api 自动化测试</li>\n<li>开源，基于 Python 编写</li>\n</ul>\n<h2 id=\"Robot-Framework-环境搭建\"><a href=\"#Robot-Framework-环境搭建\" class=\"headerlink\" title=\"Robot Framework 环境搭建\"></a>Robot Framework 环境搭建</h2><ul>\n<li><strong>安装 wxPython</strong></li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面： http://wxpython.org/download.php#stable\n    在选择版本下载的时候要注意选择与 Python 版本对应的版本，并且选择 unicode 版本。\n    比如版本：wxPython2.8-win64-unicode-py27.exe，否则安装完成后不能支持中文。\n    下载完成后，选择默认项进行安装即可。\n</code></pre>\n<ul>\n<li><strong>安装 Robot Framwork</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframwork\n    图形化界面：RIDE\n        pip install robotframework-ride\n        pip install robotframework-ride==1.7.4.1（指定版本安装）\n</code></pre>\n<ul>\n<li><strong>安装 selenium2library</strong></li>\n</ul>\n<pre><code class=\"shell\">$    pip install robotframework-selenium2library\n    Robot Framework 引入 Selenium2Library\n</code></pre>\n<ul>\n<li>第三方包本地安装</li>\n</ul>\n<pre><code class=\"shell\">$  **.whl :\n$        pip install  **.whl\n$  **.egg :\n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n        python setup.py install\n</code></pre>\n<h3 id=\"安装后确认\"><a href=\"#安装后确认\" class=\"headerlink\" title=\"安装后确认\"></a>安装后确认</h3><ul>\n<li>启动 RIDE<ul>\n<li>通过文件启动（双击 [dirPath]\\python\\Lib\\site-packages\\robotide 下的 <strong>init</strong>.py 文件）</li>\n<li>通过命令启动（运行 -&gt; ride.py 回车 / 确认）</li>\n</ul>\n</li>\n</ul>\n<pre><code>    cd C:\\Python27\\Scripts\\\n    运行：\n    python ride.py\n</code></pre>\n<ul>\n<li>将 C:\\Python27\\Scripts\\ride.py 创建快捷键，打开 ride.py 文件之后（以 python 方式打开），点击“运行（start）”按钮。</li>\n<li>查看 pybot 版本</li>\n</ul>\n<pre><code>    $ cd C:\\Python27\\Scripts\n    # 运行\n    $ pybot --version\n</code></pre>\n<h2 id=\"Robot-Framework-pyCharm\"><a href=\"#Robot-Framework-pyCharm\" class=\"headerlink\" title=\"Robot Framework + pyCharm\"></a>Robot Framework + pyCharm</h2><ul>\n<li><strong>pyCharm 插件</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Plugins &gt;&gt; intelliBot 插件 install\n</code></pre>\n<ul>\n<li><strong>RobotFramework 的文件类型识别配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    File &gt;&gt; Settings &gt;&gt; Editor &gt;&gt; File Types\n$        列表中 找到 Robot Feature 选中\n$        File Name Patterns: 点击 +  &gt;&gt; 分别添加 *.txt 和 *.\n</code></pre>\n<ul>\n<li><strong>Suite 和 Case 的执行配置</strong></li>\n</ul>\n<pre><code class=\"shell\">$    在我们在执行脚本时，可以单独执行一个case，也可以执行case的集合：suite（测试套），所以我们这里要做两个配置。\n$     File &gt;&gt; Settings &gt;&gt; Tools &gt;&gt; External Tools &gt;&gt; 点击 +\n$         Name：Robot Run SingleTestCase\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results -t &quot;$SelectedText$&quot; ./\n$       Working directory：$FileDir$\n$    点击 +\n$       Name：Robot Run TestSuite\n$        Program: C:\\Python\\Python27\\Scripts\\robot.exe\n$       Arguments：-d results $FileName$\n$       Working directory：$FileDir$\n</code></pre>\n<ul>\n<li><strong>问题解决</strong></li>\n</ul>\n<pre><code class=\"shell\">解决：‘chromedriver’ executable needs to be in PATH 问题\n（在使用 selenium 启动谷歌 Chrome 浏览器的时候，是需要用到 chromedirver 的）\n\n    1.首先需要下载 Chromedriver，下载后得到的是一个 chromedriver.exe 文件。\n        chromedriver下载地址:  http://npm.taobao.org/mirrors/chromedriver/\n    2.将 chromedriver.exe 拷贝至谷歌浏览器目录（如 C:\\Program Files\\Google\\Chrome\\Application）以及 python 根目录（C:\\Python27）。\n    3.将谷歌浏览器环境变量添加到path（C:\\Users\\HD003\\AppData\\Local\\Google\\Chrome\\Application）。\n    至此，就可以解决 ‘chromedriver’ executable needs to be in PATH问题了。\n\n    Edge:    WebDriverException: Message: &#39;MicrosoftWebDriver.exe&#39; executable needs to be in PATH\n        1. 前往 http://go.microsoft.com/fwlink/?LinkId=619687 选择对应的浏览器版本下载\n        2. 解压后就OK了，把里面的 msedgedriver.exe 放到 python.exe 目录下和所在浏览器目录下\n            比如 我的浏览器目录; C:\\Program Files (x86)\\Microsoft\\Edge\\Application\n            Python 目录： C:\\Python27\n</code></pre>\n<h2 id=\"Robot-Framework-Eclipse\"><a href=\"#Robot-Framework-Eclipse\" class=\"headerlink\" title=\"Robot Framework + Eclipse\"></a>Robot Framework + Eclipse</h2><h2 id=\"Robot-Framework-RIDE\"><a href=\"#Robot-Framework-RIDE\" class=\"headerlink\" title=\"Robot Framework + RIDE\"></a>Robot Framework + RIDE</h2><h3 id=\"RIDE-日志输出乱码\"><a href=\"#RIDE-日志输出乱码\" class=\"headerlink\" title=\"RIDE 日志输出乱码\"></a>RIDE 日志输出乱码</h3><h4 id=\"Python3-7-环境\"><a href=\"#Python3-7-环境\" class=\"headerlink\" title=\"Python3.7 环境\"></a>Python3.7 环境</h4><pre><code>将Lib\\site-packages\\robotide\\contrib\\testrunner下testrunnerplugin.py中565行     将SYSTEM修改为OUTPUT\n\ntextctrl.AppendTextRaw(bytes(string, encoding[&#39;OUTPUT&#39;]))  # DEBUG .encode(&#39;utf-8&#39;))\n</code></pre>\n<h4 id=\"Python2-7-环境\"><a href=\"#Python2-7-环境\" class=\"headerlink\" title=\"Python2.7 环境\"></a>Python2.7 环境</h4><pre><code>步骤1：\nLib\\site-packages\\robot\\utils目录下，unic.py文件\n增加：import json，增加以下代码(cp936也可用utf-8或gbk编码格式替换)\nif isinstance(item, (list, dict, tuple)):\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding=&#39;cp936&#39;)\nexcept UnicodeDecodeError:\ntry:\nitem = json.dumps(item, ensure_ascii=False, encoding=&#39;cp936&#39;)\nexcept:\npass\nexcept:\npass\n\n\n重启RIDE后看下是否还乱码》如果还有问题继续往下进行\n\n步骤2：\n检查Python的默认编码格式：\n\nPython命令窗口：\n\n&gt;&gt;&gt;import sys\n&gt;&gt;&gt;sys.getdefaultencoding()\n如果是Ascii，在Python的Lib\\site-packages文件夹下，新建一个sitecustomize.py文件，内容如下：\n\n#coding=utf8\nimport sys\nreload(sys)\nsys.setdefaultencoding(&#39;utf8&#39;)\n</code></pre>\n<h4 id=\"控制台乱码解决方法\"><a href=\"#控制台乱码解决方法\" class=\"headerlink\" title=\"控制台乱码解决方法\"></a>控制台乱码解决方法</h4><pre><code>ib\\site-packages\\robotide\\contrib\\testrunner目录下 testrunner.py 中将 latinl 修改为 mbcs。\n\n（mbcs为多字节字符集，会根据系统自动显示为对应的语言字符集，中文系统中展示GB2312）\n</code></pre>\n<h3 id=\"RIDE-的使用\"><a href=\"#RIDE-的使用\" class=\"headerlink\" title=\"RIDE 的使用\"></a>RIDE 的使用</h3><pre><code class=\"shell\">工程创建：\n    File =&gt; New Project\n            =&gt; Type: Directory(方便管理) 如果内容简单选择 file\n            =&gt; Format: 推荐 txt\n         =&gt; New Suite(测试套件)\n             =&gt; Type: file\n             =&gt; Format: robot\n         =&gt; New Test Case\n    注意： *测试套件，表示它有了新的修改，还没有保存\nProject 工作区：\n第一行的 Source 列出了这个 Project 的路径\n\nSettings:\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n    Setup 和 TearDown 分别表示启动和停止，也就是你可以在对应的文本框设置一个关键字，那么指定的事件触发的时候就会执行这个关键字。\n    Suite Stetup: 套件启动\n    Suite Teardown: 套件停止\n    Test Steup: 案例启动\n    Test Teardown: 案例停止\n    Force Tags: 强制 tag 标记，强制的给他的所有子元素加上这些tags。后面运行的时候我们可以选择指定tag的案例来运行。\n\n\n\n资源添加：\n    右键 工程名称 =&gt; New Resource\n    或\n    右键 External Resources =&gt; Add Resource\n\n用户关键字：（Resource 用来保存用户关键字）\n    右键新创建的资源 =&gt; New User Keyword\nUser Keyword 工作区：\n    Tags：\n    Documentation：文档，每一项都有。可以给当前的对象加入文档说明。\n$$  Arguments: 设置传入参数\n    Teardown: 设置完成时的动作，比如写上 Close All Browsers，表示在这个用户关键字执行完成之后会执行什么关键字。\n    Timeout: 设置超时时间，如写上 1min，表示 1 分钟超时，如果这个关键字执行超过 1 分钟则认为失败。\n$$  Return Value: 设置返回值\n\n    User Keywords 其实就是一个函数,Bulletin 的 Keywords 和 TestLib 里的 Keywords 也都是一个个的函数，只是封装在不同层面。后 2 个是在代码级的封装，将 python 代码写成的函数封装成可以调用的关键字，而User Keywords 就是把这些可调用的关键字进一步的封装，可以理解为应用层面的封装，而且可以层层封装。到后面你会发现，大部分时间，你其实是和User Keywords在打交道，利用好User Keywords，会方便很多。\n</code></pre>\n<h5 id=\"测试套件（TestSuite）\"><a href=\"#测试套件（TestSuite）\" class=\"headerlink\" title=\"测试套件（TestSuite）\"></a>测试套件（TestSuite）</h5><pre><code>测试套件工作区：\n第一行的 Source 列出了这个 TestSuite 的路径\n\nSettings:\n    Documentation：\n    Suite Stetup:\n    Suite Teardown:\n    Test Steup:\n    Test Teardown:\n    Test Template：测试模版，可以指定某个关键字为这个测试套件下所有 TestCase 的模版，这样所有的 TestCase 就只需要设置这个关键字的传入参数即可\n    Test Timeout：\n    Force Tags: 在文件型 Suite 这里还可以继续给子元素增加 Force Tags，但是他不能删除父元素设置的 tags\n    Default Tags：默认标记，其实和 Force Tags 没啥区别的，效果都是一样的，只是颜色不同而已。\n\n\n再往下大体分为三部分\n（1）加载外部文件\n    Add Library ：加载测试库，主要是[PYTHON目录]\\Lib\\site-packages里的测试库\n    Add Resource：加载资源，主要是你工程相关的资源文件\n    Add Variables：加载变量文件\n（2）定义内部变量\n    Add Scalar：定义变量\n    Add List：定义列表型变量\n    Add Dict：定义字典型变量\n（3）元数据定义\n    Add Metadata：定义元数据。作用是在 report 和 log 里显示定义好的内容，格式和 document 一样。\n</code></pre>\n<h5 id=\"测试用例（TestCase）\"><a href=\"#测试用例（TestCase）\" class=\"headerlink\" title=\"测试用例（TestCase）\"></a>测试用例（TestCase）</h5><pre><code class=\"shell\">测试用例工作区：\n\nSettings:\n    Documentation：略\n    Stetup: 略\n    Teardown: 略\n    Template：略\n    Timeout：略\n</code></pre>\n<h5 id=\"Run-页面\"><a href=\"#Run-页面\" class=\"headerlink\" title=\"Run 页面\"></a>Run 页面</h5><pre><code class=\"shell\">Execution Profile：选择运行方式\n    =&gt; pybot :\n    =&gt; jybot : 需要安装 Jython 的支持\n    =&gt; custom script : 选择自定义的脚本来运行\nArguments: pybot 的参数（或者 jybot 等），比如我后面截图里加上了一个参数。\n           完整版的参数可以在 doc 命令行输入 pybot.bat --help\nOnly Run Tests with these Tags: 只运行这些标记的测试案例\nSkip Tests with these Tags: 跳过这些标记的测试案例\n</code></pre>\n"},{"title":"webPack 代码优化","urlname":"bhgqvs","date":"2020-01-04T14:06:33.000Z","abbrlink":3336896154,"_content":"\n## eslint.js(二选一)\n\n> - npm install eslint eslint-loader -D (检验代码规范)\n> - npx eslint --init  (初始化 eslint 配置文件 )\n\n```javascript\nrules: [\n  {\n    test: /\\.js$/,\n    use: \"eslint-loader\",\n    enforce: \"pre\",\n  },\n];\n```\n\n## sourceMap (代码排查，调试错误)\n\n> - 开发环境使用： cheap-module-eval-source-map\n> - 生产环境使用： cheap-module-source-map\n\n## Tree-shaking & scopeHosting (生产环境)\n\n> - 在 package 文件中设置 \"sideEffects\": \"false\", 把副作用的数据删除掉\n> - \"sideEffects\": [\"**/*.css\"], 去除 css 文件\n\n[ scopeHosting ] (自带)减少作用域\n\n## 热更新\n\n```javascript\ndevServer: {\n        port: 8081,\n        open: true,\n        compress: true,\n        hot: true,  // 热更新 仅更新更改的代码 局部刷新 减少数据请求数量\n    },\n\n    //  webpack css 强制热更新插件\n        new webpack.HotModuleReplacementPlugin(),\n\n    let op = document.createElement('p');\nop.innerHTML = plus(10,5);\ndocument.body.appendChild(op)\n\n\n    // js 代码的热更新\n    if(module.hot) {\n        module.hot.accept('./test',()=>{\n            let plus = require('./test').default;\n            op.innerHTML = plus(20,5);\n        })\n    }\n```\n\n**注：当把 css 文件分离出后 热更新只执行一次 后续失效**\n\n## 懒加载（动态加载模块）\n\n> - webpackPrefetch        利用浏览器空闲时间，把动态模块加载完成并引入 前提：主要模块加载完成后\n> - webpackPreload         预加载    和主模块加载同时进行加载，不会引入\n> - webpackChunkName   文件名字\n\n```javascript\noutput: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n        // 动态模块名字  name 代表 01234\n        chunkFilename:'[name].min.js'\n    },\n\n import(/*webpackPrefetch:true*/'./test').then(({default:m})=>{\n        op.innerHTML = m(20,50)\n    });\n```\n\n## 打包文件分析工具 （生产环境）\n\n> - npm install webpack-bundle-analyzer\n\n## optimization.splitChunks\n\n```javascript\noptimization: {\n        minimizer: [\n            new OptimizeCssAssetsPlugin()\n        ],\n        splitChunks: {\n            chunks: 'all',  // 同异步  all 所有\n            minSize: 30000,  // 至少 30 kb 才去抽离\n            maxSize: 0,\n            minChunks: 1,  // 至少抽离第三方模块 1 个\n            maxAsyncRequests: 6,  // 引入模块异步请求次数\n            maxInitialRequests: 4, // 首屏加载的请求次数\n            automaticNameDelimiter: '~', // 文件之间的连接符\n            automaticNameMaxLength: 30,\n            cacheGroups: { // 缓存组， 可以设置一些规则\n              vendors: {\n                test: /[\\\\/]node_modules[\\\\/]/,\n                priority: -10  // 优先级\n              },\n              default: {\n                minChunks: 2,\n                priority: -20, // 优先级\n                reuseExistingChunk: true\n              }\n            }\n          }\n        },\n```\n\n## resolve 解析\n\n> - extensions   添加扩展名进行匹配\n> - alias   设置别名\n\n```javascript\nresolve: {\n        extensions: ['.js', '.jsx', '.json', '.css', '.ts', '.tsx', '.vue'],\n        alias:{\n            '@':path.resolve(__dirname,'src'),\n            'test': path.resolve(__dirname,'src/test')\n        }\n    }\n```\n\n## happypack\n\n> - npm install happypack -D  (多线程打包，把不同的逻辑交给不同的线程处理)\n\n## 根据 mode 分离配置环境\n\n> - webpack.base.js 公共配置\n> - webpack.dev.js 开发环境配置\n> - webpack.prod.js 生产环境配置\n> - package.json 文件的 scripts 属性中配置执行命令\n>   - 开发环境打包: \"dev\": \"webpack --env.development --config./webpack.base.js\",\n>   - 生产环境打包:\"build\": \"webpack --env.production --config./webpack.base.js\",\n>   - 服务器：  \"dev-s\": \"webpack-dev-server --env.development --config./webpack.base.js\"\n> - npm install webpack-merge\n\n## 图片压缩\n\n> - npm install image-webpack-loader -D\n\n```javascript\n{\n                test: /\\.(gif|png|jpe?g|svg)$/i,\n                use: [\n                  'file-loader',\n                  {\n                    loader: 'image-webpack-loader',\n                    options: {\n                      mozjpeg: {\n                        progressive: true,\n                        quality: 65 // 图片品质\n                      },\n                      // optipng.enabled: false will disable optipng\n                      optipng: {\n                        enabled: false,\n                      },\n                      pngquant: {\n                        quality: [0.65, 0.90],\n                        speed: 4\n                      },\n                      gifsicle: {\n                        interlaced: false,\n                      },\n                      // the webp option will enable WEBP\n                      webp: {\n                        quality: 75\n                      }\n                    }\n                  },\n                ],\n              }\n```\n","source":"_posts/语雀/bhgqvs.md","raw":"---\ntitle: webPack 代码优化\nurlname: bhgqvs\ndate: '2020-01-04 22:06:33 +0800'\ntags: []\ncategories: []\nabbrlink: 3336896154\n---\n\n## eslint.js(二选一)\n\n> - npm install eslint eslint-loader -D (检验代码规范)\n> - npx eslint --init  (初始化 eslint 配置文件 )\n\n```javascript\nrules: [\n  {\n    test: /\\.js$/,\n    use: \"eslint-loader\",\n    enforce: \"pre\",\n  },\n];\n```\n\n## sourceMap (代码排查，调试错误)\n\n> - 开发环境使用： cheap-module-eval-source-map\n> - 生产环境使用： cheap-module-source-map\n\n## Tree-shaking & scopeHosting (生产环境)\n\n> - 在 package 文件中设置 \"sideEffects\": \"false\", 把副作用的数据删除掉\n> - \"sideEffects\": [\"**/*.css\"], 去除 css 文件\n\n[ scopeHosting ] (自带)减少作用域\n\n## 热更新\n\n```javascript\ndevServer: {\n        port: 8081,\n        open: true,\n        compress: true,\n        hot: true,  // 热更新 仅更新更改的代码 局部刷新 减少数据请求数量\n    },\n\n    //  webpack css 强制热更新插件\n        new webpack.HotModuleReplacementPlugin(),\n\n    let op = document.createElement('p');\nop.innerHTML = plus(10,5);\ndocument.body.appendChild(op)\n\n\n    // js 代码的热更新\n    if(module.hot) {\n        module.hot.accept('./test',()=>{\n            let plus = require('./test').default;\n            op.innerHTML = plus(20,5);\n        })\n    }\n```\n\n**注：当把 css 文件分离出后 热更新只执行一次 后续失效**\n\n## 懒加载（动态加载模块）\n\n> - webpackPrefetch        利用浏览器空闲时间，把动态模块加载完成并引入 前提：主要模块加载完成后\n> - webpackPreload         预加载    和主模块加载同时进行加载，不会引入\n> - webpackChunkName   文件名字\n\n```javascript\noutput: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n        // 动态模块名字  name 代表 01234\n        chunkFilename:'[name].min.js'\n    },\n\n import(/*webpackPrefetch:true*/'./test').then(({default:m})=>{\n        op.innerHTML = m(20,50)\n    });\n```\n\n## 打包文件分析工具 （生产环境）\n\n> - npm install webpack-bundle-analyzer\n\n## optimization.splitChunks\n\n```javascript\noptimization: {\n        minimizer: [\n            new OptimizeCssAssetsPlugin()\n        ],\n        splitChunks: {\n            chunks: 'all',  // 同异步  all 所有\n            minSize: 30000,  // 至少 30 kb 才去抽离\n            maxSize: 0,\n            minChunks: 1,  // 至少抽离第三方模块 1 个\n            maxAsyncRequests: 6,  // 引入模块异步请求次数\n            maxInitialRequests: 4, // 首屏加载的请求次数\n            automaticNameDelimiter: '~', // 文件之间的连接符\n            automaticNameMaxLength: 30,\n            cacheGroups: { // 缓存组， 可以设置一些规则\n              vendors: {\n                test: /[\\\\/]node_modules[\\\\/]/,\n                priority: -10  // 优先级\n              },\n              default: {\n                minChunks: 2,\n                priority: -20, // 优先级\n                reuseExistingChunk: true\n              }\n            }\n          }\n        },\n```\n\n## resolve 解析\n\n> - extensions   添加扩展名进行匹配\n> - alias   设置别名\n\n```javascript\nresolve: {\n        extensions: ['.js', '.jsx', '.json', '.css', '.ts', '.tsx', '.vue'],\n        alias:{\n            '@':path.resolve(__dirname,'src'),\n            'test': path.resolve(__dirname,'src/test')\n        }\n    }\n```\n\n## happypack\n\n> - npm install happypack -D  (多线程打包，把不同的逻辑交给不同的线程处理)\n\n## 根据 mode 分离配置环境\n\n> - webpack.base.js 公共配置\n> - webpack.dev.js 开发环境配置\n> - webpack.prod.js 生产环境配置\n> - package.json 文件的 scripts 属性中配置执行命令\n>   - 开发环境打包: \"dev\": \"webpack --env.development --config./webpack.base.js\",\n>   - 生产环境打包:\"build\": \"webpack --env.production --config./webpack.base.js\",\n>   - 服务器：  \"dev-s\": \"webpack-dev-server --env.development --config./webpack.base.js\"\n> - npm install webpack-merge\n\n## 图片压缩\n\n> - npm install image-webpack-loader -D\n\n```javascript\n{\n                test: /\\.(gif|png|jpe?g|svg)$/i,\n                use: [\n                  'file-loader',\n                  {\n                    loader: 'image-webpack-loader',\n                    options: {\n                      mozjpeg: {\n                        progressive: true,\n                        quality: 65 // 图片品质\n                      },\n                      // optipng.enabled: false will disable optipng\n                      optipng: {\n                        enabled: false,\n                      },\n                      pngquant: {\n                        quality: [0.65, 0.90],\n                        speed: 4\n                      },\n                      gifsicle: {\n                        interlaced: false,\n                      },\n                      // the webp option will enable WEBP\n                      webp: {\n                        quality: 75\n                      }\n                    }\n                  },\n                ],\n              }\n```\n","slug":"语雀/bhgqvs","published":1,"updated":"2022-03-03T11:26:07.562Z","_id":"cl0awjjp20006081bbn1653k6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"eslint-js-二选一\"><a href=\"#eslint-js-二选一\" class=\"headerlink\" title=\"eslint.js(二选一)\"></a>eslint.js(二选一)</h2><blockquote>\n<ul>\n<li>npm install eslint eslint-loader -D (检验代码规范)</li>\n<li>npx eslint –init  (初始化 eslint 配置文件 )</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">rules: [\n  &#123;\n    test: /\\.js$/,\n    use: &quot;eslint-loader&quot;,\n    enforce: &quot;pre&quot;,\n  &#125;,\n];\n</code></pre>\n<h2 id=\"sourceMap-代码排查，调试错误\"><a href=\"#sourceMap-代码排查，调试错误\" class=\"headerlink\" title=\"sourceMap (代码排查，调试错误)\"></a>sourceMap (代码排查，调试错误)</h2><blockquote>\n<ul>\n<li>开发环境使用： cheap-module-eval-source-map</li>\n<li>生产环境使用： cheap-module-source-map</li>\n</ul>\n</blockquote>\n<h2 id=\"Tree-shaking-amp-scopeHosting-生产环境\"><a href=\"#Tree-shaking-amp-scopeHosting-生产环境\" class=\"headerlink\" title=\"Tree-shaking &amp; scopeHosting (生产环境)\"></a>Tree-shaking &amp; scopeHosting (生产环境)</h2><blockquote>\n<ul>\n<li>在 package 文件中设置 “sideEffects”: “false”, 把副作用的数据删除掉</li>\n<li>“sideEffects”: [“**/*.css”], 去除 css 文件</li>\n</ul>\n</blockquote>\n<p>[ scopeHosting ] (自带)减少作用域</p>\n<h2 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h2><pre><code class=\"javascript\">devServer: &#123;\n        port: 8081,\n        open: true,\n        compress: true,\n        hot: true,  // 热更新 仅更新更改的代码 局部刷新 减少数据请求数量\n    &#125;,\n\n    //  webpack css 强制热更新插件\n        new webpack.HotModuleReplacementPlugin(),\n\n    let op = document.createElement(&#39;p&#39;);\nop.innerHTML = plus(10,5);\ndocument.body.appendChild(op)\n\n\n    // js 代码的热更新\n    if(module.hot) &#123;\n        module.hot.accept(&#39;./test&#39;,()=&gt;&#123;\n            let plus = require(&#39;./test&#39;).default;\n            op.innerHTML = plus(20,5);\n        &#125;)\n    &#125;\n</code></pre>\n<p><strong>注：当把 css 文件分离出后 热更新只执行一次 后续失效</strong></p>\n<h2 id=\"懒加载（动态加载模块）\"><a href=\"#懒加载（动态加载模块）\" class=\"headerlink\" title=\"懒加载（动态加载模块）\"></a>懒加载（动态加载模块）</h2><blockquote>\n<ul>\n<li>webpackPrefetch        利用浏览器空闲时间，把动态模块加载完成并引入 前提：主要模块加载完成后</li>\n<li>webpackPreload         预加载    和主模块加载同时进行加载，不会引入</li>\n<li>webpackChunkName   文件名字</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">output: &#123;\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname, &#39;dist&#39;),\n        // 动态模块名字  name 代表 01234\n        chunkFilename:&#39;[name].min.js&#39;\n    &#125;,\n\n import(/*webpackPrefetch:true*/&#39;./test&#39;).then((&#123;default:m&#125;)=&gt;&#123;\n        op.innerHTML = m(20,50)\n    &#125;);\n</code></pre>\n<h2 id=\"打包文件分析工具-（生产环境）\"><a href=\"#打包文件分析工具-（生产环境）\" class=\"headerlink\" title=\"打包文件分析工具 （生产环境）\"></a>打包文件分析工具 （生产环境）</h2><blockquote>\n<ul>\n<li>npm install webpack-bundle-analyzer</li>\n</ul>\n</blockquote>\n<h2 id=\"optimization-splitChunks\"><a href=\"#optimization-splitChunks\" class=\"headerlink\" title=\"optimization.splitChunks\"></a>optimization.splitChunks</h2><pre><code class=\"javascript\">optimization: &#123;\n        minimizer: [\n            new OptimizeCssAssetsPlugin()\n        ],\n        splitChunks: &#123;\n            chunks: &#39;all&#39;,  // 同异步  all 所有\n            minSize: 30000,  // 至少 30 kb 才去抽离\n            maxSize: 0,\n            minChunks: 1,  // 至少抽离第三方模块 1 个\n            maxAsyncRequests: 6,  // 引入模块异步请求次数\n            maxInitialRequests: 4, // 首屏加载的请求次数\n            automaticNameDelimiter: &#39;~&#39;, // 文件之间的连接符\n            automaticNameMaxLength: 30,\n            cacheGroups: &#123; // 缓存组， 可以设置一些规则\n              vendors: &#123;\n                test: /[\\\\/]node_modules[\\\\/]/,\n                priority: -10  // 优先级\n              &#125;,\n              default: &#123;\n                minChunks: 2,\n                priority: -20, // 优先级\n                reuseExistingChunk: true\n              &#125;\n            &#125;\n          &#125;\n        &#125;,\n</code></pre>\n<h2 id=\"resolve-解析\"><a href=\"#resolve-解析\" class=\"headerlink\" title=\"resolve 解析\"></a>resolve 解析</h2><blockquote>\n<ul>\n<li>extensions   添加扩展名进行匹配</li>\n<li>alias   设置别名</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">resolve: &#123;\n        extensions: [&#39;.js&#39;, &#39;.jsx&#39;, &#39;.json&#39;, &#39;.css&#39;, &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.vue&#39;],\n        alias:&#123;\n            &#39;@&#39;:path.resolve(__dirname,&#39;src&#39;),\n            &#39;test&#39;: path.resolve(__dirname,&#39;src/test&#39;)\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"happypack\"><a href=\"#happypack\" class=\"headerlink\" title=\"happypack\"></a>happypack</h2><blockquote>\n<ul>\n<li>npm install happypack -D  (多线程打包，把不同的逻辑交给不同的线程处理)</li>\n</ul>\n</blockquote>\n<h2 id=\"根据-mode-分离配置环境\"><a href=\"#根据-mode-分离配置环境\" class=\"headerlink\" title=\"根据 mode 分离配置环境\"></a>根据 mode 分离配置环境</h2><blockquote>\n<ul>\n<li>webpack.base.js 公共配置</li>\n<li>webpack.dev.js 开发环境配置</li>\n<li>webpack.prod.js 生产环境配置</li>\n<li>package.json 文件的 scripts 属性中配置执行命令<ul>\n<li>开发环境打包: “dev”: “webpack –env.development –config./webpack.base.js”,</li>\n<li>生产环境打包:”build”: “webpack –env.production –config./webpack.base.js”,</li>\n<li>服务器：  “dev-s”: “webpack-dev-server –env.development –config./webpack.base.js”</li>\n</ul>\n</li>\n<li>npm install webpack-merge</li>\n</ul>\n</blockquote>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><blockquote>\n<ul>\n<li>npm install image-webpack-loader -D</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">&#123;\n                test: /\\.(gif|png|jpe?g|svg)$/i,\n                use: [\n                  &#39;file-loader&#39;,\n                  &#123;\n                    loader: &#39;image-webpack-loader&#39;,\n                    options: &#123;\n                      mozjpeg: &#123;\n                        progressive: true,\n                        quality: 65 // 图片品质\n                      &#125;,\n                      // optipng.enabled: false will disable optipng\n                      optipng: &#123;\n                        enabled: false,\n                      &#125;,\n                      pngquant: &#123;\n                        quality: [0.65, 0.90],\n                        speed: 4\n                      &#125;,\n                      gifsicle: &#123;\n                        interlaced: false,\n                      &#125;,\n                      // the webp option will enable WEBP\n                      webp: &#123;\n                        quality: 75\n                      &#125;\n                    &#125;\n                  &#125;,\n                ],\n              &#125;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"eslint-js-二选一\"><a href=\"#eslint-js-二选一\" class=\"headerlink\" title=\"eslint.js(二选一)\"></a>eslint.js(二选一)</h2><blockquote>\n<ul>\n<li>npm install eslint eslint-loader -D (检验代码规范)</li>\n<li>npx eslint –init  (初始化 eslint 配置文件 )</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">rules: [\n  &#123;\n    test: /\\.js$/,\n    use: &quot;eslint-loader&quot;,\n    enforce: &quot;pre&quot;,\n  &#125;,\n];\n</code></pre>\n<h2 id=\"sourceMap-代码排查，调试错误\"><a href=\"#sourceMap-代码排查，调试错误\" class=\"headerlink\" title=\"sourceMap (代码排查，调试错误)\"></a>sourceMap (代码排查，调试错误)</h2><blockquote>\n<ul>\n<li>开发环境使用： cheap-module-eval-source-map</li>\n<li>生产环境使用： cheap-module-source-map</li>\n</ul>\n</blockquote>\n<h2 id=\"Tree-shaking-amp-scopeHosting-生产环境\"><a href=\"#Tree-shaking-amp-scopeHosting-生产环境\" class=\"headerlink\" title=\"Tree-shaking &amp; scopeHosting (生产环境)\"></a>Tree-shaking &amp; scopeHosting (生产环境)</h2><blockquote>\n<ul>\n<li>在 package 文件中设置 “sideEffects”: “false”, 把副作用的数据删除掉</li>\n<li>“sideEffects”: [“**/*.css”], 去除 css 文件</li>\n</ul>\n</blockquote>\n<p>[ scopeHosting ] (自带)减少作用域</p>\n<h2 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h2><pre><code class=\"javascript\">devServer: &#123;\n        port: 8081,\n        open: true,\n        compress: true,\n        hot: true,  // 热更新 仅更新更改的代码 局部刷新 减少数据请求数量\n    &#125;,\n\n    //  webpack css 强制热更新插件\n        new webpack.HotModuleReplacementPlugin(),\n\n    let op = document.createElement(&#39;p&#39;);\nop.innerHTML = plus(10,5);\ndocument.body.appendChild(op)\n\n\n    // js 代码的热更新\n    if(module.hot) &#123;\n        module.hot.accept(&#39;./test&#39;,()=&gt;&#123;\n            let plus = require(&#39;./test&#39;).default;\n            op.innerHTML = plus(20,5);\n        &#125;)\n    &#125;\n</code></pre>\n<p><strong>注：当把 css 文件分离出后 热更新只执行一次 后续失效</strong></p>\n<h2 id=\"懒加载（动态加载模块）\"><a href=\"#懒加载（动态加载模块）\" class=\"headerlink\" title=\"懒加载（动态加载模块）\"></a>懒加载（动态加载模块）</h2><blockquote>\n<ul>\n<li>webpackPrefetch        利用浏览器空闲时间，把动态模块加载完成并引入 前提：主要模块加载完成后</li>\n<li>webpackPreload         预加载    和主模块加载同时进行加载，不会引入</li>\n<li>webpackChunkName   文件名字</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">output: &#123;\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname, &#39;dist&#39;),\n        // 动态模块名字  name 代表 01234\n        chunkFilename:&#39;[name].min.js&#39;\n    &#125;,\n\n import(/*webpackPrefetch:true*/&#39;./test&#39;).then((&#123;default:m&#125;)=&gt;&#123;\n        op.innerHTML = m(20,50)\n    &#125;);\n</code></pre>\n<h2 id=\"打包文件分析工具-（生产环境）\"><a href=\"#打包文件分析工具-（生产环境）\" class=\"headerlink\" title=\"打包文件分析工具 （生产环境）\"></a>打包文件分析工具 （生产环境）</h2><blockquote>\n<ul>\n<li>npm install webpack-bundle-analyzer</li>\n</ul>\n</blockquote>\n<h2 id=\"optimization-splitChunks\"><a href=\"#optimization-splitChunks\" class=\"headerlink\" title=\"optimization.splitChunks\"></a>optimization.splitChunks</h2><pre><code class=\"javascript\">optimization: &#123;\n        minimizer: [\n            new OptimizeCssAssetsPlugin()\n        ],\n        splitChunks: &#123;\n            chunks: &#39;all&#39;,  // 同异步  all 所有\n            minSize: 30000,  // 至少 30 kb 才去抽离\n            maxSize: 0,\n            minChunks: 1,  // 至少抽离第三方模块 1 个\n            maxAsyncRequests: 6,  // 引入模块异步请求次数\n            maxInitialRequests: 4, // 首屏加载的请求次数\n            automaticNameDelimiter: &#39;~&#39;, // 文件之间的连接符\n            automaticNameMaxLength: 30,\n            cacheGroups: &#123; // 缓存组， 可以设置一些规则\n              vendors: &#123;\n                test: /[\\\\/]node_modules[\\\\/]/,\n                priority: -10  // 优先级\n              &#125;,\n              default: &#123;\n                minChunks: 2,\n                priority: -20, // 优先级\n                reuseExistingChunk: true\n              &#125;\n            &#125;\n          &#125;\n        &#125;,\n</code></pre>\n<h2 id=\"resolve-解析\"><a href=\"#resolve-解析\" class=\"headerlink\" title=\"resolve 解析\"></a>resolve 解析</h2><blockquote>\n<ul>\n<li>extensions   添加扩展名进行匹配</li>\n<li>alias   设置别名</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">resolve: &#123;\n        extensions: [&#39;.js&#39;, &#39;.jsx&#39;, &#39;.json&#39;, &#39;.css&#39;, &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.vue&#39;],\n        alias:&#123;\n            &#39;@&#39;:path.resolve(__dirname,&#39;src&#39;),\n            &#39;test&#39;: path.resolve(__dirname,&#39;src/test&#39;)\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"happypack\"><a href=\"#happypack\" class=\"headerlink\" title=\"happypack\"></a>happypack</h2><blockquote>\n<ul>\n<li>npm install happypack -D  (多线程打包，把不同的逻辑交给不同的线程处理)</li>\n</ul>\n</blockquote>\n<h2 id=\"根据-mode-分离配置环境\"><a href=\"#根据-mode-分离配置环境\" class=\"headerlink\" title=\"根据 mode 分离配置环境\"></a>根据 mode 分离配置环境</h2><blockquote>\n<ul>\n<li>webpack.base.js 公共配置</li>\n<li>webpack.dev.js 开发环境配置</li>\n<li>webpack.prod.js 生产环境配置</li>\n<li>package.json 文件的 scripts 属性中配置执行命令<ul>\n<li>开发环境打包: “dev”: “webpack –env.development –config./webpack.base.js”,</li>\n<li>生产环境打包:”build”: “webpack –env.production –config./webpack.base.js”,</li>\n<li>服务器：  “dev-s”: “webpack-dev-server –env.development –config./webpack.base.js”</li>\n</ul>\n</li>\n<li>npm install webpack-merge</li>\n</ul>\n</blockquote>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><blockquote>\n<ul>\n<li>npm install image-webpack-loader -D</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">&#123;\n                test: /\\.(gif|png|jpe?g|svg)$/i,\n                use: [\n                  &#39;file-loader&#39;,\n                  &#123;\n                    loader: &#39;image-webpack-loader&#39;,\n                    options: &#123;\n                      mozjpeg: &#123;\n                        progressive: true,\n                        quality: 65 // 图片品质\n                      &#125;,\n                      // optipng.enabled: false will disable optipng\n                      optipng: &#123;\n                        enabled: false,\n                      &#125;,\n                      pngquant: &#123;\n                        quality: [0.65, 0.90],\n                        speed: 4\n                      &#125;,\n                      gifsicle: &#123;\n                        interlaced: false,\n                      &#125;,\n                      // the webp option will enable WEBP\n                      webp: &#123;\n                        quality: 75\n                      &#125;\n                    &#125;\n                  &#125;,\n                ],\n              &#125;\n</code></pre>\n"},{"title":"正则-量词","urlname":"bhxv7a","date":"2022-03-01T08:38:50.000Z","abbrlink":2281554507,"_content":"\n","source":"_posts/语雀/bhxv7a.md","raw":"---\ntitle: 正则-量词\nurlname: bhxv7a\ndate: '2022-03-01 16:38:50 +0800'\ntags: []\ncategories: []\nabbrlink: 2281554507\n---\n\n","slug":"语雀/bhxv7a","published":1,"updated":"2022-03-03T11:26:07.562Z","_id":"cl0awjjp20007081b2ft99sie","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"webPack 全局变量","urlname":"ci0ey2","date":"2020-01-04T14:06:33.000Z","abbrlink":1148559875,"_content":"\n## 暴露全局的变量\n\n### 直接使用 cdn 的方式（常用）\n\n> - add-asset-html-cdn-webpack-plugin -D\n\n```javascript\nexternals: {\n        'jQuery': '$', // $ 外部变量，不需要打包\n    },\n\n new addAssetCdnPlugin(true,{\n            'jQuery': \"https://code.jquery.com/jquery-3.4.1.min.js\",\n        })\n```\n\n### providePlugin 给每个模块注入变量\n\n> - npm install lodash -D  (JS 工具库)\n\n```javascript\nnew webpack.ProvidePlugin({\n            '$$': 'jquery' , // $ 来自于 jquery，每个模块都注入 $,但不是注入全局\n\n            '_map': ['lodash','map'],\n          }),\n```\n\n### 暴露在全局下 expose-loader\n\n> - npm install expose-loader -D\n\n```javascript\n// 方式一：\n module: {\n        rules:[\n          {\n              test: require.resolve('jquery'),\n              use: {\n                  loader: 'expose-loader',\n                  options:'$$'\n          },\n        }\n        ]\n    },\n\n// 方式二：\nrequire('expose-loader?$!jquery') // jquery 放在全局的 $ 符上\n\nconsole.log($,window.$);\n```\n","source":"_posts/语雀/ci0ey2.md","raw":"---\ntitle: webPack 全局变量\nurlname: ci0ey2\ndate: '2020-01-04 22:06:33 +0800'\ntags: []\ncategories: []\nabbrlink: 1148559875\n---\n\n## 暴露全局的变量\n\n### 直接使用 cdn 的方式（常用）\n\n> - add-asset-html-cdn-webpack-plugin -D\n\n```javascript\nexternals: {\n        'jQuery': '$', // $ 外部变量，不需要打包\n    },\n\n new addAssetCdnPlugin(true,{\n            'jQuery': \"https://code.jquery.com/jquery-3.4.1.min.js\",\n        })\n```\n\n### providePlugin 给每个模块注入变量\n\n> - npm install lodash -D  (JS 工具库)\n\n```javascript\nnew webpack.ProvidePlugin({\n            '$$': 'jquery' , // $ 来自于 jquery，每个模块都注入 $,但不是注入全局\n\n            '_map': ['lodash','map'],\n          }),\n```\n\n### 暴露在全局下 expose-loader\n\n> - npm install expose-loader -D\n\n```javascript\n// 方式一：\n module: {\n        rules:[\n          {\n              test: require.resolve('jquery'),\n              use: {\n                  loader: 'expose-loader',\n                  options:'$$'\n          },\n        }\n        ]\n    },\n\n// 方式二：\nrequire('expose-loader?$!jquery') // jquery 放在全局的 $ 符上\n\nconsole.log($,window.$);\n```\n","slug":"语雀/ci0ey2","published":1,"updated":"2022-03-03T11:26:07.563Z","_id":"cl0awjjp30008081b24ui1afk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"暴露全局的变量\"><a href=\"#暴露全局的变量\" class=\"headerlink\" title=\"暴露全局的变量\"></a>暴露全局的变量</h2><h3 id=\"直接使用-cdn-的方式（常用）\"><a href=\"#直接使用-cdn-的方式（常用）\" class=\"headerlink\" title=\"直接使用 cdn 的方式（常用）\"></a>直接使用 cdn 的方式（常用）</h3><blockquote>\n<ul>\n<li>add-asset-html-cdn-webpack-plugin -D</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">externals: &#123;\n        &#39;jQuery&#39;: &#39;$&#39;, // $ 外部变量，不需要打包\n    &#125;,\n\n new addAssetCdnPlugin(true,&#123;\n            &#39;jQuery&#39;: &quot;https://code.jquery.com/jquery-3.4.1.min.js&quot;,\n        &#125;)\n</code></pre>\n<h3 id=\"providePlugin-给每个模块注入变量\"><a href=\"#providePlugin-给每个模块注入变量\" class=\"headerlink\" title=\"providePlugin 给每个模块注入变量\"></a>providePlugin 给每个模块注入变量</h3><blockquote>\n<ul>\n<li>npm install lodash -D  (JS 工具库)</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">new webpack.ProvidePlugin(&#123;\n            &#39;$$&#39;: &#39;jquery&#39; , // $ 来自于 jquery，每个模块都注入 $,但不是注入全局\n\n            &#39;_map&#39;: [&#39;lodash&#39;,&#39;map&#39;],\n          &#125;),\n</code></pre>\n<h3 id=\"暴露在全局下-expose-loader\"><a href=\"#暴露在全局下-expose-loader\" class=\"headerlink\" title=\"暴露在全局下 expose-loader\"></a>暴露在全局下 expose-loader</h3><blockquote>\n<ul>\n<li>npm install expose-loader -D</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 方式一：\n module: &#123;\n        rules:[\n          &#123;\n              test: require.resolve(&#39;jquery&#39;),\n              use: &#123;\n                  loader: &#39;expose-loader&#39;,\n                  options:&#39;$$&#39;\n          &#125;,\n        &#125;\n        ]\n    &#125;,\n\n// 方式二：\nrequire(&#39;expose-loader?$!jquery&#39;) // jquery 放在全局的 $ 符上\n\nconsole.log($,window.$);\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"暴露全局的变量\"><a href=\"#暴露全局的变量\" class=\"headerlink\" title=\"暴露全局的变量\"></a>暴露全局的变量</h2><h3 id=\"直接使用-cdn-的方式（常用）\"><a href=\"#直接使用-cdn-的方式（常用）\" class=\"headerlink\" title=\"直接使用 cdn 的方式（常用）\"></a>直接使用 cdn 的方式（常用）</h3><blockquote>\n<ul>\n<li>add-asset-html-cdn-webpack-plugin -D</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">externals: &#123;\n        &#39;jQuery&#39;: &#39;$&#39;, // $ 外部变量，不需要打包\n    &#125;,\n\n new addAssetCdnPlugin(true,&#123;\n            &#39;jQuery&#39;: &quot;https://code.jquery.com/jquery-3.4.1.min.js&quot;,\n        &#125;)\n</code></pre>\n<h3 id=\"providePlugin-给每个模块注入变量\"><a href=\"#providePlugin-给每个模块注入变量\" class=\"headerlink\" title=\"providePlugin 给每个模块注入变量\"></a>providePlugin 给每个模块注入变量</h3><blockquote>\n<ul>\n<li>npm install lodash -D  (JS 工具库)</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">new webpack.ProvidePlugin(&#123;\n            &#39;$$&#39;: &#39;jquery&#39; , // $ 来自于 jquery，每个模块都注入 $,但不是注入全局\n\n            &#39;_map&#39;: [&#39;lodash&#39;,&#39;map&#39;],\n          &#125;),\n</code></pre>\n<h3 id=\"暴露在全局下-expose-loader\"><a href=\"#暴露在全局下-expose-loader\" class=\"headerlink\" title=\"暴露在全局下 expose-loader\"></a>暴露在全局下 expose-loader</h3><blockquote>\n<ul>\n<li>npm install expose-loader -D</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 方式一：\n module: &#123;\n        rules:[\n          &#123;\n              test: require.resolve(&#39;jquery&#39;),\n              use: &#123;\n                  loader: &#39;expose-loader&#39;,\n                  options:&#39;$$&#39;\n          &#125;,\n        &#125;\n        ]\n    &#125;,\n\n// 方式二：\nrequire(&#39;expose-loader?$!jquery&#39;) // jquery 放在全局的 $ 符上\n\nconsole.log($,window.$);\n</code></pre>\n"},{"title":"正则-分组","urlname":"dc9q37","date":"2022-03-01T08:48:54.000Z","abbrlink":1397355175,"_content":"\n","source":"_posts/语雀/dc9q37.md","raw":"---\ntitle: 正则-分组\nurlname: dc9q37\ndate: '2022-03-01 16:48:54 +0800'\ntags: []\ncategories: []\nabbrlink: 1397355175\n---\n\n","slug":"语雀/dc9q37","published":1,"updated":"2022-03-03T11:26:07.564Z","_id":"cl0awjjp40009081b18mr2arm","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"JavaScript 数组","urlname":"crulaf","date":"2020-01-04T14:05:46.000Z","abbrlink":4130118625,"_content":"\n## JavaScript 数组中常用的属性和方法\n\n**—— 数组是一种类列表对象，Array 是数组的构造函数**\n\n### **Array  构造函数**的属性\n\n> - Array.length :          Array 构造函数的 length 属性\n> - Array.prototype :     表示 Array 构造函数的原型，并允许向所有 Array 对象添加新的属性和方法。\n>   - prototype 属性，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象,它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。**任何函数在创建的时候，其实会默认同时创建该函数的 prototype 对象**。\n>   -\n> - get Array[@@species]: 语法：Array[Symbol.species]   返回 Array 的构造函数。\n\n### **Array  构造函数**的方法\n\n> - Array.isArray()  : 用来判断某个变量是否是一个数组对象。\n> - Array.from()     : 从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n> - Array.of()         : 创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型,Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为 7 的空数组（注意：这是指一个有 7 个空位(empty)的数组，而不是由 7 个 undefined 组成的数组）。\n\n### **Array  原型对象的方法**\n\n**—— 所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响到所有的数组实例。**\n\n[ 属性 ]\n\n> - Array.prototype.constructor\n>   - constructor 属性是对象（ Array.prototype 是个数组）才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数\n> - Array.prototype.length;\n>   - Array.prototype 是个数组，所以它也有 length 属性，这个值为 0，因为它是个空数组。\n\n[ 数组的修改方法 ]\n\n> - copyWithin: 浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。\n> - fill: 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\n> - pop: 删除数组的最后一个元素，并返回这个元素。\n> - push: 在数组的末尾增加一个或多个元素，并返回数组的新长度。\n> - reverse: 颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。\n> - shift: 删除数组的第一个元素，并返回这个元素。\n> - sort: 对数组元素进行排序，并返回当前数组。\n> - splice: 通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n> - unshift: 在数组的开头增加一个或多个元素，并返回数组的新长度。\n\n[ 数组的访问方法 ]\n\n> - concat: 用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n> - includes: 判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n> - join: 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符\n> - slice: 返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。\n> - toString: 返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。\n> - toLocaleString: 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。\n> - indexOf: 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n> - lastIndexOf: 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n\n[ 数组的迭代方法 ]\n\n> - forEach: 为数组中的每个元素执行一次回调函数。\n> - entries: 返回一个新的 Array Iterator 对象，该对象包含数组中每个索引的键/值对。\n> - every: 测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n> - some: 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n> - filter: 将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。\n> - find: 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。\n> - findIndex: 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。\n> - keys: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。\n> - values: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。\n> - map: 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n> - reduce: 对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。`从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。`\n> - reduceRight: 接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。`从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。`\n> - flat: 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。\n> - flatMap: 首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。\n","source":"_posts/语雀/crulaf.md","raw":"---\ntitle: JavaScript 数组\nurlname: crulaf\ndate: '2020-01-04 22:05:46 +0800'\ntags: []\ncategories: []\nabbrlink: 4130118625\n---\n\n## JavaScript 数组中常用的属性和方法\n\n**—— 数组是一种类列表对象，Array 是数组的构造函数**\n\n### **Array  构造函数**的属性\n\n> - Array.length :          Array 构造函数的 length 属性\n> - Array.prototype :     表示 Array 构造函数的原型，并允许向所有 Array 对象添加新的属性和方法。\n>   - prototype 属性，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象,它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。**任何函数在创建的时候，其实会默认同时创建该函数的 prototype 对象**。\n>   -\n> - get Array[@@species]: 语法：Array[Symbol.species]   返回 Array 的构造函数。\n\n### **Array  构造函数**的方法\n\n> - Array.isArray()  : 用来判断某个变量是否是一个数组对象。\n> - Array.from()     : 从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n> - Array.of()         : 创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型,Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为 7 的空数组（注意：这是指一个有 7 个空位(empty)的数组，而不是由 7 个 undefined 组成的数组）。\n\n### **Array  原型对象的方法**\n\n**—— 所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响到所有的数组实例。**\n\n[ 属性 ]\n\n> - Array.prototype.constructor\n>   - constructor 属性是对象（ Array.prototype 是个数组）才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数\n> - Array.prototype.length;\n>   - Array.prototype 是个数组，所以它也有 length 属性，这个值为 0，因为它是个空数组。\n\n[ 数组的修改方法 ]\n\n> - copyWithin: 浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。\n> - fill: 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\n> - pop: 删除数组的最后一个元素，并返回这个元素。\n> - push: 在数组的末尾增加一个或多个元素，并返回数组的新长度。\n> - reverse: 颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。\n> - shift: 删除数组的第一个元素，并返回这个元素。\n> - sort: 对数组元素进行排序，并返回当前数组。\n> - splice: 通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n> - unshift: 在数组的开头增加一个或多个元素，并返回数组的新长度。\n\n[ 数组的访问方法 ]\n\n> - concat: 用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n> - includes: 判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n> - join: 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符\n> - slice: 返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。\n> - toString: 返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。\n> - toLocaleString: 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。\n> - indexOf: 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n> - lastIndexOf: 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n\n[ 数组的迭代方法 ]\n\n> - forEach: 为数组中的每个元素执行一次回调函数。\n> - entries: 返回一个新的 Array Iterator 对象，该对象包含数组中每个索引的键/值对。\n> - every: 测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n> - some: 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n> - filter: 将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。\n> - find: 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。\n> - findIndex: 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。\n> - keys: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。\n> - values: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。\n> - map: 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n> - reduce: 对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。`从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。`\n> - reduceRight: 接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。`从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。`\n> - flat: 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。\n> - flatMap: 首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。\n","slug":"语雀/crulaf","published":1,"updated":"2022-03-03T11:26:07.565Z","_id":"cl0awjjp5000a081bhrdd2b18","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JavaScript-数组中常用的属性和方法\"><a href=\"#JavaScript-数组中常用的属性和方法\" class=\"headerlink\" title=\"JavaScript 数组中常用的属性和方法\"></a>JavaScript 数组中常用的属性和方法</h2><p><strong>—— 数组是一种类列表对象，Array 是数组的构造函数</strong></p>\n<h3 id=\"Array-构造函数的属性\"><a href=\"#Array-构造函数的属性\" class=\"headerlink\" title=\"Array  构造函数的属性\"></a><strong>Array  构造函数</strong>的属性</h3><blockquote>\n<ul>\n<li>Array.length :          Array 构造函数的 length 属性</li>\n<li>Array.prototype :     表示 Array 构造函数的原型，并允许向所有 Array 对象添加新的属性和方法。<ul>\n<li>prototype 属性，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象,它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。<strong>任何函数在创建的时候，其实会默认同时创建该函数的 prototype 对象</strong>。</li>\n<li></li>\n</ul>\n</li>\n<li>get Array[@@species]: 语法：Array[Symbol.species]   返回 Array 的构造函数。</li>\n</ul>\n</blockquote>\n<h3 id=\"Array-构造函数的方法\"><a href=\"#Array-构造函数的方法\" class=\"headerlink\" title=\"Array  构造函数的方法\"></a><strong>Array  构造函数</strong>的方法</h3><blockquote>\n<ul>\n<li>Array.isArray()  : 用来判断某个变量是否是一个数组对象。</li>\n<li>Array.from()     : 从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</li>\n<li>Array.of()         : 创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型,Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为 7 的空数组（注意：这是指一个有 7 个空位(empty)的数组，而不是由 7 个 undefined 组成的数组）。</li>\n</ul>\n</blockquote>\n<h3 id=\"Array-原型对象的方法\"><a href=\"#Array-原型对象的方法\" class=\"headerlink\" title=\"Array  原型对象的方法\"></a><strong>Array  原型对象的方法</strong></h3><p><strong>—— 所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响到所有的数组实例。</strong></p>\n<p>[ 属性 ]</p>\n<blockquote>\n<ul>\n<li>Array.prototype.constructor<ul>\n<li>constructor 属性是对象（ Array.prototype 是个数组）才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数</li>\n</ul>\n</li>\n<li>Array.prototype.length;<ul>\n<li>Array.prototype 是个数组，所以它也有 length 属性，这个值为 0，因为它是个空数组。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>[ 数组的修改方法 ]</p>\n<blockquote>\n<ul>\n<li>copyWithin: 浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li>\n<li>fill: 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</li>\n<li>pop: 删除数组的最后一个元素，并返回这个元素。</li>\n<li>push: 在数组的末尾增加一个或多个元素，并返回数组的新长度。</li>\n<li>reverse: 颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</li>\n<li>shift: 删除数组的第一个元素，并返回这个元素。</li>\n<li>sort: 对数组元素进行排序，并返回当前数组。</li>\n<li>splice: 通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</li>\n<li>unshift: 在数组的开头增加一个或多个元素，并返回数组的新长度。</li>\n</ul>\n</blockquote>\n<p>[ 数组的访问方法 ]</p>\n<blockquote>\n<ul>\n<li>concat: 用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>\n<li>includes: 判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。</li>\n<li>join: 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符</li>\n<li>slice: 返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。</li>\n<li>toString: 返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。</li>\n<li>toLocaleString: 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。</li>\n<li>indexOf: 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li>\n<li>lastIndexOf: 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li>\n</ul>\n</blockquote>\n<p>[ 数组的迭代方法 ]</p>\n<blockquote>\n<ul>\n<li>forEach: 为数组中的每个元素执行一次回调函数。</li>\n<li>entries: 返回一个新的 Array Iterator 对象，该对象包含数组中每个索引的键/值对。</li>\n<li>every: 测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>\n<li>some: 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</li>\n<li>filter: 将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。</li>\n<li>find: 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。</li>\n<li>findIndex: 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。</li>\n<li>keys: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。</li>\n<li>values: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。</li>\n<li>map: 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</li>\n<li>reduce: 对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。<code>从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</code></li>\n<li>reduceRight: 接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。<code>从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</code></li>\n<li>flat: 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li>\n<li>flatMap: 首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</li>\n</ul>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"JavaScript-数组中常用的属性和方法\"><a href=\"#JavaScript-数组中常用的属性和方法\" class=\"headerlink\" title=\"JavaScript 数组中常用的属性和方法\"></a>JavaScript 数组中常用的属性和方法</h2><p><strong>—— 数组是一种类列表对象，Array 是数组的构造函数</strong></p>\n<h3 id=\"Array-构造函数的属性\"><a href=\"#Array-构造函数的属性\" class=\"headerlink\" title=\"Array  构造函数的属性\"></a><strong>Array  构造函数</strong>的属性</h3><blockquote>\n<ul>\n<li>Array.length :          Array 构造函数的 length 属性</li>\n<li>Array.prototype :     表示 Array 构造函数的原型，并允许向所有 Array 对象添加新的属性和方法。<ul>\n<li>prototype 属性，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象,它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。<strong>任何函数在创建的时候，其实会默认同时创建该函数的 prototype 对象</strong>。</li>\n<li></li>\n</ul>\n</li>\n<li>get Array[@@species]: 语法：Array[Symbol.species]   返回 Array 的构造函数。</li>\n</ul>\n</blockquote>\n<h3 id=\"Array-构造函数的方法\"><a href=\"#Array-构造函数的方法\" class=\"headerlink\" title=\"Array  构造函数的方法\"></a><strong>Array  构造函数</strong>的方法</h3><blockquote>\n<ul>\n<li>Array.isArray()  : 用来判断某个变量是否是一个数组对象。</li>\n<li>Array.from()     : 从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</li>\n<li>Array.of()         : 创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型,Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为 7 的空数组（注意：这是指一个有 7 个空位(empty)的数组，而不是由 7 个 undefined 组成的数组）。</li>\n</ul>\n</blockquote>\n<h3 id=\"Array-原型对象的方法\"><a href=\"#Array-原型对象的方法\" class=\"headerlink\" title=\"Array  原型对象的方法\"></a><strong>Array  原型对象的方法</strong></h3><p><strong>—— 所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响到所有的数组实例。</strong></p>\n<p>[ 属性 ]</p>\n<blockquote>\n<ul>\n<li>Array.prototype.constructor<ul>\n<li>constructor 属性是对象（ Array.prototype 是个数组）才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数</li>\n</ul>\n</li>\n<li>Array.prototype.length;<ul>\n<li>Array.prototype 是个数组，所以它也有 length 属性，这个值为 0，因为它是个空数组。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>[ 数组的修改方法 ]</p>\n<blockquote>\n<ul>\n<li>copyWithin: 浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li>\n<li>fill: 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</li>\n<li>pop: 删除数组的最后一个元素，并返回这个元素。</li>\n<li>push: 在数组的末尾增加一个或多个元素，并返回数组的新长度。</li>\n<li>reverse: 颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</li>\n<li>shift: 删除数组的第一个元素，并返回这个元素。</li>\n<li>sort: 对数组元素进行排序，并返回当前数组。</li>\n<li>splice: 通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</li>\n<li>unshift: 在数组的开头增加一个或多个元素，并返回数组的新长度。</li>\n</ul>\n</blockquote>\n<p>[ 数组的访问方法 ]</p>\n<blockquote>\n<ul>\n<li>concat: 用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>\n<li>includes: 判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。</li>\n<li>join: 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符</li>\n<li>slice: 返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。</li>\n<li>toString: 返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。</li>\n<li>toLocaleString: 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。</li>\n<li>indexOf: 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li>\n<li>lastIndexOf: 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li>\n</ul>\n</blockquote>\n<p>[ 数组的迭代方法 ]</p>\n<blockquote>\n<ul>\n<li>forEach: 为数组中的每个元素执行一次回调函数。</li>\n<li>entries: 返回一个新的 Array Iterator 对象，该对象包含数组中每个索引的键/值对。</li>\n<li>every: 测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>\n<li>some: 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</li>\n<li>filter: 将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。</li>\n<li>find: 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。</li>\n<li>findIndex: 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。</li>\n<li>keys: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。</li>\n<li>values: 返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。</li>\n<li>map: 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</li>\n<li>reduce: 对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。<code>从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</code></li>\n<li>reduceRight: 接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。<code>从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</code></li>\n<li>flat: 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li>\n<li>flatMap: 首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</li>\n</ul>\n</blockquote>\n"},{"title":"Vue Vuex","urlname":"dt1rmw","date":"2020-01-04T14:12:25.000Z","abbrlink":734787424,"_content":"\n##\n\n```javascript\n/**\n *  在 vuex 中 获取数据大多使用辅助方法\n *\n *   mapState\n *   mapGetters\n *   mapMutations  放在 methods 中 同步更改数据\n *   mapActions    放在 methods 中 异步步更改数据\n *\n * */\n\n// 全局辅助方法\nimport { mapState, mapGetters, mapMutations, mapActions } from \"vuex\";\n\nexport default {\n  computed: {\n    // lesson() {\n    //     return this.$store.state.lesson\n    // }\n\n    // mapState 封装之后\n    ...mapState([\"lesson\", \"time\"]), // 获取 state 中的数据\n\n    //  lesson 更改名字 u\n    // ...mapState({\n    //     u:state =>state.lesson\n    // },'time') // 获取 state 中的数据\n\n    // 拿取子模块 user 中的数据\n    ...mapState(\"user\", [\"userName\"]),\n\n    // mapGetters\n    ...mapGetters([\"getName\"]),\n    ...mapGetters(\"user\", [\"getUserName\"]),\n  },\n  methods: {\n    ...mapMutations([\"changeTime\"]), // 仅仅处于函数还没执行\n    // 同步更改子模块 user 中的数据\n    ...mapMutations(\"user\", [\"changeUser\"]),\n    // 异步更改数据\n    ...mapActions([\"changeTime\"]),\n    change() {\n      // 同步  直接执行 changeTime 函数\n      // 通过 commit 唤醒 mutations  changeTime 提交 mutation 类型\n      // this.$store.commit('changeTime', '20191029')\n      // this.$store.commit('changeUser', '白茶清欢')\n      // this.changeTime('20191029');\n      // this.changeUser('白茶清欢');\n\n      // mapActions     异步步更改数据\n      // this.$store.dispatch('changeTime','20191212')\n      this.changeTime(\"20191212\");\n      this.changeUser(\"白茶清欢\");\n    },\n  },\n};\n```\n","source":"_posts/语雀/dt1rmw.md","raw":"---\ntitle: Vue Vuex\nurlname: dt1rmw\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 734787424\n---\n\n##\n\n```javascript\n/**\n *  在 vuex 中 获取数据大多使用辅助方法\n *\n *   mapState\n *   mapGetters\n *   mapMutations  放在 methods 中 同步更改数据\n *   mapActions    放在 methods 中 异步步更改数据\n *\n * */\n\n// 全局辅助方法\nimport { mapState, mapGetters, mapMutations, mapActions } from \"vuex\";\n\nexport default {\n  computed: {\n    // lesson() {\n    //     return this.$store.state.lesson\n    // }\n\n    // mapState 封装之后\n    ...mapState([\"lesson\", \"time\"]), // 获取 state 中的数据\n\n    //  lesson 更改名字 u\n    // ...mapState({\n    //     u:state =>state.lesson\n    // },'time') // 获取 state 中的数据\n\n    // 拿取子模块 user 中的数据\n    ...mapState(\"user\", [\"userName\"]),\n\n    // mapGetters\n    ...mapGetters([\"getName\"]),\n    ...mapGetters(\"user\", [\"getUserName\"]),\n  },\n  methods: {\n    ...mapMutations([\"changeTime\"]), // 仅仅处于函数还没执行\n    // 同步更改子模块 user 中的数据\n    ...mapMutations(\"user\", [\"changeUser\"]),\n    // 异步更改数据\n    ...mapActions([\"changeTime\"]),\n    change() {\n      // 同步  直接执行 changeTime 函数\n      // 通过 commit 唤醒 mutations  changeTime 提交 mutation 类型\n      // this.$store.commit('changeTime', '20191029')\n      // this.$store.commit('changeUser', '白茶清欢')\n      // this.changeTime('20191029');\n      // this.changeUser('白茶清欢');\n\n      // mapActions     异步步更改数据\n      // this.$store.dispatch('changeTime','20191212')\n      this.changeTime(\"20191212\");\n      this.changeUser(\"白茶清欢\");\n    },\n  },\n};\n```\n","slug":"语雀/dt1rmw","published":1,"updated":"2022-03-03T11:26:07.566Z","_id":"cl0awjjp5000b081baguma859","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><pre><code class=\"javascript\">/**\n *  在 vuex 中 获取数据大多使用辅助方法\n *\n *   mapState\n *   mapGetters\n *   mapMutations  放在 methods 中 同步更改数据\n *   mapActions    放在 methods 中 异步步更改数据\n *\n * */\n\n// 全局辅助方法\nimport &#123; mapState, mapGetters, mapMutations, mapActions &#125; from &quot;vuex&quot;;\n\nexport default &#123;\n  computed: &#123;\n    // lesson() &#123;\n    //     return this.$store.state.lesson\n    // &#125;\n\n    // mapState 封装之后\n    ...mapState([&quot;lesson&quot;, &quot;time&quot;]), // 获取 state 中的数据\n\n    //  lesson 更改名字 u\n    // ...mapState(&#123;\n    //     u:state =&gt;state.lesson\n    // &#125;,&#39;time&#39;) // 获取 state 中的数据\n\n    // 拿取子模块 user 中的数据\n    ...mapState(&quot;user&quot;, [&quot;userName&quot;]),\n\n    // mapGetters\n    ...mapGetters([&quot;getName&quot;]),\n    ...mapGetters(&quot;user&quot;, [&quot;getUserName&quot;]),\n  &#125;,\n  methods: &#123;\n    ...mapMutations([&quot;changeTime&quot;]), // 仅仅处于函数还没执行\n    // 同步更改子模块 user 中的数据\n    ...mapMutations(&quot;user&quot;, [&quot;changeUser&quot;]),\n    // 异步更改数据\n    ...mapActions([&quot;changeTime&quot;]),\n    change() &#123;\n      // 同步  直接执行 changeTime 函数\n      // 通过 commit 唤醒 mutations  changeTime 提交 mutation 类型\n      // this.$store.commit(&#39;changeTime&#39;, &#39;20191029&#39;)\n      // this.$store.commit(&#39;changeUser&#39;, &#39;白茶清欢&#39;)\n      // this.changeTime(&#39;20191029&#39;);\n      // this.changeUser(&#39;白茶清欢&#39;);\n\n      // mapActions     异步步更改数据\n      // this.$store.dispatch(&#39;changeTime&#39;,&#39;20191212&#39;)\n      this.changeTime(&quot;20191212&quot;);\n      this.changeUser(&quot;白茶清欢&quot;);\n    &#125;,\n  &#125;,\n&#125;;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><pre><code class=\"javascript\">/**\n *  在 vuex 中 获取数据大多使用辅助方法\n *\n *   mapState\n *   mapGetters\n *   mapMutations  放在 methods 中 同步更改数据\n *   mapActions    放在 methods 中 异步步更改数据\n *\n * */\n\n// 全局辅助方法\nimport &#123; mapState, mapGetters, mapMutations, mapActions &#125; from &quot;vuex&quot;;\n\nexport default &#123;\n  computed: &#123;\n    // lesson() &#123;\n    //     return this.$store.state.lesson\n    // &#125;\n\n    // mapState 封装之后\n    ...mapState([&quot;lesson&quot;, &quot;time&quot;]), // 获取 state 中的数据\n\n    //  lesson 更改名字 u\n    // ...mapState(&#123;\n    //     u:state =&gt;state.lesson\n    // &#125;,&#39;time&#39;) // 获取 state 中的数据\n\n    // 拿取子模块 user 中的数据\n    ...mapState(&quot;user&quot;, [&quot;userName&quot;]),\n\n    // mapGetters\n    ...mapGetters([&quot;getName&quot;]),\n    ...mapGetters(&quot;user&quot;, [&quot;getUserName&quot;]),\n  &#125;,\n  methods: &#123;\n    ...mapMutations([&quot;changeTime&quot;]), // 仅仅处于函数还没执行\n    // 同步更改子模块 user 中的数据\n    ...mapMutations(&quot;user&quot;, [&quot;changeUser&quot;]),\n    // 异步更改数据\n    ...mapActions([&quot;changeTime&quot;]),\n    change() &#123;\n      // 同步  直接执行 changeTime 函数\n      // 通过 commit 唤醒 mutations  changeTime 提交 mutation 类型\n      // this.$store.commit(&#39;changeTime&#39;, &#39;20191029&#39;)\n      // this.$store.commit(&#39;changeUser&#39;, &#39;白茶清欢&#39;)\n      // this.changeTime(&#39;20191029&#39;);\n      // this.changeUser(&#39;白茶清欢&#39;);\n\n      // mapActions     异步步更改数据\n      // this.$store.dispatch(&#39;changeTime&#39;,&#39;20191212&#39;)\n      this.changeTime(&quot;20191212&quot;);\n      this.changeUser(&quot;白茶清欢&quot;);\n    &#125;,\n  &#125;,\n&#125;;\n</code></pre>\n"},{"title":"正则-断言","urlname":"eq68ci","date":"2022-03-01T08:48:32.000Z","abbrlink":283132771,"_content":"\n","source":"_posts/语雀/eq68ci.md","raw":"---\ntitle: 正则-断言\nurlname: eq68ci\ndate: '2022-03-01 16:48:32 +0800'\ntags: []\ncategories: []\nabbrlink: 283132771\n---\n\n","slug":"语雀/eq68ci","published":1,"updated":"2022-03-03T11:26:07.566Z","_id":"cl0awjjp6000c081b5kll87mb","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"Vue 监听","urlname":"fyu9hw","date":"2020-01-04T14:12:25.000Z","abbrlink":325141448,"_content":"\n## 计算属性和侦听器\n\n**如果一个属性是依赖于其他属性变化的 使用 computed 计算属性**\n\n> - watch   监视属性 当属性发生变化时触发 必须在 data 中已经声明(可以异步操作)\n>   - 写成函数   相当于直接调用 handler 函数\n>   - 写成对象   只有当监视的属性值发生改变时,handler 函数才会执行,可以设置属性; 添加 immediate:true 属性, 可以立即执行 handler 函数; deep:true 属性,深层次监控\n> - computed   计算属性 不能在 data 中声明过 每一个计算属性都有 get,set 方法(不能异步操作) 依赖属性发生改变 则计算属性发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。\n>   - 写成函数   相当于调用 get 方法获取值\n>   - 写成对象\n\n```html\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      // 当 firstName lastName 发生改变时，fullName 的值也跟着更改\n      firstName: \"FOO\",\n      lastName: \"Bar\",\n      // fullName: 'FOO Bar',\n    },\n\n    watch: {\n      //监视属性 可以异步操作\n      // 函数写法 相当于调用 handler 函数(自带)\n      firstName(newVal, oldVal) {\n        this.fullName = newVal + this.lastName;\n      },\n      lastName(newVal, oldVal) {\n        this.fullName = this.firstName + newVal;\n      },\n\n      // 对象写法\n      firstName: {\n        handler(newVal, oldVal) {\n          //只有当监视的函数值发生改变时，handler 函数才会执行\n          this.fullName = newVal.name + this.lastName;\n          console.log(\"log\");\n        },\n        immediate: true, // 立即执行 handler 函数\n        deep: true, // 深层监控 firstName: {name: {m:foo}},\n      },\n      lastName(newVal, oldVal) {\n        this.fullName = this.firstName.name + newVal;\n      },\n    },\n\n    computed: {\n      // 计算属性 不能在 data 里边声明过，每一个计算属性都有 get set 方法\n      // 函数写法\n      fullName() {\n        // 相当于调用 get 方法获取值\n        // firstNmae lastName 表示 fullName 的依赖属性 依赖属性发生改变 fullName 发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。\n        return this.firstName + this.lastName;\n      },\n\n      // 对象写法\n      fullName: {\n        get() {\n          // 先回自动调用 后期依赖值发生改变时，调用\n          return this.firstName + this.lastName;\n        },\n        set(val) {\n          // 对计算属性设置值时调用，并且把设置的值自动保存到 val 中，这个值可以进行其他操作\n          // vm.firstName = 'aaa'  //  val 保存 aaa\n          console.log(val);\n        },\n      },\n    },\n  });\n</script>\n```\n","source":"_posts/语雀/fyu9hw.md","raw":"---\ntitle: Vue 监听\nurlname: fyu9hw\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 325141448\n---\n\n## 计算属性和侦听器\n\n**如果一个属性是依赖于其他属性变化的 使用 computed 计算属性**\n\n> - watch   监视属性 当属性发生变化时触发 必须在 data 中已经声明(可以异步操作)\n>   - 写成函数   相当于直接调用 handler 函数\n>   - 写成对象   只有当监视的属性值发生改变时,handler 函数才会执行,可以设置属性; 添加 immediate:true 属性, 可以立即执行 handler 函数; deep:true 属性,深层次监控\n> - computed   计算属性 不能在 data 中声明过 每一个计算属性都有 get,set 方法(不能异步操作) 依赖属性发生改变 则计算属性发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。\n>   - 写成函数   相当于调用 get 方法获取值\n>   - 写成对象\n\n```html\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      // 当 firstName lastName 发生改变时，fullName 的值也跟着更改\n      firstName: \"FOO\",\n      lastName: \"Bar\",\n      // fullName: 'FOO Bar',\n    },\n\n    watch: {\n      //监视属性 可以异步操作\n      // 函数写法 相当于调用 handler 函数(自带)\n      firstName(newVal, oldVal) {\n        this.fullName = newVal + this.lastName;\n      },\n      lastName(newVal, oldVal) {\n        this.fullName = this.firstName + newVal;\n      },\n\n      // 对象写法\n      firstName: {\n        handler(newVal, oldVal) {\n          //只有当监视的函数值发生改变时，handler 函数才会执行\n          this.fullName = newVal.name + this.lastName;\n          console.log(\"log\");\n        },\n        immediate: true, // 立即执行 handler 函数\n        deep: true, // 深层监控 firstName: {name: {m:foo}},\n      },\n      lastName(newVal, oldVal) {\n        this.fullName = this.firstName.name + newVal;\n      },\n    },\n\n    computed: {\n      // 计算属性 不能在 data 里边声明过，每一个计算属性都有 get set 方法\n      // 函数写法\n      fullName() {\n        // 相当于调用 get 方法获取值\n        // firstNmae lastName 表示 fullName 的依赖属性 依赖属性发生改变 fullName 发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。\n        return this.firstName + this.lastName;\n      },\n\n      // 对象写法\n      fullName: {\n        get() {\n          // 先回自动调用 后期依赖值发生改变时，调用\n          return this.firstName + this.lastName;\n        },\n        set(val) {\n          // 对计算属性设置值时调用，并且把设置的值自动保存到 val 中，这个值可以进行其他操作\n          // vm.firstName = 'aaa'  //  val 保存 aaa\n          console.log(val);\n        },\n      },\n    },\n  });\n</script>\n```\n","slug":"语雀/fyu9hw","published":1,"updated":"2022-03-03T11:26:07.567Z","_id":"cl0awjjp6000d081b29pjaw4g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"计算属性和侦听器\"></a>计算属性和侦听器</h2><p><strong>如果一个属性是依赖于其他属性变化的 使用 computed 计算属性</strong></p>\n<blockquote>\n<ul>\n<li>watch   监视属性 当属性发生变化时触发 必须在 data 中已经声明(可以异步操作)<ul>\n<li>写成函数   相当于直接调用 handler 函数</li>\n<li>写成对象   只有当监视的属性值发生改变时,handler 函数才会执行,可以设置属性; 添加 immediate:true 属性, 可以立即执行 handler 函数; deep:true 属性,深层次监控</li>\n</ul>\n</li>\n<li>computed   计算属性 不能在 data 中声明过 每一个计算属性都有 get,set 方法(不能异步操作) 依赖属性发生改变 则计算属性发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。<ul>\n<li>写成函数   相当于调用 get 方法获取值</li>\n<li>写成对象</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre><code class=\"html\">&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      // 当 firstName lastName 发生改变时，fullName 的值也跟着更改\n      firstName: &quot;FOO&quot;,\n      lastName: &quot;Bar&quot;,\n      // fullName: &#39;FOO Bar&#39;,\n    &#125;,\n\n    watch: &#123;\n      //监视属性 可以异步操作\n      // 函数写法 相当于调用 handler 函数(自带)\n      firstName(newVal, oldVal) &#123;\n        this.fullName = newVal + this.lastName;\n      &#125;,\n      lastName(newVal, oldVal) &#123;\n        this.fullName = this.firstName + newVal;\n      &#125;,\n\n      // 对象写法\n      firstName: &#123;\n        handler(newVal, oldVal) &#123;\n          //只有当监视的函数值发生改变时，handler 函数才会执行\n          this.fullName = newVal.name + this.lastName;\n          console.log(&quot;log&quot;);\n        &#125;,\n        immediate: true, // 立即执行 handler 函数\n        deep: true, // 深层监控 firstName: &#123;name: &#123;m:foo&#125;&#125;,\n      &#125;,\n      lastName(newVal, oldVal) &#123;\n        this.fullName = this.firstName.name + newVal;\n      &#125;,\n    &#125;,\n\n    computed: &#123;\n      // 计算属性 不能在 data 里边声明过，每一个计算属性都有 get set 方法\n      // 函数写法\n      fullName() &#123;\n        // 相当于调用 get 方法获取值\n        // firstNmae lastName 表示 fullName 的依赖属性 依赖属性发生改变 fullName 发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。\n        return this.firstName + this.lastName;\n      &#125;,\n\n      // 对象写法\n      fullName: &#123;\n        get() &#123;\n          // 先回自动调用 后期依赖值发生改变时，调用\n          return this.firstName + this.lastName;\n        &#125;,\n        set(val) &#123;\n          // 对计算属性设置值时调用，并且把设置的值自动保存到 val 中，这个值可以进行其他操作\n          // vm.firstName = &#39;aaa&#39;  //  val 保存 aaa\n          console.log(val);\n        &#125;,\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"计算属性和侦听器\"></a>计算属性和侦听器</h2><p><strong>如果一个属性是依赖于其他属性变化的 使用 computed 计算属性</strong></p>\n<blockquote>\n<ul>\n<li>watch   监视属性 当属性发生变化时触发 必须在 data 中已经声明(可以异步操作)<ul>\n<li>写成函数   相当于直接调用 handler 函数</li>\n<li>写成对象   只有当监视的属性值发生改变时,handler 函数才会执行,可以设置属性; 添加 immediate:true 属性, 可以立即执行 handler 函数; deep:true 属性,深层次监控</li>\n</ul>\n</li>\n<li>computed   计算属性 不能在 data 中声明过 每一个计算属性都有 get,set 方法(不能异步操作) 依赖属性发生改变 则计算属性发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。<ul>\n<li>写成函数   相当于调用 get 方法获取值</li>\n<li>写成对象</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre><code class=\"html\">&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      // 当 firstName lastName 发生改变时，fullName 的值也跟着更改\n      firstName: &quot;FOO&quot;,\n      lastName: &quot;Bar&quot;,\n      // fullName: &#39;FOO Bar&#39;,\n    &#125;,\n\n    watch: &#123;\n      //监视属性 可以异步操作\n      // 函数写法 相当于调用 handler 函数(自带)\n      firstName(newVal, oldVal) &#123;\n        this.fullName = newVal + this.lastName;\n      &#125;,\n      lastName(newVal, oldVal) &#123;\n        this.fullName = this.firstName + newVal;\n      &#125;,\n\n      // 对象写法\n      firstName: &#123;\n        handler(newVal, oldVal) &#123;\n          //只有当监视的函数值发生改变时，handler 函数才会执行\n          this.fullName = newVal.name + this.lastName;\n          console.log(&quot;log&quot;);\n        &#125;,\n        immediate: true, // 立即执行 handler 函数\n        deep: true, // 深层监控 firstName: &#123;name: &#123;m:foo&#125;&#125;,\n      &#125;,\n      lastName(newVal, oldVal) &#123;\n        this.fullName = this.firstName.name + newVal;\n      &#125;,\n    &#125;,\n\n    computed: &#123;\n      // 计算属性 不能在 data 里边声明过，每一个计算属性都有 get set 方法\n      // 函数写法\n      fullName() &#123;\n        // 相当于调用 get 方法获取值\n        // firstNmae lastName 表示 fullName 的依赖属性 依赖属性发生改变 fullName 发生改变，若没有改变 则直接从缓存中读取之前的值，不会重新渲染。\n        return this.firstName + this.lastName;\n      &#125;,\n\n      // 对象写法\n      fullName: &#123;\n        get() &#123;\n          // 先回自动调用 后期依赖值发生改变时，调用\n          return this.firstName + this.lastName;\n        &#125;,\n        set(val) &#123;\n          // 对计算属性设置值时调用，并且把设置的值自动保存到 val 中，这个值可以进行其他操作\n          // vm.firstName = &#39;aaa&#39;  //  val 保存 aaa\n          console.log(val);\n        &#125;,\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n"},{"title":"Vue 起步","urlname":"ga4ask","date":"2020-01-04T14:12:25.000Z","abbrlink":149806809,"_content":"\n> vue + component + vue-router + vuex + axios\n\n> [ 库 ]:相当于功能比较全的产品 ，直接拿取产品中的一部分使用就可以\n> [ 框架 ]:为了解决一系列问题而产生的产品，使用时只能按照它的规定来使用\n> vue 框架: MVVM 模式\n\n---\n\n> - npm init -y   初始化\n> - npm install vue -D\n\n## Mustache(小胡子) 语法\n\n```html\n<!-- Mustache 语法 \n        JS 表达式:\n            1. 变量（data 中已经声明的）\n            2. 可以运算\n            3. 三元运算符\n            4. 函数的返回值 \n            5. 不可以定义变量、赋值、定义函数(只要是 JS 语句都不可以放入里面)\n    -->\n<div id=\"app\">{{ msg }}</div>\n```\n\n## 对象变更检测\n\n> - Vue 不能检测对象属性的添加或删除\n> - Vue 不允许动态添加根级别的响应式属性\n\n```javascript\n// 初始化 Vue 实例\nlet vm = new Vue({\n  // vm Vue 的实例\n  el: \"#app\", // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: {\n    // 把数据放入到响应式系统\n    msg: \"我不喜欢这个世界，我只喜欢你！\",\n    obj: {\n      name: \"serendipity\",\n    },\n    b: 0,\n  },\n});\n\n// vm.msg == data.msg;  会把 vue 选项中所有的数据挂载到 vm 的实例上\n// vm.b =  10  先要在 data 中声明才可以\n\n// 对象变更\n// vm.obj.age = 10; 不可以直接更改根级别的对象\nvm.$set(vm.obj, \"age\", 10);\n\n// 合并对象\nObject.assign(vm.obj, {\n  age: 27,\n  favoriteColor: \"Vue Green\",\n});\n```\n\n## 数组变更检测\n\n> Vue 不能检测以下数组的变动:\n>\n> - 不可以直接通过索引更改数组，例如:vm.items[indexOfItem] = newValue\n> - 不可以通过数组的长度更改数组，例如:vm.items.length = newLength\n\n```javascript\n// 初始化 Vue 实例\nlet vm = new Vue({\n  // vm Vue 的实例\n  el: \"#app\", // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: {\n    // 把数据放入到响应式系统\n    arr: [1, 2, 3],\n  },\n});\n// 数组更改\n// vm.arr[1] = 5;    // 不可以索引更改\n// vm.arr[vm.arr.length -1 ] = 5;  // 不可以数组长度更改\n\n// 方式一:\nvm.$set(vm.arr, 4, 12345);\n// 方式二: 变异方法\n// push()\n// pop()\n// shift()\n// unshift()\n// splice()\n// sort()\n// reverse()\nvm.arr.splice(0, 1, 5); // 开始 个数 替换\n\n/**\n * 非变异方法:\n *  如:filter()、concat() 和 slice() 它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组\n *\n */\n\nexample1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/);\n});\n```\n\n## Vue 实例的方法\n\n```javascript\n/**\n * Vue 实例方法\n *\n *  vm.$set/vm.$delete   更改对象或数组\n *  vm.$el    获取挂载的 dom 元素 （知道确切 vue 实例是哪一个）\n *  vm.$data  获取响应式数据\n *  vm.$options  所有的选项\n *  vm.$watch 监视数据的变化\n *  vm.$nextTick 获取真实的 dom 元素\n *  vm.$mount 设置 vue 实例挂载的 dom 元素（）\n *\n *\n */\nlet vm = new Vue({\n  // el: '#app',\n  data: {\n    arr: [1, 2, 3, 4, 5],\n    msg: \"我不喜欢这个世界，我只喜欢你！\",\n  },\n});\n\nvm.$mount(\"#app\");\nvm.$watch(\"msg\", function (newVal, oldVal) {\n  // 异步\n  console.log(\"现在的值是:\" + \"  \" + newVal);\n});\nvm.msg = \"时光静好，岁月安然！\";\n\n// console.log(vm.$el.innerHTML);  // 同步的 所以先执行\n\nvm.$nextTick(function () {\n  // 触发 表示 dom 渲染完成\n\n  console.log(vm.$el.innerHTML); // 数据更改完成后 dom\n});\n```\n","source":"_posts/语雀/ga4ask.md","raw":"---\ntitle: Vue 起步\nurlname: ga4ask\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 149806809\n---\n\n> vue + component + vue-router + vuex + axios\n\n> [ 库 ]:相当于功能比较全的产品 ，直接拿取产品中的一部分使用就可以\n> [ 框架 ]:为了解决一系列问题而产生的产品，使用时只能按照它的规定来使用\n> vue 框架: MVVM 模式\n\n---\n\n> - npm init -y   初始化\n> - npm install vue -D\n\n## Mustache(小胡子) 语法\n\n```html\n<!-- Mustache 语法 \n        JS 表达式:\n            1. 变量（data 中已经声明的）\n            2. 可以运算\n            3. 三元运算符\n            4. 函数的返回值 \n            5. 不可以定义变量、赋值、定义函数(只要是 JS 语句都不可以放入里面)\n    -->\n<div id=\"app\">{{ msg }}</div>\n```\n\n## 对象变更检测\n\n> - Vue 不能检测对象属性的添加或删除\n> - Vue 不允许动态添加根级别的响应式属性\n\n```javascript\n// 初始化 Vue 实例\nlet vm = new Vue({\n  // vm Vue 的实例\n  el: \"#app\", // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: {\n    // 把数据放入到响应式系统\n    msg: \"我不喜欢这个世界，我只喜欢你！\",\n    obj: {\n      name: \"serendipity\",\n    },\n    b: 0,\n  },\n});\n\n// vm.msg == data.msg;  会把 vue 选项中所有的数据挂载到 vm 的实例上\n// vm.b =  10  先要在 data 中声明才可以\n\n// 对象变更\n// vm.obj.age = 10; 不可以直接更改根级别的对象\nvm.$set(vm.obj, \"age\", 10);\n\n// 合并对象\nObject.assign(vm.obj, {\n  age: 27,\n  favoriteColor: \"Vue Green\",\n});\n```\n\n## 数组变更检测\n\n> Vue 不能检测以下数组的变动:\n>\n> - 不可以直接通过索引更改数组，例如:vm.items[indexOfItem] = newValue\n> - 不可以通过数组的长度更改数组，例如:vm.items.length = newLength\n\n```javascript\n// 初始化 Vue 实例\nlet vm = new Vue({\n  // vm Vue 的实例\n  el: \"#app\", // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: {\n    // 把数据放入到响应式系统\n    arr: [1, 2, 3],\n  },\n});\n// 数组更改\n// vm.arr[1] = 5;    // 不可以索引更改\n// vm.arr[vm.arr.length -1 ] = 5;  // 不可以数组长度更改\n\n// 方式一:\nvm.$set(vm.arr, 4, 12345);\n// 方式二: 变异方法\n// push()\n// pop()\n// shift()\n// unshift()\n// splice()\n// sort()\n// reverse()\nvm.arr.splice(0, 1, 5); // 开始 个数 替换\n\n/**\n * 非变异方法:\n *  如:filter()、concat() 和 slice() 它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组\n *\n */\n\nexample1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/);\n});\n```\n\n## Vue 实例的方法\n\n```javascript\n/**\n * Vue 实例方法\n *\n *  vm.$set/vm.$delete   更改对象或数组\n *  vm.$el    获取挂载的 dom 元素 （知道确切 vue 实例是哪一个）\n *  vm.$data  获取响应式数据\n *  vm.$options  所有的选项\n *  vm.$watch 监视数据的变化\n *  vm.$nextTick 获取真实的 dom 元素\n *  vm.$mount 设置 vue 实例挂载的 dom 元素（）\n *\n *\n */\nlet vm = new Vue({\n  // el: '#app',\n  data: {\n    arr: [1, 2, 3, 4, 5],\n    msg: \"我不喜欢这个世界，我只喜欢你！\",\n  },\n});\n\nvm.$mount(\"#app\");\nvm.$watch(\"msg\", function (newVal, oldVal) {\n  // 异步\n  console.log(\"现在的值是:\" + \"  \" + newVal);\n});\nvm.msg = \"时光静好，岁月安然！\";\n\n// console.log(vm.$el.innerHTML);  // 同步的 所以先执行\n\nvm.$nextTick(function () {\n  // 触发 表示 dom 渲染完成\n\n  console.log(vm.$el.innerHTML); // 数据更改完成后 dom\n});\n```\n","slug":"语雀/ga4ask","published":1,"updated":"2022-03-03T11:26:07.568Z","_id":"cl0awjjp8000e081b7owrgaii","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>vue + component + vue-router + vuex + axios</p>\n</blockquote>\n<blockquote>\n<p>[ 库 ]:相当于功能比较全的产品 ，直接拿取产品中的一部分使用就可以<br>[ 框架 ]:为了解决一系列问题而产生的产品，使用时只能按照它的规定来使用<br>vue 框架: MVVM 模式</p>\n</blockquote>\n<hr>\n<blockquote>\n<ul>\n<li>npm init -y   初始化</li>\n<li>npm install vue -D</li>\n</ul>\n</blockquote>\n<h2 id=\"Mustache-小胡子-语法\"><a href=\"#Mustache-小胡子-语法\" class=\"headerlink\" title=\"Mustache(小胡子) 语法\"></a>Mustache(小胡子) 语法</h2><pre><code class=\"html\">&lt;!-- Mustache 语法 \n        JS 表达式:\n            1. 变量（data 中已经声明的）\n            2. 可以运算\n            3. 三元运算符\n            4. 函数的返回值 \n            5. 不可以定义变量、赋值、定义函数(只要是 JS 语句都不可以放入里面)\n    --&gt;\n&lt;div id=&quot;app&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;\n</code></pre>\n<h2 id=\"对象变更检测\"><a href=\"#对象变更检测\" class=\"headerlink\" title=\"对象变更检测\"></a>对象变更检测</h2><blockquote>\n<ul>\n<li>Vue 不能检测对象属性的添加或删除</li>\n<li>Vue 不允许动态添加根级别的响应式属性</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 初始化 Vue 实例\nlet vm = new Vue(&#123;\n  // vm Vue 的实例\n  el: &quot;#app&quot;, // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: &#123;\n    // 把数据放入到响应式系统\n    msg: &quot;我不喜欢这个世界，我只喜欢你！&quot;,\n    obj: &#123;\n      name: &quot;serendipity&quot;,\n    &#125;,\n    b: 0,\n  &#125;,\n&#125;);\n\n// vm.msg == data.msg;  会把 vue 选项中所有的数据挂载到 vm 的实例上\n// vm.b =  10  先要在 data 中声明才可以\n\n// 对象变更\n// vm.obj.age = 10; 不可以直接更改根级别的对象\nvm.$set(vm.obj, &quot;age&quot;, 10);\n\n// 合并对象\nObject.assign(vm.obj, &#123;\n  age: 27,\n  favoriteColor: &quot;Vue Green&quot;,\n&#125;);\n</code></pre>\n<h2 id=\"数组变更检测\"><a href=\"#数组变更检测\" class=\"headerlink\" title=\"数组变更检测\"></a>数组变更检测</h2><blockquote>\n<p>Vue 不能检测以下数组的变动:</p>\n<ul>\n<li>不可以直接通过索引更改数组，例如:vm.items[indexOfItem] = newValue</li>\n<li>不可以通过数组的长度更改数组，例如:vm.items.length = newLength</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 初始化 Vue 实例\nlet vm = new Vue(&#123;\n  // vm Vue 的实例\n  el: &quot;#app&quot;, // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: &#123;\n    // 把数据放入到响应式系统\n    arr: [1, 2, 3],\n  &#125;,\n&#125;);\n// 数组更改\n// vm.arr[1] = 5;    // 不可以索引更改\n// vm.arr[vm.arr.length -1 ] = 5;  // 不可以数组长度更改\n\n// 方式一:\nvm.$set(vm.arr, 4, 12345);\n// 方式二: 变异方法\n// push()\n// pop()\n// shift()\n// unshift()\n// splice()\n// sort()\n// reverse()\nvm.arr.splice(0, 1, 5); // 开始 个数 替换\n\n/**\n * 非变异方法:\n *  如:filter()、concat() 和 slice() 它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组\n *\n */\n\nexample1.items = example1.items.filter(function (item) &#123;\n  return item.message.match(/Foo/);\n&#125;);\n</code></pre>\n<h2 id=\"Vue-实例的方法\"><a href=\"#Vue-实例的方法\" class=\"headerlink\" title=\"Vue 实例的方法\"></a>Vue 实例的方法</h2><pre><code class=\"javascript\">/**\n * Vue 实例方法\n *\n *  vm.$set/vm.$delete   更改对象或数组\n *  vm.$el    获取挂载的 dom 元素 （知道确切 vue 实例是哪一个）\n *  vm.$data  获取响应式数据\n *  vm.$options  所有的选项\n *  vm.$watch 监视数据的变化\n *  vm.$nextTick 获取真实的 dom 元素\n *  vm.$mount 设置 vue 实例挂载的 dom 元素（）\n *\n *\n */\nlet vm = new Vue(&#123;\n  // el: &#39;#app&#39;,\n  data: &#123;\n    arr: [1, 2, 3, 4, 5],\n    msg: &quot;我不喜欢这个世界，我只喜欢你！&quot;,\n  &#125;,\n&#125;);\n\nvm.$mount(&quot;#app&quot;);\nvm.$watch(&quot;msg&quot;, function (newVal, oldVal) &#123;\n  // 异步\n  console.log(&quot;现在的值是:&quot; + &quot;  &quot; + newVal);\n&#125;);\nvm.msg = &quot;时光静好，岁月安然！&quot;;\n\n// console.log(vm.$el.innerHTML);  // 同步的 所以先执行\n\nvm.$nextTick(function () &#123;\n  // 触发 表示 dom 渲染完成\n\n  console.log(vm.$el.innerHTML); // 数据更改完成后 dom\n&#125;);\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<blockquote>\n<p>vue + component + vue-router + vuex + axios</p>\n</blockquote>\n<blockquote>\n<p>[ 库 ]:相当于功能比较全的产品 ，直接拿取产品中的一部分使用就可以<br>[ 框架 ]:为了解决一系列问题而产生的产品，使用时只能按照它的规定来使用<br>vue 框架: MVVM 模式</p>\n</blockquote>\n<hr>\n<blockquote>\n<ul>\n<li>npm init -y   初始化</li>\n<li>npm install vue -D</li>\n</ul>\n</blockquote>\n<h2 id=\"Mustache-小胡子-语法\"><a href=\"#Mustache-小胡子-语法\" class=\"headerlink\" title=\"Mustache(小胡子) 语法\"></a>Mustache(小胡子) 语法</h2><pre><code class=\"html\">&lt;!-- Mustache 语法 \n        JS 表达式:\n            1. 变量（data 中已经声明的）\n            2. 可以运算\n            3. 三元运算符\n            4. 函数的返回值 \n            5. 不可以定义变量、赋值、定义函数(只要是 JS 语句都不可以放入里面)\n    --&gt;\n&lt;div id=&quot;app&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;\n</code></pre>\n<h2 id=\"对象变更检测\"><a href=\"#对象变更检测\" class=\"headerlink\" title=\"对象变更检测\"></a>对象变更检测</h2><blockquote>\n<ul>\n<li>Vue 不能检测对象属性的添加或删除</li>\n<li>Vue 不允许动态添加根级别的响应式属性</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 初始化 Vue 实例\nlet vm = new Vue(&#123;\n  // vm Vue 的实例\n  el: &quot;#app&quot;, // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: &#123;\n    // 把数据放入到响应式系统\n    msg: &quot;我不喜欢这个世界，我只喜欢你！&quot;,\n    obj: &#123;\n      name: &quot;serendipity&quot;,\n    &#125;,\n    b: 0,\n  &#125;,\n&#125;);\n\n// vm.msg == data.msg;  会把 vue 选项中所有的数据挂载到 vm 的实例上\n// vm.b =  10  先要在 data 中声明才可以\n\n// 对象变更\n// vm.obj.age = 10; 不可以直接更改根级别的对象\nvm.$set(vm.obj, &quot;age&quot;, 10);\n\n// 合并对象\nObject.assign(vm.obj, &#123;\n  age: 27,\n  favoriteColor: &quot;Vue Green&quot;,\n&#125;);\n</code></pre>\n<h2 id=\"数组变更检测\"><a href=\"#数组变更检测\" class=\"headerlink\" title=\"数组变更检测\"></a>数组变更检测</h2><blockquote>\n<p>Vue 不能检测以下数组的变动:</p>\n<ul>\n<li>不可以直接通过索引更改数组，例如:vm.items[indexOfItem] = newValue</li>\n<li>不可以通过数组的长度更改数组，例如:vm.items.length = newLength</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 初始化 Vue 实例\nlet vm = new Vue(&#123;\n  // vm Vue 的实例\n  el: &quot;#app&quot;, // 把 vue 的实例挂载到 id 名为 app 的 DOM 元素上\n  data: &#123;\n    // 把数据放入到响应式系统\n    arr: [1, 2, 3],\n  &#125;,\n&#125;);\n// 数组更改\n// vm.arr[1] = 5;    // 不可以索引更改\n// vm.arr[vm.arr.length -1 ] = 5;  // 不可以数组长度更改\n\n// 方式一:\nvm.$set(vm.arr, 4, 12345);\n// 方式二: 变异方法\n// push()\n// pop()\n// shift()\n// unshift()\n// splice()\n// sort()\n// reverse()\nvm.arr.splice(0, 1, 5); // 开始 个数 替换\n\n/**\n * 非变异方法:\n *  如:filter()、concat() 和 slice() 它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组\n *\n */\n\nexample1.items = example1.items.filter(function (item) &#123;\n  return item.message.match(/Foo/);\n&#125;);\n</code></pre>\n<h2 id=\"Vue-实例的方法\"><a href=\"#Vue-实例的方法\" class=\"headerlink\" title=\"Vue 实例的方法\"></a>Vue 实例的方法</h2><pre><code class=\"javascript\">/**\n * Vue 实例方法\n *\n *  vm.$set/vm.$delete   更改对象或数组\n *  vm.$el    获取挂载的 dom 元素 （知道确切 vue 实例是哪一个）\n *  vm.$data  获取响应式数据\n *  vm.$options  所有的选项\n *  vm.$watch 监视数据的变化\n *  vm.$nextTick 获取真实的 dom 元素\n *  vm.$mount 设置 vue 实例挂载的 dom 元素（）\n *\n *\n */\nlet vm = new Vue(&#123;\n  // el: &#39;#app&#39;,\n  data: &#123;\n    arr: [1, 2, 3, 4, 5],\n    msg: &quot;我不喜欢这个世界，我只喜欢你！&quot;,\n  &#125;,\n&#125;);\n\nvm.$mount(&quot;#app&quot;);\nvm.$watch(&quot;msg&quot;, function (newVal, oldVal) &#123;\n  // 异步\n  console.log(&quot;现在的值是:&quot; + &quot;  &quot; + newVal);\n&#125;);\nvm.msg = &quot;时光静好，岁月安然！&quot;;\n\n// console.log(vm.$el.innerHTML);  // 同步的 所以先执行\n\nvm.$nextTick(function () &#123;\n  // 触发 表示 dom 渲染完成\n\n  console.log(vm.$el.innerHTML); // 数据更改完成后 dom\n&#125;);\n</code></pre>\n"},{"title":"正则-环视","urlname":"gbkr03","date":"2022-03-01T08:49:31.000Z","abbrlink":1339964916,"_content":"\n","source":"_posts/语雀/gbkr03.md","raw":"---\ntitle: 正则-环视\nurlname: gbkr03\ndate: '2022-03-01 16:49:31 +0800'\ntags: []\ncategories: []\nabbrlink: 1339964916\n---\n\n","slug":"语雀/gbkr03","published":1,"updated":"2022-03-03T11:26:07.569Z","_id":"cl0awjjp8000f081bfdcbdf4v","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"正则-贪婪模式和非贪婪模式","urlname":"ggv5iz","date":"2022-03-01T08:50:05.000Z","abbrlink":287494289,"_content":"\n","source":"_posts/语雀/ggv5iz.md","raw":"---\ntitle: 正则-贪婪模式和非贪婪模式\nurlname: ggv5iz\ndate: '2022-03-01 16:50:05 +0800'\ntags: []\ncategories: []\nabbrlink: 287494289\n---\n\n","slug":"语雀/ggv5iz","published":1,"updated":"2022-03-03T11:26:07.570Z","_id":"cl0awjjp9000g081bdn2x50no","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"MacOS","urlname":"gnpi26","date":"2022-01-11T13:31:33.000Z","abbrlink":717872510,"_content":"\n","source":"_posts/语雀/gnpi26.md","raw":"---\ntitle: MacOS\nurlname: gnpi26\ndate: '2022-01-11 21:31:33 +0800'\ntags: []\ncategories: []\nabbrlink: 717872510\n---\n\n","slug":"语雀/gnpi26","published":1,"updated":"2022-03-03T11:26:07.571Z","_id":"cl0awjjp9000h081bejje9dp4","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"Vue 组件","urlname":"grwmka","date":"2020-01-04T14:12:25.000Z","abbrlink":1069000005,"_content":"\n## 全局组件 & 局部组件\n\n[ 组件作用 ]\n\n> - 可以复用，提高开发效率\n> - 方便后期维护和修改\n> - 减少渲染\n\n### 全局组件\n\n```html\n<body>\n    <div id=\"app\">\n        <!-- 在 dom 中只支持 - 连接 -->\n        <my-button></my-button>\n    </div>\n\n    <!-- 组件内容 -->\n    <template id=\"button\">\n        <div> 111 </div>\n    </template>\n\n</body>\n\n</html>\n<script src=\"vue.min.js\"></script>\n<script>\n    //  全局组件\n    Vue.component('my-button', {\n        // template: '<div> 1111 </div', // 所有组件\n        template: '#button',  // 查找相应组件内容\n        data() { // 组件中的data 是一个函数 返回一个对象\n            return {\n                msg: 'aaa',\n            }\n        }\n    })\n\n    let vm = new Vue({\n        // template: '<div> 111 </div',\n        el: '#app',\n        data: {},\n\n    })\n\n</script>\n```\n\n### 局部组件\n\n```html\n<body>\n    <div id=\"app\">\n        <!--3. 使用组件; 在 dom 中只支持 - 连接 -->\n        <my-button>\n            <hello></hello>\n        </my-button>\n\n        <!-- <hello></hello> -->\n    </div>\n    <!-- 组件内容 -->\n    <template id=\"button\">\n        <div> {{ msg }}</div>\n    </template>\n    <template id=\"hello\">\n        <div> {{ hel }} </div>\n    </template>\n</body>\n\n</html>\n<script src=\"vue.min.js\"></script>\n<script>\n\n    /**\n     *  1. 定义组件\n     *  2. 注册组件\n     *  3. 使用组件\n     *\n     */\n    let hello  = {\n        template: '#hello',\n        data() {\n            return {\n                hel: 'hello'\n            }\n        }\n    }\n    //  1. 定义组件\n    let myButton = {\n        // template: '<div> 1111 </div', // 所有组件\n        template: '#button',  // 查找相应组件内容\n        data() { // 组件中的data 是一个函数 返回一个对象\n            return {\n                msg: 'aaa',\n            }\n        },\n\n        // myButton 的子组件 hello\n        components: {\n            // 在 myButton 中注册子组件 hello\n            hello\n        }\n    }\n    let vm = new Vue({\n        // template: '<div> 111 </div',\n        el: '#app',\n        data: {},\n        components: {\n            // 2. 注册组件\n               myButton,  // myButton:myButton\n            //    hello\n        }\n    })\n</script>\n```\n\n## 组件间通信\n\n[ 安装 ]\n\n> - 项目开发: npm install -g @vue/cli\n> - 快速原型开发（对单个 \\*.vue 文件开发）: npm install -g @vue/cli-service-global\n\n[ 运行 ]\n\n> - 开发环境: vue serve App.vue\n> - 生产环境: vue build App.vue\n\n### 父组件传数据到子组件 : 子组件通过 props 接收\n\n```html\n<template>\n  <div>\n    Parent\n    <!-- 父组件穿数据到子组件 -->\n    <Son :money=\"money\"></Son>\n  </div>\n</template>\n<script>\n  import Son from \"./Son\";\n  export default {\n    data() {\n      return {\n        money: \"400\",\n      };\n    },\n    components: {\n      Son,\n    },\n  };\n</script>\n\n<template>\n  <div>Son {{ money }}</div>\n</template>\n<script>\n  export default {\n    // props:['money']\n    // computed: { //计算属性\n    //     changeM() {\n    //         //  对传过来的值进行更改，变为小写\n    //         return this.money.thim().toLowerCase();\n    //     }\n    // },\n\n    // 对传过来的值进行验证\n    props: {\n      money: {\n        type: [String, Number],\n        // default: 100, 默认值\n        required: true, // 必须传\n        // 自定义验证规则\n        validator: (value) => {\n          return value > 400 && value < 1000;\n        },\n      },\n\n      // 数组或对象 默认值得是函数\n      arr: {\n        type: Array,\n        default: () => [1], //默认值 函数 返回一个数组\n      },\n      obj: {\n        type: Object,\n        default: () => ({}), //默认值 函数 返回一个对象\n      },\n    },\n  };\n</script>\n```\n\n### 子组件传数据到父组件 : $emit(通过事件的方式，观察者模式)\n\n```html\n<template>\n  <div>\n    Parent\n\n    <!-- 父组件监视子组件的事件（子组件传数据到父组件）并且给事件绑定函数 -->\n    <!-- <Son @change=\"fn\"></Son> -->\n\n    <!-- 语法糖写法 -->\n    <!-- <Son :money.sync=\"money\"></Son> -->\n    <!-- 对应子组件 语法糖 写法 -->\n    <!-- this.$emit('update:money',1000) -->\n\n    <!-- 相当于 money 绑定在属性 value 并且绑定的事件名 @input -->\n    <Son v-model=\"money\"></Son>\n\n    <!-- <Son\n      :value=\"money\"\n      @input=\"(data)=>money=data\"\n    ></Son> -->\n    <!-- 对应子组件写法 -->\n    <!-- 接受到的属性 ：{{ value }} -->\n    <!-- this.$emit('input', 1000) -->\n  </div>\n</template>\n<script>\n  import Son from \"./Son\";\n  export default {\n    data() {\n      return {\n        money: \"400\",\n      };\n    },\n    components: {\n      Son,\n    },\n    methods: {\n      fn(data) {\n        // data 子组件传回来的数据\n        this.money = data;\n      },\n    },\n  };\n</script>\n\n<template>\n  <div>\n    Son\n    <button @click=\"give\">传数据到父组件</button>\n  </div>\n</template>\n<script>\n  // import grandSon from './grandSon';\n  export default {\n    methods: {\n      // 子组件传数据到父组件\n      give() {\n        // 子组件执行父组件监听的事件\n        // this.$emit('change', 1000)\n        // 语法糖 写法\n        // this.$emit('update:money',1000)\n\n        this.$emit(\"input\", 1000);\n      },\n    },\n  };\n</script>\n```\n\n### 批量把属性传给后代组件（子组件或孙组件）: $attrs(v-bind=\"$attrs\"往下传)\n\n```html\n<Son :name=\"1\" :age=\"2\" @click=\"fn\"></Son>\n\n<!-- 直接一次性拿到父组件传的所有属性 -->\n{{$attrs}}\n<!-- 只传一个数据,此时 数据里面只剩下 age  -->\n<GrandSon v-bind=\"$attrs\" :name=\"$attrs.name\"></GrandSon>\n\n<script>\n  // GrandSon 组件中接收\n  export default {\n    props: [\"name\"],\n  };\n</script>\n```\n\n### 批量把方法传给后代组件: $listeners(v-on=\"$listeners\"往下传)\n\n```html\n<!-- 父组件中绑定事件 -->\n<Son :name=\"1\" :age=\"2\" @click=\"fn\"></Son>\n\n<!-- 子组件拿到父组件的事件 -->\n<!-- {{ $listeners.click() }} -->\n<GrandSon v-on=\"$listeners\"></GrandSon>\n<!-- GrandSon 组件中直接调用 -->\n{{ $listeners.click() }}\n```\n\n### 跨组件 provide inject\n\n```html\n<!-- 跨组件 -->\n<script>\n  import Son from \"./Son\";\n  export default {\n    // 全局定义\n    provide() {\n      return {\n        parentMsg: \"parent\",\n      };\n    },\n  };\n</script>\n<!-- grandSon 中通过 inject 注入， {{ parentMsg }}使用  -->\n<script>\n  export default {\n    inject: [\"parentMsg\"],\n  };\n</script>\n```\n\n### $parent & $children & ref\n\n- 拿到父组件: $parent ;\n- 拿到所有子组件: $children (返回一个所有子组件的数组) ;\n- 通过 ref 获取\n\n```html\n<!-- $parent 拿到父组件; $children 拿到所有子组件 -->\n<GrandSon ref=\"GrandSon\"></GrandSon>\n\n<script>\n  mounted() { // dom 加载完成的钩子函数\n       this.$parent // 拿到父组件\n       this.$children // 拿到所有的子组件，拿到的是一个数组\n\n       // 执行\n       this.$parent.fn();\n       this.$$children[0].fn2(); // 通过索引拿到第一个子组件\n\n       // 通过 ref\n       this.$refs.GrandSon.fn2()\n   }\n</script>\n```\n\n7. 兄弟间的通信 : eventBus; 通过 $on 和 $emit\n\n```javascript\nVue.prototype.$bus = new Vue(); // 必须拥有公共的 vue 实例\n\nthis.$bus.$on(\"test\", function (data) {\n  console.log(data);\n});\n// 另一个兄弟组件传递数据\nthis.$bus.$emit(\"test\", 1000);\n```\n","source":"_posts/语雀/grwmka.md","raw":"---\ntitle: Vue 组件\nurlname: grwmka\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 1069000005\n---\n\n## 全局组件 & 局部组件\n\n[ 组件作用 ]\n\n> - 可以复用，提高开发效率\n> - 方便后期维护和修改\n> - 减少渲染\n\n### 全局组件\n\n```html\n<body>\n    <div id=\"app\">\n        <!-- 在 dom 中只支持 - 连接 -->\n        <my-button></my-button>\n    </div>\n\n    <!-- 组件内容 -->\n    <template id=\"button\">\n        <div> 111 </div>\n    </template>\n\n</body>\n\n</html>\n<script src=\"vue.min.js\"></script>\n<script>\n    //  全局组件\n    Vue.component('my-button', {\n        // template: '<div> 1111 </div', // 所有组件\n        template: '#button',  // 查找相应组件内容\n        data() { // 组件中的data 是一个函数 返回一个对象\n            return {\n                msg: 'aaa',\n            }\n        }\n    })\n\n    let vm = new Vue({\n        // template: '<div> 111 </div',\n        el: '#app',\n        data: {},\n\n    })\n\n</script>\n```\n\n### 局部组件\n\n```html\n<body>\n    <div id=\"app\">\n        <!--3. 使用组件; 在 dom 中只支持 - 连接 -->\n        <my-button>\n            <hello></hello>\n        </my-button>\n\n        <!-- <hello></hello> -->\n    </div>\n    <!-- 组件内容 -->\n    <template id=\"button\">\n        <div> {{ msg }}</div>\n    </template>\n    <template id=\"hello\">\n        <div> {{ hel }} </div>\n    </template>\n</body>\n\n</html>\n<script src=\"vue.min.js\"></script>\n<script>\n\n    /**\n     *  1. 定义组件\n     *  2. 注册组件\n     *  3. 使用组件\n     *\n     */\n    let hello  = {\n        template: '#hello',\n        data() {\n            return {\n                hel: 'hello'\n            }\n        }\n    }\n    //  1. 定义组件\n    let myButton = {\n        // template: '<div> 1111 </div', // 所有组件\n        template: '#button',  // 查找相应组件内容\n        data() { // 组件中的data 是一个函数 返回一个对象\n            return {\n                msg: 'aaa',\n            }\n        },\n\n        // myButton 的子组件 hello\n        components: {\n            // 在 myButton 中注册子组件 hello\n            hello\n        }\n    }\n    let vm = new Vue({\n        // template: '<div> 111 </div',\n        el: '#app',\n        data: {},\n        components: {\n            // 2. 注册组件\n               myButton,  // myButton:myButton\n            //    hello\n        }\n    })\n</script>\n```\n\n## 组件间通信\n\n[ 安装 ]\n\n> - 项目开发: npm install -g @vue/cli\n> - 快速原型开发（对单个 \\*.vue 文件开发）: npm install -g @vue/cli-service-global\n\n[ 运行 ]\n\n> - 开发环境: vue serve App.vue\n> - 生产环境: vue build App.vue\n\n### 父组件传数据到子组件 : 子组件通过 props 接收\n\n```html\n<template>\n  <div>\n    Parent\n    <!-- 父组件穿数据到子组件 -->\n    <Son :money=\"money\"></Son>\n  </div>\n</template>\n<script>\n  import Son from \"./Son\";\n  export default {\n    data() {\n      return {\n        money: \"400\",\n      };\n    },\n    components: {\n      Son,\n    },\n  };\n</script>\n\n<template>\n  <div>Son {{ money }}</div>\n</template>\n<script>\n  export default {\n    // props:['money']\n    // computed: { //计算属性\n    //     changeM() {\n    //         //  对传过来的值进行更改，变为小写\n    //         return this.money.thim().toLowerCase();\n    //     }\n    // },\n\n    // 对传过来的值进行验证\n    props: {\n      money: {\n        type: [String, Number],\n        // default: 100, 默认值\n        required: true, // 必须传\n        // 自定义验证规则\n        validator: (value) => {\n          return value > 400 && value < 1000;\n        },\n      },\n\n      // 数组或对象 默认值得是函数\n      arr: {\n        type: Array,\n        default: () => [1], //默认值 函数 返回一个数组\n      },\n      obj: {\n        type: Object,\n        default: () => ({}), //默认值 函数 返回一个对象\n      },\n    },\n  };\n</script>\n```\n\n### 子组件传数据到父组件 : $emit(通过事件的方式，观察者模式)\n\n```html\n<template>\n  <div>\n    Parent\n\n    <!-- 父组件监视子组件的事件（子组件传数据到父组件）并且给事件绑定函数 -->\n    <!-- <Son @change=\"fn\"></Son> -->\n\n    <!-- 语法糖写法 -->\n    <!-- <Son :money.sync=\"money\"></Son> -->\n    <!-- 对应子组件 语法糖 写法 -->\n    <!-- this.$emit('update:money',1000) -->\n\n    <!-- 相当于 money 绑定在属性 value 并且绑定的事件名 @input -->\n    <Son v-model=\"money\"></Son>\n\n    <!-- <Son\n      :value=\"money\"\n      @input=\"(data)=>money=data\"\n    ></Son> -->\n    <!-- 对应子组件写法 -->\n    <!-- 接受到的属性 ：{{ value }} -->\n    <!-- this.$emit('input', 1000) -->\n  </div>\n</template>\n<script>\n  import Son from \"./Son\";\n  export default {\n    data() {\n      return {\n        money: \"400\",\n      };\n    },\n    components: {\n      Son,\n    },\n    methods: {\n      fn(data) {\n        // data 子组件传回来的数据\n        this.money = data;\n      },\n    },\n  };\n</script>\n\n<template>\n  <div>\n    Son\n    <button @click=\"give\">传数据到父组件</button>\n  </div>\n</template>\n<script>\n  // import grandSon from './grandSon';\n  export default {\n    methods: {\n      // 子组件传数据到父组件\n      give() {\n        // 子组件执行父组件监听的事件\n        // this.$emit('change', 1000)\n        // 语法糖 写法\n        // this.$emit('update:money',1000)\n\n        this.$emit(\"input\", 1000);\n      },\n    },\n  };\n</script>\n```\n\n### 批量把属性传给后代组件（子组件或孙组件）: $attrs(v-bind=\"$attrs\"往下传)\n\n```html\n<Son :name=\"1\" :age=\"2\" @click=\"fn\"></Son>\n\n<!-- 直接一次性拿到父组件传的所有属性 -->\n{{$attrs}}\n<!-- 只传一个数据,此时 数据里面只剩下 age  -->\n<GrandSon v-bind=\"$attrs\" :name=\"$attrs.name\"></GrandSon>\n\n<script>\n  // GrandSon 组件中接收\n  export default {\n    props: [\"name\"],\n  };\n</script>\n```\n\n### 批量把方法传给后代组件: $listeners(v-on=\"$listeners\"往下传)\n\n```html\n<!-- 父组件中绑定事件 -->\n<Son :name=\"1\" :age=\"2\" @click=\"fn\"></Son>\n\n<!-- 子组件拿到父组件的事件 -->\n<!-- {{ $listeners.click() }} -->\n<GrandSon v-on=\"$listeners\"></GrandSon>\n<!-- GrandSon 组件中直接调用 -->\n{{ $listeners.click() }}\n```\n\n### 跨组件 provide inject\n\n```html\n<!-- 跨组件 -->\n<script>\n  import Son from \"./Son\";\n  export default {\n    // 全局定义\n    provide() {\n      return {\n        parentMsg: \"parent\",\n      };\n    },\n  };\n</script>\n<!-- grandSon 中通过 inject 注入， {{ parentMsg }}使用  -->\n<script>\n  export default {\n    inject: [\"parentMsg\"],\n  };\n</script>\n```\n\n### $parent & $children & ref\n\n- 拿到父组件: $parent ;\n- 拿到所有子组件: $children (返回一个所有子组件的数组) ;\n- 通过 ref 获取\n\n```html\n<!-- $parent 拿到父组件; $children 拿到所有子组件 -->\n<GrandSon ref=\"GrandSon\"></GrandSon>\n\n<script>\n  mounted() { // dom 加载完成的钩子函数\n       this.$parent // 拿到父组件\n       this.$children // 拿到所有的子组件，拿到的是一个数组\n\n       // 执行\n       this.$parent.fn();\n       this.$$children[0].fn2(); // 通过索引拿到第一个子组件\n\n       // 通过 ref\n       this.$refs.GrandSon.fn2()\n   }\n</script>\n```\n\n7. 兄弟间的通信 : eventBus; 通过 $on 和 $emit\n\n```javascript\nVue.prototype.$bus = new Vue(); // 必须拥有公共的 vue 实例\n\nthis.$bus.$on(\"test\", function (data) {\n  console.log(data);\n});\n// 另一个兄弟组件传递数据\nthis.$bus.$emit(\"test\", 1000);\n```\n","slug":"语雀/grwmka","published":1,"updated":"2022-03-03T11:26:07.572Z","_id":"cl0awjjpa000i081bc5hk3c17","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"全局组件-amp-局部组件\"><a href=\"#全局组件-amp-局部组件\" class=\"headerlink\" title=\"全局组件 &amp; 局部组件\"></a>全局组件 &amp; 局部组件</h2><p>[ 组件作用 ]</p>\n<blockquote>\n<ul>\n<li>可以复用，提高开发效率</li>\n<li>方便后期维护和修改</li>\n<li>减少渲染</li>\n</ul>\n</blockquote>\n<h3 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h3><pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;!-- 在 dom 中只支持 - 连接 --&gt;\n        &lt;my-button&gt;&lt;/my-button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- 组件内容 --&gt;\n    &lt;template id=&quot;button&quot;&gt;\n        &lt;div&gt; 111 &lt;/div&gt;\n    &lt;/template&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    //  全局组件\n    Vue.component(&#39;my-button&#39;, &#123;\n        // template: &#39;&lt;div&gt; 1111 &lt;/div&#39;, // 所有组件\n        template: &#39;#button&#39;,  // 查找相应组件内容\n        data() &#123; // 组件中的data 是一个函数 返回一个对象\n            return &#123;\n                msg: &#39;aaa&#39;,\n            &#125;\n        &#125;\n    &#125;)\n\n    let vm = new Vue(&#123;\n        // template: &#39;&lt;div&gt; 111 &lt;/div&#39;,\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n\n    &#125;)\n\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h3><pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;!--3. 使用组件; 在 dom 中只支持 - 连接 --&gt;\n        &lt;my-button&gt;\n            &lt;hello&gt;&lt;/hello&gt;\n        &lt;/my-button&gt;\n\n        &lt;!-- &lt;hello&gt;&lt;/hello&gt; --&gt;\n    &lt;/div&gt;\n    &lt;!-- 组件内容 --&gt;\n    &lt;template id=&quot;button&quot;&gt;\n        &lt;div&gt; &#123;&#123; msg &#125;&#125;&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;template id=&quot;hello&quot;&gt;\n        &lt;div&gt; &#123;&#123; hel &#125;&#125; &lt;/div&gt;\n    &lt;/template&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n\n    /**\n     *  1. 定义组件\n     *  2. 注册组件\n     *  3. 使用组件\n     *\n     */\n    let hello  = &#123;\n        template: &#39;#hello&#39;,\n        data() &#123;\n            return &#123;\n                hel: &#39;hello&#39;\n            &#125;\n        &#125;\n    &#125;\n    //  1. 定义组件\n    let myButton = &#123;\n        // template: &#39;&lt;div&gt; 1111 &lt;/div&#39;, // 所有组件\n        template: &#39;#button&#39;,  // 查找相应组件内容\n        data() &#123; // 组件中的data 是一个函数 返回一个对象\n            return &#123;\n                msg: &#39;aaa&#39;,\n            &#125;\n        &#125;,\n\n        // myButton 的子组件 hello\n        components: &#123;\n            // 在 myButton 中注册子组件 hello\n            hello\n        &#125;\n    &#125;\n    let vm = new Vue(&#123;\n        // template: &#39;&lt;div&gt; 111 &lt;/div&#39;,\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n        components: &#123;\n            // 2. 注册组件\n               myButton,  // myButton:myButton\n            //    hello\n        &#125;\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<h2 id=\"组件间通信\"><a href=\"#组件间通信\" class=\"headerlink\" title=\"组件间通信\"></a>组件间通信</h2><p>[ 安装 ]</p>\n<blockquote>\n<ul>\n<li>项目开发: npm install -g @vue/cli</li>\n<li>快速原型开发（对单个 *.vue 文件开发）: npm install -g @vue/cli-service-global</li>\n</ul>\n</blockquote>\n<p>[ 运行 ]</p>\n<blockquote>\n<ul>\n<li>开发环境: vue serve App.vue</li>\n<li>生产环境: vue build App.vue</li>\n</ul>\n</blockquote>\n<h3 id=\"父组件传数据到子组件-子组件通过-props-接收\"><a href=\"#父组件传数据到子组件-子组件通过-props-接收\" class=\"headerlink\" title=\"父组件传数据到子组件 : 子组件通过 props 接收\"></a>父组件传数据到子组件 : 子组件通过 props 接收</h3><pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    Parent\n    &lt;!-- 父组件穿数据到子组件 --&gt;\n    &lt;Son :money=&quot;money&quot;&gt;&lt;/Son&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  import Son from &quot;./Son&quot;;\n  export default &#123;\n    data() &#123;\n      return &#123;\n        money: &quot;400&quot;,\n      &#125;;\n    &#125;,\n    components: &#123;\n      Son,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;Son &#123;&#123; money &#125;&#125;&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default &#123;\n    // props:[&#39;money&#39;]\n    // computed: &#123; //计算属性\n    //     changeM() &#123;\n    //         //  对传过来的值进行更改，变为小写\n    //         return this.money.thim().toLowerCase();\n    //     &#125;\n    // &#125;,\n\n    // 对传过来的值进行验证\n    props: &#123;\n      money: &#123;\n        type: [String, Number],\n        // default: 100, 默认值\n        required: true, // 必须传\n        // 自定义验证规则\n        validator: (value) =&gt; &#123;\n          return value &gt; 400 &amp;&amp; value &lt; 1000;\n        &#125;,\n      &#125;,\n\n      // 数组或对象 默认值得是函数\n      arr: &#123;\n        type: Array,\n        default: () =&gt; [1], //默认值 函数 返回一个数组\n      &#125;,\n      obj: &#123;\n        type: Object,\n        default: () =&gt; (&#123;&#125;), //默认值 函数 返回一个对象\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"子组件传数据到父组件-emit-通过事件的方式，观察者模式\"><a href=\"#子组件传数据到父组件-emit-通过事件的方式，观察者模式\" class=\"headerlink\" title=\"子组件传数据到父组件 : $emit(通过事件的方式，观察者模式)\"></a>子组件传数据到父组件 : $emit(通过事件的方式，观察者模式)</h3><pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    Parent\n\n    &lt;!-- 父组件监视子组件的事件（子组件传数据到父组件）并且给事件绑定函数 --&gt;\n    &lt;!-- &lt;Son @change=&quot;fn&quot;&gt;&lt;/Son&gt; --&gt;\n\n    &lt;!-- 语法糖写法 --&gt;\n    &lt;!-- &lt;Son :money.sync=&quot;money&quot;&gt;&lt;/Son&gt; --&gt;\n    &lt;!-- 对应子组件 语法糖 写法 --&gt;\n    &lt;!-- this.$emit(&#39;update:money&#39;,1000) --&gt;\n\n    &lt;!-- 相当于 money 绑定在属性 value 并且绑定的事件名 @input --&gt;\n    &lt;Son v-model=&quot;money&quot;&gt;&lt;/Son&gt;\n\n    &lt;!-- &lt;Son\n      :value=&quot;money&quot;\n      @input=&quot;(data)=&gt;money=data&quot;\n    &gt;&lt;/Son&gt; --&gt;\n    &lt;!-- 对应子组件写法 --&gt;\n    &lt;!-- 接受到的属性 ：&#123;&#123; value &#125;&#125; --&gt;\n    &lt;!-- this.$emit(&#39;input&#39;, 1000) --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  import Son from &quot;./Son&quot;;\n  export default &#123;\n    data() &#123;\n      return &#123;\n        money: &quot;400&quot;,\n      &#125;;\n    &#125;,\n    components: &#123;\n      Son,\n    &#125;,\n    methods: &#123;\n      fn(data) &#123;\n        // data 子组件传回来的数据\n        this.money = data;\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    Son\n    &lt;button @click=&quot;give&quot;&gt;传数据到父组件&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  // import grandSon from &#39;./grandSon&#39;;\n  export default &#123;\n    methods: &#123;\n      // 子组件传数据到父组件\n      give() &#123;\n        // 子组件执行父组件监听的事件\n        // this.$emit(&#39;change&#39;, 1000)\n        // 语法糖 写法\n        // this.$emit(&#39;update:money&#39;,1000)\n\n        this.$emit(&quot;input&quot;, 1000);\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"批量把属性传给后代组件（子组件或孙组件）-attrs-v-bind-”-attrs”往下传\"><a href=\"#批量把属性传给后代组件（子组件或孙组件）-attrs-v-bind-”-attrs”往下传\" class=\"headerlink\" title=\"批量把属性传给后代组件（子组件或孙组件）: $attrs(v-bind=”$attrs”往下传)\"></a>批量把属性传给后代组件（子组件或孙组件）: $attrs(v-bind=”$attrs”往下传)</h3><pre><code class=\"html\">&lt;Son :name=&quot;1&quot; :age=&quot;2&quot; @click=&quot;fn&quot;&gt;&lt;/Son&gt;\n\n&lt;!-- 直接一次性拿到父组件传的所有属性 --&gt;\n&#123;&#123;$attrs&#125;&#125;\n&lt;!-- 只传一个数据,此时 数据里面只剩下 age  --&gt;\n&lt;GrandSon v-bind=&quot;$attrs&quot; :name=&quot;$attrs.name&quot;&gt;&lt;/GrandSon&gt;\n\n&lt;script&gt;\n  // GrandSon 组件中接收\n  export default &#123;\n    props: [&quot;name&quot;],\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"批量把方法传给后代组件-listeners-v-on-”-listeners”往下传\"><a href=\"#批量把方法传给后代组件-listeners-v-on-”-listeners”往下传\" class=\"headerlink\" title=\"批量把方法传给后代组件: $listeners(v-on=”$listeners”往下传)\"></a>批量把方法传给后代组件: $listeners(v-on=”$listeners”往下传)</h3><pre><code class=\"html\">&lt;!-- 父组件中绑定事件 --&gt;\n&lt;Son :name=&quot;1&quot; :age=&quot;2&quot; @click=&quot;fn&quot;&gt;&lt;/Son&gt;\n\n&lt;!-- 子组件拿到父组件的事件 --&gt;\n&lt;!-- &#123;&#123; $listeners.click() &#125;&#125; --&gt;\n&lt;GrandSon v-on=&quot;$listeners&quot;&gt;&lt;/GrandSon&gt;\n&lt;!-- GrandSon 组件中直接调用 --&gt;\n&#123;&#123; $listeners.click() &#125;&#125;\n</code></pre>\n<h3 id=\"跨组件-provide-inject\"><a href=\"#跨组件-provide-inject\" class=\"headerlink\" title=\"跨组件 provide inject\"></a>跨组件 provide inject</h3><pre><code class=\"html\">&lt;!-- 跨组件 --&gt;\n&lt;script&gt;\n  import Son from &quot;./Son&quot;;\n  export default &#123;\n    // 全局定义\n    provide() &#123;\n      return &#123;\n        parentMsg: &quot;parent&quot;,\n      &#125;;\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n&lt;!-- grandSon 中通过 inject 注入， &#123;&#123; parentMsg &#125;&#125;使用  --&gt;\n&lt;script&gt;\n  export default &#123;\n    inject: [&quot;parentMsg&quot;],\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"parent-amp-children-amp-ref\"><a href=\"#parent-amp-children-amp-ref\" class=\"headerlink\" title=\"$parent &amp; $children &amp; ref\"></a>$parent &amp; $children &amp; ref</h3><ul>\n<li>拿到父组件: $parent ;</li>\n<li>拿到所有子组件: $children (返回一个所有子组件的数组) ;</li>\n<li>通过 ref 获取</li>\n</ul>\n<pre><code class=\"html\">&lt;!-- $parent 拿到父组件; $children 拿到所有子组件 --&gt;\n&lt;GrandSon ref=&quot;GrandSon&quot;&gt;&lt;/GrandSon&gt;\n\n&lt;script&gt;\n  mounted() &#123; // dom 加载完成的钩子函数\n       this.$parent // 拿到父组件\n       this.$children // 拿到所有的子组件，拿到的是一个数组\n\n       // 执行\n       this.$parent.fn();\n       this.$$children[0].fn2(); // 通过索引拿到第一个子组件\n\n       // 通过 ref\n       this.$refs.GrandSon.fn2()\n   &#125;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"7\">\n<li>兄弟间的通信 : eventBus; 通过 $on 和 $emit</li>\n</ol>\n<pre><code class=\"javascript\">Vue.prototype.$bus = new Vue(); // 必须拥有公共的 vue 实例\n\nthis.$bus.$on(&quot;test&quot;, function (data) &#123;\n  console.log(data);\n&#125;);\n// 另一个兄弟组件传递数据\nthis.$bus.$emit(&quot;test&quot;, 1000);\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"全局组件-amp-局部组件\"><a href=\"#全局组件-amp-局部组件\" class=\"headerlink\" title=\"全局组件 &amp; 局部组件\"></a>全局组件 &amp; 局部组件</h2><p>[ 组件作用 ]</p>\n<blockquote>\n<ul>\n<li>可以复用，提高开发效率</li>\n<li>方便后期维护和修改</li>\n<li>减少渲染</li>\n</ul>\n</blockquote>\n<h3 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h3><pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;!-- 在 dom 中只支持 - 连接 --&gt;\n        &lt;my-button&gt;&lt;/my-button&gt;\n    &lt;/div&gt;\n\n    &lt;!-- 组件内容 --&gt;\n    &lt;template id=&quot;button&quot;&gt;\n        &lt;div&gt; 111 &lt;/div&gt;\n    &lt;/template&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    //  全局组件\n    Vue.component(&#39;my-button&#39;, &#123;\n        // template: &#39;&lt;div&gt; 1111 &lt;/div&#39;, // 所有组件\n        template: &#39;#button&#39;,  // 查找相应组件内容\n        data() &#123; // 组件中的data 是一个函数 返回一个对象\n            return &#123;\n                msg: &#39;aaa&#39;,\n            &#125;\n        &#125;\n    &#125;)\n\n    let vm = new Vue(&#123;\n        // template: &#39;&lt;div&gt; 111 &lt;/div&#39;,\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n\n    &#125;)\n\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h3><pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;!--3. 使用组件; 在 dom 中只支持 - 连接 --&gt;\n        &lt;my-button&gt;\n            &lt;hello&gt;&lt;/hello&gt;\n        &lt;/my-button&gt;\n\n        &lt;!-- &lt;hello&gt;&lt;/hello&gt; --&gt;\n    &lt;/div&gt;\n    &lt;!-- 组件内容 --&gt;\n    &lt;template id=&quot;button&quot;&gt;\n        &lt;div&gt; &#123;&#123; msg &#125;&#125;&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;template id=&quot;hello&quot;&gt;\n        &lt;div&gt; &#123;&#123; hel &#125;&#125; &lt;/div&gt;\n    &lt;/template&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n\n    /**\n     *  1. 定义组件\n     *  2. 注册组件\n     *  3. 使用组件\n     *\n     */\n    let hello  = &#123;\n        template: &#39;#hello&#39;,\n        data() &#123;\n            return &#123;\n                hel: &#39;hello&#39;\n            &#125;\n        &#125;\n    &#125;\n    //  1. 定义组件\n    let myButton = &#123;\n        // template: &#39;&lt;div&gt; 1111 &lt;/div&#39;, // 所有组件\n        template: &#39;#button&#39;,  // 查找相应组件内容\n        data() &#123; // 组件中的data 是一个函数 返回一个对象\n            return &#123;\n                msg: &#39;aaa&#39;,\n            &#125;\n        &#125;,\n\n        // myButton 的子组件 hello\n        components: &#123;\n            // 在 myButton 中注册子组件 hello\n            hello\n        &#125;\n    &#125;\n    let vm = new Vue(&#123;\n        // template: &#39;&lt;div&gt; 111 &lt;/div&#39;,\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n        components: &#123;\n            // 2. 注册组件\n               myButton,  // myButton:myButton\n            //    hello\n        &#125;\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<h2 id=\"组件间通信\"><a href=\"#组件间通信\" class=\"headerlink\" title=\"组件间通信\"></a>组件间通信</h2><p>[ 安装 ]</p>\n<blockquote>\n<ul>\n<li>项目开发: npm install -g @vue/cli</li>\n<li>快速原型开发（对单个 *.vue 文件开发）: npm install -g @vue/cli-service-global</li>\n</ul>\n</blockquote>\n<p>[ 运行 ]</p>\n<blockquote>\n<ul>\n<li>开发环境: vue serve App.vue</li>\n<li>生产环境: vue build App.vue</li>\n</ul>\n</blockquote>\n<h3 id=\"父组件传数据到子组件-子组件通过-props-接收\"><a href=\"#父组件传数据到子组件-子组件通过-props-接收\" class=\"headerlink\" title=\"父组件传数据到子组件 : 子组件通过 props 接收\"></a>父组件传数据到子组件 : 子组件通过 props 接收</h3><pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    Parent\n    &lt;!-- 父组件穿数据到子组件 --&gt;\n    &lt;Son :money=&quot;money&quot;&gt;&lt;/Son&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  import Son from &quot;./Son&quot;;\n  export default &#123;\n    data() &#123;\n      return &#123;\n        money: &quot;400&quot;,\n      &#125;;\n    &#125;,\n    components: &#123;\n      Son,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;Son &#123;&#123; money &#125;&#125;&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default &#123;\n    // props:[&#39;money&#39;]\n    // computed: &#123; //计算属性\n    //     changeM() &#123;\n    //         //  对传过来的值进行更改，变为小写\n    //         return this.money.thim().toLowerCase();\n    //     &#125;\n    // &#125;,\n\n    // 对传过来的值进行验证\n    props: &#123;\n      money: &#123;\n        type: [String, Number],\n        // default: 100, 默认值\n        required: true, // 必须传\n        // 自定义验证规则\n        validator: (value) =&gt; &#123;\n          return value &gt; 400 &amp;&amp; value &lt; 1000;\n        &#125;,\n      &#125;,\n\n      // 数组或对象 默认值得是函数\n      arr: &#123;\n        type: Array,\n        default: () =&gt; [1], //默认值 函数 返回一个数组\n      &#125;,\n      obj: &#123;\n        type: Object,\n        default: () =&gt; (&#123;&#125;), //默认值 函数 返回一个对象\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"子组件传数据到父组件-emit-通过事件的方式，观察者模式\"><a href=\"#子组件传数据到父组件-emit-通过事件的方式，观察者模式\" class=\"headerlink\" title=\"子组件传数据到父组件 : $emit(通过事件的方式，观察者模式)\"></a>子组件传数据到父组件 : $emit(通过事件的方式，观察者模式)</h3><pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    Parent\n\n    &lt;!-- 父组件监视子组件的事件（子组件传数据到父组件）并且给事件绑定函数 --&gt;\n    &lt;!-- &lt;Son @change=&quot;fn&quot;&gt;&lt;/Son&gt; --&gt;\n\n    &lt;!-- 语法糖写法 --&gt;\n    &lt;!-- &lt;Son :money.sync=&quot;money&quot;&gt;&lt;/Son&gt; --&gt;\n    &lt;!-- 对应子组件 语法糖 写法 --&gt;\n    &lt;!-- this.$emit(&#39;update:money&#39;,1000) --&gt;\n\n    &lt;!-- 相当于 money 绑定在属性 value 并且绑定的事件名 @input --&gt;\n    &lt;Son v-model=&quot;money&quot;&gt;&lt;/Son&gt;\n\n    &lt;!-- &lt;Son\n      :value=&quot;money&quot;\n      @input=&quot;(data)=&gt;money=data&quot;\n    &gt;&lt;/Son&gt; --&gt;\n    &lt;!-- 对应子组件写法 --&gt;\n    &lt;!-- 接受到的属性 ：&#123;&#123; value &#125;&#125; --&gt;\n    &lt;!-- this.$emit(&#39;input&#39;, 1000) --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  import Son from &quot;./Son&quot;;\n  export default &#123;\n    data() &#123;\n      return &#123;\n        money: &quot;400&quot;,\n      &#125;;\n    &#125;,\n    components: &#123;\n      Son,\n    &#125;,\n    methods: &#123;\n      fn(data) &#123;\n        // data 子组件传回来的数据\n        this.money = data;\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    Son\n    &lt;button @click=&quot;give&quot;&gt;传数据到父组件&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  // import grandSon from &#39;./grandSon&#39;;\n  export default &#123;\n    methods: &#123;\n      // 子组件传数据到父组件\n      give() &#123;\n        // 子组件执行父组件监听的事件\n        // this.$emit(&#39;change&#39;, 1000)\n        // 语法糖 写法\n        // this.$emit(&#39;update:money&#39;,1000)\n\n        this.$emit(&quot;input&quot;, 1000);\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"批量把属性传给后代组件（子组件或孙组件）-attrs-v-bind-”-attrs”往下传\"><a href=\"#批量把属性传给后代组件（子组件或孙组件）-attrs-v-bind-”-attrs”往下传\" class=\"headerlink\" title=\"批量把属性传给后代组件（子组件或孙组件）: $attrs(v-bind=”$attrs”往下传)\"></a>批量把属性传给后代组件（子组件或孙组件）: $attrs(v-bind=”$attrs”往下传)</h3><pre><code class=\"html\">&lt;Son :name=&quot;1&quot; :age=&quot;2&quot; @click=&quot;fn&quot;&gt;&lt;/Son&gt;\n\n&lt;!-- 直接一次性拿到父组件传的所有属性 --&gt;\n&#123;&#123;$attrs&#125;&#125;\n&lt;!-- 只传一个数据,此时 数据里面只剩下 age  --&gt;\n&lt;GrandSon v-bind=&quot;$attrs&quot; :name=&quot;$attrs.name&quot;&gt;&lt;/GrandSon&gt;\n\n&lt;script&gt;\n  // GrandSon 组件中接收\n  export default &#123;\n    props: [&quot;name&quot;],\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"批量把方法传给后代组件-listeners-v-on-”-listeners”往下传\"><a href=\"#批量把方法传给后代组件-listeners-v-on-”-listeners”往下传\" class=\"headerlink\" title=\"批量把方法传给后代组件: $listeners(v-on=”$listeners”往下传)\"></a>批量把方法传给后代组件: $listeners(v-on=”$listeners”往下传)</h3><pre><code class=\"html\">&lt;!-- 父组件中绑定事件 --&gt;\n&lt;Son :name=&quot;1&quot; :age=&quot;2&quot; @click=&quot;fn&quot;&gt;&lt;/Son&gt;\n\n&lt;!-- 子组件拿到父组件的事件 --&gt;\n&lt;!-- &#123;&#123; $listeners.click() &#125;&#125; --&gt;\n&lt;GrandSon v-on=&quot;$listeners&quot;&gt;&lt;/GrandSon&gt;\n&lt;!-- GrandSon 组件中直接调用 --&gt;\n&#123;&#123; $listeners.click() &#125;&#125;\n</code></pre>\n<h3 id=\"跨组件-provide-inject\"><a href=\"#跨组件-provide-inject\" class=\"headerlink\" title=\"跨组件 provide inject\"></a>跨组件 provide inject</h3><pre><code class=\"html\">&lt;!-- 跨组件 --&gt;\n&lt;script&gt;\n  import Son from &quot;./Son&quot;;\n  export default &#123;\n    // 全局定义\n    provide() &#123;\n      return &#123;\n        parentMsg: &quot;parent&quot;,\n      &#125;;\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n&lt;!-- grandSon 中通过 inject 注入， &#123;&#123; parentMsg &#125;&#125;使用  --&gt;\n&lt;script&gt;\n  export default &#123;\n    inject: [&quot;parentMsg&quot;],\n  &#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"parent-amp-children-amp-ref\"><a href=\"#parent-amp-children-amp-ref\" class=\"headerlink\" title=\"$parent &amp; $children &amp; ref\"></a>$parent &amp; $children &amp; ref</h3><ul>\n<li>拿到父组件: $parent ;</li>\n<li>拿到所有子组件: $children (返回一个所有子组件的数组) ;</li>\n<li>通过 ref 获取</li>\n</ul>\n<pre><code class=\"html\">&lt;!-- $parent 拿到父组件; $children 拿到所有子组件 --&gt;\n&lt;GrandSon ref=&quot;GrandSon&quot;&gt;&lt;/GrandSon&gt;\n\n&lt;script&gt;\n  mounted() &#123; // dom 加载完成的钩子函数\n       this.$parent // 拿到父组件\n       this.$children // 拿到所有的子组件，拿到的是一个数组\n\n       // 执行\n       this.$parent.fn();\n       this.$$children[0].fn2(); // 通过索引拿到第一个子组件\n\n       // 通过 ref\n       this.$refs.GrandSon.fn2()\n   &#125;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"7\">\n<li>兄弟间的通信 : eventBus; 通过 $on 和 $emit</li>\n</ol>\n<pre><code class=\"javascript\">Vue.prototype.$bus = new Vue(); // 必须拥有公共的 vue 实例\n\nthis.$bus.$on(&quot;test&quot;, function (data) &#123;\n  console.log(data);\n&#125;);\n// 另一个兄弟组件传递数据\nthis.$bus.$emit(&quot;test&quot;, 1000);\n</code></pre>\n"},{"title":"Good idea","urlname":"id7zrz","date":"2022-01-11T13:34:29.000Z","abbrlink":1369736042,"_content":"\n","source":"_posts/语雀/id7zrz.md","raw":"---\ntitle: Good idea\nurlname: id7zrz\ndate: '2022-01-11 21:34:29 +0800'\ntags: []\ncategories: []\nabbrlink: 1369736042\n---\n\n","slug":"语雀/id7zrz","published":1,"updated":"2022-03-03T11:26:07.573Z","_id":"cl0awjjpa000j081bdjbvemgd","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"软件测试面试题","urlname":"iqxdsc","date":"2020-05-28T15:50:32.000Z","abbrlink":486558920,"_content":"\n## 软件测试类型\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1590934846663-b39b5b3b-abc5-40f5-bd5b-67c0089d639a.png#align=left&display=inline&height=815&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1791&size=0&status=done&style=none&width=1791)\n\n## 常用测试方法\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1590934843329-0574da46-728f-43b8-800b-2a67472c827b.png#align=left&display=inline&height=1729&margin=%5Bobject%20Object%5D&originHeight=1729&originWidth=1226&size=0&status=done&style=none&width=1226)\n\n## 系统测试方法\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1590934844560-73fc41ef-9bf1-4df2-b10e-666fe4f270f0.png#align=left&display=inline&height=2144&margin=%5Bobject%20Object%5D&originHeight=2144&originWidth=2480&size=0&status=done&style=none&width=2480)\n\n## 什么是软件测试\n\n软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。\n\n## 软件产品质量模型（ISO / IEC 9126）\n\n- 功能性：提供满足明确和隐含要求的功能的能力\n- 可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力\n  - 设备最好不要出故障\n  - 设备出故障了，不要影响主要的功能和业务\n  - 如果影响了主要功能和业务，系统可以尽快定位并恢复\n- 易用性：易懂、易学、易用、漂亮好看（用户体验好）\n- 效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）\n- 可维护性：产品可以被修改的能力。可以增加功能，可以更新。\n- 可移植性：跨越不同系统平台\n\n### 对一支笔从软件质量的体系进行分析要测哪些？\n\n- 功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸\n- 性能： 一支笔能连续写多久，从高处掉落会不会坏\n- 易用性： 是否美观，是否好握，书写是否舒服\n- 安全： 材质是否符合安全规范，是否对人体产生危害\n- 可移植性： 是否可以通过换笔芯继续使用。\n\n### 你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\n\n测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。\n\n### 基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量 )\n\n出现以上的情况，如果仅仅想通过测试来提高软件质量，那几乎是不可能，原因是没有足够的时间让你去测试，少而不规范的文档导致测试需求无法细化何谈足够且有针对性进行测试。所以，作为公司质量保证的你应该先和项目经理确定符合项目本身最适合的软件生命周期模型（比如 RUP 的剪裁，原型法）,明确项目的开发流程并督促项目组按照此流程开展工作，所有项目组成员（项目经理更加重要）都要制定出合理的工作计划，加强代码的单元测试，在客户既定的产品交付日期范围之内，进行产品的持续集成等等，如果时间允许可以再配合客户进行必要的系统功能测试。\n\n## 编写测试计划的目的是？\n\n使测试工作顺利进行；使项目参与人员沟通更舒畅；使测试工作更加系统化。\n\n## 测试计划编写的六要素？\n\n- why——为什么要进行这些测试\n- what—测试哪些方面，不同阶段的工作内容\n- when—测试不同阶段的起止时间\n- where—相应文档，缺陷的存放位置，测试环境等\n- who—项目有关人员组成，安排哪些测试人员进行测试\n- how—如何去做，使用哪些测试工具以及测试方法进行测试。\n\n## Web 测试与 App 测试\n\n### 软件测试流程\n\n我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将 Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### App 测试流程\n\n我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### Web 测试与 App 测试的区别\n\n- 从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。\n- 系统架构方面：\n  - Web 项目，一般都是 b/s 架构，基于浏览器的\n  - App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。\n  - Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。\n- 性能方面:\n  - Web 页面主要会关注响应时间\n  - 而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。\n  - 它们服务端的性能没区别，都是一台服务器。\n- 兼容方面：\n  - Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载\n  - App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。\n\n所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件\n此外 App 还有一些专项测试：如网络、适配性。。。\n\n### App 测试特点\n\n**（除了按需求说明书外的 功能测试 之外还需要进行如下测试）**\n\n- 适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）\n- 不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）\n- 在线升级测试\n- 中断测试（电话、短中消息打扰）\n- 耗电量测试\n- 弱网测试（信号差，信号屏蔽实验室）\n- 安装卸载 （C/S）\n- 流量测试\n\n## 系统测试是什么，有哪些测试方法。流程是什么?\n\n**[ 系统测试 ]**\n\n对项目进行全面的测试，其中包含单元测试和集成测试\n\n**[ 测试方法 ]**\n\n- 功能测试\n- 异常测试\n- 性能测试\n- 易用性测试\n- 安全性测试\n- GUI 测试\n- 兼容性测试\n- 配置测试\n- 安装测试\n\n**[ 流程 ]**\n\n我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。\n\n## 测试用例的设计方法\n\n- 等价类划分法\n- 边界值分析法\n- 因果图/判定表法\n- 错误推断法\n- 正交实验法\n- 场景设计法/流程分析法\n\n## http 协议 和 https 协议\n\n### http 协议\n\n- HTTP 协议： 超文本传输协议\n\n**[ 请求方式 ]**\n\n- GET\n- POST\n- PUT\n- DELETE\n\n**[ 状态码 ]**\n\n- 200 成功\n- 204 请求成功，服务端没有内容\n- 301 永久重定向\n- 302 临时重定向\n- 304 走缓存\n- 400 参数错误\n- 401 权限不够\n- 403 服务器拒绝响应\n- 404 资源不存在\n- 500 服务器端错误，\n- 502 网关错误\n\n### http 协议 和 https 协议的区别\n\n- http 协议是超文本传输协议，信息是明文传输\n- https 是具有安全性的 ssl / tls 加密传输协议\n- http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443\n- http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全\n\n## 接口测试流程\n\n- 接口的功能测试（先保证接口是正确的）\n- 测试接口的数据（传递一些特殊的数据，保证接口没有问题）\n- 自动化测试脚本的编辑\n- 接口的性能、压力测试\n\n> - HTTP: 超文本传输协议，浏览器和服务器之间通信的规则\n> - URL: 统一资源定位符，协议://主机地址/路径\n> - GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET\n> - POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST\n\n### Fiddler 的原理\n\nFiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。\n\n### 你可以说说 jmeter 里的进程和线程吗？\n\n### 你说说聚合报告是个什么东西？\n\n对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以 kb/秒为单位的吞吐量.\n\n## 缺陷（Bug）管理\n\n### 一个“缺陷”的记录都包含哪些内容\n\n- 所属产品、模块、项目、版本\n- Bug 指派\n- Bug 标题\n- 优先级\n- 严重程度\n- 操作步骤\n- 实际结果\n- 预期结果\n\n### 怎么区分 Bug 是前端的还是后端的\n\n1. 如果项目崩溃，就是前端的 Bug\n1. 界面出现问题，前端 Bug\n1. 资源不能加载（根据状态码）\n\n- 500： 后端的问题\n- 404：\n- - 查看前端有没有发出去请求\n  - 查看前端请求接口是不是对的\n  - 查看前端请求参数是否正确\n\n- 200：\n  - 后端返回的数据是否正确\n  - 前端读取数据的时候出错\n\n### 优先级与严重程度\n\n#### Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\n\n- 一级： 严重影响到后面功能模块的测试工作\n- 二级： Bug 会制约开发和测试的活动进行，需要在发布前修复\n- 三级： 不影响其他工作，文字，话术、图片等出现错误\n\n#### Bug 严重程度（从用户角度考虑）\n\n- 一级：致命问题，App 崩溃\n- 二级：功能出现错误，\n- 三级：UI 界面出现错误（文字，话术、图片等）\n\n#### 测试用例优先级\n\n- 一级：正向的流程，主功能\n- 二级：反向的流程\n- 三级：检查 UI 界面的文本、图片等\n\n## 冒烟测试和回归测试的区别\n\n- 测试目的不同\n  - 冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。\n  - 回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。\n- 测试过程不同\n  - 冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。\n  - 回归测试：是指漏洞由开发人员修改之后再次测试的过程。\n- 问题解决方式不同\n  - 冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。\n  - 回归测试：回归测试是修改完之后进行验证再进行的工程。\n- 测试周期不同\n  - 冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。\n  - 回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。\n- 测试意义不同\n  - 冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。\n  - 回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。\n\n## 比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\n\n• 如果是新功能开发的测试阶段，肯定是需要点点点\n• 如果是老功能做回归测试，则需要做自动化测试\n\n## git 是干嘛的？git 和 svn 有什么区别？\n\n- git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的\n- svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。\n- git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。\n\n## 说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\n\n- cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid\n- token 和 session 算是一类，都是用于服务器验证的。\n- 服务器会通过用户请求携带的 sessionid 来识别用户\n\n## 敏捷开发的特点\n\n敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。\n\n## Selenium 中,等待方式有哪些，区别是什么？\n\n- sleep 休眠方法\n- 隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒\n- 显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法\n\n## 功能测试在 beta 版本对外上线的标准是什么\n\n测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。\n\n## 软件测试结束的标准\n\n- 测试用例全部跑完，并且 Bug 都已经关闭\n- 性能指标达到要求\n- 验收测试通过\n\n## 有没有用过 django 框架？\n\n-\n\n## 你知道深拷贝和浅拷贝的区别吗？\n\n如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。\n\n## 一个测试需要具备什么素质？\n\n- 五心（细心，专心，耐心，信心，责任心）\n- 要相信任何软件都存在缺陷\n- 需要具备专业的软件测试技能\n- 具备一定的逻辑分析能力\n- 具备团队合作精神\n- 具备较好的沟通能力\n- 实事求是\n- 具备较好的学习能力\n- 具备一定的编程能力\n- 要有原则\n- 不断总结经验与教训\n- 无论缺陷大小都要上报\n- 遇到不可重现的 bug 也要报告\n\n### 保持怀疑\n\n对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说\"我做完了而且也测过了\"就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。\n\n### 永不妥协\n\n不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。\n\n### 让用户满意\n\n产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个 bug 频出的系统／产品满意的。\n\n### 从用户角度思考\n\n很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能\n\n### 分清主次\n\n要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。\n\n### 从不承诺 100%的覆盖率\n\n不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。\n\n### 倾听建议\n\n别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。\n\n### 尽早开始\n\n尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。\n\n### 确定并管理风险\n\n在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。\n\n### 做市场调研\n\n看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。\n\n### 培养 BA 技能\n\nBA 就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。\n\n### 不要忘了异常情况\n\n只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现 bug，也有助于我们换个角度看待产品和项目的业务行为。\n\n### Be a Good Judge of Your Product\n\n做那个对项目/产品最有发言权的人。\n\n### 学会交涉\n\n在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。\n\n### 停止指责\n\n出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。\n\n### 做一个好的观察者\n\n观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。\n\n## python 主要数据类型有哪些？\n\n- 数字：int、float、bool、complex\n- 字符串：str\n- 列表：list，用[]\n- 元组：tuple，用()，就相当于不可修改的 list\n- 集合：set，用{}\n- 字典：dict，用{key: value}\n\n## Linux 面试\n\n### 你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\n\n- chmod 修改文件权限\n- 查看某个进程的 pid\n\n```\n  ps -ef | grep xxx(某个进程)\n```\n\n- 查找被占用的端口\n\n```\n  netstat -tln\n  netstat -tln | grep 8083\n  netstat -lnp | grep 8083\n```\n\n- 查看端口属于哪个程序？端口被哪个进程占用\n\n```\n  lsof -i :8083\n```\n\n- 杀掉占用端口的进程\n\n```\nkill -9 进程id\n```\n\n## 测试用例书写\n\n### qq ⽂件传输测试⽤例\n\n- 传输成功\n\n1. ⽂件直接拖到对话框，点击发送\n1. 点击传送⽂件按钮，选择⽂件，点击发送\n1. 传送汇总显示进度条\n1. 传送显示⽂件名字，以及⽂件⼤⼩\n1. 给⼀个⽤户传输多个⽂件\n1. 同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)\n1. 本地打开的时候，可以传送⽂件\n1. 接收成功的默认路径\n1. ⽂件接收后，是否正常\n1. 是否可以更改保存路径\n1. ⽂件传输时，不影响其他功能\n1. 接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）\n\n- 传输失败\n\n1. 点击取消，可以取消⽂件发送\n1. 接收⽅，拒绝接收\n1. 直接关闭对话框，有提示，有⽂件在传输\n1. ⽂件-⽂件夹，⽂件夹多层，空⽂件\n1. ⽂件⼤⼩的边界值\n\n- ⽂件名称\n\n1. 普通⽂件\n1. 含有特殊符号的⽂件\n1. ⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号\n\n- ⽂件格式\n\n1. exe ⽂件，txt，doc，pdf 等\n1. 图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件\n\n- 界⾯测试\n\n1. 界⾯美观、易⽤\n1. 按钮位置符合规范以及正确\n1. 提示语是否正确\n\n- 其他测试\n\n1. 弱⽹情况传输\n1. 上传中断⽹\n1. 上传⽂件，把源⽂件删除\n","source":"_posts/语雀/iqxdsc.md","raw":"---\ntitle: 软件测试面试题\nurlname: iqxdsc\ndate: '2020-05-28 23:50:32 +0800'\ntags: []\ncategories: []\nabbrlink: 486558920\n---\n\n## 软件测试类型\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1590934846663-b39b5b3b-abc5-40f5-bd5b-67c0089d639a.png#align=left&display=inline&height=815&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1791&size=0&status=done&style=none&width=1791)\n\n## 常用测试方法\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1590934843329-0574da46-728f-43b8-800b-2a67472c827b.png#align=left&display=inline&height=1729&margin=%5Bobject%20Object%5D&originHeight=1729&originWidth=1226&size=0&status=done&style=none&width=1226)\n\n## 系统测试方法\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1590934844560-73fc41ef-9bf1-4df2-b10e-666fe4f270f0.png#align=left&display=inline&height=2144&margin=%5Bobject%20Object%5D&originHeight=2144&originWidth=2480&size=0&status=done&style=none&width=2480)\n\n## 什么是软件测试\n\n软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。\n\n## 软件产品质量模型（ISO / IEC 9126）\n\n- 功能性：提供满足明确和隐含要求的功能的能力\n- 可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力\n  - 设备最好不要出故障\n  - 设备出故障了，不要影响主要的功能和业务\n  - 如果影响了主要功能和业务，系统可以尽快定位并恢复\n- 易用性：易懂、易学、易用、漂亮好看（用户体验好）\n- 效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）\n- 可维护性：产品可以被修改的能力。可以增加功能，可以更新。\n- 可移植性：跨越不同系统平台\n\n### 对一支笔从软件质量的体系进行分析要测哪些？\n\n- 功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸\n- 性能： 一支笔能连续写多久，从高处掉落会不会坏\n- 易用性： 是否美观，是否好握，书写是否舒服\n- 安全： 材质是否符合安全规范，是否对人体产生危害\n- 可移植性： 是否可以通过换笔芯继续使用。\n\n### 你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\n\n测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。\n\n### 基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量 )\n\n出现以上的情况，如果仅仅想通过测试来提高软件质量，那几乎是不可能，原因是没有足够的时间让你去测试，少而不规范的文档导致测试需求无法细化何谈足够且有针对性进行测试。所以，作为公司质量保证的你应该先和项目经理确定符合项目本身最适合的软件生命周期模型（比如 RUP 的剪裁，原型法）,明确项目的开发流程并督促项目组按照此流程开展工作，所有项目组成员（项目经理更加重要）都要制定出合理的工作计划，加强代码的单元测试，在客户既定的产品交付日期范围之内，进行产品的持续集成等等，如果时间允许可以再配合客户进行必要的系统功能测试。\n\n## 编写测试计划的目的是？\n\n使测试工作顺利进行；使项目参与人员沟通更舒畅；使测试工作更加系统化。\n\n## 测试计划编写的六要素？\n\n- why——为什么要进行这些测试\n- what—测试哪些方面，不同阶段的工作内容\n- when—测试不同阶段的起止时间\n- where—相应文档，缺陷的存放位置，测试环境等\n- who—项目有关人员组成，安排哪些测试人员进行测试\n- how—如何去做，使用哪些测试工具以及测试方法进行测试。\n\n## Web 测试与 App 测试\n\n### 软件测试流程\n\n我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将 Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### App 测试流程\n\n我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。\n\n### Web 测试与 App 测试的区别\n\n- 从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。\n- 系统架构方面：\n  - Web 项目，一般都是 b/s 架构，基于浏览器的\n  - App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。\n  - Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。\n- 性能方面:\n  - Web 页面主要会关注响应时间\n  - 而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。\n  - 它们服务端的性能没区别，都是一台服务器。\n- 兼容方面：\n  - Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载\n  - App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。\n\n所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件\n此外 App 还有一些专项测试：如网络、适配性。。。\n\n### App 测试特点\n\n**（除了按需求说明书外的 功能测试 之外还需要进行如下测试）**\n\n- 适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）\n- 不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）\n- 在线升级测试\n- 中断测试（电话、短中消息打扰）\n- 耗电量测试\n- 弱网测试（信号差，信号屏蔽实验室）\n- 安装卸载 （C/S）\n- 流量测试\n\n## 系统测试是什么，有哪些测试方法。流程是什么?\n\n**[ 系统测试 ]**\n\n对项目进行全面的测试，其中包含单元测试和集成测试\n\n**[ 测试方法 ]**\n\n- 功能测试\n- 异常测试\n- 性能测试\n- 易用性测试\n- 安全性测试\n- GUI 测试\n- 兼容性测试\n- 配置测试\n- 安装测试\n\n**[ 流程 ]**\n\n我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。\n\n## 测试用例的设计方法\n\n- 等价类划分法\n- 边界值分析法\n- 因果图/判定表法\n- 错误推断法\n- 正交实验法\n- 场景设计法/流程分析法\n\n## http 协议 和 https 协议\n\n### http 协议\n\n- HTTP 协议： 超文本传输协议\n\n**[ 请求方式 ]**\n\n- GET\n- POST\n- PUT\n- DELETE\n\n**[ 状态码 ]**\n\n- 200 成功\n- 204 请求成功，服务端没有内容\n- 301 永久重定向\n- 302 临时重定向\n- 304 走缓存\n- 400 参数错误\n- 401 权限不够\n- 403 服务器拒绝响应\n- 404 资源不存在\n- 500 服务器端错误，\n- 502 网关错误\n\n### http 协议 和 https 协议的区别\n\n- http 协议是超文本传输协议，信息是明文传输\n- https 是具有安全性的 ssl / tls 加密传输协议\n- http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443\n- http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全\n\n## 接口测试流程\n\n- 接口的功能测试（先保证接口是正确的）\n- 测试接口的数据（传递一些特殊的数据，保证接口没有问题）\n- 自动化测试脚本的编辑\n- 接口的性能、压力测试\n\n> - HTTP: 超文本传输协议，浏览器和服务器之间通信的规则\n> - URL: 统一资源定位符，协议://主机地址/路径\n> - GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET\n> - POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST\n\n### Fiddler 的原理\n\nFiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。\n\n### 你可以说说 jmeter 里的进程和线程吗？\n\n### 你说说聚合报告是个什么东西？\n\n对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以 kb/秒为单位的吞吐量.\n\n## 缺陷（Bug）管理\n\n### 一个“缺陷”的记录都包含哪些内容\n\n- 所属产品、模块、项目、版本\n- Bug 指派\n- Bug 标题\n- 优先级\n- 严重程度\n- 操作步骤\n- 实际结果\n- 预期结果\n\n### 怎么区分 Bug 是前端的还是后端的\n\n1. 如果项目崩溃，就是前端的 Bug\n1. 界面出现问题，前端 Bug\n1. 资源不能加载（根据状态码）\n\n- 500： 后端的问题\n- 404：\n- - 查看前端有没有发出去请求\n  - 查看前端请求接口是不是对的\n  - 查看前端请求参数是否正确\n\n- 200：\n  - 后端返回的数据是否正确\n  - 前端读取数据的时候出错\n\n### 优先级与严重程度\n\n#### Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\n\n- 一级： 严重影响到后面功能模块的测试工作\n- 二级： Bug 会制约开发和测试的活动进行，需要在发布前修复\n- 三级： 不影响其他工作，文字，话术、图片等出现错误\n\n#### Bug 严重程度（从用户角度考虑）\n\n- 一级：致命问题，App 崩溃\n- 二级：功能出现错误，\n- 三级：UI 界面出现错误（文字，话术、图片等）\n\n#### 测试用例优先级\n\n- 一级：正向的流程，主功能\n- 二级：反向的流程\n- 三级：检查 UI 界面的文本、图片等\n\n## 冒烟测试和回归测试的区别\n\n- 测试目的不同\n  - 冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。\n  - 回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。\n- 测试过程不同\n  - 冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。\n  - 回归测试：是指漏洞由开发人员修改之后再次测试的过程。\n- 问题解决方式不同\n  - 冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。\n  - 回归测试：回归测试是修改完之后进行验证再进行的工程。\n- 测试周期不同\n  - 冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。\n  - 回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。\n- 测试意义不同\n  - 冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。\n  - 回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。\n\n## 比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\n\n• 如果是新功能开发的测试阶段，肯定是需要点点点\n• 如果是老功能做回归测试，则需要做自动化测试\n\n## git 是干嘛的？git 和 svn 有什么区别？\n\n- git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的\n- svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。\n- git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。\n\n## 说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\n\n- cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid\n- token 和 session 算是一类，都是用于服务器验证的。\n- 服务器会通过用户请求携带的 sessionid 来识别用户\n\n## 敏捷开发的特点\n\n敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。\n\n## Selenium 中,等待方式有哪些，区别是什么？\n\n- sleep 休眠方法\n- 隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒\n- 显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法\n\n## 功能测试在 beta 版本对外上线的标准是什么\n\n测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。\n\n## 软件测试结束的标准\n\n- 测试用例全部跑完，并且 Bug 都已经关闭\n- 性能指标达到要求\n- 验收测试通过\n\n## 有没有用过 django 框架？\n\n-\n\n## 你知道深拷贝和浅拷贝的区别吗？\n\n如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。\n\n## 一个测试需要具备什么素质？\n\n- 五心（细心，专心，耐心，信心，责任心）\n- 要相信任何软件都存在缺陷\n- 需要具备专业的软件测试技能\n- 具备一定的逻辑分析能力\n- 具备团队合作精神\n- 具备较好的沟通能力\n- 实事求是\n- 具备较好的学习能力\n- 具备一定的编程能力\n- 要有原则\n- 不断总结经验与教训\n- 无论缺陷大小都要上报\n- 遇到不可重现的 bug 也要报告\n\n### 保持怀疑\n\n对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说\"我做完了而且也测过了\"就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。\n\n### 永不妥协\n\n不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。\n\n### 让用户满意\n\n产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个 bug 频出的系统／产品满意的。\n\n### 从用户角度思考\n\n很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能\n\n### 分清主次\n\n要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。\n\n### 从不承诺 100%的覆盖率\n\n不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。\n\n### 倾听建议\n\n别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。\n\n### 尽早开始\n\n尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。\n\n### 确定并管理风险\n\n在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。\n\n### 做市场调研\n\n看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。\n\n### 培养 BA 技能\n\nBA 就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。\n\n### 不要忘了异常情况\n\n只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现 bug，也有助于我们换个角度看待产品和项目的业务行为。\n\n### Be a Good Judge of Your Product\n\n做那个对项目/产品最有发言权的人。\n\n### 学会交涉\n\n在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。\n\n### 停止指责\n\n出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。\n\n### 做一个好的观察者\n\n观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。\n\n## python 主要数据类型有哪些？\n\n- 数字：int、float、bool、complex\n- 字符串：str\n- 列表：list，用[]\n- 元组：tuple，用()，就相当于不可修改的 list\n- 集合：set，用{}\n- 字典：dict，用{key: value}\n\n## Linux 面试\n\n### 你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\n\n- chmod 修改文件权限\n- 查看某个进程的 pid\n\n```\n  ps -ef | grep xxx(某个进程)\n```\n\n- 查找被占用的端口\n\n```\n  netstat -tln\n  netstat -tln | grep 8083\n  netstat -lnp | grep 8083\n```\n\n- 查看端口属于哪个程序？端口被哪个进程占用\n\n```\n  lsof -i :8083\n```\n\n- 杀掉占用端口的进程\n\n```\nkill -9 进程id\n```\n\n## 测试用例书写\n\n### qq ⽂件传输测试⽤例\n\n- 传输成功\n\n1. ⽂件直接拖到对话框，点击发送\n1. 点击传送⽂件按钮，选择⽂件，点击发送\n1. 传送汇总显示进度条\n1. 传送显示⽂件名字，以及⽂件⼤⼩\n1. 给⼀个⽤户传输多个⽂件\n1. 同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)\n1. 本地打开的时候，可以传送⽂件\n1. 接收成功的默认路径\n1. ⽂件接收后，是否正常\n1. 是否可以更改保存路径\n1. ⽂件传输时，不影响其他功能\n1. 接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）\n\n- 传输失败\n\n1. 点击取消，可以取消⽂件发送\n1. 接收⽅，拒绝接收\n1. 直接关闭对话框，有提示，有⽂件在传输\n1. ⽂件-⽂件夹，⽂件夹多层，空⽂件\n1. ⽂件⼤⼩的边界值\n\n- ⽂件名称\n\n1. 普通⽂件\n1. 含有特殊符号的⽂件\n1. ⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号\n\n- ⽂件格式\n\n1. exe ⽂件，txt，doc，pdf 等\n1. 图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件\n\n- 界⾯测试\n\n1. 界⾯美观、易⽤\n1. 按钮位置符合规范以及正确\n1. 提示语是否正确\n\n- 其他测试\n\n1. 弱⽹情况传输\n1. 上传中断⽹\n1. 上传⽂件，把源⽂件删除\n","slug":"语雀/iqxdsc","published":1,"updated":"2022-03-03T11:26:07.573Z","_id":"cl0awjjpb000k081b6mct5mmz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"软件测试类型\"><a href=\"#软件测试类型\" class=\"headerlink\" title=\"软件测试类型\"></a>软件测试类型</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1590934846663-b39b5b3b-abc5-40f5-bd5b-67c0089d639a.png#align=left&display=inline&height=815&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1791&size=0&status=done&style=none&width=1791\"></p>\n<h2 id=\"常用测试方法\"><a href=\"#常用测试方法\" class=\"headerlink\" title=\"常用测试方法\"></a>常用测试方法</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1590934843329-0574da46-728f-43b8-800b-2a67472c827b.png#align=left&display=inline&height=1729&margin=%5Bobject%20Object%5D&originHeight=1729&originWidth=1226&size=0&status=done&style=none&width=1226\"></p>\n<h2 id=\"系统测试方法\"><a href=\"#系统测试方法\" class=\"headerlink\" title=\"系统测试方法\"></a>系统测试方法</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1590934844560-73fc41ef-9bf1-4df2-b10e-666fe4f270f0.png#align=left&display=inline&height=2144&margin=%5Bobject%20Object%5D&originHeight=2144&originWidth=2480&size=0&status=done&style=none&width=2480\"></p>\n<h2 id=\"什么是软件测试\"><a href=\"#什么是软件测试\" class=\"headerlink\" title=\"什么是软件测试\"></a>什么是软件测试</h2><p>软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。</p>\n<h2 id=\"软件产品质量模型（ISO-IEC-9126）\"><a href=\"#软件产品质量模型（ISO-IEC-9126）\" class=\"headerlink\" title=\"软件产品质量模型（ISO / IEC 9126）\"></a>软件产品质量模型（ISO / IEC 9126）</h2><ul>\n<li>功能性：提供满足明确和隐含要求的功能的能力</li>\n<li>可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力<ul>\n<li>设备最好不要出故障</li>\n<li>设备出故障了，不要影响主要的功能和业务</li>\n<li>如果影响了主要功能和业务，系统可以尽快定位并恢复</li>\n</ul>\n</li>\n<li>易用性：易懂、易学、易用、漂亮好看（用户体验好）</li>\n<li>效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）</li>\n<li>可维护性：产品可以被修改的能力。可以增加功能，可以更新。</li>\n<li>可移植性：跨越不同系统平台</li>\n</ul>\n<h3 id=\"对一支笔从软件质量的体系进行分析要测哪些？\"><a href=\"#对一支笔从软件质量的体系进行分析要测哪些？\" class=\"headerlink\" title=\"对一支笔从软件质量的体系进行分析要测哪些？\"></a>对一支笔从软件质量的体系进行分析要测哪些？</h3><ul>\n<li>功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸</li>\n<li>性能： 一支笔能连续写多久，从高处掉落会不会坏</li>\n<li>易用性： 是否美观，是否好握，书写是否舒服</li>\n<li>安全： 材质是否符合安全规范，是否对人体产生危害</li>\n<li>可移植性： 是否可以通过换笔芯继续使用。</li>\n</ul>\n<h3 id=\"你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\"><a href=\"#你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\" class=\"headerlink\" title=\"你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\"></a>你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？</h3><p>测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。</p>\n<h3 id=\"基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？-大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量\"><a href=\"#基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？-大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量\" class=\"headerlink\" title=\"基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量 )\"></a>基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量 )</h3><p>出现以上的情况，如果仅仅想通过测试来提高软件质量，那几乎是不可能，原因是没有足够的时间让你去测试，少而不规范的文档导致测试需求无法细化何谈足够且有针对性进行测试。所以，作为公司质量保证的你应该先和项目经理确定符合项目本身最适合的软件生命周期模型（比如 RUP 的剪裁，原型法）,明确项目的开发流程并督促项目组按照此流程开展工作，所有项目组成员（项目经理更加重要）都要制定出合理的工作计划，加强代码的单元测试，在客户既定的产品交付日期范围之内，进行产品的持续集成等等，如果时间允许可以再配合客户进行必要的系统功能测试。</p>\n<h2 id=\"编写测试计划的目的是？\"><a href=\"#编写测试计划的目的是？\" class=\"headerlink\" title=\"编写测试计划的目的是？\"></a>编写测试计划的目的是？</h2><p>使测试工作顺利进行；使项目参与人员沟通更舒畅；使测试工作更加系统化。</p>\n<h2 id=\"测试计划编写的六要素？\"><a href=\"#测试计划编写的六要素？\" class=\"headerlink\" title=\"测试计划编写的六要素？\"></a>测试计划编写的六要素？</h2><ul>\n<li>why——为什么要进行这些测试</li>\n<li>what—测试哪些方面，不同阶段的工作内容</li>\n<li>when—测试不同阶段的起止时间</li>\n<li>where—相应文档，缺陷的存放位置，测试环境等</li>\n<li>who—项目有关人员组成，安排哪些测试人员进行测试</li>\n<li>how—如何去做，使用哪些测试工具以及测试方法进行测试。</li>\n</ul>\n<h2 id=\"Web-测试与-App-测试\"><a href=\"#Web-测试与-App-测试\" class=\"headerlink\" title=\"Web 测试与 App 测试\"></a>Web 测试与 App 测试</h2><h3 id=\"软件测试流程\"><a href=\"#软件测试流程\" class=\"headerlink\" title=\"软件测试流程\"></a>软件测试流程</h3><p>我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将 Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"App-测试流程\"><a href=\"#App-测试流程\" class=\"headerlink\" title=\"App 测试流程\"></a>App 测试流程</h3><p>我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"Web-测试与-App-测试的区别\"><a href=\"#Web-测试与-App-测试的区别\" class=\"headerlink\" title=\"Web 测试与 App 测试的区别\"></a>Web 测试与 App 测试的区别</h3><ul>\n<li>从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。</li>\n<li>系统架构方面：<ul>\n<li>Web 项目，一般都是 b/s 架构，基于浏览器的</li>\n<li>App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。</li>\n<li>Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。</li>\n</ul>\n</li>\n<li>性能方面:<ul>\n<li>Web 页面主要会关注响应时间</li>\n<li>而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。</li>\n<li>它们服务端的性能没区别，都是一台服务器。</li>\n</ul>\n</li>\n<li>兼容方面：<ul>\n<li>Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载</li>\n<li>App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。</li>\n</ul>\n</li>\n</ul>\n<p>所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件<br>此外 App 还有一些专项测试：如网络、适配性。。。</p>\n<h3 id=\"App-测试特点\"><a href=\"#App-测试特点\" class=\"headerlink\" title=\"App 测试特点\"></a>App 测试特点</h3><p><strong>（除了按需求说明书外的 功能测试 之外还需要进行如下测试）</strong></p>\n<ul>\n<li>适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）</li>\n<li>不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）</li>\n<li>在线升级测试</li>\n<li>中断测试（电话、短中消息打扰）</li>\n<li>耗电量测试</li>\n<li>弱网测试（信号差，信号屏蔽实验室）</li>\n<li>安装卸载 （C/S）</li>\n<li>流量测试</li>\n</ul>\n<h2 id=\"系统测试是什么，有哪些测试方法。流程是什么\"><a href=\"#系统测试是什么，有哪些测试方法。流程是什么\" class=\"headerlink\" title=\"系统测试是什么，有哪些测试方法。流程是什么?\"></a>系统测试是什么，有哪些测试方法。流程是什么?</h2><p><strong>[ 系统测试 ]</strong></p>\n<p>对项目进行全面的测试，其中包含单元测试和集成测试</p>\n<p><strong>[ 测试方法 ]</strong></p>\n<ul>\n<li>功能测试</li>\n<li>异常测试</li>\n<li>性能测试</li>\n<li>易用性测试</li>\n<li>安全性测试</li>\n<li>GUI 测试</li>\n<li>兼容性测试</li>\n<li>配置测试</li>\n<li>安装测试</li>\n</ul>\n<p><strong>[ 流程 ]</strong></p>\n<p>我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。</p>\n<h2 id=\"测试用例的设计方法\"><a href=\"#测试用例的设计方法\" class=\"headerlink\" title=\"测试用例的设计方法\"></a>测试用例的设计方法</h2><ul>\n<li>等价类划分法</li>\n<li>边界值分析法</li>\n<li>因果图/判定表法</li>\n<li>错误推断法</li>\n<li>正交实验法</li>\n<li>场景设计法/流程分析法</li>\n</ul>\n<h2 id=\"http-协议-和-https-协议\"><a href=\"#http-协议-和-https-协议\" class=\"headerlink\" title=\"http 协议 和 https 协议\"></a>http 协议 和 https 协议</h2><h3 id=\"http-协议\"><a href=\"#http-协议\" class=\"headerlink\" title=\"http 协议\"></a>http 协议</h3><ul>\n<li>HTTP 协议： 超文本传输协议</li>\n</ul>\n<p><strong>[ 请求方式 ]</strong></p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n</ul>\n<p><strong>[ 状态码 ]</strong></p>\n<ul>\n<li>200 成功</li>\n<li>204 请求成功，服务端没有内容</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>304 走缓存</li>\n<li>400 参数错误</li>\n<li>401 权限不够</li>\n<li>403 服务器拒绝响应</li>\n<li>404 资源不存在</li>\n<li>500 服务器端错误，</li>\n<li>502 网关错误</li>\n</ul>\n<h3 id=\"http-协议-和-https-协议的区别\"><a href=\"#http-协议-和-https-协议的区别\" class=\"headerlink\" title=\"http 协议 和 https 协议的区别\"></a>http 协议 和 https 协议的区别</h3><ul>\n<li>http 协议是超文本传输协议，信息是明文传输</li>\n<li>https 是具有安全性的 ssl / tls 加密传输协议</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443</li>\n<li>http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全</li>\n</ul>\n<h2 id=\"接口测试流程\"><a href=\"#接口测试流程\" class=\"headerlink\" title=\"接口测试流程\"></a>接口测试流程</h2><ul>\n<li>接口的功能测试（先保证接口是正确的）</li>\n<li>测试接口的数据（传递一些特殊的数据，保证接口没有问题）</li>\n<li>自动化测试脚本的编辑</li>\n<li>接口的性能、压力测试</li>\n</ul>\n<blockquote>\n<ul>\n<li>HTTP: 超文本传输协议，浏览器和服务器之间通信的规则</li>\n<li>URL: 统一资源定位符，协议://主机地址/路径</li>\n<li>GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET</li>\n<li>POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST</li>\n</ul>\n</blockquote>\n<h3 id=\"Fiddler-的原理\"><a href=\"#Fiddler-的原理\" class=\"headerlink\" title=\"Fiddler 的原理\"></a>Fiddler 的原理</h3><p>Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。</p>\n<h3 id=\"你可以说说-jmeter-里的进程和线程吗？\"><a href=\"#你可以说说-jmeter-里的进程和线程吗？\" class=\"headerlink\" title=\"你可以说说 jmeter 里的进程和线程吗？\"></a>你可以说说 jmeter 里的进程和线程吗？</h3><h3 id=\"你说说聚合报告是个什么东西？\"><a href=\"#你说说聚合报告是个什么东西？\" class=\"headerlink\" title=\"你说说聚合报告是个什么东西？\"></a>你说说聚合报告是个什么东西？</h3><p>对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以 kb/秒为单位的吞吐量.</p>\n<h2 id=\"缺陷（Bug）管理\"><a href=\"#缺陷（Bug）管理\" class=\"headerlink\" title=\"缺陷（Bug）管理\"></a>缺陷（Bug）管理</h2><h3 id=\"一个“缺陷”的记录都包含哪些内容\"><a href=\"#一个“缺陷”的记录都包含哪些内容\" class=\"headerlink\" title=\"一个“缺陷”的记录都包含哪些内容\"></a>一个“缺陷”的记录都包含哪些内容</h3><ul>\n<li>所属产品、模块、项目、版本</li>\n<li>Bug 指派</li>\n<li>Bug 标题</li>\n<li>优先级</li>\n<li>严重程度</li>\n<li>操作步骤</li>\n<li>实际结果</li>\n<li>预期结果</li>\n</ul>\n<h3 id=\"怎么区分-Bug-是前端的还是后端的\"><a href=\"#怎么区分-Bug-是前端的还是后端的\" class=\"headerlink\" title=\"怎么区分 Bug 是前端的还是后端的\"></a>怎么区分 Bug 是前端的还是后端的</h3><ol>\n<li>如果项目崩溃，就是前端的 Bug</li>\n<li>界面出现问题，前端 Bug</li>\n<li>资源不能加载（根据状态码）</li>\n</ol>\n<ul>\n<li><p>500： 后端的问题</p>\n</li>\n<li><p>404：</p>\n</li>\n<li><ul>\n<li>查看前端有没有发出去请求</li>\n<li>查看前端请求接口是不是对的</li>\n<li>查看前端请求参数是否正确</li>\n</ul>\n</li>\n<li><p>200：</p>\n<ul>\n<li>后端返回的数据是否正确</li>\n<li>前端读取数据的时候出错</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级与严重程度\"><a href=\"#优先级与严重程度\" class=\"headerlink\" title=\"优先级与严重程度\"></a>优先级与严重程度</h3><h4 id=\"Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\"><a href=\"#Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\" class=\"headerlink\" title=\"Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\"></a>Bug 优先级（Bug 修复的先后顺序，针对于测试人员）</h4><ul>\n<li>一级： 严重影响到后面功能模块的测试工作</li>\n<li>二级： Bug 会制约开发和测试的活动进行，需要在发布前修复</li>\n<li>三级： 不影响其他工作，文字，话术、图片等出现错误</li>\n</ul>\n<h4 id=\"Bug-严重程度（从用户角度考虑）\"><a href=\"#Bug-严重程度（从用户角度考虑）\" class=\"headerlink\" title=\"Bug 严重程度（从用户角度考虑）\"></a>Bug 严重程度（从用户角度考虑）</h4><ul>\n<li>一级：致命问题，App 崩溃</li>\n<li>二级：功能出现错误，</li>\n<li>三级：UI 界面出现错误（文字，话术、图片等）</li>\n</ul>\n<h4 id=\"测试用例优先级\"><a href=\"#测试用例优先级\" class=\"headerlink\" title=\"测试用例优先级\"></a>测试用例优先级</h4><ul>\n<li>一级：正向的流程，主功能</li>\n<li>二级：反向的流程</li>\n<li>三级：检查 UI 界面的文本、图片等</li>\n</ul>\n<h2 id=\"冒烟测试和回归测试的区别\"><a href=\"#冒烟测试和回归测试的区别\" class=\"headerlink\" title=\"冒烟测试和回归测试的区别\"></a>冒烟测试和回归测试的区别</h2><ul>\n<li>测试目的不同<ul>\n<li>冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。</li>\n<li>回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。</li>\n</ul>\n</li>\n<li>测试过程不同<ul>\n<li>冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。</li>\n<li>回归测试：是指漏洞由开发人员修改之后再次测试的过程。</li>\n</ul>\n</li>\n<li>问题解决方式不同<ul>\n<li>冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。</li>\n<li>回归测试：回归测试是修改完之后进行验证再进行的工程。</li>\n</ul>\n</li>\n<li>测试周期不同<ul>\n<li>冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。</li>\n<li>回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。</li>\n</ul>\n</li>\n<li>测试意义不同<ul>\n<li>冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。</li>\n<li>回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"比如你一个-OA-系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\"><a href=\"#比如你一个-OA-系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\" class=\"headerlink\" title=\"比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\"></a>比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？</h2><p>• 如果是新功能开发的测试阶段，肯定是需要点点点<br>• 如果是老功能做回归测试，则需要做自动化测试</p>\n<h2 id=\"git-是干嘛的？git-和-svn-有什么区别？\"><a href=\"#git-是干嘛的？git-和-svn-有什么区别？\" class=\"headerlink\" title=\"git 是干嘛的？git 和 svn 有什么区别？\"></a>git 是干嘛的？git 和 svn 有什么区别？</h2><ul>\n<li>git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的</li>\n<li>svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。</li>\n<li>git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。</li>\n</ul>\n<h2 id=\"说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"><a href=\"#说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\" class=\"headerlink\" title=\"说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"></a>说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？</h2><ul>\n<li>cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid</li>\n<li>token 和 session 算是一类，都是用于服务器验证的。</li>\n<li>服务器会通过用户请求携带的 sessionid 来识别用户</li>\n</ul>\n<h2 id=\"敏捷开发的特点\"><a href=\"#敏捷开发的特点\" class=\"headerlink\" title=\"敏捷开发的特点\"></a>敏捷开发的特点</h2><p>敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。</p>\n<h2 id=\"Selenium-中-等待方式有哪些，区别是什么？\"><a href=\"#Selenium-中-等待方式有哪些，区别是什么？\" class=\"headerlink\" title=\"Selenium 中,等待方式有哪些，区别是什么？\"></a>Selenium 中,等待方式有哪些，区别是什么？</h2><ul>\n<li>sleep 休眠方法</li>\n<li>隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒</li>\n<li>显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法</li>\n</ul>\n<h2 id=\"功能测试在-beta-版本对外上线的标准是什么\"><a href=\"#功能测试在-beta-版本对外上线的标准是什么\" class=\"headerlink\" title=\"功能测试在 beta 版本对外上线的标准是什么\"></a>功能测试在 beta 版本对外上线的标准是什么</h2><p>测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。</p>\n<h2 id=\"软件测试结束的标准\"><a href=\"#软件测试结束的标准\" class=\"headerlink\" title=\"软件测试结束的标准\"></a>软件测试结束的标准</h2><ul>\n<li>测试用例全部跑完，并且 Bug 都已经关闭</li>\n<li>性能指标达到要求</li>\n<li>验收测试通过</li>\n</ul>\n<h2 id=\"有没有用过-django-框架？\"><a href=\"#有没有用过-django-框架？\" class=\"headerlink\" title=\"有没有用过 django 框架？\"></a>有没有用过 django 框架？</h2><p>-</p>\n<h2 id=\"你知道深拷贝和浅拷贝的区别吗？\"><a href=\"#你知道深拷贝和浅拷贝的区别吗？\" class=\"headerlink\" title=\"你知道深拷贝和浅拷贝的区别吗？\"></a>你知道深拷贝和浅拷贝的区别吗？</h2><p>如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。</p>\n<h2 id=\"一个测试需要具备什么素质？\"><a href=\"#一个测试需要具备什么素质？\" class=\"headerlink\" title=\"一个测试需要具备什么素质？\"></a>一个测试需要具备什么素质？</h2><ul>\n<li>五心（细心，专心，耐心，信心，责任心）</li>\n<li>要相信任何软件都存在缺陷</li>\n<li>需要具备专业的软件测试技能</li>\n<li>具备一定的逻辑分析能力</li>\n<li>具备团队合作精神</li>\n<li>具备较好的沟通能力</li>\n<li>实事求是</li>\n<li>具备较好的学习能力</li>\n<li>具备一定的编程能力</li>\n<li>要有原则</li>\n<li>不断总结经验与教训</li>\n<li>无论缺陷大小都要上报</li>\n<li>遇到不可重现的 bug 也要报告</li>\n</ul>\n<h3 id=\"保持怀疑\"><a href=\"#保持怀疑\" class=\"headerlink\" title=\"保持怀疑\"></a>保持怀疑</h3><p>对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说”我做完了而且也测过了”就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。</p>\n<h3 id=\"永不妥协\"><a href=\"#永不妥协\" class=\"headerlink\" title=\"永不妥协\"></a>永不妥协</h3><p>不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。</p>\n<h3 id=\"让用户满意\"><a href=\"#让用户满意\" class=\"headerlink\" title=\"让用户满意\"></a>让用户满意</h3><p>产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个 bug 频出的系统／产品满意的。</p>\n<h3 id=\"从用户角度思考\"><a href=\"#从用户角度思考\" class=\"headerlink\" title=\"从用户角度思考\"></a>从用户角度思考</h3><p>很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能</p>\n<h3 id=\"分清主次\"><a href=\"#分清主次\" class=\"headerlink\" title=\"分清主次\"></a>分清主次</h3><p>要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。</p>\n<h3 id=\"从不承诺-100-的覆盖率\"><a href=\"#从不承诺-100-的覆盖率\" class=\"headerlink\" title=\"从不承诺 100%的覆盖率\"></a>从不承诺 100%的覆盖率</h3><p>不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。</p>\n<h3 id=\"倾听建议\"><a href=\"#倾听建议\" class=\"headerlink\" title=\"倾听建议\"></a>倾听建议</h3><p>别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。</p>\n<h3 id=\"尽早开始\"><a href=\"#尽早开始\" class=\"headerlink\" title=\"尽早开始\"></a>尽早开始</h3><p>尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。</p>\n<h3 id=\"确定并管理风险\"><a href=\"#确定并管理风险\" class=\"headerlink\" title=\"确定并管理风险\"></a>确定并管理风险</h3><p>在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。</p>\n<h3 id=\"做市场调研\"><a href=\"#做市场调研\" class=\"headerlink\" title=\"做市场调研\"></a>做市场调研</h3><p>看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。</p>\n<h3 id=\"培养-BA-技能\"><a href=\"#培养-BA-技能\" class=\"headerlink\" title=\"培养 BA 技能\"></a>培养 BA 技能</h3><p>BA 就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。</p>\n<h3 id=\"不要忘了异常情况\"><a href=\"#不要忘了异常情况\" class=\"headerlink\" title=\"不要忘了异常情况\"></a>不要忘了异常情况</h3><p>只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现 bug，也有助于我们换个角度看待产品和项目的业务行为。</p>\n<h3 id=\"Be-a-Good-Judge-of-Your-Product\"><a href=\"#Be-a-Good-Judge-of-Your-Product\" class=\"headerlink\" title=\"Be a Good Judge of Your Product\"></a>Be a Good Judge of Your Product</h3><p>做那个对项目/产品最有发言权的人。</p>\n<h3 id=\"学会交涉\"><a href=\"#学会交涉\" class=\"headerlink\" title=\"学会交涉\"></a>学会交涉</h3><p>在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。</p>\n<h3 id=\"停止指责\"><a href=\"#停止指责\" class=\"headerlink\" title=\"停止指责\"></a>停止指责</h3><p>出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。</p>\n<h3 id=\"做一个好的观察者\"><a href=\"#做一个好的观察者\" class=\"headerlink\" title=\"做一个好的观察者\"></a>做一个好的观察者</h3><p>观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。</p>\n<h2 id=\"python-主要数据类型有哪些？\"><a href=\"#python-主要数据类型有哪些？\" class=\"headerlink\" title=\"python 主要数据类型有哪些？\"></a>python 主要数据类型有哪些？</h2><ul>\n<li>数字：int、float、bool、complex</li>\n<li>字符串：str</li>\n<li>列表：list，用[]</li>\n<li>元组：tuple，用()，就相当于不可修改的 list</li>\n<li>集合：set，用{}</li>\n<li>字典：dict，用{key: value}</li>\n</ul>\n<h2 id=\"Linux-面试\"><a href=\"#Linux-面试\" class=\"headerlink\" title=\"Linux 面试\"></a>Linux 面试</h2><h3 id=\"你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\"><a href=\"#你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\" class=\"headerlink\" title=\"你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\"></a>你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？</h3><ul>\n<li>chmod 修改文件权限</li>\n<li>查看某个进程的 pid</li>\n</ul>\n<pre><code>  ps -ef | grep xxx(某个进程)\n</code></pre>\n<ul>\n<li>查找被占用的端口</li>\n</ul>\n<pre><code>  netstat -tln\n  netstat -tln | grep 8083\n  netstat -lnp | grep 8083\n</code></pre>\n<ul>\n<li>查看端口属于哪个程序？端口被哪个进程占用</li>\n</ul>\n<pre><code>  lsof -i :8083\n</code></pre>\n<ul>\n<li>杀掉占用端口的进程</li>\n</ul>\n<pre><code>kill -9 进程id\n</code></pre>\n<h2 id=\"测试用例书写\"><a href=\"#测试用例书写\" class=\"headerlink\" title=\"测试用例书写\"></a>测试用例书写</h2><h3 id=\"qq-⽂件传输测试⽤例\"><a href=\"#qq-⽂件传输测试⽤例\" class=\"headerlink\" title=\"qq ⽂件传输测试⽤例\"></a>qq ⽂件传输测试⽤例</h3><ul>\n<li>传输成功</li>\n</ul>\n<ol>\n<li>⽂件直接拖到对话框，点击发送</li>\n<li>点击传送⽂件按钮，选择⽂件，点击发送</li>\n<li>传送汇总显示进度条</li>\n<li>传送显示⽂件名字，以及⽂件⼤⼩</li>\n<li>给⼀个⽤户传输多个⽂件</li>\n<li>同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)</li>\n<li>本地打开的时候，可以传送⽂件</li>\n<li>接收成功的默认路径</li>\n<li>⽂件接收后，是否正常</li>\n<li>是否可以更改保存路径</li>\n<li>⽂件传输时，不影响其他功能</li>\n<li>接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）</li>\n</ol>\n<ul>\n<li>传输失败</li>\n</ul>\n<ol>\n<li>点击取消，可以取消⽂件发送</li>\n<li>接收⽅，拒绝接收</li>\n<li>直接关闭对话框，有提示，有⽂件在传输</li>\n<li>⽂件-⽂件夹，⽂件夹多层，空⽂件</li>\n<li>⽂件⼤⼩的边界值</li>\n</ol>\n<ul>\n<li>⽂件名称</li>\n</ul>\n<ol>\n<li>普通⽂件</li>\n<li>含有特殊符号的⽂件</li>\n<li>⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号</li>\n</ol>\n<ul>\n<li>⽂件格式</li>\n</ul>\n<ol>\n<li>exe ⽂件，txt，doc，pdf 等</li>\n<li>图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件</li>\n</ol>\n<ul>\n<li>界⾯测试</li>\n</ul>\n<ol>\n<li>界⾯美观、易⽤</li>\n<li>按钮位置符合规范以及正确</li>\n<li>提示语是否正确</li>\n</ol>\n<ul>\n<li>其他测试</li>\n</ul>\n<ol>\n<li>弱⽹情况传输</li>\n<li>上传中断⽹</li>\n<li>上传⽂件，把源⽂件删除</li>\n</ol>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"软件测试类型\"><a href=\"#软件测试类型\" class=\"headerlink\" title=\"软件测试类型\"></a>软件测试类型</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1590934846663-b39b5b3b-abc5-40f5-bd5b-67c0089d639a.png#align=left&display=inline&height=815&margin=%5Bobject%20Object%5D&originHeight=815&originWidth=1791&size=0&status=done&style=none&width=1791\"></p>\n<h2 id=\"常用测试方法\"><a href=\"#常用测试方法\" class=\"headerlink\" title=\"常用测试方法\"></a>常用测试方法</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1590934843329-0574da46-728f-43b8-800b-2a67472c827b.png#align=left&display=inline&height=1729&margin=%5Bobject%20Object%5D&originHeight=1729&originWidth=1226&size=0&status=done&style=none&width=1226\"></p>\n<h2 id=\"系统测试方法\"><a href=\"#系统测试方法\" class=\"headerlink\" title=\"系统测试方法\"></a>系统测试方法</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1590934844560-73fc41ef-9bf1-4df2-b10e-666fe4f270f0.png#align=left&display=inline&height=2144&margin=%5Bobject%20Object%5D&originHeight=2144&originWidth=2480&size=0&status=done&style=none&width=2480\"></p>\n<h2 id=\"什么是软件测试\"><a href=\"#什么是软件测试\" class=\"headerlink\" title=\"什么是软件测试\"></a>什么是软件测试</h2><p>软件测试是利⽤测试⼯具按照测试⽅法和流程对开发出来的产品进⾏功能、性能、安全等的测试。满⾜产品需求。</p>\n<h2 id=\"软件产品质量模型（ISO-IEC-9126）\"><a href=\"#软件产品质量模型（ISO-IEC-9126）\" class=\"headerlink\" title=\"软件产品质量模型（ISO / IEC 9126）\"></a>软件产品质量模型（ISO / IEC 9126）</h2><ul>\n<li>功能性：提供满足明确和隐含要求的功能的能力</li>\n<li>可靠性：在特定条件下使用时，软件产品呢维持规定的性能级别能力<ul>\n<li>设备最好不要出故障</li>\n<li>设备出故障了，不要影响主要的功能和业务</li>\n<li>如果影响了主要功能和业务，系统可以尽快定位并恢复</li>\n</ul>\n</li>\n<li>易用性：易懂、易学、易用、漂亮好看（用户体验好）</li>\n<li>效率：软件产品可提供适当的性能的能力，也就是产品的性能（单选、多选、全选）</li>\n<li>可维护性：产品可以被修改的能力。可以增加功能，可以更新。</li>\n<li>可移植性：跨越不同系统平台</li>\n</ul>\n<h3 id=\"对一支笔从软件质量的体系进行分析要测哪些？\"><a href=\"#对一支笔从软件质量的体系进行分析要测哪些？\" class=\"headerlink\" title=\"对一支笔从软件质量的体系进行分析要测哪些？\"></a>对一支笔从软件质量的体系进行分析要测哪些？</h3><ul>\n<li>功能： 是否可以写出字，字的颜色，字的粗细，笔的重量，笔的材质，笔的尺寸</li>\n<li>性能： 一支笔能连续写多久，从高处掉落会不会坏</li>\n<li>易用性： 是否美观，是否好握，书写是否舒服</li>\n<li>安全： 材质是否符合安全规范，是否对人体产生危害</li>\n<li>可移植性： 是否可以通过换笔芯继续使用。</li>\n</ul>\n<h3 id=\"你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\"><a href=\"#你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\" class=\"headerlink\" title=\"你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？\"></a>你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？</h3><p>测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。</p>\n<h3 id=\"基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？-大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量\"><a href=\"#基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？-大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量\" class=\"headerlink\" title=\"基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量 )\"></a>基于目前中国的国情，大多数公司的软件项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况—–既不想投入过多又想保证质量 )</h3><p>出现以上的情况，如果仅仅想通过测试来提高软件质量，那几乎是不可能，原因是没有足够的时间让你去测试，少而不规范的文档导致测试需求无法细化何谈足够且有针对性进行测试。所以，作为公司质量保证的你应该先和项目经理确定符合项目本身最适合的软件生命周期模型（比如 RUP 的剪裁，原型法）,明确项目的开发流程并督促项目组按照此流程开展工作，所有项目组成员（项目经理更加重要）都要制定出合理的工作计划，加强代码的单元测试，在客户既定的产品交付日期范围之内，进行产品的持续集成等等，如果时间允许可以再配合客户进行必要的系统功能测试。</p>\n<h2 id=\"编写测试计划的目的是？\"><a href=\"#编写测试计划的目的是？\" class=\"headerlink\" title=\"编写测试计划的目的是？\"></a>编写测试计划的目的是？</h2><p>使测试工作顺利进行；使项目参与人员沟通更舒畅；使测试工作更加系统化。</p>\n<h2 id=\"测试计划编写的六要素？\"><a href=\"#测试计划编写的六要素？\" class=\"headerlink\" title=\"测试计划编写的六要素？\"></a>测试计划编写的六要素？</h2><ul>\n<li>why——为什么要进行这些测试</li>\n<li>what—测试哪些方面，不同阶段的工作内容</li>\n<li>when—测试不同阶段的起止时间</li>\n<li>where—相应文档，缺陷的存放位置，测试环境等</li>\n<li>who—项目有关人员组成，安排哪些测试人员进行测试</li>\n<li>how—如何去做，使用哪些测试工具以及测试方法进行测试。</li>\n</ul>\n<h2 id=\"Web-测试与-App-测试\"><a href=\"#Web-测试与-App-测试\" class=\"headerlink\" title=\"Web 测试与 App 测试\"></a>Web 测试与 App 测试</h2><h3 id=\"软件测试流程\"><a href=\"#软件测试流程\" class=\"headerlink\" title=\"软件测试流程\"></a>软件测试流程</h3><p>我们会先进行需求评审，根据需求并书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，如果期间接口设计完成，我们会先对接口进行测试，开发提测以后，根据测试用例对项目进行测试，如果出现 Bug，会将 Bug 提交给对应开发人员，开发人员修复以后，需要对 Bug 再次进行测试，如果涉及到其他功能，也需要对它们进行测试，如果还是有问题，继续提交给对应开发人员，直到整个项目测试完成。另外在项目上线前，需要对项目的重要功能进行测试，确保项目可以正常上线，上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"App-测试流程\"><a href=\"#App-测试流程\" class=\"headerlink\" title=\"App 测试流程\"></a>App 测试流程</h3><p>我们会先进行需求评审，然后根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审的目的，修改遗漏和错误的测试用例，等待开发提测，开发提测后，我们会先进行冒烟测试，看一下项目的主流程是否可以走通，然后进行功能测试和接口测试，完成以后，对 App 的安装卸载进行测试包括 App 的覆盖安装和升级，再然后会对 App 在断网和弱网的环境下进行测试，最后对 App 的兼容性进行测试，全部测完以后对整个项目进行回归测试，以便项目可以正常上线。上线后，对重要功能再次进行测试确保用户可以正常使用，同时也需要持续关注项目的各个功能是否正常。</p>\n<h3 id=\"Web-测试与-App-测试的区别\"><a href=\"#Web-测试与-App-测试的区别\" class=\"headerlink\" title=\"Web 测试与 App 测试的区别\"></a>Web 测试与 App 测试的区别</h3><ul>\n<li>从功能测试的层面上来讲的话，App 测试、Web 测试 在流程和功能测试上是没有区别的。</li>\n<li>系统架构方面：<ul>\n<li>Web 项目，一般都是 b/s 架构，基于浏览器的</li>\n<li>App 项目，则是 c/s 的，必须要有客户端，用户需要安装客户端。</li>\n<li>Web 测试只要更新了服务器端，客户端就会同步会更新。App 项目则需要客户端和服务器都更新。</li>\n</ul>\n</li>\n<li>性能方面:<ul>\n<li>Web 页面主要会关注响应时间</li>\n<li>而 App 则还需要关心流量、电量、CPU、GPU、Memory 这些。</li>\n<li>它们服务端的性能没区别，都是一台服务器。</li>\n</ul>\n</li>\n<li>兼容方面：<ul>\n<li>Web 是基于浏览器的，所以更倾向于浏览器和电脑硬件，电脑系统的方向的兼容 ，所以 Web 测试不必考虑安装卸载</li>\n<li>App 测试是基于客户端的，则要看分辨率，屏幕尺寸，还要看设备系统。</li>\n</ul>\n</li>\n</ul>\n<p>所以 App 测试则必须测试安装、更新、卸载。除了常规的安装、更新、卸载还要考虑到异常场景。包括安装时的中断、弱网、安装后删除安装文件<br>此外 App 还有一些专项测试：如网络、适配性。。。</p>\n<h3 id=\"App-测试特点\"><a href=\"#App-测试特点\" class=\"headerlink\" title=\"App 测试特点\"></a>App 测试特点</h3><p><strong>（除了按需求说明书外的 功能测试 之外还需要进行如下测试）</strong></p>\n<ul>\n<li>适配性测试（也叫兼容性测试，不同的安卓版本，不同厂商，不同手机品牌）</li>\n<li>不同网络测试 （2G 网络/3G 网络/4G 网络/WIFI 网络）</li>\n<li>在线升级测试</li>\n<li>中断测试（电话、短中消息打扰）</li>\n<li>耗电量测试</li>\n<li>弱网测试（信号差，信号屏蔽实验室）</li>\n<li>安装卸载 （C/S）</li>\n<li>流量测试</li>\n</ul>\n<h2 id=\"系统测试是什么，有哪些测试方法。流程是什么\"><a href=\"#系统测试是什么，有哪些测试方法。流程是什么\" class=\"headerlink\" title=\"系统测试是什么，有哪些测试方法。流程是什么?\"></a>系统测试是什么，有哪些测试方法。流程是什么?</h2><p><strong>[ 系统测试 ]</strong></p>\n<p>对项目进行全面的测试，其中包含单元测试和集成测试</p>\n<p><strong>[ 测试方法 ]</strong></p>\n<ul>\n<li>功能测试</li>\n<li>异常测试</li>\n<li>性能测试</li>\n<li>易用性测试</li>\n<li>安全性测试</li>\n<li>GUI 测试</li>\n<li>兼容性测试</li>\n<li>配置测试</li>\n<li>安装测试</li>\n</ul>\n<p><strong>[ 流程 ]</strong></p>\n<p>我们拿到需求以后，根据需求书写测试用例，然后和其他测试人员交换用例，以达到用例评审，然后修改遗漏和错误的测试用例，等待开发完成，然后测试项目，如果出现 Bug， Bug 用工具指向开发人员，开发人员修改后，对 Bug 进行测试，并对其关联的模块进行测试，如果没有问题继续测试，如果还有问题，继续指向开发人修改，如此往复直到么有问题为止。</p>\n<h2 id=\"测试用例的设计方法\"><a href=\"#测试用例的设计方法\" class=\"headerlink\" title=\"测试用例的设计方法\"></a>测试用例的设计方法</h2><ul>\n<li>等价类划分法</li>\n<li>边界值分析法</li>\n<li>因果图/判定表法</li>\n<li>错误推断法</li>\n<li>正交实验法</li>\n<li>场景设计法/流程分析法</li>\n</ul>\n<h2 id=\"http-协议-和-https-协议\"><a href=\"#http-协议-和-https-协议\" class=\"headerlink\" title=\"http 协议 和 https 协议\"></a>http 协议 和 https 协议</h2><h3 id=\"http-协议\"><a href=\"#http-协议\" class=\"headerlink\" title=\"http 协议\"></a>http 协议</h3><ul>\n<li>HTTP 协议： 超文本传输协议</li>\n</ul>\n<p><strong>[ 请求方式 ]</strong></p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n</ul>\n<p><strong>[ 状态码 ]</strong></p>\n<ul>\n<li>200 成功</li>\n<li>204 请求成功，服务端没有内容</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>304 走缓存</li>\n<li>400 参数错误</li>\n<li>401 权限不够</li>\n<li>403 服务器拒绝响应</li>\n<li>404 资源不存在</li>\n<li>500 服务器端错误，</li>\n<li>502 网关错误</li>\n</ul>\n<h3 id=\"http-协议-和-https-协议的区别\"><a href=\"#http-协议-和-https-协议的区别\" class=\"headerlink\" title=\"http 协议 和 https 协议的区别\"></a>http 协议 和 https 协议的区别</h3><ul>\n<li>http 协议是超文本传输协议，信息是明文传输</li>\n<li>https 是具有安全性的 ssl / tls 加密传输协议</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443</li>\n<li>http 的连接很简单，是无状态的; HTTPS 协议是由 SSL/TLS+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全</li>\n</ul>\n<h2 id=\"接口测试流程\"><a href=\"#接口测试流程\" class=\"headerlink\" title=\"接口测试流程\"></a>接口测试流程</h2><ul>\n<li>接口的功能测试（先保证接口是正确的）</li>\n<li>测试接口的数据（传递一些特殊的数据，保证接口没有问题）</li>\n<li>自动化测试脚本的编辑</li>\n<li>接口的性能、压力测试</li>\n</ul>\n<blockquote>\n<ul>\n<li>HTTP: 超文本传输协议，浏览器和服务器之间通信的规则</li>\n<li>URL: 统一资源定位符，协议://主机地址/路径</li>\n<li>GET: 提交的数据显示在地址栏，不安全，提交的数据量有限制，不重要的数据使用 GET</li>\n<li>POST: 隐式提交数据，更安全，没有数据量大小的限制，重要数据使用 POST</li>\n</ul>\n</blockquote>\n<h3 id=\"Fiddler-的原理\"><a href=\"#Fiddler-的原理\" class=\"headerlink\" title=\"Fiddler 的原理\"></a>Fiddler 的原理</h3><p>Fiddler 是位于客户端和服务器端的 HTTP 代理，能够记录客户端和服务器之间的所有 HTTP 请求，可以针对特定的 HTTP 请求，分析或修改请求数据，也可以修改服务器返回的数据。</p>\n<h3 id=\"你可以说说-jmeter-里的进程和线程吗？\"><a href=\"#你可以说说-jmeter-里的进程和线程吗？\" class=\"headerlink\" title=\"你可以说说 jmeter 里的进程和线程吗？\"></a>你可以说说 jmeter 里的进程和线程吗？</h3><h3 id=\"你说说聚合报告是个什么东西？\"><a href=\"#你说说聚合报告是个什么东西？\" class=\"headerlink\" title=\"你说说聚合报告是个什么东西？\"></a>你说说聚合报告是个什么东西？</h3><p>对于每个请求，它统计响应信息并提供请求数，平均值，最大，最小值，错误率，大约吞吐量(以请求数/秒为单位)和以 kb/秒为单位的吞吐量.</p>\n<h2 id=\"缺陷（Bug）管理\"><a href=\"#缺陷（Bug）管理\" class=\"headerlink\" title=\"缺陷（Bug）管理\"></a>缺陷（Bug）管理</h2><h3 id=\"一个“缺陷”的记录都包含哪些内容\"><a href=\"#一个“缺陷”的记录都包含哪些内容\" class=\"headerlink\" title=\"一个“缺陷”的记录都包含哪些内容\"></a>一个“缺陷”的记录都包含哪些内容</h3><ul>\n<li>所属产品、模块、项目、版本</li>\n<li>Bug 指派</li>\n<li>Bug 标题</li>\n<li>优先级</li>\n<li>严重程度</li>\n<li>操作步骤</li>\n<li>实际结果</li>\n<li>预期结果</li>\n</ul>\n<h3 id=\"怎么区分-Bug-是前端的还是后端的\"><a href=\"#怎么区分-Bug-是前端的还是后端的\" class=\"headerlink\" title=\"怎么区分 Bug 是前端的还是后端的\"></a>怎么区分 Bug 是前端的还是后端的</h3><ol>\n<li>如果项目崩溃，就是前端的 Bug</li>\n<li>界面出现问题，前端 Bug</li>\n<li>资源不能加载（根据状态码）</li>\n</ol>\n<ul>\n<li><p>500： 后端的问题</p>\n</li>\n<li><p>404：</p>\n</li>\n<li><ul>\n<li>查看前端有没有发出去请求</li>\n<li>查看前端请求接口是不是对的</li>\n<li>查看前端请求参数是否正确</li>\n</ul>\n</li>\n<li><p>200：</p>\n<ul>\n<li>后端返回的数据是否正确</li>\n<li>前端读取数据的时候出错</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级与严重程度\"><a href=\"#优先级与严重程度\" class=\"headerlink\" title=\"优先级与严重程度\"></a>优先级与严重程度</h3><h4 id=\"Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\"><a href=\"#Bug-优先级（Bug-修复的先后顺序，针对于测试人员）\" class=\"headerlink\" title=\"Bug 优先级（Bug 修复的先后顺序，针对于测试人员）\"></a>Bug 优先级（Bug 修复的先后顺序，针对于测试人员）</h4><ul>\n<li>一级： 严重影响到后面功能模块的测试工作</li>\n<li>二级： Bug 会制约开发和测试的活动进行，需要在发布前修复</li>\n<li>三级： 不影响其他工作，文字，话术、图片等出现错误</li>\n</ul>\n<h4 id=\"Bug-严重程度（从用户角度考虑）\"><a href=\"#Bug-严重程度（从用户角度考虑）\" class=\"headerlink\" title=\"Bug 严重程度（从用户角度考虑）\"></a>Bug 严重程度（从用户角度考虑）</h4><ul>\n<li>一级：致命问题，App 崩溃</li>\n<li>二级：功能出现错误，</li>\n<li>三级：UI 界面出现错误（文字，话术、图片等）</li>\n</ul>\n<h4 id=\"测试用例优先级\"><a href=\"#测试用例优先级\" class=\"headerlink\" title=\"测试用例优先级\"></a>测试用例优先级</h4><ul>\n<li>一级：正向的流程，主功能</li>\n<li>二级：反向的流程</li>\n<li>三级：检查 UI 界面的文本、图片等</li>\n</ul>\n<h2 id=\"冒烟测试和回归测试的区别\"><a href=\"#冒烟测试和回归测试的区别\" class=\"headerlink\" title=\"冒烟测试和回归测试的区别\"></a>冒烟测试和回归测试的区别</h2><ul>\n<li>测试目的不同<ul>\n<li>冒烟测试：用于确认代码中的更改会按预期运行，且不会破坏整个版本的稳定性。</li>\n<li>回归测试：以确认修改没有引入新的错误或导致其他代码产生错误。</li>\n</ul>\n</li>\n<li>测试过程不同<ul>\n<li>冒烟测试：是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。</li>\n<li>回归测试：是指漏洞由开发人员修改之后再次测试的过程。</li>\n</ul>\n</li>\n<li>问题解决方式不同<ul>\n<li>冒烟测试：冒烟测试中是发现问题然后反馈给开发人员进行修改。</li>\n<li>回归测试：回归测试是修改完之后进行验证再进行的工程。</li>\n</ul>\n</li>\n<li>测试周期不同<ul>\n<li>冒烟测试：冒烟测试只集中考虑了一开始的那个问题，而忽略其它的问题，这就可能引起了新的 Bug，SmokeTest 优点是节省测试时间。</li>\n<li>回归测试：回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。</li>\n</ul>\n</li>\n<li>测试意义不同<ul>\n<li>冒烟测试：冒烟测试是对软件质量的总体检验，是测试人员对测试流程的熟悉，是软件测试过程中一个不可或缺的节点，一个好的冒烟测试过程，对于软件测试效率的提升具有重要意义。</li>\n<li>回归测试：回归测试是软件测试中的一个十分重要且成本昂贵的过程。对针对如何减少回归测试成本，提高回归测试效率的研究将具有十分重要的意义。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"比如你一个-OA-系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\"><a href=\"#比如你一个-OA-系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\" class=\"headerlink\" title=\"比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？\"></a>比如你一个 OA 系统里面功能比较多，你是通过手工快速去点还是用什么方式去快速完成这个测试工作？</h2><p>• 如果是新功能开发的测试阶段，肯定是需要点点点<br>• 如果是老功能做回归测试，则需要做自动化测试</p>\n<h2 id=\"git-是干嘛的？git-和-svn-有什么区别？\"><a href=\"#git-是干嘛的？git-和-svn-有什么区别？\" class=\"headerlink\" title=\"git 是干嘛的？git 和 svn 有什么区别？\"></a>git 是干嘛的？git 和 svn 有什么区别？</h2><ul>\n<li>git 是分布式版本控制系统，SVN 是集中式版本控制系统，这两个都是管理代码的</li>\n<li>svn 严重的依赖服务器端，当服务器端无法使用的时候，版本控制也就无法再使用了。</li>\n<li>git 当这个系统的任何一个客户端出现问题的时候，都可以从另外的客户端（即使服务器挂了）获取所有的代码。</li>\n</ul>\n<h2 id=\"说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"><a href=\"#说一下-cookies-和-session，token。服务器是怎么知道你这个登录的用户是哪个用户？\" class=\"headerlink\" title=\"说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？\"></a>说一下 cookies 和 session，token。服务器是怎么知道你这个登录的用户是哪个用户？</h2><ul>\n<li>cookie 和 session 都是用来存储数据的，cookie 的数据存储在浏览器，session 的数据存储在服务器端，用户请求，服务器端生成 session 并返回 sessionid 给客户端，客户端把 sessionid 存储在 cookie 中，以后请求都会带上 sessionid</li>\n<li>token 和 session 算是一类，都是用于服务器验证的。</li>\n<li>服务器会通过用户请求携带的 sessionid 来识别用户</li>\n</ul>\n<h2 id=\"敏捷开发的特点\"><a href=\"#敏捷开发的特点\" class=\"headerlink\" title=\"敏捷开发的特点\"></a>敏捷开发的特点</h2><p>敏捷开发多用于小的团队，以用户为核心，利用短迭代方法来交付软件，开发的过程中更注重的是人员的交流。</p>\n<h2 id=\"Selenium-中-等待方式有哪些，区别是什么？\"><a href=\"#Selenium-中-等待方式有哪些，区别是什么？\" class=\"headerlink\" title=\"Selenium 中,等待方式有哪些，区别是什么？\"></a>Selenium 中,等待方式有哪些，区别是什么？</h2><ul>\n<li>sleep 休眠方法</li>\n<li>隐式等待，driver.implicitly_wait(10) 隐性等待，最长等 10 秒</li>\n<li>显示等待，WebDriverWait() 它是由 Webdirver 提供的等待方法</li>\n</ul>\n<h2 id=\"功能测试在-beta-版本对外上线的标准是什么\"><a href=\"#功能测试在-beta-版本对外上线的标准是什么\" class=\"headerlink\" title=\"功能测试在 beta 版本对外上线的标准是什么\"></a>功能测试在 beta 版本对外上线的标准是什么</h2><p>测试用例全部跑完，并且 Bug 都已经关闭，然后业务验收后可以上线。</p>\n<h2 id=\"软件测试结束的标准\"><a href=\"#软件测试结束的标准\" class=\"headerlink\" title=\"软件测试结束的标准\"></a>软件测试结束的标准</h2><ul>\n<li>测试用例全部跑完，并且 Bug 都已经关闭</li>\n<li>性能指标达到要求</li>\n<li>验收测试通过</li>\n</ul>\n<h2 id=\"有没有用过-django-框架？\"><a href=\"#有没有用过-django-框架？\" class=\"headerlink\" title=\"有没有用过 django 框架？\"></a>有没有用过 django 框架？</h2><p>-</p>\n<h2 id=\"你知道深拷贝和浅拷贝的区别吗？\"><a href=\"#你知道深拷贝和浅拷贝的区别吗？\" class=\"headerlink\" title=\"你知道深拷贝和浅拷贝的区别吗？\"></a>你知道深拷贝和浅拷贝的区别吗？</h2><p>如果拷贝的对象里的元素只有值，没有引用，那浅拷贝和深拷贝没有差别，如果拷贝的对象里的元素包含引用，浅拷贝保存的是引用地址，对新对象里的引用里的值进行修改，依然会改变原对象里的列表的值。而深拷贝则不同，它会将原对象里的引用也新创建一个。</p>\n<h2 id=\"一个测试需要具备什么素质？\"><a href=\"#一个测试需要具备什么素质？\" class=\"headerlink\" title=\"一个测试需要具备什么素质？\"></a>一个测试需要具备什么素质？</h2><ul>\n<li>五心（细心，专心，耐心，信心，责任心）</li>\n<li>要相信任何软件都存在缺陷</li>\n<li>需要具备专业的软件测试技能</li>\n<li>具备一定的逻辑分析能力</li>\n<li>具备团队合作精神</li>\n<li>具备较好的沟通能力</li>\n<li>实事求是</li>\n<li>具备较好的学习能力</li>\n<li>具备一定的编程能力</li>\n<li>要有原则</li>\n<li>不断总结经验与教训</li>\n<li>无论缺陷大小都要上报</li>\n<li>遇到不可重现的 bug 也要报告</li>\n</ul>\n<h3 id=\"保持怀疑\"><a href=\"#保持怀疑\" class=\"headerlink\" title=\"保持怀疑\"></a>保持怀疑</h3><p>对产品的质量持有一颗敢于怀疑的心，质量不是开发人员说”我做完了而且也测过了”就可以保证的。直到你测完最后一轮，最后一个用例之前，你都应该对产品的质量持怀疑态度。这个态度是混口饭吃的最基本技能。</p>\n<h3 id=\"永不妥协\"><a href=\"#永不妥协\" class=\"headerlink\" title=\"永不妥协\"></a>永不妥协</h3><p>不要对产品质量妥协，哪怕开发口口声声说这个问题不好改，改不了，一改就要延期之类的话。妥协意味着你成功的把质量不好这口黑锅华丽的背在了自己的身上。</p>\n<h3 id=\"让用户满意\"><a href=\"#让用户满意\" class=\"headerlink\" title=\"让用户满意\"></a>让用户满意</h3><p>产品或项目成功的标志之一是能够让用户满意，很显然用户是不会对一个 bug 频出的系统／产品满意的。</p>\n<h3 id=\"从用户角度思考\"><a href=\"#从用户角度思考\" class=\"headerlink\" title=\"从用户角度思考\"></a>从用户角度思考</h3><p>很多测试同学不知道测试用例应该怎么去写，不知道怎么写才能写得出比较健全的用例。当你在苦恼用例从哪里来的时候，不妨试试下面两个办法从用户角度去思考，如果你是一个特定的用户（年龄，身份，职业）你应该会怎么使用这个产品从场景的角度去思考，在哪些场景下会使用到这个产品写不出用例可能就意味着你对产品的功能不够熟悉，不如让熟悉这个产品的同事给你介绍一下主要功能</p>\n<h3 id=\"分清主次\"><a href=\"#分清主次\" class=\"headerlink\" title=\"分清主次\"></a>分清主次</h3><p>要分清楚任务的优先级，优先级高的先做，依此类推。在没有分清优先级的情况下不要盲目的开始测试。</p>\n<h3 id=\"从不承诺-100-的覆盖率\"><a href=\"#从不承诺-100-的覆盖率\" class=\"headerlink\" title=\"从不承诺 100%的覆盖率\"></a>从不承诺 100%的覆盖率</h3><p>不要把话说满，这个中国人都很理解。不要保证太高的目标，给自己留点后路。</p>\n<h3 id=\"倾听建议\"><a href=\"#倾听建议\" class=\"headerlink\" title=\"倾听建议\"></a>倾听建议</h3><p>别人的建议有些是金玉良言，有些则可以忽略不计。做测试的时候你不是一个人在战斗，多听听别的的有效建议是没有坏处的。</p>\n<h3 id=\"尽早开始\"><a href=\"#尽早开始\" class=\"headerlink\" title=\"尽早开始\"></a>尽早开始</h3><p>尽早开始重要的模块的测试工作。因为问题发现的越早解决的成本就越低。另外早点开始测试重要的模块或功能可以尽可能多的增加测试时间，拿时间换质量一般来说是效果的。这个建议的另一个说法就是想办法让重要的模块可以尽早的开始测试。</p>\n<h3 id=\"确定并管理风险\"><a href=\"#确定并管理风险\" class=\"headerlink\" title=\"确定并管理风险\"></a>确定并管理风险</h3><p>在做项目测试的时候，一个好的测试同学需要有发现项目质量上可能出现的风险的能力。另外当发现了项目风险的时候，我们还需要能够将风险管理起来，让风险可以被控制，可以被解决。</p>\n<h3 id=\"做市场调研\"><a href=\"#做市场调研\" class=\"headerlink\" title=\"做市场调研\"></a>做市场调研</h3><p>看看友商的产品做的怎么样，有什么好的地方，有什么不好地方。好的地方我们的产品可以学习，不好的地方我们可以预防和改进。这是站在产品人员的角度去看待自己的项目或产品，因为好的测试在某些时候需要具备好的产品人员的素质。</p>\n<h3 id=\"培养-BA-技能\"><a href=\"#培养-BA-技能\" class=\"headerlink\" title=\"培养 BA 技能\"></a>培养 BA 技能</h3><p>BA 就是业务分析师的意思，在某些项目里，这类同学被称为产品狗。这要求测试人员有分析需求的能力，哪些需求是真需求，哪些需求是伪需求。真需求就玩命的测，伪需求在时间允许的情况下尽量的测。这也是产品视角，这也是为什么有很多测试同学转去做产品的原因。</p>\n<h3 id=\"不要忘了异常情况\"><a href=\"#不要忘了异常情况\" class=\"headerlink\" title=\"不要忘了异常情况\"></a>不要忘了异常情况</h3><p>只测试正常的流程往往是不太够的，一些异常的情况我们也需要进行测试。另外不出意外的话异常情况的测试用例数量是要多于正常情况的。测试异常情况有助于我们发现 bug，也有助于我们换个角度看待产品和项目的业务行为。</p>\n<h3 id=\"Be-a-Good-Judge-of-Your-Product\"><a href=\"#Be-a-Good-Judge-of-Your-Product\" class=\"headerlink\" title=\"Be a Good Judge of Your Product\"></a>Be a Good Judge of Your Product</h3><p>做那个对项目/产品最有发言权的人。</p>\n<h3 id=\"学会交涉\"><a href=\"#学会交涉\" class=\"headerlink\" title=\"学会交涉\"></a>学会交涉</h3><p>在保证项目质量的前提下我们要尽可能多的通过交涉和协商保障自己的利益。交涉意味着在某些情况下我们需要做出让步，退一步海阔天空，但前提是，退的这一步不影响项目或产品的质量。</p>\n<h3 id=\"停止指责\"><a href=\"#停止指责\" class=\"headerlink\" title=\"停止指责\"></a>停止指责</h3><p>出问题的时候第一要务是先把问题解决掉，而不是指责相关责任人。</p>\n<h3 id=\"做一个好的观察者\"><a href=\"#做一个好的观察者\" class=\"headerlink\" title=\"做一个好的观察者\"></a>做一个好的观察者</h3><p>观察项目，观察开发的流程，观察测试的流程，发现问题，提出问题，引导团队去解决问题。</p>\n<h2 id=\"python-主要数据类型有哪些？\"><a href=\"#python-主要数据类型有哪些？\" class=\"headerlink\" title=\"python 主要数据类型有哪些？\"></a>python 主要数据类型有哪些？</h2><ul>\n<li>数字：int、float、bool、complex</li>\n<li>字符串：str</li>\n<li>列表：list，用[]</li>\n<li>元组：tuple，用()，就相当于不可修改的 list</li>\n<li>集合：set，用{}</li>\n<li>字典：dict，用{key: value}</li>\n</ul>\n<h2 id=\"Linux-面试\"><a href=\"#Linux-面试\" class=\"headerlink\" title=\"Linux 面试\"></a>Linux 面试</h2><h3 id=\"你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\"><a href=\"#你说一些-linux-命令，chmod-命令是干嘛的？怎么查看端口被占用？\" class=\"headerlink\" title=\"你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？\"></a>你说一些 linux 命令，chmod 命令是干嘛的？怎么查看端口被占用？</h3><ul>\n<li>chmod 修改文件权限</li>\n<li>查看某个进程的 pid</li>\n</ul>\n<pre><code>  ps -ef | grep xxx(某个进程)\n</code></pre>\n<ul>\n<li>查找被占用的端口</li>\n</ul>\n<pre><code>  netstat -tln\n  netstat -tln | grep 8083\n  netstat -lnp | grep 8083\n</code></pre>\n<ul>\n<li>查看端口属于哪个程序？端口被哪个进程占用</li>\n</ul>\n<pre><code>  lsof -i :8083\n</code></pre>\n<ul>\n<li>杀掉占用端口的进程</li>\n</ul>\n<pre><code>kill -9 进程id\n</code></pre>\n<h2 id=\"测试用例书写\"><a href=\"#测试用例书写\" class=\"headerlink\" title=\"测试用例书写\"></a>测试用例书写</h2><h3 id=\"qq-⽂件传输测试⽤例\"><a href=\"#qq-⽂件传输测试⽤例\" class=\"headerlink\" title=\"qq ⽂件传输测试⽤例\"></a>qq ⽂件传输测试⽤例</h3><ul>\n<li>传输成功</li>\n</ul>\n<ol>\n<li>⽂件直接拖到对话框，点击发送</li>\n<li>点击传送⽂件按钮，选择⽂件，点击发送</li>\n<li>传送汇总显示进度条</li>\n<li>传送显示⽂件名字，以及⽂件⼤⼩</li>\n<li>给⼀个⽤户传输多个⽂件</li>\n<li>同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)</li>\n<li>本地打开的时候，可以传送⽂件</li>\n<li>接收成功的默认路径</li>\n<li>⽂件接收后，是否正常</li>\n<li>是否可以更改保存路径</li>\n<li>⽂件传输时，不影响其他功能</li>\n<li>接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）</li>\n</ol>\n<ul>\n<li>传输失败</li>\n</ul>\n<ol>\n<li>点击取消，可以取消⽂件发送</li>\n<li>接收⽅，拒绝接收</li>\n<li>直接关闭对话框，有提示，有⽂件在传输</li>\n<li>⽂件-⽂件夹，⽂件夹多层，空⽂件</li>\n<li>⽂件⼤⼩的边界值</li>\n</ol>\n<ul>\n<li>⽂件名称</li>\n</ul>\n<ol>\n<li>普通⽂件</li>\n<li>含有特殊符号的⽂件</li>\n<li>⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号</li>\n</ol>\n<ul>\n<li>⽂件格式</li>\n</ul>\n<ol>\n<li>exe ⽂件，txt，doc，pdf 等</li>\n<li>图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件</li>\n</ol>\n<ul>\n<li>界⾯测试</li>\n</ul>\n<ol>\n<li>界⾯美观、易⽤</li>\n<li>按钮位置符合规范以及正确</li>\n<li>提示语是否正确</li>\n</ol>\n<ul>\n<li>其他测试</li>\n</ul>\n<ol>\n<li>弱⽹情况传输</li>\n<li>上传中断⽹</li>\n<li>上传⽂件，把源⽂件删除</li>\n</ol>\n"},{"title":"Vue 指令","urlname":"irdcbg","date":"2020-01-04T14:12:25.000Z","abbrlink":115789008,"_content":"\n**v-xxx 表示有特定功能，用来操作 dom 元素**\n\\*\\*\n\n- v-text   默认渲染成文本\n- v-html   渲染成 html\n- v-once   只渲染一次，再更改时直接从缓存中获取\n- v-for   遍历 数组、字符串、对象    key : 唯一的值，增加唯一性，避免同一父元素下相同元素复用\n- v-if / v-else / v-else-if   操作 dom 元素 显示/隐藏（一旦条件不成立 dom 元素是不存在的）\n- v-show   更改样式 显示/隐藏\n- v-on     绑定事件 简写 [@xxx ]()\n  - .stop - 调用 event.stopPropagation()。 阻止冒泡\n  - .prevent - 调用 event.preventDefault()。阻止默认行为\n  - .capture - 添加事件侦听器时使用 capture 模式。采取捕获方式\n  - .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 操作是自己才会触发\n  - .once - 只触发一次回调。\n  - .passive - 模式添加侦听器 处理事件函数中不会调用 preventDefault 函数 ，减少额外的监听，不能与    prevent 同时使用\n- v-bind   绑定动态属性 简写 :\n- v-model 双向绑定\n  - .lazy - 取代 input 监听 change 事件,失去焦点 数据更新\n  - .number - 输入字符串转为有效的数字\n  - .trim - 输入首尾空格过滤\n- 自定义指令\n\n**不要把 v-if 和 v-for 同时用在一个元素上，v-for 的优先级比 v-if 更高**\n\n```html\n[ 指令 ]\n\n<div id=\"app\" v-show=\"isShow\">\n  <!-- <span v-text></span> 等同于 {{ msg }}  -->\n  <span v-text=\"msg\"></span>\n  {{ msg }}\n  <div v-html=\"h\"></div>\n  {{ h }}\n  <p v-once>{{ str }}</p>\n  <ul v-if=\"isShow\">\n    <li v-for=\"(item,index) in arr\" key=\"`${index}_a`\">{{ item }}</li>\n  </ul>\n  <div v-else>2333333</div>\n\n  <div v-show=\"isShow\">3333333</div>\n</div>\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      arr: [1, 2, 3, 4, 5],\n      msg: \"我不喜欢这个世界，我只喜欢你！\",\n      h: \"<h1>Serendipity</h1>\",\n      str: \"时光静好 岁月安然\",\n      isShow: false,\n      age: 10,\n      radioVal: \"0\",\n      checkVal: false,\n    },\n  });\n</script>\n\n[ 表单双向绑定 ]\n\n<div class=\"Ipt\" id=\"app\">\n  <p>\n    <!-- <input type=\"text\" :value=\"age\" @input=\"fn\"> -->\n    <!-- 下面这种是上面这种写法的语法糖 -->\n    <input type=\"text\" v-model.lazy=\"age\" />\n    {{ age }}\n  </p>\n\n  <p>\n    <!-- 单选按钮 切换按钮时 radioVal 会切换为对应 value 的值 -->\n    <input type=\"radio\" name=\"\" id=\"\" v-model=\"radioVal\" value=\"0\" />男\n    <input type=\"radio\" name=\"\" id=\"\" v-model=\"radioVal\" value=\"1\" />女 {{\n    radioVal }}\n  </p>\n\n  <p>\n    <!-- 单选框 checkVal 根据 true 和 false 判断是否选中 -->\n    <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"checkVal\" />\n    {{ checkVal }}\n  </p>\n\n  <p>\n    <!-- 复选框 会把 选中的 value 值 放入到 v-model 绑定的数据中  -->\n    <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"checkArr\" value=\"吃饭\" />吃饭\n    <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"checkArr\" value=\"睡觉\" />睡觉\n    <input\n      type=\"checkbox\"\n      name=\"\"\n      id=\"\"\n      v-model=\"checkArr\"\n      value=\"打豆豆\"\n    />打豆豆 {{ checkArr }}\n  </p>\n\n  <p>\n    <!-- selectVal 值的获取方式 若 option 有 value 值，则获取 否则 option 里的内容  -->\n    <select name=\"\" id=\"\" v-model=\"selectVal\">\n      <option value=\"0\">杭州</option>\n      <option>厦门</option>\n    </select>\n    {{ selectVal }}\n  </p>\n\n  <p>\n    <!-- 多选下拉菜单  -->\n    <select name=\"\" id=\"\" v-model=\"selectArr\" multiple>\n      <option value=\"0\">杭州</option>\n      <option value=\"1\">合肥</option>\n      <option value=\"3\">厦门</option>\n    </select>\n    {{ selectArr }}\n  </p>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      age: 10,\n      radioVal: \"0\",\n      checkVal: false,\n      checkArr: [],\n      selectVal: 0,\n      selectArr: [],\n    },\n  });\n</script>\n\n[ 事件绑定 ]\n\n<div id=\"app\">\n  <!-- 冒泡: 由内到外   捕获 : 由外到内 -->\n\n  <!-- 采用捕获 ，其他元素还是采用冒泡的方式 -->\n  <!-- <div @click.capture=\"parent\"> -->\n  <div @click=\"parent\">\n    parent\n    <!-- @click.stop 阻止冒泡 -->\n    <div @click.stop=\"son\">\n      son\n      <!-- prevent 阻止默认行为  self 点击自己的时候才会触发 once 只触发一次 passive 表示阻止默认行为 不能与 prevent 同时使用 -->\n      <div @click.self=\"grandSon\">grandSon</div>\n    </div>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {},\n    methods: {\n      // 绑定事件 事件名不要和属性名相同\n      parent() {\n        alert(\"parent\");\n      },\n      son() {\n        alert(\"son\");\n      },\n      grandSon() {\n        alert(\"grandSon\");\n      },\n    },\n  });\n</script>\n\n[ 自定义指令 ]\n\n<!-- 自定义指令 -->\n<div class=\"custom\">\n  <p>\n    <input type=\"text\" v-focus.color=\"col\" />\n  </p>\n</div>\n\n<script>\n  //  `v-focus` 全局自定义指令\n  Vue.directive(\"focus\", {\n    // 指令初始化时调用\n    bind() {\n      console.log(\"初始化\");\n    },\n    // 当被绑定的元素插入到 DOM 中时……\n    inserted: function (el, bindings, vnode) {\n      // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n      console.log(bindings);\n      // 判断有无修饰符 如果有 进行操作\n      if (bindings.modifiers.color) {\n        el.style.background = bindings.value;\n      }\n      Vue.nextTick(() => {\n        // 聚焦元素\n        el.focus();\n      });\n    },\n    updata() {\n      console.log(\"更新时触发\");\n    },\n    unbind() {\n      console.log(\"指令销毁 指令和绑定元素解绑时\");\n    },\n  });\n\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      col: \"red\",\n    },\n    methods: {\n      // 局部自定义指令 只在当前 实例起作用\n      directives: {\n        focus: {\n          // 指令初始化时调用\n          bind() {\n            console.log(\"初始化\");\n          },\n          // 当被绑定的元素插入到 DOM 中时……\n          inserted: function (el, bindings, vnode) {\n            // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n            console.log(bindings);\n            // 判断有无修饰符 如果有 进行操作\n            if (bindings.modifiers.color) {\n              el.style.background = bindings.value;\n            }\n            Vue.nextTick(() => {\n              // 聚焦元素\n              el.focus();\n            });\n          },\n          updata() {\n            console.log(\"更新时触发\");\n          },\n          unbind() {\n            console.log(\"指令销毁 指令和绑定元素解绑时\");\n          },\n        },\n      },\n    },\n  });\n</script>\n```\n","source":"_posts/语雀/irdcbg.md","raw":"---\ntitle: Vue 指令\nurlname: irdcbg\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 115789008\n---\n\n**v-xxx 表示有特定功能，用来操作 dom 元素**\n\\*\\*\n\n- v-text   默认渲染成文本\n- v-html   渲染成 html\n- v-once   只渲染一次，再更改时直接从缓存中获取\n- v-for   遍历 数组、字符串、对象    key : 唯一的值，增加唯一性，避免同一父元素下相同元素复用\n- v-if / v-else / v-else-if   操作 dom 元素 显示/隐藏（一旦条件不成立 dom 元素是不存在的）\n- v-show   更改样式 显示/隐藏\n- v-on     绑定事件 简写 [@xxx ]()\n  - .stop - 调用 event.stopPropagation()。 阻止冒泡\n  - .prevent - 调用 event.preventDefault()。阻止默认行为\n  - .capture - 添加事件侦听器时使用 capture 模式。采取捕获方式\n  - .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 操作是自己才会触发\n  - .once - 只触发一次回调。\n  - .passive - 模式添加侦听器 处理事件函数中不会调用 preventDefault 函数 ，减少额外的监听，不能与    prevent 同时使用\n- v-bind   绑定动态属性 简写 :\n- v-model 双向绑定\n  - .lazy - 取代 input 监听 change 事件,失去焦点 数据更新\n  - .number - 输入字符串转为有效的数字\n  - .trim - 输入首尾空格过滤\n- 自定义指令\n\n**不要把 v-if 和 v-for 同时用在一个元素上，v-for 的优先级比 v-if 更高**\n\n```html\n[ 指令 ]\n\n<div id=\"app\" v-show=\"isShow\">\n  <!-- <span v-text></span> 等同于 {{ msg }}  -->\n  <span v-text=\"msg\"></span>\n  {{ msg }}\n  <div v-html=\"h\"></div>\n  {{ h }}\n  <p v-once>{{ str }}</p>\n  <ul v-if=\"isShow\">\n    <li v-for=\"(item,index) in arr\" key=\"`${index}_a`\">{{ item }}</li>\n  </ul>\n  <div v-else>2333333</div>\n\n  <div v-show=\"isShow\">3333333</div>\n</div>\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      arr: [1, 2, 3, 4, 5],\n      msg: \"我不喜欢这个世界，我只喜欢你！\",\n      h: \"<h1>Serendipity</h1>\",\n      str: \"时光静好 岁月安然\",\n      isShow: false,\n      age: 10,\n      radioVal: \"0\",\n      checkVal: false,\n    },\n  });\n</script>\n\n[ 表单双向绑定 ]\n\n<div class=\"Ipt\" id=\"app\">\n  <p>\n    <!-- <input type=\"text\" :value=\"age\" @input=\"fn\"> -->\n    <!-- 下面这种是上面这种写法的语法糖 -->\n    <input type=\"text\" v-model.lazy=\"age\" />\n    {{ age }}\n  </p>\n\n  <p>\n    <!-- 单选按钮 切换按钮时 radioVal 会切换为对应 value 的值 -->\n    <input type=\"radio\" name=\"\" id=\"\" v-model=\"radioVal\" value=\"0\" />男\n    <input type=\"radio\" name=\"\" id=\"\" v-model=\"radioVal\" value=\"1\" />女 {{\n    radioVal }}\n  </p>\n\n  <p>\n    <!-- 单选框 checkVal 根据 true 和 false 判断是否选中 -->\n    <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"checkVal\" />\n    {{ checkVal }}\n  </p>\n\n  <p>\n    <!-- 复选框 会把 选中的 value 值 放入到 v-model 绑定的数据中  -->\n    <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"checkArr\" value=\"吃饭\" />吃饭\n    <input type=\"checkbox\" name=\"\" id=\"\" v-model=\"checkArr\" value=\"睡觉\" />睡觉\n    <input\n      type=\"checkbox\"\n      name=\"\"\n      id=\"\"\n      v-model=\"checkArr\"\n      value=\"打豆豆\"\n    />打豆豆 {{ checkArr }}\n  </p>\n\n  <p>\n    <!-- selectVal 值的获取方式 若 option 有 value 值，则获取 否则 option 里的内容  -->\n    <select name=\"\" id=\"\" v-model=\"selectVal\">\n      <option value=\"0\">杭州</option>\n      <option>厦门</option>\n    </select>\n    {{ selectVal }}\n  </p>\n\n  <p>\n    <!-- 多选下拉菜单  -->\n    <select name=\"\" id=\"\" v-model=\"selectArr\" multiple>\n      <option value=\"0\">杭州</option>\n      <option value=\"1\">合肥</option>\n      <option value=\"3\">厦门</option>\n    </select>\n    {{ selectArr }}\n  </p>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      age: 10,\n      radioVal: \"0\",\n      checkVal: false,\n      checkArr: [],\n      selectVal: 0,\n      selectArr: [],\n    },\n  });\n</script>\n\n[ 事件绑定 ]\n\n<div id=\"app\">\n  <!-- 冒泡: 由内到外   捕获 : 由外到内 -->\n\n  <!-- 采用捕获 ，其他元素还是采用冒泡的方式 -->\n  <!-- <div @click.capture=\"parent\"> -->\n  <div @click=\"parent\">\n    parent\n    <!-- @click.stop 阻止冒泡 -->\n    <div @click.stop=\"son\">\n      son\n      <!-- prevent 阻止默认行为  self 点击自己的时候才会触发 once 只触发一次 passive 表示阻止默认行为 不能与 prevent 同时使用 -->\n      <div @click.self=\"grandSon\">grandSon</div>\n    </div>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {},\n    methods: {\n      // 绑定事件 事件名不要和属性名相同\n      parent() {\n        alert(\"parent\");\n      },\n      son() {\n        alert(\"son\");\n      },\n      grandSon() {\n        alert(\"grandSon\");\n      },\n    },\n  });\n</script>\n\n[ 自定义指令 ]\n\n<!-- 自定义指令 -->\n<div class=\"custom\">\n  <p>\n    <input type=\"text\" v-focus.color=\"col\" />\n  </p>\n</div>\n\n<script>\n  //  `v-focus` 全局自定义指令\n  Vue.directive(\"focus\", {\n    // 指令初始化时调用\n    bind() {\n      console.log(\"初始化\");\n    },\n    // 当被绑定的元素插入到 DOM 中时……\n    inserted: function (el, bindings, vnode) {\n      // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n      console.log(bindings);\n      // 判断有无修饰符 如果有 进行操作\n      if (bindings.modifiers.color) {\n        el.style.background = bindings.value;\n      }\n      Vue.nextTick(() => {\n        // 聚焦元素\n        el.focus();\n      });\n    },\n    updata() {\n      console.log(\"更新时触发\");\n    },\n    unbind() {\n      console.log(\"指令销毁 指令和绑定元素解绑时\");\n    },\n  });\n\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      col: \"red\",\n    },\n    methods: {\n      // 局部自定义指令 只在当前 实例起作用\n      directives: {\n        focus: {\n          // 指令初始化时调用\n          bind() {\n            console.log(\"初始化\");\n          },\n          // 当被绑定的元素插入到 DOM 中时……\n          inserted: function (el, bindings, vnode) {\n            // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n            console.log(bindings);\n            // 判断有无修饰符 如果有 进行操作\n            if (bindings.modifiers.color) {\n              el.style.background = bindings.value;\n            }\n            Vue.nextTick(() => {\n              // 聚焦元素\n              el.focus();\n            });\n          },\n          updata() {\n            console.log(\"更新时触发\");\n          },\n          unbind() {\n            console.log(\"指令销毁 指令和绑定元素解绑时\");\n          },\n        },\n      },\n    },\n  });\n</script>\n```\n","slug":"语雀/irdcbg","published":1,"updated":"2022-03-03T11:26:07.574Z","_id":"cl0awjjpb000l081b8g0u1nie","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>v-xxx 表示有特定功能，用来操作 dom 元素</strong><br>**</p>\n<ul>\n<li>v-text   默认渲染成文本</li>\n<li>v-html   渲染成 html</li>\n<li>v-once   只渲染一次，再更改时直接从缓存中获取</li>\n<li>v-for   遍历 数组、字符串、对象    key : 唯一的值，增加唯一性，避免同一父元素下相同元素复用</li>\n<li>v-if / v-else / v-else-if   操作 dom 元素 显示/隐藏（一旦条件不成立 dom 元素是不存在的）</li>\n<li>v-show   更改样式 显示/隐藏</li>\n<li>v-on     绑定事件 简写 <a href=\"\">@xxx </a><ul>\n<li>.stop - 调用 event.stopPropagation()。 阻止冒泡</li>\n<li>.prevent - 调用 event.preventDefault()。阻止默认行为</li>\n<li>.capture - 添加事件侦听器时使用 capture 模式。采取捕获方式</li>\n<li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 操作是自己才会触发</li>\n<li>.once - 只触发一次回调。</li>\n<li>.passive - 模式添加侦听器 处理事件函数中不会调用 preventDefault 函数 ，减少额外的监听，不能与    prevent 同时使用</li>\n</ul>\n</li>\n<li>v-bind   绑定动态属性 简写 :</li>\n<li>v-model 双向绑定<ul>\n<li>.lazy - 取代 input 监听 change 事件,失去焦点 数据更新</li>\n<li>.number - 输入字符串转为有效的数字</li>\n<li>.trim - 输入首尾空格过滤</li>\n</ul>\n</li>\n<li>自定义指令</li>\n</ul>\n<p><strong>不要把 v-if 和 v-for 同时用在一个元素上，v-for 的优先级比 v-if 更高</strong></p>\n<pre><code class=\"html\">[ 指令 ]\n\n&lt;div id=&quot;app&quot; v-show=&quot;isShow&quot;&gt;\n  &lt;!-- &lt;span v-text&gt;&lt;/span&gt; 等同于 &#123;&#123; msg &#125;&#125;  --&gt;\n  &lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;\n  &#123;&#123; msg &#125;&#125;\n  &lt;div v-html=&quot;h&quot;&gt;&lt;/div&gt;\n  &#123;&#123; h &#125;&#125;\n  &lt;p v-once&gt;&#123;&#123; str &#125;&#125;&lt;/p&gt;\n  &lt;ul v-if=&quot;isShow&quot;&gt;\n    &lt;li v-for=&quot;(item,index) in arr&quot; key=&quot;`$&#123;index&#125;_a`&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div v-else&gt;2333333&lt;/div&gt;\n\n  &lt;div v-show=&quot;isShow&quot;&gt;3333333&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      arr: [1, 2, 3, 4, 5],\n      msg: &quot;我不喜欢这个世界，我只喜欢你！&quot;,\n      h: &quot;&lt;h1&gt;Serendipity&lt;/h1&gt;&quot;,\n      str: &quot;时光静好 岁月安然&quot;,\n      isShow: false,\n      age: 10,\n      radioVal: &quot;0&quot;,\n      checkVal: false,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n\n[ 表单双向绑定 ]\n\n&lt;div class=&quot;Ipt&quot; id=&quot;app&quot;&gt;\n  &lt;p&gt;\n    &lt;!-- &lt;input type=&quot;text&quot; :value=&quot;age&quot; @input=&quot;fn&quot;&gt; --&gt;\n    &lt;!-- 下面这种是上面这种写法的语法糖 --&gt;\n    &lt;input type=&quot;text&quot; v-model.lazy=&quot;age&quot; /&gt;\n    &#123;&#123; age &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 单选按钮 切换按钮时 radioVal 会切换为对应 value 的值 --&gt;\n    &lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;radioVal&quot; value=&quot;0&quot; /&gt;男\n    &lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;radioVal&quot; value=&quot;1&quot; /&gt;女 &#123;&#123;\n    radioVal &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 单选框 checkVal 根据 true 和 false 判断是否选中 --&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;checkVal&quot; /&gt;\n    &#123;&#123; checkVal &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 复选框 会把 选中的 value 值 放入到 v-model 绑定的数据中  --&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;checkArr&quot; value=&quot;吃饭&quot; /&gt;吃饭\n    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;checkArr&quot; value=&quot;睡觉&quot; /&gt;睡觉\n    &lt;input\n      type=&quot;checkbox&quot;\n      name=&quot;&quot;\n      id=&quot;&quot;\n      v-model=&quot;checkArr&quot;\n      value=&quot;打豆豆&quot;\n    /&gt;打豆豆 &#123;&#123; checkArr &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- selectVal 值的获取方式 若 option 有 value 值，则获取 否则 option 里的内容  --&gt;\n    &lt;select name=&quot;&quot; id=&quot;&quot; v-model=&quot;selectVal&quot;&gt;\n      &lt;option value=&quot;0&quot;&gt;杭州&lt;/option&gt;\n      &lt;option&gt;厦门&lt;/option&gt;\n    &lt;/select&gt;\n    &#123;&#123; selectVal &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 多选下拉菜单  --&gt;\n    &lt;select name=&quot;&quot; id=&quot;&quot; v-model=&quot;selectArr&quot; multiple&gt;\n      &lt;option value=&quot;0&quot;&gt;杭州&lt;/option&gt;\n      &lt;option value=&quot;1&quot;&gt;合肥&lt;/option&gt;\n      &lt;option value=&quot;3&quot;&gt;厦门&lt;/option&gt;\n    &lt;/select&gt;\n    &#123;&#123; selectArr &#125;&#125;\n  &lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      age: 10,\n      radioVal: &quot;0&quot;,\n      checkVal: false,\n      checkArr: [],\n      selectVal: 0,\n      selectArr: [],\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n\n[ 事件绑定 ]\n\n&lt;div id=&quot;app&quot;&gt;\n  &lt;!-- 冒泡: 由内到外   捕获 : 由外到内 --&gt;\n\n  &lt;!-- 采用捕获 ，其他元素还是采用冒泡的方式 --&gt;\n  &lt;!-- &lt;div @click.capture=&quot;parent&quot;&gt; --&gt;\n  &lt;div @click=&quot;parent&quot;&gt;\n    parent\n    &lt;!-- @click.stop 阻止冒泡 --&gt;\n    &lt;div @click.stop=&quot;son&quot;&gt;\n      son\n      &lt;!-- prevent 阻止默认行为  self 点击自己的时候才会触发 once 只触发一次 passive 表示阻止默认行为 不能与 prevent 同时使用 --&gt;\n      &lt;div @click.self=&quot;grandSon&quot;&gt;grandSon&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;&#125;,\n    methods: &#123;\n      // 绑定事件 事件名不要和属性名相同\n      parent() &#123;\n        alert(&quot;parent&quot;);\n      &#125;,\n      son() &#123;\n        alert(&quot;son&quot;);\n      &#125;,\n      grandSon() &#123;\n        alert(&quot;grandSon&quot;);\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n\n[ 自定义指令 ]\n\n&lt;!-- 自定义指令 --&gt;\n&lt;div class=&quot;custom&quot;&gt;\n  &lt;p&gt;\n    &lt;input type=&quot;text&quot; v-focus.color=&quot;col&quot; /&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  //  `v-focus` 全局自定义指令\n  Vue.directive(&quot;focus&quot;, &#123;\n    // 指令初始化时调用\n    bind() &#123;\n      console.log(&quot;初始化&quot;);\n    &#125;,\n    // 当被绑定的元素插入到 DOM 中时……\n    inserted: function (el, bindings, vnode) &#123;\n      // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n      console.log(bindings);\n      // 判断有无修饰符 如果有 进行操作\n      if (bindings.modifiers.color) &#123;\n        el.style.background = bindings.value;\n      &#125;\n      Vue.nextTick(() =&gt; &#123;\n        // 聚焦元素\n        el.focus();\n      &#125;);\n    &#125;,\n    updata() &#123;\n      console.log(&quot;更新时触发&quot;);\n    &#125;,\n    unbind() &#123;\n      console.log(&quot;指令销毁 指令和绑定元素解绑时&quot;);\n    &#125;,\n  &#125;);\n\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      col: &quot;red&quot;,\n    &#125;,\n    methods: &#123;\n      // 局部自定义指令 只在当前 实例起作用\n      directives: &#123;\n        focus: &#123;\n          // 指令初始化时调用\n          bind() &#123;\n            console.log(&quot;初始化&quot;);\n          &#125;,\n          // 当被绑定的元素插入到 DOM 中时……\n          inserted: function (el, bindings, vnode) &#123;\n            // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n            console.log(bindings);\n            // 判断有无修饰符 如果有 进行操作\n            if (bindings.modifiers.color) &#123;\n              el.style.background = bindings.value;\n            &#125;\n            Vue.nextTick(() =&gt; &#123;\n              // 聚焦元素\n              el.focus();\n            &#125;);\n          &#125;,\n          updata() &#123;\n            console.log(&quot;更新时触发&quot;);\n          &#125;,\n          unbind() &#123;\n            console.log(&quot;指令销毁 指令和绑定元素解绑时&quot;);\n          &#125;,\n        &#125;,\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><strong>v-xxx 表示有特定功能，用来操作 dom 元素</strong><br>**</p>\n<ul>\n<li>v-text   默认渲染成文本</li>\n<li>v-html   渲染成 html</li>\n<li>v-once   只渲染一次，再更改时直接从缓存中获取</li>\n<li>v-for   遍历 数组、字符串、对象    key : 唯一的值，增加唯一性，避免同一父元素下相同元素复用</li>\n<li>v-if / v-else / v-else-if   操作 dom 元素 显示/隐藏（一旦条件不成立 dom 元素是不存在的）</li>\n<li>v-show   更改样式 显示/隐藏</li>\n<li>v-on     绑定事件 简写 <a href=\"\">@xxx </a><ul>\n<li>.stop - 调用 event.stopPropagation()。 阻止冒泡</li>\n<li>.prevent - 调用 event.preventDefault()。阻止默认行为</li>\n<li>.capture - 添加事件侦听器时使用 capture 模式。采取捕获方式</li>\n<li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 操作是自己才会触发</li>\n<li>.once - 只触发一次回调。</li>\n<li>.passive - 模式添加侦听器 处理事件函数中不会调用 preventDefault 函数 ，减少额外的监听，不能与    prevent 同时使用</li>\n</ul>\n</li>\n<li>v-bind   绑定动态属性 简写 :</li>\n<li>v-model 双向绑定<ul>\n<li>.lazy - 取代 input 监听 change 事件,失去焦点 数据更新</li>\n<li>.number - 输入字符串转为有效的数字</li>\n<li>.trim - 输入首尾空格过滤</li>\n</ul>\n</li>\n<li>自定义指令</li>\n</ul>\n<p><strong>不要把 v-if 和 v-for 同时用在一个元素上，v-for 的优先级比 v-if 更高</strong></p>\n<pre><code class=\"html\">[ 指令 ]\n\n&lt;div id=&quot;app&quot; v-show=&quot;isShow&quot;&gt;\n  &lt;!-- &lt;span v-text&gt;&lt;/span&gt; 等同于 &#123;&#123; msg &#125;&#125;  --&gt;\n  &lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;\n  &#123;&#123; msg &#125;&#125;\n  &lt;div v-html=&quot;h&quot;&gt;&lt;/div&gt;\n  &#123;&#123; h &#125;&#125;\n  &lt;p v-once&gt;&#123;&#123; str &#125;&#125;&lt;/p&gt;\n  &lt;ul v-if=&quot;isShow&quot;&gt;\n    &lt;li v-for=&quot;(item,index) in arr&quot; key=&quot;`$&#123;index&#125;_a`&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div v-else&gt;2333333&lt;/div&gt;\n\n  &lt;div v-show=&quot;isShow&quot;&gt;3333333&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      arr: [1, 2, 3, 4, 5],\n      msg: &quot;我不喜欢这个世界，我只喜欢你！&quot;,\n      h: &quot;&lt;h1&gt;Serendipity&lt;/h1&gt;&quot;,\n      str: &quot;时光静好 岁月安然&quot;,\n      isShow: false,\n      age: 10,\n      radioVal: &quot;0&quot;,\n      checkVal: false,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n\n[ 表单双向绑定 ]\n\n&lt;div class=&quot;Ipt&quot; id=&quot;app&quot;&gt;\n  &lt;p&gt;\n    &lt;!-- &lt;input type=&quot;text&quot; :value=&quot;age&quot; @input=&quot;fn&quot;&gt; --&gt;\n    &lt;!-- 下面这种是上面这种写法的语法糖 --&gt;\n    &lt;input type=&quot;text&quot; v-model.lazy=&quot;age&quot; /&gt;\n    &#123;&#123; age &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 单选按钮 切换按钮时 radioVal 会切换为对应 value 的值 --&gt;\n    &lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;radioVal&quot; value=&quot;0&quot; /&gt;男\n    &lt;input type=&quot;radio&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;radioVal&quot; value=&quot;1&quot; /&gt;女 &#123;&#123;\n    radioVal &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 单选框 checkVal 根据 true 和 false 判断是否选中 --&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;checkVal&quot; /&gt;\n    &#123;&#123; checkVal &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 复选框 会把 选中的 value 值 放入到 v-model 绑定的数据中  --&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;checkArr&quot; value=&quot;吃饭&quot; /&gt;吃饭\n    &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot; v-model=&quot;checkArr&quot; value=&quot;睡觉&quot; /&gt;睡觉\n    &lt;input\n      type=&quot;checkbox&quot;\n      name=&quot;&quot;\n      id=&quot;&quot;\n      v-model=&quot;checkArr&quot;\n      value=&quot;打豆豆&quot;\n    /&gt;打豆豆 &#123;&#123; checkArr &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- selectVal 值的获取方式 若 option 有 value 值，则获取 否则 option 里的内容  --&gt;\n    &lt;select name=&quot;&quot; id=&quot;&quot; v-model=&quot;selectVal&quot;&gt;\n      &lt;option value=&quot;0&quot;&gt;杭州&lt;/option&gt;\n      &lt;option&gt;厦门&lt;/option&gt;\n    &lt;/select&gt;\n    &#123;&#123; selectVal &#125;&#125;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n    &lt;!-- 多选下拉菜单  --&gt;\n    &lt;select name=&quot;&quot; id=&quot;&quot; v-model=&quot;selectArr&quot; multiple&gt;\n      &lt;option value=&quot;0&quot;&gt;杭州&lt;/option&gt;\n      &lt;option value=&quot;1&quot;&gt;合肥&lt;/option&gt;\n      &lt;option value=&quot;3&quot;&gt;厦门&lt;/option&gt;\n    &lt;/select&gt;\n    &#123;&#123; selectArr &#125;&#125;\n  &lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      age: 10,\n      radioVal: &quot;0&quot;,\n      checkVal: false,\n      checkArr: [],\n      selectVal: 0,\n      selectArr: [],\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n\n[ 事件绑定 ]\n\n&lt;div id=&quot;app&quot;&gt;\n  &lt;!-- 冒泡: 由内到外   捕获 : 由外到内 --&gt;\n\n  &lt;!-- 采用捕获 ，其他元素还是采用冒泡的方式 --&gt;\n  &lt;!-- &lt;div @click.capture=&quot;parent&quot;&gt; --&gt;\n  &lt;div @click=&quot;parent&quot;&gt;\n    parent\n    &lt;!-- @click.stop 阻止冒泡 --&gt;\n    &lt;div @click.stop=&quot;son&quot;&gt;\n      son\n      &lt;!-- prevent 阻止默认行为  self 点击自己的时候才会触发 once 只触发一次 passive 表示阻止默认行为 不能与 prevent 同时使用 --&gt;\n      &lt;div @click.self=&quot;grandSon&quot;&gt;grandSon&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;&#125;,\n    methods: &#123;\n      // 绑定事件 事件名不要和属性名相同\n      parent() &#123;\n        alert(&quot;parent&quot;);\n      &#125;,\n      son() &#123;\n        alert(&quot;son&quot;);\n      &#125;,\n      grandSon() &#123;\n        alert(&quot;grandSon&quot;);\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n\n[ 自定义指令 ]\n\n&lt;!-- 自定义指令 --&gt;\n&lt;div class=&quot;custom&quot;&gt;\n  &lt;p&gt;\n    &lt;input type=&quot;text&quot; v-focus.color=&quot;col&quot; /&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  //  `v-focus` 全局自定义指令\n  Vue.directive(&quot;focus&quot;, &#123;\n    // 指令初始化时调用\n    bind() &#123;\n      console.log(&quot;初始化&quot;);\n    &#125;,\n    // 当被绑定的元素插入到 DOM 中时……\n    inserted: function (el, bindings, vnode) &#123;\n      // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n      console.log(bindings);\n      // 判断有无修饰符 如果有 进行操作\n      if (bindings.modifiers.color) &#123;\n        el.style.background = bindings.value;\n      &#125;\n      Vue.nextTick(() =&gt; &#123;\n        // 聚焦元素\n        el.focus();\n      &#125;);\n    &#125;,\n    updata() &#123;\n      console.log(&quot;更新时触发&quot;);\n    &#125;,\n    unbind() &#123;\n      console.log(&quot;指令销毁 指令和绑定元素解绑时&quot;);\n    &#125;,\n  &#125;);\n\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      col: &quot;red&quot;,\n    &#125;,\n    methods: &#123;\n      // 局部自定义指令 只在当前 实例起作用\n      directives: &#123;\n        focus: &#123;\n          // 指令初始化时调用\n          bind() &#123;\n            console.log(&quot;初始化&quot;);\n          &#125;,\n          // 当被绑定的元素插入到 DOM 中时……\n          inserted: function (el, bindings, vnode) &#123;\n            // el 绑定的元素,bindings 指令的参数,vnode 虚拟节点\n\n            console.log(bindings);\n            // 判断有无修饰符 如果有 进行操作\n            if (bindings.modifiers.color) &#123;\n              el.style.background = bindings.value;\n            &#125;\n            Vue.nextTick(() =&gt; &#123;\n              // 聚焦元素\n              el.focus();\n            &#125;);\n          &#125;,\n          updata() &#123;\n            console.log(&quot;更新时触发&quot;);\n          &#125;,\n          unbind() &#123;\n            console.log(&quot;指令销毁 指令和绑定元素解绑时&quot;);\n          &#125;,\n        &#125;,\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n"},{"title":"正则-范围","urlname":"lfqmon","date":"2022-03-01T08:39:32.000Z","abbrlink":2639296491,"_content":"\n","source":"_posts/语雀/lfqmon.md","raw":"---\ntitle: 正则-范围\nurlname: lfqmon\ndate: '2022-03-01 16:39:32 +0800'\ntags: []\ncategories: []\nabbrlink: 2639296491\n---\n\n","slug":"语雀/lfqmon","published":1,"updated":"2022-03-03T11:26:07.575Z","_id":"cl0awjjpb000m081bh03rgh2n","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"前端面试题总结：JavaScript","urlname":"js","date":"2020-01-02T02:24:30.000Z","abbrlink":812704106,"_content":"\n## 1. ES6 的新特性\n\n- **let (声明变量\\*\\***)\\*\\*\n- **const (声明常量\\*\\***,\\***\\*常量不能修改的量)**\n- **class (\\*\\***创建类\\***\\*) **\n- **import / export (基于 \\*\\***ES6 \\***\\*的模块规范创建导入\\*\\***/\\***\\*导出模块\\*\\***(\\***\\*文件\\*\\***/\\***\\*组件\\*\\***))\\*\\*\n- **new set (数组去重\\*\\***)\\*\\*\n- **Symbol (唯一的值\\*\\***) \\*\\* var a = Symbol('qqq')\n- **...ary (展开运算符、剩余运算符\\*\\***)\\*\\*\n- **${}\\*\\***  模板字符串\\*\\*\n- **解构赋值\\*\\***  let {a} = obj; let [b] = ary\\*\\*\n- **for of 循环**\n- **()=>{} 箭头函数**\n- **数组新增方法：**some every  filter  reduce\n  ...\n- **对象新增方法：** Object.assign() \n  Object.values()  Object.keys()  Object.create()\n- ...\n\n### 1.1 var、let、const 的区别\n\n1. let 和 const 声明变量不存在变量提升，如果要使用这个变量，我们需要在变量定义之后使用;\n1. let 和 const 不能重复声明变量，如果重复声明会报错;\n1. 用 let\n   和 const 在全局声明变量不会给 window 增加属性;\n1. let 和 const 出现在代码块中，会把代码块(字面量声明对象除外)变成块级作用域,并且出现暂时性死区\n\n### 1.2 箭头函数与普通函数的区别：\n\n1. 箭头函数是匿名函数，不能作为构造函数，不能使用 new\n1. 箭头函数没有原型属性\n1. this 指向不同，箭头函数的 this 是定义时所在的对象，普通函数看前面有没有, .点前面是谁 this 就是谁,没有.就是 window\n1. 不可以使用 arguments 对象，该对象在函数体内不存在。\n\n---\n\n## 2. JS 的数据类型：\n\n### 2.1 基本数据类型\n\n- **number** 数字；\n- **boolean** 布尔值 :有两个值 true、false ；\n- **string **字符串\n- **null **空对象；\n- **undefined **未定义的值(很多浏览器的初始值是 undefined)\n- **Sy\\*\\***mbol()\\*\\* 产生一个唯一的值,和谁都不重复\n\n**[ null \\*\\***和 undefined 的区别: ]\\*\\*\n\n- null 是一个表示\"无\"的对象，转为数值时为 0\n- undefined 是一个表示\"无\"的原始值，转为数值时为 NaN\n- 当声明的变量还未被初始化时，变量的默认值为\n  undefined\n- null 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象\n\n**undefined\\*\\*** \\***\\*表示 “缺少值”，就是此处应该有一个值，但是还没有定义。**\n**典型用法是：**\n  1. 变量被声明了，但没有赋值时，就等于 undefined\n  2. 调用函数时，应该提供的参数没有提供，该参数等于 undefined\n  3. 对象没有赋值的属性，该属性的值为 undefined\n  4. 函数没有返回值时，默认返回 undefined \n**null\\*\\*** \\***\\*表示“没有对象”，即该处不应该有值。**\n**典型用法是：**\n  1. 作为函数的参数，表示该函数的参数不是对象\n  2. 作为对象原型链的终点\n\n### 2.2 引用数据类型:\n\n- **对象**\n  - 普通对象\n  - 数组对象\n  - 正则对象(匹配字符串的规则)\n  - 日期对象\n  - 函数对象\n  - ...\n\n**[ 对象的存储过程: ]**\n\n1. 开辟一个空间地址\n2. 把键值对存储到这个空间地址的堆内存中\n3. 把这个对象指针赋值给变量名\n\n```javascript\nlet obj = {\n  a: 1,\n  fn: (function (val) {\n    // 赋给fn的是自执行函数的执行结果\n    也就是一个undefined;\n    // 该自执行函数只会执行一次\n    console.log(val);\n  })(obj.a),\n};\nlet obj2 = obj; // 两者代表了同一个地址；\n// 获取属性的值 obj.fn 或者 obj['fn']\n// 新增属性： obj.c = 100 或者 obj['c'] = 100\n// 真删除 delete obj.a (在严格模式下不支持该方法)； 假删除： obj.a = null;\n\n// 引用类型小习题\nlet a = 3;\nlet b = new Number(3);\nlet c = 3;\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);\n//=========================\nconst a = {};\nconst b = { key: \"b\" };\nconst c = { key: \"c\" };\na[b] = 123;\na[c] = 456;\nconsole.log(a[b]);\n```\n\n### 2.3 基本数据类型与引用数据类型的区别\n\n基本数据类型是操作值,引用数据类型操作的是堆内存空间地址，\n\n**布尔值转换: **0 NaN '' null undefined 转化成布尔值是  false，其余的都是  true\n**检验有效数字的方法：**isNaN\n**常用的数据类型检测方式:** typeof constructor instanceof Object.prototype.toString.call()\n\n### 2.4 比较运算符\n\n==  相对比较：会进行默认的类型转化； 若转换之后的值相等，则结果就是  true\n===  绝对比较，值不但要相同、类型也得相同。\n引用数据类型之间的比较，就看是不是同一个地址；\n\n### 2.5 逻辑运算符\n\n||      表示或者,前边成立给前边，前边不成立给后边\n&&  表示并且前边成立给后边，前边不成立给前边\n\n---\n\n## 3. 定义函数的方法\n\n### 3.1 function 声明\n\n```javascript\n//ES5\nfunction getSum(){}\nfunction (){}//匿名函数\n//ES6\n()=>{}\n```\n\n### 3.2 函数表达式\n\n```javascript\n//ES5\nvar getSum = function () {};\n//ES6\nlet getSum = () => {};\n```\n\n### 3.3 构造函数\n\n```javascript\nconst getSum = new Function(\"a\", \"b\", \"return a + b\");\n```\n\n## 4. JS 作用域的理解\n\n**JS 中的作用域分为两种：**\n\n- 全局作用域\n- 函数作用域。\n\n**函数作用域中定义的变量，只能在函数中调用，外界无法访问。**\n**\n没有块级作用域导致了 if 或 for 这样的逻辑语句中定义的变量可以被外界访问，**\n**\n因此 ES6 中新增了 let 和 const 命令来进行块级作用域的声明。**\n\n```javascript\n//循环绑定的问题\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n//作用域链  变量的查找机制\n// 上级作用域  函数在哪里定义的，那么该函数执行形成的作用的上级作用域就是谁\n// 了解了上级作用域， 就比较容易查找变量对应的值\n```\n\n##\n\n## 5.闭包的理解\n\n简单来说闭包就是在函数里面声明函数，本质上说就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量，但是反之不可以，这只是闭包的作用之一，另一个作用，则是保护变量不受外界污染，使其一直存在内存中，在工作中我们还是少使用闭包的好，因为闭包太消耗内存，不到万不得已的时候尽量不使用。\n\n## 6. 数组\n\n### 6.1 数组去重\n\n1、双  for  循环去重\n2、利用对象的属性名不能重复去重\n3、利用  es6  的  Set  不能重复去重\n\n（具体代码自己查）\n\n\n\n### 6.2 数组重组   （将 name 值相同的合并，并去除 age 的属性）\n\n```javascript\nlet ary = [\n  { name: 1, age: 2, number: 1, son: \"son1\" },\n  { name: 2, age: 23, number: 2, son: \"son2\" },\n  { name: 2, age: 22, number: 3, son: \"son3\" },\n  { name: 1, age: 12, number: 4, son: \"son4\" },\n  { name: 1, age: 42, number: 5, son: \"son5\" },\n];\nfn(ary)[\n  // 结果为\n  ({\n    name: 1,\n    list: [\n      { number: 1, son: \"son1\" },\n      { number: 4, son: \"son4\" },\n      { number: 5, son: \"son5\" },\n    ],\n  },\n  {\n    name: 2,\n    list: [\n      { number: 2, son: \"son2\" },\n      { number: 3, son: \"son3\" },\n    ],\n  })\n];\nfunction fn(ary) {\n  let arr = [];\n  ary.forEach((item) => {\n    let bol = arr.some((val) => {\n      if (val.name === item.name) {\n        let obj = {};\n        Object.keys(item).forEach((v) => {\n          if (v != \"name\" && v != \"age\") {\n            obj[v] = item[v];\n          }\n        });\n        val.list.push(obj);\n        return true;\n      }\n    });\n    if (!bol) {\n      let obj = {};\n      Object.keys(item).forEach((v) => {\n        if (v != \"name\" && v != \"age\") {\n          obj[v] = item[v];\n        }\n      });\n      arr.push({ name: item.name, list: [obj] });\n    }\n  });\n  return arr;\n}\nfn(ary);\n```\n\n### 6.3 数组扁平化\n\n```javascript\nvar arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];\n\nfunction flat1(arr) {\n  let temp = [];\n  function fn(ary) {\n    ary.forEach((item) => {\n      if (typeof item == \"object\") {\n        fn(item);\n      } else {\n        temp.push(item);\n      }\n    });\n  }\n  fn(arr);\n  return temp;\n}\n\nfunction flat2() {\n  return [].concat(\n    ...this.map((item) => (Array.isArray(item) ? item.flat2() : [item]))\n  );\n}\n```\n\n![3.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585475146362-3e854784-57e2-40b5-8cad-8a9db11b31af.png#align=left&display=inline&height=620&name=3.png&originHeight=620&originWidth=889&size=433833&status=done&style=none&width=889)\n\n---\n\n## 7. 原型及原型链\n\n### 7.1 原型\n\n- 函数都带有一个 prototype 属性，这是属性是指向构造函数的原型对象，这个对象包含所有实例共享的属性和方法。\n- 原型对象都有一个 constructor 属性，这个属性指向所关联的构造函数。\n- 每个对象都有一个 **proto**  属性[非标准的方法]，这个属性指向构造函数的原型 prototype\n\n### 7.2 原型链\n\n- 当访问实例对象的某个属性时，会先在这个对象本身的属性上查找，如果没有找到，则会\n  通过   **proto**  属性去原型上查找，如果还没有 找到则会在构造函数的原型的 ** proto** 中查找， 这样一层层向上查找就会形成一个作用域链，称为原型链\n\n### 7.3 原型相关习题\n\n**[ 第一题 ]**\n\n```javascript\nfunction Fn() {\n  this.x = 100;\n  this.y = 200;\n  this.getX = function () {\n    console.log(this.x);\n  };\n}\nFn.prototype = {\n  y: 400,\n  getX: function () {\n    console.log(this.x);\n  },\n  getY: function () {\n    console.log(this.y);\n  },\n  sum: function () {\n    console.log(this.x + this.y);\n  },\n};\nvar f1 = new Fn();\nvar f2 = new Fn();\nconsole.log(f1.getX === f2.getX);\nconsole.log(f1.getY === f2.getY);\nconsole.log(f1.__proto__.getY === Fn.prototype.getY);\nconsole.log(f1.__proto__.getX === f2.getX);\nconsole.log(f1.getX === Fn.prototype.getX);\nconsole.log(f1.constructor);\nconsole.log(Fn.prototype.__proto__.constructor);\nf1.getX();\nf1.__proto__.getX();\nf2.getY();\nFn.prototype.getY();\nf1.sum();\nFn.prototype.sum();\n```\n\n**[ 第二题 ]**\n\n```javascript\nfunction Foo() {\n  getName = function () {\n    console.log(1);\n  };\n  return this;\n}\nFoo.getName = function () {\n  console.log(2);\n};\nFoo.prototype.getName = function () {\n  console.log(3);\n};\nvar getName = function () {\n  console.log(4);\n};\nfunction getName() {\n  console.log(5);\n}\n\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nvar a = new Foo.getName(); //\nvar b = new Foo().getName();\nvar c = new new Foo().getName();\nconsole.log(a, b, c);\n```\n\n**[ 第三题 ]**\n\n```javascript\nfunction Person() {\n  this.name = \"zhufeng\";\n}\nPerson.prototype.getName = function () {\n  console.log(this.name);\n  console.log(this.age);\n};\nPerson.prototype.age = 5000;\n\nvar per1 = new Person();\nper1.getName();\nper1.age = 9;\nper1.getName();\nconsole.log(per1.age);\nvar per2 = new Person();\nconsole.log(per2.age);\n```\n\n\n\n###\n\n### 7.4 Object.create 的作用\n\n```javascript\nlet obj = { a: 123 };\nlet o = Object.create(obj);\n//该函数返回了一个新的空对象，但是该空对象的__proto__是指向了obj这个参数\n// 手写Object.create\nfunction create(proto) {\n  function F() {}\n  F.prototype = proto;\n\n  return new F();\n}\n```\n\n\n\n### 7.5 new 的执行过程是怎么回事？\n\nnew 操作符做了这些事：\n\n- 它创建了一个全新的对象\n- 它会被执行  [[Prototype]]（也就是  **proto**）链接\n- 它使  this  指向新创建的对象\n- 通过  new  创建的每个对象将最终被  [[Prototype]]  链接到这个函数的  prototype  对象上\n- 如果函数没有返回对象类型  Object (包含  Functoin, Array, Date, RegExg,\n  Error)，那么  new  表达式中的函数调用将返回该对象引用\n\n**[ 模拟 new ]**\n\n```javascript\nfunction objectFactory() {\n  const obj = new Object();\n  const Constructor = [].shift.call(arguments);\n\n  obj.__proto__ = Constructor.prototype;\n\n  const ret = Constructor.apply(obj, arguments);\n\n  return typeof ret === \"object\" ? ret : obj;\n}\n```\n\n\n\n### 7.6 call, apply, bind 三者的区别？\n\n**[ apply() 方法 ]**\n\\*\\*\n\n- apply() 方法调用一个函数, 其具有一个指定的 this 值，以及作为一个数组（或类似数组的对象）提供的参数 fun.apply(thisArg, [argsArray]\n- apply 和 call\n  基本类似，他们的区别只是传入的参数不同。\n- apply 和 call\n  的区别是 call 方法接受的是若干个参数列表，而 apply\n  接收的是一个包含多个参数的数组。\n\n**[ 模拟 apply ]**\n\\*\\*\n\n```javascript\nFunction.prototype.myapply = function (context, arr) {\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var result;\n  if (!arr) {\n    result = context.fn();\n  } else {\n    var args = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n      args.push(\"arr[\" + i + \"]\");\n    }\n    result = eval(\"context.fn(\" + args + \")\");\n  }\n\n  delete context.fn;\n  return result;\n};\n```\n\n**[ bind() 方法 ]**\n\n- bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。\n\n**[ bind() 方法的实现 ]**\n实现 bind 要做什么\n\n- 返回一个函数，绑定  this，传递预置参数\n- bind 返回的函数可以作为构造函数使用。故作为构造函数时应使得 this 失效，但是传入的参数依然有效\n\n```javascript\n// mdn的实现\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying\nto be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function()\n{},\n        fBound  = function() {\n          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用\n          return fToBind.apply(this instanceof fBound\n                 ? this\n                 : oThis,\n                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    // 维护原型关系\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype;\n    }\n    // 下行的代码使fBound.prototype是fNOP的实例,因此\n    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n```\n\n**[ call() 方法 ]**\n\n- 将函数设为对象的属性\n- 执行  &  删除这个函数\n- 指定  this  到函数并传入给定参数执行函数\n- 如果不传入参数，默认指向为 window\n\n**[ call() 方法的实现 ]**\n\n```javascript\nFunction.prototype.myCall = function (context) {\n  //此处没有考虑context非object情况\n  context.fn = this;\n  let args = [];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    args.push(arguments[i]);\n  }\n  context.fn(...args);\n  let result = context.fn(...args);\n  delete context.fn;\n  return result;\n};\n```\n\n\n\n### 7.7 实现类的继承\n\n类的继承在几年前是重点内容，有 n 种继承方式各有优劣，es6  普及后越来越不重要，那么多种写法有点『回字有四样写法』的意思，如果还想深入理解的去看红宝书即可，我们目前只实现一种最理想的继承方式。\n\n```javascript\nfunction Parent(name) {\n  this.parent = name;\n}\nParent.prototype.say = function () {\n  console.log(`${this.parent}: 你打篮球的样子像kunkun`);\n};\nfunction Child(name, parent) {\n  // 将父类的构造函数绑定在子类上\n  Parent.call(this, parent);\n  this.child = name;\n}\n/** \n 1. 这一步不用Child.prototype =Parent.prototype的原因是怕共享内存，修改父类原型对象就会影响子类\n 2. 不用Child.prototype = new Parent()的原因是会调用2次父类的构造方法（另一次是call），会存在一份多余的父类实例属性\n3.\nObject.create是创建了父类原型的副本，与父类原型完全隔离\n*/\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.say = function () {\n  console.log(`${this.parent}好，我是练习时长两年半的${this.child}`);\n};\n// 注意记得把子类的构造指向子类本身\nChild.prototype.constructor = Child;\nvar parent = new Parent(\"father\");\nparent.say(); // father: 你打篮球的样子像kunkun\nvar child = new Child(\"cxk\", \"father\");\nchild.say(); // father好，我是练习时长两年半的cxk\n```\n\n\n\n### 7.8 谈谈你对  this  指向的理解\n\nthis 的指向，始终坚持一个原理：**this \\*\\***永远指向最后调用它的那个对象\\*\\*\n改变 this 的指向我总结有以下几种方法：\n\n- 使用\n  ES6 的箭头函数\n- 在函数内部使用  _this = this\n- 使用  apply、call、bind\n- new 实例化一个对象\n\n全局作用域下的  this  指向  window\n如果给元素的事件行为绑定函数，那么函数中的  this  指向当前被绑定的那个元素\n函数中的  this，要看函数执行前有没有 . , 有 . 的话，点前面是谁，this  就指向谁，如果没有点，指向  window\n自执行函数中的  this  永远指向  window\n定时器中函数的  this  指向  window\n构造函数中的  this  指向当前的实例\ncall、apply、bind  可以改变函数的  this  指向\n箭头函数中没有  this，如果输出  this，就会输出箭头函数定义时所在的作用域中的  this\n\n---\n\n## 8. DOM\n\n**1).新建节点**\ndocument.createElement(\"元素名\") // 新建一个元素节点\ndocument.createAttribute(\"属性名\") // 新建一个属性节点\ndocument.createTextNode(\"文本内容\") // 创建一个文本节点\ndocument.createDocumentFragment() // 新建一个  DOM  片段\n**2).添加、移除、替换、插入：**\nappendChild() // 向节点的子节点末尾添加新的子节点\nremoverChild() // 移除\nparentNode.replaceChild(newChild, oldChild );用新节点替换父节点中已有的子节点\ninsertBeform() // 在已有的子节点前插入一个新的子节点\n**3).查找**\ndocument.getElementById() // 通过元素  id  查找,唯一性\ndocument.getElementByClassName() // 通过  class  名称查找\ndocument.getElementsByTagName() // 通过标签名称查找\ndocument.getElementsByName() // 通过元素的  Name  属性的值查找\n\n---\n\n### 8.1 DOM 回流、重绘\n\nDOM 回流  (reflow)：页面中的元素增加、删除、大小、位置的改变，会引起浏览器重新计算\n其他元素的位置，这种现象称为  DOM  回流。DOM  回流非常消耗性能，尽量避免  DOM  回流\nDOM 重绘：元素的某些  css  样式如背景色、字体颜色等发生改变时，浏览器需要重新描绘渲 染这个元素，这种现象称为  DOM  重绘。\n\n### 8.2 DOM 操作的读写分离:\n\n在  JS  中把设置样式和获取样式的两种操作分来来写， 设置样式的操作放在一起，读取样式的操作放在一起，这样可以有效的减少  DOM  的回流和重绘；\n\n### 8.3 DOM 事件：\n\n事件的传播机制：先冒泡，然后是目标阶段 然后再去捕获，我们可以利用事件的冒泡来进行事件委托，、也就是可以在父元素上绑定事件，通过事件对象 e 来判断点击的具体元素；可以提供性能；\n我们可以利用的 e.stopPropagation()来阻止冒泡；利用 e.preventDefault()  来阻止默认事件；\n事件中有  0  级事件绑定和  2  级事件绑定\n\n\n\n### 8.4 JS 盒子模型\n\n- // client offset scroll width height left top\n- // clientWidth 内容宽度 + 左右  padding\n- // offsetWidth clientWidth + 左右 border\n- // offsetTop 当前盒子的外边框到上级参照物的内边框的偏移量\n- // offsetParent 上级参照物：有定位的上级（包含 父级，祖父，曾祖父...）元素，所有所有上级都没有定位， 则参照物就是 body\n- // scroll 内容不溢出 等同于 client\n- // 内容溢出时 没有设置  overflow 值是内容宽高 + 上或左  padding\n- // 内容溢出时 有设置  overflow  时 值是内容宽高 + 上下或左右  padding\n- // scrollTop 卷去内容的高度\n- // 13 个属性 只有\n  scrollTop  和  scrollLeft  时可以设置值的， 其他的都是只读属性\n\n## 9. JS 的异步编程\n\n**因为 js 是单线程的。浏览器遇到 etTimeout 和 setInterval 会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码**\n\n常用的方式：setTimeout setIntervel ajax Promise  asyc/await\n\n宏任务 (marcotask) 微任务 (microtask) 的执行顺序：\n\n先执行宏任务，然后在执行微任务；\n\nJS 中的宏任务：setTimeout setIntervel ajax\n\nJS 中的微任务：Promise.then  Promise.catch   await (可以理解成 Promise.then)\n\nJS 的执行顺序是先同步 再异步；同步执行完成之前 异步不会执行\n\nEventLoop 事件循环\n\nEventQueue 事件队列\n\n### 9.1 异步编程相关练习\n\n**[ 第一题 ]**\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nconsole.log(\"script start\");\nsetTimeout(function () {\n  console.log(\"settimeout\");\n}, 0);\nasync1();\nnew Promise(function (resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function () {\n  console.log(\"promise2\");\n});\nconsole.log(\"script end\");\n```\n\n**[ 第二题 ]**\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nconsole.log(\"script start\");\nsetTimeout(function () {\n  console.log(\"settimeout\");\n});\nasync1();\nnew Promise(function (resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function () {\n  console.log(\"promise2\");\n});\nsetImmediate(() => {\n  console.log(\"setImmediate\");\n});\nprocess.nextTick(() => {\n  console.log(\"process\");\n});\nconsole.log(\"script end\");\n```\n\n## 10. 正则\n\n### 10.1 解析 URL Params 为对象\n\n```javascript\nvar str = \"http://www.zhufengpeixun.cn/?lx=1&from=wx&b=12&c=13#qqqq\";\nfunction getParam(url) {\n  var reg = /([?=&]+)=([?=&#]+)/g;\n  let obj = {};\n  url.match(reg).forEach((item) => {\n    let a = item.split(\"=\"); // ['lx','1']\n    obj[a[0]] = a[1];\n  });\n  return obj;\n}\ngetParam(str);\n```\n\n### 10.2 模板引擎实现\n\n```javascript\nlet template = \"我是{{name}}，年龄{{age}}，性别{{sex}}\";\nlet data = {\n  name: \"姓名\",\n  age: 18,\n};\nrender(template, data); // 我是姓名，年龄18，性别undefined\nfunction render(template, data) {\n  const reg = /{{(\\w+)}}/; // 模板字符串正则\n  if (reg.test(template)) {\n    // 判断模板里是否有模板字符串\n    const name = reg.exec(template)[1]; // 查找当前模板里第一个模板字符串的字段\n    template = template.replace(reg, data[name]); // 将第一个模板字符串渲染\n    return render(template, data); // 递归的渲染并返回渲染后的结构\n  }\n  return template; // 如果模板没有模板字符串直接返回\n}\n```\n\n### 10.3 出现次数最多的字符\n\n```javascript\nvar str = \"sfgsdfgsertdgfsdfgsertwegdsfgertewgsdfgsdg\";\nfunction getMax2(str) {\n  str = str.split(\"\").sort().join(\"\"); // 把字符串进行排序\n  let key = \"\",\n    num = 0;\n  str.replace(/(\\w)\\1*/g, function ($0, $1) {\n    if ($0.length > num) {\n      num = $0.length;\n      key = $1;\n    }\n  });\n  return {\n    key,\n    num,\n  };\n}\ngetMax2(str);\n```\n\n### 10.4 千分符的实现\n\n```javascript\n// 100,000,00\n\n//[ 方法1 ]\n\nvar str = \"1234567\"; // 1,234,567\nfunction moneyFormate(str) {\n  str = str.split(\"\").reverse().join(\"\");\n  let s = \"\";\n  for (let i = 0; i < str.length; i++) {\n    i % 3 == 2 ? (s += str[i] + \",\") : (s += str[i]);\n  }\n  s = s.split(\"\").reverse().join(\"\");\n  return s;\n}\nmoneyFormate(str); // 1,234,567\n\n//[ 方法2 ]\n\nvar str = \"1234567\";\nfunction moneyFormate2(str) {\n  let s = \"\";\n  // s = str.replace(/\\d{1,3}(?=(\\d{3})+$)/g,function(a){\n  //     console.log(arguments)\n  //     return a + ','\n  // })\n  s = str.replace(/(\\d{1,3})(?=(\\d{3})+$)/g, \"$1,\");\n  return s;\n}\nmoneyFormate2(str);\n```\n\n---\n\n```javascript\nvar str = \"   sdfgsg   fsgfsd    \";\n// 使用正则去除字符串的首尾空格\n// 以 1 到 多个 空格开头或者结尾的 都替换成空；\nvar res = str.replace(/^ +| +$/g, \"\");\n```\n\n---\n\n## 11. http & ajax\n\n### 11.1 TCP / IP 的三次握手和四次挥手\n\n**三次握手:**\n\n第一次握手：客户端向服务端发送  SYN  码数据包，表示客户端要求和服务端建立连接；\n第二次握手：服务端收到客户端的连接请求后，会发送  ACK  数据包给客户端，表示你的连接请求已经收到，询问客户端是否真的需要建立连接；\n第三次握手：客户端收到  ACK  码以后会检验是否正确，如果正确，客户端会再次发送  ACK  码给服务端，表示确认建立连接； (三次握手都成功以后才会建立连接，然后才会发送数据；)\n\n**四次挥手：**\n\\*\\*\n第一次挥手：当客户端发送数据结束后，会发送  FIN  码数据包给服务端，表示告知服务端客 户端的数据已经传递完了。\n第二次挥手：当服务端收到  FIN  后，会发送  ACK  给客户端，表示服务端已经知道客户端传完\n了。客户端收到 ACK  以后就会把传递数据给服务端的通道关闭；\n第三次挥手：当服务端把响应的数据发送完毕后，会发送一个  FIN  给客户端，告知客户端响 应的数据已经发送完毕；\n第四次挥手：当客户端收到  FIN  后，会发送一个  ACK  码数据包给服务端，告知服务端客户端已\n经知道数据发送完毕；服务端收到  ACK  码后，可以安心的把数据传递通道关闭掉。\n\n### 11.2 http 常用状态码  (http-status-code):\n\n2xx:表示成功\n200 OK 表示所有东西都正常\n204 表示请求成功,但是服务端没有内容给你\n3xx: 表示重定向\n301 永久重定向(当访问一个永久重定向的网站的时候,一个域名被指向一个其他网站,且是永久的)\n302 临时重定向\n304 走缓存(服务端觉得你之前请求过这个东西,而且服务器上的那一份没有发生变化,告诉客户端用缓存 就行)\n\n- 301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了 301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。\n- 302，Fount。临时重定向，但是会在重定向的时候改变 method:\n  把 POST 改成 GET，于是有了 307\n- 307，Temporary Redirect。临时重定向，在重定向时不会改变 method\n\n4xx: 表示客户端错误\n400 参数传递不当,导致的错误\n401 权限不够导致的\n403 服务端已经理解请求,但是拒绝响应\n404 客户端请求的资源或者数据不存在(发现请求接口  404,  有两种情况一种是咱们写错接口了或者服 务端还没部署)\n5xx: 表示服务端错误(遇到以 5 开头的错误去找服务端错误)\n500 服务端内部错误\n502 网关错误\n\n### 11.3 从浏览器输入  URL  按回车到页面显示都发生了什么? \n\n- 浏览器根据  URL  进行  DNS  查询\n- 首先从  DNS  缓存中查询\n- 若未在缓存中找到，则不停的向上一级级请求  DNS  服务器\n- 取得  IP  地址，建立  TCP  连接\n- 构造  HTTP  请求报\n- 添加一些  HTTP  首部\n- 根据同源政策添加  cookie\n- 在  TCP  连接上发送  HTTP  报文，等待响应\n- 服务器处理  HTTP  请求报文，返回响应  HTTP  响应报文\n- 浏览器处理服务器返回的  HTTP  响应报文，若为  HTML  则渲染页面，不包括脚本的简单渲染流程如下\n\n  1.   解析  DOM、CSSOM\n  2.   根据  DOM、CSSOM  计算  render tree\n  3.   根据  render tree  进行  layout\n  4.   paint，至此，用户可以看到页面了\n\n### 11.4 HTTPS 和  HTTP  的区别主要如下?    \n\nHTTPS 协议是由  SSL+HTTP  协议构建的可进行加密传输、身份认证的网络协议，要比  http  协议安全。\n1、https  协议需要到  ca  申请证书，一般免费证书较少，因而需要一定费用。\n2、http  是超文本传输协议，信息是明文传输，https  则是具有安全性的  ssl  加密传输协议。\n3、http  和  https  使用的是完全不同的连接方式，用的端口也不一样，前者是  80，后者是  443。\n4、http  的连接很简单，是无状态的；HTTPS  协议是由  SSL + HTTP  协议构建的可进行加密传输、身份认证的网络协议，比  http  协议安全。\n\n**https \\*\\***主要解决三个安全问题：\\*\\*\n\n- 内容隐私\n- 防篡改\n- 确认对方身份\n\nhttps 并不是直接通过非对称加密传输过程，而是有握手过程，握手过程主要是和服务器做通讯，生成私有秘钥，最后通过该秘钥对称加密传输数据。还有验证证书的正确性。\n证书验证过程保证了对方是合法的，并且中间人无法通过伪造证书方式进行攻击。\n\n\n\n### 11.5 浏览器缓存？\n\n强缓存：不会向服务器发送请求，直接从缓存中读取资源，在  chrome  控制台的  Network  选项中可以看到该请求返回  200  的状态码，并且  Size  显示  from disk cache  或  from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。\n协商缓存：就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：\n协商缓存生效，返回  304  和  Not Modified\n协商缓存失效，返回  200  和请求结果协商缓存可以通过设置两种\nHTTP Header 实现：Last-Modified 和\nETag 。\n**强制缓存优先于协商缓存进行，若强制缓存  (Expires  和  Cache-Control)  生效则直接使用缓存，若不生效则进行协商缓存  (Last-Modified / If-Modified-Since  和  Etag /\nIf-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回  200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回  304，继续使用缓存**。\n\n### 11.6 ajax 四步\n\n1. 创建\n   XMLHttpRequest 对象,也就是创建一个异步调用对象\n2. 创建一个新的 HTTP 请求,并指定该 HTTP 请求的方法、URL 及验证信息\n3. 设置响应 HTTP 请求状态变化的函数\n4. 发送 HTTP\n   请求\n   \\*\\* \\*\\*\n\n### 11.7 你使用过哪些  ajax?\n\n从原生的  XHR  到  jquery ajax，再到现在的  axios  和  fetch。\naxios 和  fetch  都是基于  Promise  的，一般我们在使用时都会进行二次封装\n讲到  fetch  跟  jquery ajax  的区别，这也是它很奇怪的地方\n当接收到一个代表错误的 HTTP 状态码时，从 fetch()  返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或\n500。相反，它会将 Promise 状态标记为\nresolve （但是会将 resolve 的返回值的 ok 属性设置为 false ）， 仅当网络故障时或请求被阻止时，才会标记为 reject。\n默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）\n\n### 11.8 一般我们再拦截器中都会写什么代码？\n\n请求拦截中我们一半会把  token  写在这里，这样的话就不用每次请求都要写这个参数\n还会做一个数据格式的处理，假如某个参数需要统一处理 可以放在这里，\n响应拦截一半会做一个判断 请求失败的话直接调用失败提示框 这样不用每个接口都写同样的代码\n也会再  return  时 return reponse.data;  这样就可以不用每个数据接受的时候都加一个  data.data\n\n### 11.9 get  请求和  post  请求有什么区别？什么时候使用  post? \n\n**GET：**一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符  \n**POST：**一般用于修改服务器上的资源，对所发送的信息没有限制  \n在以下情况中，请使用 POST 请求： 1. 无法使用缓存文件（更新服务器上的文件或数据库） 2. 向服务器发送大量数据（POST 没有数据量限制） 3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\n实际上  HTTP 协议从未规定 GET / POST 的请求长度限制是多少。对  get  请求参数的限制是来源与浏览器或  web  服务器，浏览器或  web  服务器限制了  url  的长度。为了明确这个概念，我们必须再次强调下面几点:\n1、HTTP\n协议 未规定 GET 和  POST  的长度限制\n2、GET  的最大长度显示是因为\n浏览器和 web  服务器限制了 URI  的长度\n3、不同的浏览器和  WEB  服务器，限制的最大长度不一样\n4、要支持  IE，则最大长度为  2083byte，若只支持  Chrome，则最大长度 8182byt\n\n### 11.10 Cookie 和 Session 的区别?\n\n- **安全性：** Session 比\n  Cookie 安全，Session 是存储在服务器端的，Cookie\n  是存储在客户端的。\n- **存取值的类型不同**：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。\n- **有效期不同：** Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。\n- **存储大小不同：**  单个\n  Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。\n\n![6.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483449621-708b077e-a6f7-4162-bfa2-6082a2761c3f.png#align=left&display=inline&height=749&name=6.png&originHeight=749&originWidth=1247&size=108475&status=done&style=none&width=1247)\n\n### 11.11 Token 相关？\n\n1.   客户端使用用户名跟密码请求登录\n2.   服务端收到请求，去验证用户名与密码\n3.   验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端\n4.   客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里\n5.   客户端每次向服务端请求资源的时候需要带着服务端签发的 token\n6.   服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据\n·      **每一次请求都需要携带 token，需要把 token 放到 HTTP 的\nHeader 里**\n·      **基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库**\n·      **token \\*\\***完全由应用管理，所以它可以避开同源策略\\*\\*\n\n\n\n### 11.12  同源策略\n\n同源策略是客户端脚本（尤其是 Javascript）的重要的安全度量标准。其目的是防止某个文档或脚本从多个不同源装载。   这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。  \n **为什么要有同源限制？**\n我们举例说明：比如一个黑客程序，他利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容，这样用户名，密码就轻松到手了\n\n### 11.13 工作中是怎么解决跨域的？\n\n**1.jsonp**\n\n1. JSONP 原理\n   **利用  \\*\\***<script>\\***\\* \\*\\***标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP  请求一定需要对方的服务器做支持才可以。\\*\\*\n\n**2.cors**\nCORS 需要浏览器和后端同时支持。浏览器会自动进行 CORS 通信，实现\nCORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。\n**3.proxy \\*\\***代理  \\*\\*（适用于本地开发）\n。。。（其他的方式 可自行去掘金上搜 9  种跨域的方式）\n\n- §  CORS 支持所有类型的  HTTP  请求，是跨域  HTTP  请求的根本解决方案\n- §  JSONP 只支持  GET  请求，JSONP  的优势在于支持老式浏览器，以及可以向不支持  CORS  的网站请求数据。\n- §  不管是  Node  中间件代理还是  nginx  反向代理，主要是通过同源策略对服务器不加限制。\n- §  日常工作中，用得比较多的跨域方案是  cors  和  nginx  反向代理\n\n### 11.14 http1 与  http\n\n### ![7.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483526340-043eea87-483e-49b2-aef2-e0863666764e.png#align=left&display=inline&height=525&name=7.png&originHeight=525&originWidth=935&size=74104&status=done&style=none&width=935)\n\n---\n\n## 12. 编程题\n\n### 12.1 \n\n![8 (2).png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483772793-4d2a1c89-3368-4138-9d9e-addfe2e23e7f.png#align=left&display=inline&height=338&name=8%20%282%29.png&originHeight=338&originWidth=628&size=230392&status=done&style=none&width=628)\n\n![9.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483788143-ba516091-fe6f-4385-b28c-6824b1884505.png#align=left&display=inline&height=195&name=9.png&originHeight=195&originWidth=848&size=241762&status=done&style=none&width=848)\n\n## 12.2  JavaScript 22 道高频手写面试题及答案\n\n- [实现防抖函数（debounce）](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-1)\n- [实现节流函数（throttle）](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-2)\n- [深克隆（deepclone）](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-3)\n- [实现 Event(event bus)](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-4)\n- [实现 instanceOf](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-5)\n- [模拟 new](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-6)\n- [实现一个 call](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-7)\n- [实现 apply  方法](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-8)\n- [实现 bind](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-9)\n- [模拟 Object.create](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-10)\n- [实现类的继承](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-11)\n- [实现 JSON.parse](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-12)\n- [实现 Promise](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-13)\n- [解析 URL\n  Params 为对象](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-14)\n- [模板引擎实现](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-15)\n- [转化为驼峰命名](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-16)\n- [查找字符串中出现最多的字符和个数](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-17)\n- [字符串查找](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-18)\n- [实现千位分隔符](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-19)\n- [判断是否是电话号码](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-20)\n- [验证是否是邮箱](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-21)\n- [验证是否是身份证](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-22)\n\n**总链接：      ** [https://juejin.im/post/5e100cdef265da5d75243229](https://juejin.im/post/5e100cdef265da5d75243229)\n\n## 13. 前端 100 问\n\n**访问链接\\*\\***：    \\*\\*[https://juejin.im/post/5d23e750f265da1b855c7bbe](https://juejin.im/post/5d23e750f265da1b855c7bbe)\n\n## 14.XSS  和  CSRF  区别\n\n**跨站脚本攻击**（Cross Site Scripting)，为了不和层叠样式表 CSS 混淆，故将跨站脚本攻击缩写为 XSS。恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。\n**跨站请求伪造**（Cross-site request forgery），是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。\n\n**区别：**\n\\*\\*\n\n- 原理不同，CSRF  是利用网站 A 本身的漏洞，去请求网站  A  的  api；XSS  是向目标网站注入  JS  代码，然后执行  JS 里的代码。\n- CSRF  需要用户先登录目标网站获取  cookie，而  XSS  不需要登录\n- CSRF  的目标是用户，XSS  的目标是服务器\n- XSS 是利用合法用户获取其信息，而  CSRF  是伪造成合法用户发起请求\n\n---\n\n以上更新于 2020 年 3 月 29 日\n\n---\n","source":"_posts/语雀/js.md","raw":"---\ntitle: 前端面试题总结：JavaScript\nurlname: js\ndate: '2020-01-02 10:24:30 +0800'\ntags: []\ncategories: []\nabbrlink: 812704106\n---\n\n## 1. ES6 的新特性\n\n- **let (声明变量\\*\\***)\\*\\*\n- **const (声明常量\\*\\***,\\***\\*常量不能修改的量)**\n- **class (\\*\\***创建类\\***\\*) **\n- **import / export (基于 \\*\\***ES6 \\***\\*的模块规范创建导入\\*\\***/\\***\\*导出模块\\*\\***(\\***\\*文件\\*\\***/\\***\\*组件\\*\\***))\\*\\*\n- **new set (数组去重\\*\\***)\\*\\*\n- **Symbol (唯一的值\\*\\***) \\*\\* var a = Symbol('qqq')\n- **...ary (展开运算符、剩余运算符\\*\\***)\\*\\*\n- **${}\\*\\***  模板字符串\\*\\*\n- **解构赋值\\*\\***  let {a} = obj; let [b] = ary\\*\\*\n- **for of 循环**\n- **()=>{} 箭头函数**\n- **数组新增方法：**some every  filter  reduce\n  ...\n- **对象新增方法：** Object.assign() \n  Object.values()  Object.keys()  Object.create()\n- ...\n\n### 1.1 var、let、const 的区别\n\n1. let 和 const 声明变量不存在变量提升，如果要使用这个变量，我们需要在变量定义之后使用;\n1. let 和 const 不能重复声明变量，如果重复声明会报错;\n1. 用 let\n   和 const 在全局声明变量不会给 window 增加属性;\n1. let 和 const 出现在代码块中，会把代码块(字面量声明对象除外)变成块级作用域,并且出现暂时性死区\n\n### 1.2 箭头函数与普通函数的区别：\n\n1. 箭头函数是匿名函数，不能作为构造函数，不能使用 new\n1. 箭头函数没有原型属性\n1. this 指向不同，箭头函数的 this 是定义时所在的对象，普通函数看前面有没有, .点前面是谁 this 就是谁,没有.就是 window\n1. 不可以使用 arguments 对象，该对象在函数体内不存在。\n\n---\n\n## 2. JS 的数据类型：\n\n### 2.1 基本数据类型\n\n- **number** 数字；\n- **boolean** 布尔值 :有两个值 true、false ；\n- **string **字符串\n- **null **空对象；\n- **undefined **未定义的值(很多浏览器的初始值是 undefined)\n- **Sy\\*\\***mbol()\\*\\* 产生一个唯一的值,和谁都不重复\n\n**[ null \\*\\***和 undefined 的区别: ]\\*\\*\n\n- null 是一个表示\"无\"的对象，转为数值时为 0\n- undefined 是一个表示\"无\"的原始值，转为数值时为 NaN\n- 当声明的变量还未被初始化时，变量的默认值为\n  undefined\n- null 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象\n\n**undefined\\*\\*** \\***\\*表示 “缺少值”，就是此处应该有一个值，但是还没有定义。**\n**典型用法是：**\n  1. 变量被声明了，但没有赋值时，就等于 undefined\n  2. 调用函数时，应该提供的参数没有提供，该参数等于 undefined\n  3. 对象没有赋值的属性，该属性的值为 undefined\n  4. 函数没有返回值时，默认返回 undefined \n**null\\*\\*** \\***\\*表示“没有对象”，即该处不应该有值。**\n**典型用法是：**\n  1. 作为函数的参数，表示该函数的参数不是对象\n  2. 作为对象原型链的终点\n\n### 2.2 引用数据类型:\n\n- **对象**\n  - 普通对象\n  - 数组对象\n  - 正则对象(匹配字符串的规则)\n  - 日期对象\n  - 函数对象\n  - ...\n\n**[ 对象的存储过程: ]**\n\n1. 开辟一个空间地址\n2. 把键值对存储到这个空间地址的堆内存中\n3. 把这个对象指针赋值给变量名\n\n```javascript\nlet obj = {\n  a: 1,\n  fn: (function (val) {\n    // 赋给fn的是自执行函数的执行结果\n    也就是一个undefined;\n    // 该自执行函数只会执行一次\n    console.log(val);\n  })(obj.a),\n};\nlet obj2 = obj; // 两者代表了同一个地址；\n// 获取属性的值 obj.fn 或者 obj['fn']\n// 新增属性： obj.c = 100 或者 obj['c'] = 100\n// 真删除 delete obj.a (在严格模式下不支持该方法)； 假删除： obj.a = null;\n\n// 引用类型小习题\nlet a = 3;\nlet b = new Number(3);\nlet c = 3;\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);\n//=========================\nconst a = {};\nconst b = { key: \"b\" };\nconst c = { key: \"c\" };\na[b] = 123;\na[c] = 456;\nconsole.log(a[b]);\n```\n\n### 2.3 基本数据类型与引用数据类型的区别\n\n基本数据类型是操作值,引用数据类型操作的是堆内存空间地址，\n\n**布尔值转换: **0 NaN '' null undefined 转化成布尔值是  false，其余的都是  true\n**检验有效数字的方法：**isNaN\n**常用的数据类型检测方式:** typeof constructor instanceof Object.prototype.toString.call()\n\n### 2.4 比较运算符\n\n==  相对比较：会进行默认的类型转化； 若转换之后的值相等，则结果就是  true\n===  绝对比较，值不但要相同、类型也得相同。\n引用数据类型之间的比较，就看是不是同一个地址；\n\n### 2.5 逻辑运算符\n\n||      表示或者,前边成立给前边，前边不成立给后边\n&&  表示并且前边成立给后边，前边不成立给前边\n\n---\n\n## 3. 定义函数的方法\n\n### 3.1 function 声明\n\n```javascript\n//ES5\nfunction getSum(){}\nfunction (){}//匿名函数\n//ES6\n()=>{}\n```\n\n### 3.2 函数表达式\n\n```javascript\n//ES5\nvar getSum = function () {};\n//ES6\nlet getSum = () => {};\n```\n\n### 3.3 构造函数\n\n```javascript\nconst getSum = new Function(\"a\", \"b\", \"return a + b\");\n```\n\n## 4. JS 作用域的理解\n\n**JS 中的作用域分为两种：**\n\n- 全局作用域\n- 函数作用域。\n\n**函数作用域中定义的变量，只能在函数中调用，外界无法访问。**\n**\n没有块级作用域导致了 if 或 for 这样的逻辑语句中定义的变量可以被外界访问，**\n**\n因此 ES6 中新增了 let 和 const 命令来进行块级作用域的声明。**\n\n```javascript\n//循环绑定的问题\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n//作用域链  变量的查找机制\n// 上级作用域  函数在哪里定义的，那么该函数执行形成的作用的上级作用域就是谁\n// 了解了上级作用域， 就比较容易查找变量对应的值\n```\n\n##\n\n## 5.闭包的理解\n\n简单来说闭包就是在函数里面声明函数，本质上说就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量，但是反之不可以，这只是闭包的作用之一，另一个作用，则是保护变量不受外界污染，使其一直存在内存中，在工作中我们还是少使用闭包的好，因为闭包太消耗内存，不到万不得已的时候尽量不使用。\n\n## 6. 数组\n\n### 6.1 数组去重\n\n1、双  for  循环去重\n2、利用对象的属性名不能重复去重\n3、利用  es6  的  Set  不能重复去重\n\n（具体代码自己查）\n\n\n\n### 6.2 数组重组   （将 name 值相同的合并，并去除 age 的属性）\n\n```javascript\nlet ary = [\n  { name: 1, age: 2, number: 1, son: \"son1\" },\n  { name: 2, age: 23, number: 2, son: \"son2\" },\n  { name: 2, age: 22, number: 3, son: \"son3\" },\n  { name: 1, age: 12, number: 4, son: \"son4\" },\n  { name: 1, age: 42, number: 5, son: \"son5\" },\n];\nfn(ary)[\n  // 结果为\n  ({\n    name: 1,\n    list: [\n      { number: 1, son: \"son1\" },\n      { number: 4, son: \"son4\" },\n      { number: 5, son: \"son5\" },\n    ],\n  },\n  {\n    name: 2,\n    list: [\n      { number: 2, son: \"son2\" },\n      { number: 3, son: \"son3\" },\n    ],\n  })\n];\nfunction fn(ary) {\n  let arr = [];\n  ary.forEach((item) => {\n    let bol = arr.some((val) => {\n      if (val.name === item.name) {\n        let obj = {};\n        Object.keys(item).forEach((v) => {\n          if (v != \"name\" && v != \"age\") {\n            obj[v] = item[v];\n          }\n        });\n        val.list.push(obj);\n        return true;\n      }\n    });\n    if (!bol) {\n      let obj = {};\n      Object.keys(item).forEach((v) => {\n        if (v != \"name\" && v != \"age\") {\n          obj[v] = item[v];\n        }\n      });\n      arr.push({ name: item.name, list: [obj] });\n    }\n  });\n  return arr;\n}\nfn(ary);\n```\n\n### 6.3 数组扁平化\n\n```javascript\nvar arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];\n\nfunction flat1(arr) {\n  let temp = [];\n  function fn(ary) {\n    ary.forEach((item) => {\n      if (typeof item == \"object\") {\n        fn(item);\n      } else {\n        temp.push(item);\n      }\n    });\n  }\n  fn(arr);\n  return temp;\n}\n\nfunction flat2() {\n  return [].concat(\n    ...this.map((item) => (Array.isArray(item) ? item.flat2() : [item]))\n  );\n}\n```\n\n![3.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585475146362-3e854784-57e2-40b5-8cad-8a9db11b31af.png#align=left&display=inline&height=620&name=3.png&originHeight=620&originWidth=889&size=433833&status=done&style=none&width=889)\n\n---\n\n## 7. 原型及原型链\n\n### 7.1 原型\n\n- 函数都带有一个 prototype 属性，这是属性是指向构造函数的原型对象，这个对象包含所有实例共享的属性和方法。\n- 原型对象都有一个 constructor 属性，这个属性指向所关联的构造函数。\n- 每个对象都有一个 **proto**  属性[非标准的方法]，这个属性指向构造函数的原型 prototype\n\n### 7.2 原型链\n\n- 当访问实例对象的某个属性时，会先在这个对象本身的属性上查找，如果没有找到，则会\n  通过   **proto**  属性去原型上查找，如果还没有 找到则会在构造函数的原型的 ** proto** 中查找， 这样一层层向上查找就会形成一个作用域链，称为原型链\n\n### 7.3 原型相关习题\n\n**[ 第一题 ]**\n\n```javascript\nfunction Fn() {\n  this.x = 100;\n  this.y = 200;\n  this.getX = function () {\n    console.log(this.x);\n  };\n}\nFn.prototype = {\n  y: 400,\n  getX: function () {\n    console.log(this.x);\n  },\n  getY: function () {\n    console.log(this.y);\n  },\n  sum: function () {\n    console.log(this.x + this.y);\n  },\n};\nvar f1 = new Fn();\nvar f2 = new Fn();\nconsole.log(f1.getX === f2.getX);\nconsole.log(f1.getY === f2.getY);\nconsole.log(f1.__proto__.getY === Fn.prototype.getY);\nconsole.log(f1.__proto__.getX === f2.getX);\nconsole.log(f1.getX === Fn.prototype.getX);\nconsole.log(f1.constructor);\nconsole.log(Fn.prototype.__proto__.constructor);\nf1.getX();\nf1.__proto__.getX();\nf2.getY();\nFn.prototype.getY();\nf1.sum();\nFn.prototype.sum();\n```\n\n**[ 第二题 ]**\n\n```javascript\nfunction Foo() {\n  getName = function () {\n    console.log(1);\n  };\n  return this;\n}\nFoo.getName = function () {\n  console.log(2);\n};\nFoo.prototype.getName = function () {\n  console.log(3);\n};\nvar getName = function () {\n  console.log(4);\n};\nfunction getName() {\n  console.log(5);\n}\n\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nvar a = new Foo.getName(); //\nvar b = new Foo().getName();\nvar c = new new Foo().getName();\nconsole.log(a, b, c);\n```\n\n**[ 第三题 ]**\n\n```javascript\nfunction Person() {\n  this.name = \"zhufeng\";\n}\nPerson.prototype.getName = function () {\n  console.log(this.name);\n  console.log(this.age);\n};\nPerson.prototype.age = 5000;\n\nvar per1 = new Person();\nper1.getName();\nper1.age = 9;\nper1.getName();\nconsole.log(per1.age);\nvar per2 = new Person();\nconsole.log(per2.age);\n```\n\n\n\n###\n\n### 7.4 Object.create 的作用\n\n```javascript\nlet obj = { a: 123 };\nlet o = Object.create(obj);\n//该函数返回了一个新的空对象，但是该空对象的__proto__是指向了obj这个参数\n// 手写Object.create\nfunction create(proto) {\n  function F() {}\n  F.prototype = proto;\n\n  return new F();\n}\n```\n\n\n\n### 7.5 new 的执行过程是怎么回事？\n\nnew 操作符做了这些事：\n\n- 它创建了一个全新的对象\n- 它会被执行  [[Prototype]]（也就是  **proto**）链接\n- 它使  this  指向新创建的对象\n- 通过  new  创建的每个对象将最终被  [[Prototype]]  链接到这个函数的  prototype  对象上\n- 如果函数没有返回对象类型  Object (包含  Functoin, Array, Date, RegExg,\n  Error)，那么  new  表达式中的函数调用将返回该对象引用\n\n**[ 模拟 new ]**\n\n```javascript\nfunction objectFactory() {\n  const obj = new Object();\n  const Constructor = [].shift.call(arguments);\n\n  obj.__proto__ = Constructor.prototype;\n\n  const ret = Constructor.apply(obj, arguments);\n\n  return typeof ret === \"object\" ? ret : obj;\n}\n```\n\n\n\n### 7.6 call, apply, bind 三者的区别？\n\n**[ apply() 方法 ]**\n\\*\\*\n\n- apply() 方法调用一个函数, 其具有一个指定的 this 值，以及作为一个数组（或类似数组的对象）提供的参数 fun.apply(thisArg, [argsArray]\n- apply 和 call\n  基本类似，他们的区别只是传入的参数不同。\n- apply 和 call\n  的区别是 call 方法接受的是若干个参数列表，而 apply\n  接收的是一个包含多个参数的数组。\n\n**[ 模拟 apply ]**\n\\*\\*\n\n```javascript\nFunction.prototype.myapply = function (context, arr) {\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var result;\n  if (!arr) {\n    result = context.fn();\n  } else {\n    var args = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n      args.push(\"arr[\" + i + \"]\");\n    }\n    result = eval(\"context.fn(\" + args + \")\");\n  }\n\n  delete context.fn;\n  return result;\n};\n```\n\n**[ bind() 方法 ]**\n\n- bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。\n\n**[ bind() 方法的实现 ]**\n实现 bind 要做什么\n\n- 返回一个函数，绑定  this，传递预置参数\n- bind 返回的函数可以作为构造函数使用。故作为构造函数时应使得 this 失效，但是传入的参数依然有效\n\n```javascript\n// mdn的实现\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying\nto be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function()\n{},\n        fBound  = function() {\n          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用\n          return fToBind.apply(this instanceof fBound\n                 ? this\n                 : oThis,\n                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    // 维护原型关系\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype;\n    }\n    // 下行的代码使fBound.prototype是fNOP的实例,因此\n    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n```\n\n**[ call() 方法 ]**\n\n- 将函数设为对象的属性\n- 执行  &  删除这个函数\n- 指定  this  到函数并传入给定参数执行函数\n- 如果不传入参数，默认指向为 window\n\n**[ call() 方法的实现 ]**\n\n```javascript\nFunction.prototype.myCall = function (context) {\n  //此处没有考虑context非object情况\n  context.fn = this;\n  let args = [];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    args.push(arguments[i]);\n  }\n  context.fn(...args);\n  let result = context.fn(...args);\n  delete context.fn;\n  return result;\n};\n```\n\n\n\n### 7.7 实现类的继承\n\n类的继承在几年前是重点内容，有 n 种继承方式各有优劣，es6  普及后越来越不重要，那么多种写法有点『回字有四样写法』的意思，如果还想深入理解的去看红宝书即可，我们目前只实现一种最理想的继承方式。\n\n```javascript\nfunction Parent(name) {\n  this.parent = name;\n}\nParent.prototype.say = function () {\n  console.log(`${this.parent}: 你打篮球的样子像kunkun`);\n};\nfunction Child(name, parent) {\n  // 将父类的构造函数绑定在子类上\n  Parent.call(this, parent);\n  this.child = name;\n}\n/** \n 1. 这一步不用Child.prototype =Parent.prototype的原因是怕共享内存，修改父类原型对象就会影响子类\n 2. 不用Child.prototype = new Parent()的原因是会调用2次父类的构造方法（另一次是call），会存在一份多余的父类实例属性\n3.\nObject.create是创建了父类原型的副本，与父类原型完全隔离\n*/\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.say = function () {\n  console.log(`${this.parent}好，我是练习时长两年半的${this.child}`);\n};\n// 注意记得把子类的构造指向子类本身\nChild.prototype.constructor = Child;\nvar parent = new Parent(\"father\");\nparent.say(); // father: 你打篮球的样子像kunkun\nvar child = new Child(\"cxk\", \"father\");\nchild.say(); // father好，我是练习时长两年半的cxk\n```\n\n\n\n### 7.8 谈谈你对  this  指向的理解\n\nthis 的指向，始终坚持一个原理：**this \\*\\***永远指向最后调用它的那个对象\\*\\*\n改变 this 的指向我总结有以下几种方法：\n\n- 使用\n  ES6 的箭头函数\n- 在函数内部使用  _this = this\n- 使用  apply、call、bind\n- new 实例化一个对象\n\n全局作用域下的  this  指向  window\n如果给元素的事件行为绑定函数，那么函数中的  this  指向当前被绑定的那个元素\n函数中的  this，要看函数执行前有没有 . , 有 . 的话，点前面是谁，this  就指向谁，如果没有点，指向  window\n自执行函数中的  this  永远指向  window\n定时器中函数的  this  指向  window\n构造函数中的  this  指向当前的实例\ncall、apply、bind  可以改变函数的  this  指向\n箭头函数中没有  this，如果输出  this，就会输出箭头函数定义时所在的作用域中的  this\n\n---\n\n## 8. DOM\n\n**1).新建节点**\ndocument.createElement(\"元素名\") // 新建一个元素节点\ndocument.createAttribute(\"属性名\") // 新建一个属性节点\ndocument.createTextNode(\"文本内容\") // 创建一个文本节点\ndocument.createDocumentFragment() // 新建一个  DOM  片段\n**2).添加、移除、替换、插入：**\nappendChild() // 向节点的子节点末尾添加新的子节点\nremoverChild() // 移除\nparentNode.replaceChild(newChild, oldChild );用新节点替换父节点中已有的子节点\ninsertBeform() // 在已有的子节点前插入一个新的子节点\n**3).查找**\ndocument.getElementById() // 通过元素  id  查找,唯一性\ndocument.getElementByClassName() // 通过  class  名称查找\ndocument.getElementsByTagName() // 通过标签名称查找\ndocument.getElementsByName() // 通过元素的  Name  属性的值查找\n\n---\n\n### 8.1 DOM 回流、重绘\n\nDOM 回流  (reflow)：页面中的元素增加、删除、大小、位置的改变，会引起浏览器重新计算\n其他元素的位置，这种现象称为  DOM  回流。DOM  回流非常消耗性能，尽量避免  DOM  回流\nDOM 重绘：元素的某些  css  样式如背景色、字体颜色等发生改变时，浏览器需要重新描绘渲 染这个元素，这种现象称为  DOM  重绘。\n\n### 8.2 DOM 操作的读写分离:\n\n在  JS  中把设置样式和获取样式的两种操作分来来写， 设置样式的操作放在一起，读取样式的操作放在一起，这样可以有效的减少  DOM  的回流和重绘；\n\n### 8.3 DOM 事件：\n\n事件的传播机制：先冒泡，然后是目标阶段 然后再去捕获，我们可以利用事件的冒泡来进行事件委托，、也就是可以在父元素上绑定事件，通过事件对象 e 来判断点击的具体元素；可以提供性能；\n我们可以利用的 e.stopPropagation()来阻止冒泡；利用 e.preventDefault()  来阻止默认事件；\n事件中有  0  级事件绑定和  2  级事件绑定\n\n\n\n### 8.4 JS 盒子模型\n\n- // client offset scroll width height left top\n- // clientWidth 内容宽度 + 左右  padding\n- // offsetWidth clientWidth + 左右 border\n- // offsetTop 当前盒子的外边框到上级参照物的内边框的偏移量\n- // offsetParent 上级参照物：有定位的上级（包含 父级，祖父，曾祖父...）元素，所有所有上级都没有定位， 则参照物就是 body\n- // scroll 内容不溢出 等同于 client\n- // 内容溢出时 没有设置  overflow 值是内容宽高 + 上或左  padding\n- // 内容溢出时 有设置  overflow  时 值是内容宽高 + 上下或左右  padding\n- // scrollTop 卷去内容的高度\n- // 13 个属性 只有\n  scrollTop  和  scrollLeft  时可以设置值的， 其他的都是只读属性\n\n## 9. JS 的异步编程\n\n**因为 js 是单线程的。浏览器遇到 etTimeout 和 setInterval 会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码**\n\n常用的方式：setTimeout setIntervel ajax Promise  asyc/await\n\n宏任务 (marcotask) 微任务 (microtask) 的执行顺序：\n\n先执行宏任务，然后在执行微任务；\n\nJS 中的宏任务：setTimeout setIntervel ajax\n\nJS 中的微任务：Promise.then  Promise.catch   await (可以理解成 Promise.then)\n\nJS 的执行顺序是先同步 再异步；同步执行完成之前 异步不会执行\n\nEventLoop 事件循环\n\nEventQueue 事件队列\n\n### 9.1 异步编程相关练习\n\n**[ 第一题 ]**\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nconsole.log(\"script start\");\nsetTimeout(function () {\n  console.log(\"settimeout\");\n}, 0);\nasync1();\nnew Promise(function (resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function () {\n  console.log(\"promise2\");\n});\nconsole.log(\"script end\");\n```\n\n**[ 第二题 ]**\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nconsole.log(\"script start\");\nsetTimeout(function () {\n  console.log(\"settimeout\");\n});\nasync1();\nnew Promise(function (resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function () {\n  console.log(\"promise2\");\n});\nsetImmediate(() => {\n  console.log(\"setImmediate\");\n});\nprocess.nextTick(() => {\n  console.log(\"process\");\n});\nconsole.log(\"script end\");\n```\n\n## 10. 正则\n\n### 10.1 解析 URL Params 为对象\n\n```javascript\nvar str = \"http://www.zhufengpeixun.cn/?lx=1&from=wx&b=12&c=13#qqqq\";\nfunction getParam(url) {\n  var reg = /([?=&]+)=([?=&#]+)/g;\n  let obj = {};\n  url.match(reg).forEach((item) => {\n    let a = item.split(\"=\"); // ['lx','1']\n    obj[a[0]] = a[1];\n  });\n  return obj;\n}\ngetParam(str);\n```\n\n### 10.2 模板引擎实现\n\n```javascript\nlet template = \"我是{{name}}，年龄{{age}}，性别{{sex}}\";\nlet data = {\n  name: \"姓名\",\n  age: 18,\n};\nrender(template, data); // 我是姓名，年龄18，性别undefined\nfunction render(template, data) {\n  const reg = /{{(\\w+)}}/; // 模板字符串正则\n  if (reg.test(template)) {\n    // 判断模板里是否有模板字符串\n    const name = reg.exec(template)[1]; // 查找当前模板里第一个模板字符串的字段\n    template = template.replace(reg, data[name]); // 将第一个模板字符串渲染\n    return render(template, data); // 递归的渲染并返回渲染后的结构\n  }\n  return template; // 如果模板没有模板字符串直接返回\n}\n```\n\n### 10.3 出现次数最多的字符\n\n```javascript\nvar str = \"sfgsdfgsertdgfsdfgsertwegdsfgertewgsdfgsdg\";\nfunction getMax2(str) {\n  str = str.split(\"\").sort().join(\"\"); // 把字符串进行排序\n  let key = \"\",\n    num = 0;\n  str.replace(/(\\w)\\1*/g, function ($0, $1) {\n    if ($0.length > num) {\n      num = $0.length;\n      key = $1;\n    }\n  });\n  return {\n    key,\n    num,\n  };\n}\ngetMax2(str);\n```\n\n### 10.4 千分符的实现\n\n```javascript\n// 100,000,00\n\n//[ 方法1 ]\n\nvar str = \"1234567\"; // 1,234,567\nfunction moneyFormate(str) {\n  str = str.split(\"\").reverse().join(\"\");\n  let s = \"\";\n  for (let i = 0; i < str.length; i++) {\n    i % 3 == 2 ? (s += str[i] + \",\") : (s += str[i]);\n  }\n  s = s.split(\"\").reverse().join(\"\");\n  return s;\n}\nmoneyFormate(str); // 1,234,567\n\n//[ 方法2 ]\n\nvar str = \"1234567\";\nfunction moneyFormate2(str) {\n  let s = \"\";\n  // s = str.replace(/\\d{1,3}(?=(\\d{3})+$)/g,function(a){\n  //     console.log(arguments)\n  //     return a + ','\n  // })\n  s = str.replace(/(\\d{1,3})(?=(\\d{3})+$)/g, \"$1,\");\n  return s;\n}\nmoneyFormate2(str);\n```\n\n---\n\n```javascript\nvar str = \"   sdfgsg   fsgfsd    \";\n// 使用正则去除字符串的首尾空格\n// 以 1 到 多个 空格开头或者结尾的 都替换成空；\nvar res = str.replace(/^ +| +$/g, \"\");\n```\n\n---\n\n## 11. http & ajax\n\n### 11.1 TCP / IP 的三次握手和四次挥手\n\n**三次握手:**\n\n第一次握手：客户端向服务端发送  SYN  码数据包，表示客户端要求和服务端建立连接；\n第二次握手：服务端收到客户端的连接请求后，会发送  ACK  数据包给客户端，表示你的连接请求已经收到，询问客户端是否真的需要建立连接；\n第三次握手：客户端收到  ACK  码以后会检验是否正确，如果正确，客户端会再次发送  ACK  码给服务端，表示确认建立连接； (三次握手都成功以后才会建立连接，然后才会发送数据；)\n\n**四次挥手：**\n\\*\\*\n第一次挥手：当客户端发送数据结束后，会发送  FIN  码数据包给服务端，表示告知服务端客 户端的数据已经传递完了。\n第二次挥手：当服务端收到  FIN  后，会发送  ACK  给客户端，表示服务端已经知道客户端传完\n了。客户端收到 ACK  以后就会把传递数据给服务端的通道关闭；\n第三次挥手：当服务端把响应的数据发送完毕后，会发送一个  FIN  给客户端，告知客户端响 应的数据已经发送完毕；\n第四次挥手：当客户端收到  FIN  后，会发送一个  ACK  码数据包给服务端，告知服务端客户端已\n经知道数据发送完毕；服务端收到  ACK  码后，可以安心的把数据传递通道关闭掉。\n\n### 11.2 http 常用状态码  (http-status-code):\n\n2xx:表示成功\n200 OK 表示所有东西都正常\n204 表示请求成功,但是服务端没有内容给你\n3xx: 表示重定向\n301 永久重定向(当访问一个永久重定向的网站的时候,一个域名被指向一个其他网站,且是永久的)\n302 临时重定向\n304 走缓存(服务端觉得你之前请求过这个东西,而且服务器上的那一份没有发生变化,告诉客户端用缓存 就行)\n\n- 301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了 301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。\n- 302，Fount。临时重定向，但是会在重定向的时候改变 method:\n  把 POST 改成 GET，于是有了 307\n- 307，Temporary Redirect。临时重定向，在重定向时不会改变 method\n\n4xx: 表示客户端错误\n400 参数传递不当,导致的错误\n401 权限不够导致的\n403 服务端已经理解请求,但是拒绝响应\n404 客户端请求的资源或者数据不存在(发现请求接口  404,  有两种情况一种是咱们写错接口了或者服 务端还没部署)\n5xx: 表示服务端错误(遇到以 5 开头的错误去找服务端错误)\n500 服务端内部错误\n502 网关错误\n\n### 11.3 从浏览器输入  URL  按回车到页面显示都发生了什么? \n\n- 浏览器根据  URL  进行  DNS  查询\n- 首先从  DNS  缓存中查询\n- 若未在缓存中找到，则不停的向上一级级请求  DNS  服务器\n- 取得  IP  地址，建立  TCP  连接\n- 构造  HTTP  请求报\n- 添加一些  HTTP  首部\n- 根据同源政策添加  cookie\n- 在  TCP  连接上发送  HTTP  报文，等待响应\n- 服务器处理  HTTP  请求报文，返回响应  HTTP  响应报文\n- 浏览器处理服务器返回的  HTTP  响应报文，若为  HTML  则渲染页面，不包括脚本的简单渲染流程如下\n\n  1.   解析  DOM、CSSOM\n  2.   根据  DOM、CSSOM  计算  render tree\n  3.   根据  render tree  进行  layout\n  4.   paint，至此，用户可以看到页面了\n\n### 11.4 HTTPS 和  HTTP  的区别主要如下?    \n\nHTTPS 协议是由  SSL+HTTP  协议构建的可进行加密传输、身份认证的网络协议，要比  http  协议安全。\n1、https  协议需要到  ca  申请证书，一般免费证书较少，因而需要一定费用。\n2、http  是超文本传输协议，信息是明文传输，https  则是具有安全性的  ssl  加密传输协议。\n3、http  和  https  使用的是完全不同的连接方式，用的端口也不一样，前者是  80，后者是  443。\n4、http  的连接很简单，是无状态的；HTTPS  协议是由  SSL + HTTP  协议构建的可进行加密传输、身份认证的网络协议，比  http  协议安全。\n\n**https \\*\\***主要解决三个安全问题：\\*\\*\n\n- 内容隐私\n- 防篡改\n- 确认对方身份\n\nhttps 并不是直接通过非对称加密传输过程，而是有握手过程，握手过程主要是和服务器做通讯，生成私有秘钥，最后通过该秘钥对称加密传输数据。还有验证证书的正确性。\n证书验证过程保证了对方是合法的，并且中间人无法通过伪造证书方式进行攻击。\n\n\n\n### 11.5 浏览器缓存？\n\n强缓存：不会向服务器发送请求，直接从缓存中读取资源，在  chrome  控制台的  Network  选项中可以看到该请求返回  200  的状态码，并且  Size  显示  from disk cache  或  from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。\n协商缓存：就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：\n协商缓存生效，返回  304  和  Not Modified\n协商缓存失效，返回  200  和请求结果协商缓存可以通过设置两种\nHTTP Header 实现：Last-Modified 和\nETag 。\n**强制缓存优先于协商缓存进行，若强制缓存  (Expires  和  Cache-Control)  生效则直接使用缓存，若不生效则进行协商缓存  (Last-Modified / If-Modified-Since  和  Etag /\nIf-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回  200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回  304，继续使用缓存**。\n\n### 11.6 ajax 四步\n\n1. 创建\n   XMLHttpRequest 对象,也就是创建一个异步调用对象\n2. 创建一个新的 HTTP 请求,并指定该 HTTP 请求的方法、URL 及验证信息\n3. 设置响应 HTTP 请求状态变化的函数\n4. 发送 HTTP\n   请求\n   \\*\\* \\*\\*\n\n### 11.7 你使用过哪些  ajax?\n\n从原生的  XHR  到  jquery ajax，再到现在的  axios  和  fetch。\naxios 和  fetch  都是基于  Promise  的，一般我们在使用时都会进行二次封装\n讲到  fetch  跟  jquery ajax  的区别，这也是它很奇怪的地方\n当接收到一个代表错误的 HTTP 状态码时，从 fetch()  返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或\n500。相反，它会将 Promise 状态标记为\nresolve （但是会将 resolve 的返回值的 ok 属性设置为 false ）， 仅当网络故障时或请求被阻止时，才会标记为 reject。\n默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）\n\n### 11.8 一般我们再拦截器中都会写什么代码？\n\n请求拦截中我们一半会把  token  写在这里，这样的话就不用每次请求都要写这个参数\n还会做一个数据格式的处理，假如某个参数需要统一处理 可以放在这里，\n响应拦截一半会做一个判断 请求失败的话直接调用失败提示框 这样不用每个接口都写同样的代码\n也会再  return  时 return reponse.data;  这样就可以不用每个数据接受的时候都加一个  data.data\n\n### 11.9 get  请求和  post  请求有什么区别？什么时候使用  post? \n\n**GET：**一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符  \n**POST：**一般用于修改服务器上的资源，对所发送的信息没有限制  \n在以下情况中，请使用 POST 请求： 1. 无法使用缓存文件（更新服务器上的文件或数据库） 2. 向服务器发送大量数据（POST 没有数据量限制） 3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠\n实际上  HTTP 协议从未规定 GET / POST 的请求长度限制是多少。对  get  请求参数的限制是来源与浏览器或  web  服务器，浏览器或  web  服务器限制了  url  的长度。为了明确这个概念，我们必须再次强调下面几点:\n1、HTTP\n协议 未规定 GET 和  POST  的长度限制\n2、GET  的最大长度显示是因为\n浏览器和 web  服务器限制了 URI  的长度\n3、不同的浏览器和  WEB  服务器，限制的最大长度不一样\n4、要支持  IE，则最大长度为  2083byte，若只支持  Chrome，则最大长度 8182byt\n\n### 11.10 Cookie 和 Session 的区别?\n\n- **安全性：** Session 比\n  Cookie 安全，Session 是存储在服务器端的，Cookie\n  是存储在客户端的。\n- **存取值的类型不同**：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。\n- **有效期不同：** Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。\n- **存储大小不同：**  单个\n  Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。\n\n![6.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483449621-708b077e-a6f7-4162-bfa2-6082a2761c3f.png#align=left&display=inline&height=749&name=6.png&originHeight=749&originWidth=1247&size=108475&status=done&style=none&width=1247)\n\n### 11.11 Token 相关？\n\n1.   客户端使用用户名跟密码请求登录\n2.   服务端收到请求，去验证用户名与密码\n3.   验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端\n4.   客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里\n5.   客户端每次向服务端请求资源的时候需要带着服务端签发的 token\n6.   服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据\n·      **每一次请求都需要携带 token，需要把 token 放到 HTTP 的\nHeader 里**\n·      **基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库**\n·      **token \\*\\***完全由应用管理，所以它可以避开同源策略\\*\\*\n\n\n\n### 11.12  同源策略\n\n同源策略是客户端脚本（尤其是 Javascript）的重要的安全度量标准。其目的是防止某个文档或脚本从多个不同源装载。   这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。  \n **为什么要有同源限制？**\n我们举例说明：比如一个黑客程序，他利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容，这样用户名，密码就轻松到手了\n\n### 11.13 工作中是怎么解决跨域的？\n\n**1.jsonp**\n\n1. JSONP 原理\n   **利用  \\*\\***<script>\\***\\* \\*\\***标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP  请求一定需要对方的服务器做支持才可以。\\*\\*\n\n**2.cors**\nCORS 需要浏览器和后端同时支持。浏览器会自动进行 CORS 通信，实现\nCORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。\n**3.proxy \\*\\***代理  \\*\\*（适用于本地开发）\n。。。（其他的方式 可自行去掘金上搜 9  种跨域的方式）\n\n- §  CORS 支持所有类型的  HTTP  请求，是跨域  HTTP  请求的根本解决方案\n- §  JSONP 只支持  GET  请求，JSONP  的优势在于支持老式浏览器，以及可以向不支持  CORS  的网站请求数据。\n- §  不管是  Node  中间件代理还是  nginx  反向代理，主要是通过同源策略对服务器不加限制。\n- §  日常工作中，用得比较多的跨域方案是  cors  和  nginx  反向代理\n\n### 11.14 http1 与  http\n\n### ![7.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483526340-043eea87-483e-49b2-aef2-e0863666764e.png#align=left&display=inline&height=525&name=7.png&originHeight=525&originWidth=935&size=74104&status=done&style=none&width=935)\n\n---\n\n## 12. 编程题\n\n### 12.1 \n\n![8 (2).png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483772793-4d2a1c89-3368-4138-9d9e-addfe2e23e7f.png#align=left&display=inline&height=338&name=8%20%282%29.png&originHeight=338&originWidth=628&size=230392&status=done&style=none&width=628)\n\n![9.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585483788143-ba516091-fe6f-4385-b28c-6824b1884505.png#align=left&display=inline&height=195&name=9.png&originHeight=195&originWidth=848&size=241762&status=done&style=none&width=848)\n\n## 12.2  JavaScript 22 道高频手写面试题及答案\n\n- [实现防抖函数（debounce）](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-1)\n- [实现节流函数（throttle）](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-2)\n- [深克隆（deepclone）](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-3)\n- [实现 Event(event bus)](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-4)\n- [实现 instanceOf](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-5)\n- [模拟 new](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-6)\n- [实现一个 call](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-7)\n- [实现 apply  方法](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-8)\n- [实现 bind](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-9)\n- [模拟 Object.create](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-10)\n- [实现类的继承](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-11)\n- [实现 JSON.parse](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-12)\n- [实现 Promise](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-13)\n- [解析 URL\n  Params 为对象](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-14)\n- [模板引擎实现](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-15)\n- [转化为驼峰命名](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-16)\n- [查找字符串中出现最多的字符和个数](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-17)\n- [字符串查找](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-18)\n- [实现千位分隔符](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-19)\n- [判断是否是电话号码](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-20)\n- [验证是否是邮箱](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-21)\n- [验证是否是身份证](https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-22)\n\n**总链接：      ** [https://juejin.im/post/5e100cdef265da5d75243229](https://juejin.im/post/5e100cdef265da5d75243229)\n\n## 13. 前端 100 问\n\n**访问链接\\*\\***：    \\*\\*[https://juejin.im/post/5d23e750f265da1b855c7bbe](https://juejin.im/post/5d23e750f265da1b855c7bbe)\n\n## 14.XSS  和  CSRF  区别\n\n**跨站脚本攻击**（Cross Site Scripting)，为了不和层叠样式表 CSS 混淆，故将跨站脚本攻击缩写为 XSS。恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。\n**跨站请求伪造**（Cross-site request forgery），是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。\n\n**区别：**\n\\*\\*\n\n- 原理不同，CSRF  是利用网站 A 本身的漏洞，去请求网站  A  的  api；XSS  是向目标网站注入  JS  代码，然后执行  JS 里的代码。\n- CSRF  需要用户先登录目标网站获取  cookie，而  XSS  不需要登录\n- CSRF  的目标是用户，XSS  的目标是服务器\n- XSS 是利用合法用户获取其信息，而  CSRF  是伪造成合法用户发起请求\n\n---\n\n以上更新于 2020 年 3 月 29 日\n\n---\n","slug":"语雀/js","published":1,"updated":"2022-03-03T11:26:07.576Z","_id":"cl0awjjpc000n081bfwxk043x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-ES6-的新特性\"><a href=\"#1-ES6-的新特性\" class=\"headerlink\" title=\"1. ES6 的新特性\"></a>1. ES6 的新特性</h2><ul>\n<li><strong>let (声明变量**</strong>)**</li>\n<li><strong>const (声明常量**</strong>,*<strong>*常量不能修改的量)</strong></li>\n<li>**class (**<strong>创建类*</strong>*) **</li>\n<li><strong>import / export (基于 **<strong>ES6 *</strong>*的模块规范创建导入**</strong>/*<strong>*导出模块**</strong>(*<strong>*文件**</strong>/*<strong>*组件**</strong>))**</li>\n<li><strong>new set (数组去重**</strong>)**</li>\n<li><strong>Symbol (唯一的值**</strong>) ** var a = Symbol(‘qqq’)</li>\n<li><strong>…ary (展开运算符、剩余运算符**</strong>)**</li>\n<li><strong>${}**</strong>  模板字符串**</li>\n<li><strong>解构赋值**</strong>  let {a} = obj; let [b] = ary**</li>\n<li><strong>for of 循环</strong></li>\n<li><strong>()=&gt;{} 箭头函数</strong></li>\n<li><strong>数组新增方法：</strong>some every  filter  reduce<br>…</li>\n<li><strong>对象新增方法：</strong> Object.assign() <br>Object.values()  Object.keys()  Object.create()</li>\n<li>…</li>\n</ul>\n<h3 id=\"1-1-var、let、const-的区别\"><a href=\"#1-1-var、let、const-的区别\" class=\"headerlink\" title=\"1.1 var、let、const 的区别\"></a>1.1 var、let、const 的区别</h3><ol>\n<li>let 和 const 声明变量不存在变量提升，如果要使用这个变量，我们需要在变量定义之后使用;</li>\n<li>let 和 const 不能重复声明变量，如果重复声明会报错;</li>\n<li>用 let<br>和 const 在全局声明变量不会给 window 增加属性;</li>\n<li>let 和 const 出现在代码块中，会把代码块(字面量声明对象除外)变成块级作用域,并且出现暂时性死区</li>\n</ol>\n<h3 id=\"1-2-箭头函数与普通函数的区别：\"><a href=\"#1-2-箭头函数与普通函数的区别：\" class=\"headerlink\" title=\"1.2 箭头函数与普通函数的区别：\"></a>1.2 箭头函数与普通函数的区别：</h3><ol>\n<li>箭头函数是匿名函数，不能作为构造函数，不能使用 new</li>\n<li>箭头函数没有原型属性</li>\n<li>this 指向不同，箭头函数的 this 是定义时所在的对象，普通函数看前面有没有, .点前面是谁 this 就是谁,没有.就是 window</li>\n<li>不可以使用 arguments 对象，该对象在函数体内不存在。</li>\n</ol>\n<hr>\n<h2 id=\"2-JS-的数据类型：\"><a href=\"#2-JS-的数据类型：\" class=\"headerlink\" title=\"2. JS 的数据类型：\"></a>2. JS 的数据类型：</h2><h3 id=\"2-1-基本数据类型\"><a href=\"#2-1-基本数据类型\" class=\"headerlink\" title=\"2.1 基本数据类型\"></a>2.1 基本数据类型</h3><ul>\n<li><strong>number</strong> 数字；</li>\n<li><strong>boolean</strong> 布尔值 :有两个值 true、false ；</li>\n<li>**string **字符串</li>\n<li>**null **空对象；</li>\n<li>**undefined **未定义的值(很多浏览器的初始值是 undefined)</li>\n<li>**Sy****mbol()** 产生一个唯一的值,和谁都不重复</li>\n</ul>\n<p>**[ null ****和 undefined 的区别: ]**</p>\n<ul>\n<li>null 是一个表示”无”的对象，转为数值时为 0</li>\n<li>undefined 是一个表示”无”的原始值，转为数值时为 NaN</li>\n<li>当声明的变量还未被初始化时，变量的默认值为<br>undefined</li>\n<li>null 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象</li>\n</ul>\n<p><strong>undefined**</strong> *<strong>*表示 “缺少值”，就是此处应该有一个值，但是还没有定义。</strong><br><strong>典型用法是：</strong><br>  1. 变量被声明了，但没有赋值时，就等于 undefined<br>  2. 调用函数时，应该提供的参数没有提供，该参数等于 undefined<br>  3. 对象没有赋值的属性，该属性的值为 undefined<br>  4. 函数没有返回值时，默认返回 undefined <br><strong>null**</strong> *<strong>*表示“没有对象”，即该处不应该有值。</strong><br><strong>典型用法是：</strong><br>  1. 作为函数的参数，表示该函数的参数不是对象<br>  2. 作为对象原型链的终点</p>\n<h3 id=\"2-2-引用数据类型\"><a href=\"#2-2-引用数据类型\" class=\"headerlink\" title=\"2.2 引用数据类型:\"></a>2.2 引用数据类型:</h3><ul>\n<li><strong>对象</strong><ul>\n<li>普通对象</li>\n<li>数组对象</li>\n<li>正则对象(匹配字符串的规则)</li>\n<li>日期对象</li>\n<li>函数对象</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p><strong>[ 对象的存储过程: ]</strong></p>\n<ol>\n<li>开辟一个空间地址</li>\n<li>把键值对存储到这个空间地址的堆内存中</li>\n<li>把这个对象指针赋值给变量名</li>\n</ol>\n<pre><code class=\"javascript\">let obj = &#123;\n  a: 1,\n  fn: (function (val) &#123;\n    // 赋给fn的是自执行函数的执行结果\n    也就是一个undefined;\n    // 该自执行函数只会执行一次\n    console.log(val);\n  &#125;)(obj.a),\n&#125;;\nlet obj2 = obj; // 两者代表了同一个地址；\n// 获取属性的值 obj.fn 或者 obj[&#39;fn&#39;]\n// 新增属性： obj.c = 100 或者 obj[&#39;c&#39;] = 100\n// 真删除 delete obj.a (在严格模式下不支持该方法)； 假删除： obj.a = null;\n\n// 引用类型小习题\nlet a = 3;\nlet b = new Number(3);\nlet c = 3;\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);\n//=========================\nconst a = &#123;&#125;;\nconst b = &#123; key: &quot;b&quot; &#125;;\nconst c = &#123; key: &quot;c&quot; &#125;;\na[b] = 123;\na[c] = 456;\nconsole.log(a[b]);\n</code></pre>\n<h3 id=\"2-3-基本数据类型与引用数据类型的区别\"><a href=\"#2-3-基本数据类型与引用数据类型的区别\" class=\"headerlink\" title=\"2.3 基本数据类型与引用数据类型的区别\"></a>2.3 基本数据类型与引用数据类型的区别</h3><p>基本数据类型是操作值,引用数据类型操作的是堆内存空间地址，</p>\n<p>**布尔值转换: **0 NaN ‘’ null undefined 转化成布尔值是  false，其余的都是  true<br><strong>检验有效数字的方法：</strong>isNaN<br><strong>常用的数据类型检测方式:</strong> typeof constructor instanceof Object.prototype.toString.call()</p>\n<h3 id=\"2-4-比较运算符\"><a href=\"#2-4-比较运算符\" class=\"headerlink\" title=\"2.4 比较运算符\"></a>2.4 比较运算符</h3><p>==  相对比较：会进行默认的类型转化； 若转换之后的值相等，则结果就是  true<br>===  绝对比较，值不但要相同、类型也得相同。<br>引用数据类型之间的比较，就看是不是同一个地址；</p>\n<h3 id=\"2-5-逻辑运算符\"><a href=\"#2-5-逻辑运算符\" class=\"headerlink\" title=\"2.5 逻辑运算符\"></a>2.5 逻辑运算符</h3><p>||      表示或者,前边成立给前边，前边不成立给后边<br>&amp;&amp;  表示并且前边成立给后边，前边不成立给前边</p>\n<hr>\n<h2 id=\"3-定义函数的方法\"><a href=\"#3-定义函数的方法\" class=\"headerlink\" title=\"3. 定义函数的方法\"></a>3. 定义函数的方法</h2><h3 id=\"3-1-function-声明\"><a href=\"#3-1-function-声明\" class=\"headerlink\" title=\"3.1 function 声明\"></a>3.1 function 声明</h3><pre><code class=\"javascript\">//ES5\nfunction getSum()&#123;&#125;\nfunction ()&#123;&#125;//匿名函数\n//ES6\n()=&gt;&#123;&#125;\n</code></pre>\n<h3 id=\"3-2-函数表达式\"><a href=\"#3-2-函数表达式\" class=\"headerlink\" title=\"3.2 函数表达式\"></a>3.2 函数表达式</h3><pre><code class=\"javascript\">//ES5\nvar getSum = function () &#123;&#125;;\n//ES6\nlet getSum = () =&gt; &#123;&#125;;\n</code></pre>\n<h3 id=\"3-3-构造函数\"><a href=\"#3-3-构造函数\" class=\"headerlink\" title=\"3.3 构造函数\"></a>3.3 构造函数</h3><pre><code class=\"javascript\">const getSum = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);\n</code></pre>\n<h2 id=\"4-JS-作用域的理解\"><a href=\"#4-JS-作用域的理解\" class=\"headerlink\" title=\"4. JS 作用域的理解\"></a>4. JS 作用域的理解</h2><p><strong>JS 中的作用域分为两种：</strong></p>\n<ul>\n<li>全局作用域</li>\n<li>函数作用域。</li>\n</ul>\n<p><strong>函数作用域中定义的变量，只能在函数中调用，外界无法访问。</strong><br>**<br>没有块级作用域导致了 if 或 for 这样的逻辑语句中定义的变量可以被外界访问，**<br>**<br>因此 ES6 中新增了 let 和 const 命令来进行块级作用域的声明。**</p>\n<pre><code class=\"javascript\">//循环绑定的问题\nfor (var i = 0; i &lt; 3; i++) &#123;\n  setTimeout(() =&gt; console.log(i), 1);\n&#125;\nfor (let i = 0; i &lt; 3; i++) &#123;\n  setTimeout(() =&gt; console.log(i), 1);\n&#125;\n//作用域链  变量的查找机制\n// 上级作用域  函数在哪里定义的，那么该函数执行形成的作用的上级作用域就是谁\n// 了解了上级作用域， 就比较容易查找变量对应的值\n</code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"5-闭包的理解\"><a href=\"#5-闭包的理解\" class=\"headerlink\" title=\"5.闭包的理解\"></a>5.闭包的理解</h2><p>简单来说闭包就是在函数里面声明函数，本质上说就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量，但是反之不可以，这只是闭包的作用之一，另一个作用，则是保护变量不受外界污染，使其一直存在内存中，在工作中我们还是少使用闭包的好，因为闭包太消耗内存，不到万不得已的时候尽量不使用。</p>\n<h2 id=\"6-数组\"><a href=\"#6-数组\" class=\"headerlink\" title=\"6. 数组\"></a>6. 数组</h2><h3 id=\"6-1-数组去重\"><a href=\"#6-1-数组去重\" class=\"headerlink\" title=\"6.1 数组去重\"></a>6.1 数组去重</h3><p>1、双  for  循环去重<br>2、利用对象的属性名不能重复去重<br>3、利用  es6  的  Set  不能重复去重</p>\n<p>（具体代码自己查）</p>\n<h3 id=\"6-2-数组重组-（将-name-值相同的合并，并去除-age-的属性）\"><a href=\"#6-2-数组重组-（将-name-值相同的合并，并去除-age-的属性）\" class=\"headerlink\" title=\"6.2 数组重组   （将 name 值相同的合并，并去除 age 的属性）\"></a>6.2 数组重组   （将 name 值相同的合并，并去除 age 的属性）</h3><pre><code class=\"javascript\">let ary = [\n  &#123; name: 1, age: 2, number: 1, son: &quot;son1&quot; &#125;,\n  &#123; name: 2, age: 23, number: 2, son: &quot;son2&quot; &#125;,\n  &#123; name: 2, age: 22, number: 3, son: &quot;son3&quot; &#125;,\n  &#123; name: 1, age: 12, number: 4, son: &quot;son4&quot; &#125;,\n  &#123; name: 1, age: 42, number: 5, son: &quot;son5&quot; &#125;,\n];\nfn(ary)[\n  // 结果为\n  (&#123;\n    name: 1,\n    list: [\n      &#123; number: 1, son: &quot;son1&quot; &#125;,\n      &#123; number: 4, son: &quot;son4&quot; &#125;,\n      &#123; number: 5, son: &quot;son5&quot; &#125;,\n    ],\n  &#125;,\n  &#123;\n    name: 2,\n    list: [\n      &#123; number: 2, son: &quot;son2&quot; &#125;,\n      &#123; number: 3, son: &quot;son3&quot; &#125;,\n    ],\n  &#125;)\n];\nfunction fn(ary) &#123;\n  let arr = [];\n  ary.forEach((item) =&gt; &#123;\n    let bol = arr.some((val) =&gt; &#123;\n      if (val.name === item.name) &#123;\n        let obj = &#123;&#125;;\n        Object.keys(item).forEach((v) =&gt; &#123;\n          if (v != &quot;name&quot; &amp;&amp; v != &quot;age&quot;) &#123;\n            obj[v] = item[v];\n          &#125;\n        &#125;);\n        val.list.push(obj);\n        return true;\n      &#125;\n    &#125;);\n    if (!bol) &#123;\n      let obj = &#123;&#125;;\n      Object.keys(item).forEach((v) =&gt; &#123;\n        if (v != &quot;name&quot; &amp;&amp; v != &quot;age&quot;) &#123;\n          obj[v] = item[v];\n        &#125;\n      &#125;);\n      arr.push(&#123; name: item.name, list: [obj] &#125;);\n    &#125;\n  &#125;);\n  return arr;\n&#125;\nfn(ary);\n</code></pre>\n<h3 id=\"6-3-数组扁平化\"><a href=\"#6-3-数组扁平化\" class=\"headerlink\" title=\"6.3 数组扁平化\"></a>6.3 数组扁平化</h3><pre><code class=\"javascript\">var arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];\n\nfunction flat1(arr) &#123;\n  let temp = [];\n  function fn(ary) &#123;\n    ary.forEach((item) =&gt; &#123;\n      if (typeof item == &quot;object&quot;) &#123;\n        fn(item);\n      &#125; else &#123;\n        temp.push(item);\n      &#125;\n    &#125;);\n  &#125;\n  fn(arr);\n  return temp;\n&#125;\n\nfunction flat2() &#123;\n  return [].concat(\n    ...this.map((item) =&gt; (Array.isArray(item) ? item.flat2() : [item]))\n  );\n&#125;\n</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585475146362-3e854784-57e2-40b5-8cad-8a9db11b31af.png#align=left&display=inline&height=620&name=3.png&originHeight=620&originWidth=889&size=433833&status=done&style=none&width=889\" alt=\"3.png\"></p>\n<hr>\n<h2 id=\"7-原型及原型链\"><a href=\"#7-原型及原型链\" class=\"headerlink\" title=\"7. 原型及原型链\"></a>7. 原型及原型链</h2><h3 id=\"7-1-原型\"><a href=\"#7-1-原型\" class=\"headerlink\" title=\"7.1 原型\"></a>7.1 原型</h3><ul>\n<li>函数都带有一个 prototype 属性，这是属性是指向构造函数的原型对象，这个对象包含所有实例共享的属性和方法。</li>\n<li>原型对象都有一个 constructor 属性，这个属性指向所关联的构造函数。</li>\n<li>每个对象都有一个 <strong>proto</strong>  属性[非标准的方法]，这个属性指向构造函数的原型 prototype</li>\n</ul>\n<h3 id=\"7-2-原型链\"><a href=\"#7-2-原型链\" class=\"headerlink\" title=\"7.2 原型链\"></a>7.2 原型链</h3><ul>\n<li>当访问实例对象的某个属性时，会先在这个对象本身的属性上查找，如果没有找到，则会<br>通过   <strong>proto</strong>  属性去原型上查找，如果还没有 找到则会在构造函数的原型的 ** proto** 中查找， 这样一层层向上查找就会形成一个作用域链，称为原型链</li>\n</ul>\n<h3 id=\"7-3-原型相关习题\"><a href=\"#7-3-原型相关习题\" class=\"headerlink\" title=\"7.3 原型相关习题\"></a>7.3 原型相关习题</h3><p><strong>[ 第一题 ]</strong></p>\n<pre><code class=\"javascript\">function Fn() &#123;\n  this.x = 100;\n  this.y = 200;\n  this.getX = function () &#123;\n    console.log(this.x);\n  &#125;;\n&#125;\nFn.prototype = &#123;\n  y: 400,\n  getX: function () &#123;\n    console.log(this.x);\n  &#125;,\n  getY: function () &#123;\n    console.log(this.y);\n  &#125;,\n  sum: function () &#123;\n    console.log(this.x + this.y);\n  &#125;,\n&#125;;\nvar f1 = new Fn();\nvar f2 = new Fn();\nconsole.log(f1.getX === f2.getX);\nconsole.log(f1.getY === f2.getY);\nconsole.log(f1.__proto__.getY === Fn.prototype.getY);\nconsole.log(f1.__proto__.getX === f2.getX);\nconsole.log(f1.getX === Fn.prototype.getX);\nconsole.log(f1.constructor);\nconsole.log(Fn.prototype.__proto__.constructor);\nf1.getX();\nf1.__proto__.getX();\nf2.getY();\nFn.prototype.getY();\nf1.sum();\nFn.prototype.sum();\n</code></pre>\n<p><strong>[ 第二题 ]</strong></p>\n<pre><code class=\"javascript\">function Foo() &#123;\n  getName = function () &#123;\n    console.log(1);\n  &#125;;\n  return this;\n&#125;\nFoo.getName = function () &#123;\n  console.log(2);\n&#125;;\nFoo.prototype.getName = function () &#123;\n  console.log(3);\n&#125;;\nvar getName = function () &#123;\n  console.log(4);\n&#125;;\nfunction getName() &#123;\n  console.log(5);\n&#125;\n\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nvar a = new Foo.getName(); //\nvar b = new Foo().getName();\nvar c = new new Foo().getName();\nconsole.log(a, b, c);\n</code></pre>\n<p><strong>[ 第三题 ]</strong></p>\n<pre><code class=\"javascript\">function Person() &#123;\n  this.name = &quot;zhufeng&quot;;\n&#125;\nPerson.prototype.getName = function () &#123;\n  console.log(this.name);\n  console.log(this.age);\n&#125;;\nPerson.prototype.age = 5000;\n\nvar per1 = new Person();\nper1.getName();\nper1.age = 9;\nper1.getName();\nconsole.log(per1.age);\nvar per2 = new Person();\nconsole.log(per2.age);\n</code></pre>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"7-4-Object-create-的作用\"><a href=\"#7-4-Object-create-的作用\" class=\"headerlink\" title=\"7.4 Object.create 的作用\"></a>7.4 Object.create 的作用</h3><pre><code class=\"javascript\">let obj = &#123; a: 123 &#125;;\nlet o = Object.create(obj);\n//该函数返回了一个新的空对象，但是该空对象的__proto__是指向了obj这个参数\n// 手写Object.create\nfunction create(proto) &#123;\n  function F() &#123;&#125;\n  F.prototype = proto;\n\n  return new F();\n&#125;\n</code></pre>\n<h3 id=\"7-5-new-的执行过程是怎么回事？\"><a href=\"#7-5-new-的执行过程是怎么回事？\" class=\"headerlink\" title=\"7.5 new 的执行过程是怎么回事？\"></a>7.5 new 的执行过程是怎么回事？</h3><p>new 操作符做了这些事：</p>\n<ul>\n<li>它创建了一个全新的对象</li>\n<li>它会被执行  [[Prototype]]（也就是  <strong>proto</strong>）链接</li>\n<li>它使  this  指向新创建的对象</li>\n<li>通过  new  创建的每个对象将最终被  [[Prototype]]  链接到这个函数的  prototype  对象上</li>\n<li>如果函数没有返回对象类型  Object (包含  Functoin, Array, Date, RegExg,<br>Error)，那么  new  表达式中的函数调用将返回该对象引用</li>\n</ul>\n<p><strong>[ 模拟 new ]</strong></p>\n<pre><code class=\"javascript\">function objectFactory() &#123;\n  const obj = new Object();\n  const Constructor = [].shift.call(arguments);\n\n  obj.__proto__ = Constructor.prototype;\n\n  const ret = Constructor.apply(obj, arguments);\n\n  return typeof ret === &quot;object&quot; ? ret : obj;\n&#125;\n</code></pre>\n<h3 id=\"7-6-call-apply-bind-三者的区别？\"><a href=\"#7-6-call-apply-bind-三者的区别？\" class=\"headerlink\" title=\"7.6 call, apply, bind 三者的区别？\"></a>7.6 call, apply, bind 三者的区别？</h3><p><strong>[ apply() 方法 ]</strong><br>**</p>\n<ul>\n<li>apply() 方法调用一个函数, 其具有一个指定的 this 值，以及作为一个数组（或类似数组的对象）提供的参数 fun.apply(thisArg, [argsArray]</li>\n<li>apply 和 call<br>基本类似，他们的区别只是传入的参数不同。</li>\n<li>apply 和 call<br>的区别是 call 方法接受的是若干个参数列表，而 apply<br>接收的是一个包含多个参数的数组。</li>\n</ul>\n<p><strong>[ 模拟 apply ]</strong><br>**</p>\n<pre><code class=\"javascript\">Function.prototype.myapply = function (context, arr) &#123;\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var result;\n  if (!arr) &#123;\n    result = context.fn();\n  &#125; else &#123;\n    var args = [];\n    for (var i = 0, len = arr.length; i &lt; len; i++) &#123;\n      args.push(&quot;arr[&quot; + i + &quot;]&quot;);\n    &#125;\n    result = eval(&quot;context.fn(&quot; + args + &quot;)&quot;);\n  &#125;\n\n  delete context.fn;\n  return result;\n&#125;;\n</code></pre>\n<p><strong>[ bind() 方法 ]</strong></p>\n<ul>\n<li>bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</li>\n</ul>\n<p><strong>[ bind() 方法的实现 ]</strong><br>实现 bind 要做什么</p>\n<ul>\n<li>返回一个函数，绑定  this，传递预置参数</li>\n<li>bind 返回的函数可以作为构造函数使用。故作为构造函数时应使得 this 失效，但是传入的参数依然有效</li>\n</ul>\n<pre><code class=\"javascript\">// mdn的实现\nif (!Function.prototype.bind) &#123;\n  Function.prototype.bind = function(oThis) &#123;\n    if (typeof this !== &#39;function&#39;) &#123;\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(&#39;Function.prototype.bind - what is trying\nto be bound is not callable&#39;);\n    &#125;\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function()\n&#123;&#125;,\n        fBound  = function() &#123;\n          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用\n          return fToBind.apply(this instanceof fBound\n                 ? this\n                 : oThis,\n                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        &#125;;\n\n    // 维护原型关系\n    if (this.prototype) &#123;\n      // Function.prototype doesn&#39;t have a prototype property\n      fNOP.prototype = this.prototype;\n    &#125;\n    // 下行的代码使fBound.prototype是fNOP的实例,因此\n    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  &#125;;\n&#125;\n</code></pre>\n<p><strong>[ call() 方法 ]</strong></p>\n<ul>\n<li>将函数设为对象的属性</li>\n<li>执行  &amp;  删除这个函数</li>\n<li>指定  this  到函数并传入给定参数执行函数</li>\n<li>如果不传入参数，默认指向为 window</li>\n</ul>\n<p><strong>[ call() 方法的实现 ]</strong></p>\n<pre><code class=\"javascript\">Function.prototype.myCall = function (context) &#123;\n  //此处没有考虑context非object情况\n  context.fn = this;\n  let args = [];\n  for (let i = 1, len = arguments.length; i &lt; len; i++) &#123;\n    args.push(arguments[i]);\n  &#125;\n  context.fn(...args);\n  let result = context.fn(...args);\n  delete context.fn;\n  return result;\n&#125;;\n</code></pre>\n<h3 id=\"7-7-实现类的继承\"><a href=\"#7-7-实现类的继承\" class=\"headerlink\" title=\"7.7 实现类的继承\"></a>7.7 实现类的继承</h3><p>类的继承在几年前是重点内容，有 n 种继承方式各有优劣，es6  普及后越来越不重要，那么多种写法有点『回字有四样写法』的意思，如果还想深入理解的去看红宝书即可，我们目前只实现一种最理想的继承方式。</p>\n<pre><code class=\"javascript\">function Parent(name) &#123;\n  this.parent = name;\n&#125;\nParent.prototype.say = function () &#123;\n  console.log(`$&#123;this.parent&#125;: 你打篮球的样子像kunkun`);\n&#125;;\nfunction Child(name, parent) &#123;\n  // 将父类的构造函数绑定在子类上\n  Parent.call(this, parent);\n  this.child = name;\n&#125;\n/** \n 1. 这一步不用Child.prototype =Parent.prototype的原因是怕共享内存，修改父类原型对象就会影响子类\n 2. 不用Child.prototype = new Parent()的原因是会调用2次父类的构造方法（另一次是call），会存在一份多余的父类实例属性\n3.\nObject.create是创建了父类原型的副本，与父类原型完全隔离\n*/\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.say = function () &#123;\n  console.log(`$&#123;this.parent&#125;好，我是练习时长两年半的$&#123;this.child&#125;`);\n&#125;;\n// 注意记得把子类的构造指向子类本身\nChild.prototype.constructor = Child;\nvar parent = new Parent(&quot;father&quot;);\nparent.say(); // father: 你打篮球的样子像kunkun\nvar child = new Child(&quot;cxk&quot;, &quot;father&quot;);\nchild.say(); // father好，我是练习时长两年半的cxk\n</code></pre>\n<h3 id=\"7-8-谈谈你对-this-指向的理解\"><a href=\"#7-8-谈谈你对-this-指向的理解\" class=\"headerlink\" title=\"7.8 谈谈你对  this  指向的理解\"></a>7.8 谈谈你对  this  指向的理解</h3><p>this 的指向，始终坚持一个原理：**this ****永远指向最后调用它的那个对象**<br>改变 this 的指向我总结有以下几种方法：</p>\n<ul>\n<li>使用<br>ES6 的箭头函数</li>\n<li>在函数内部使用  _this = this</li>\n<li>使用  apply、call、bind</li>\n<li>new 实例化一个对象</li>\n</ul>\n<p>全局作用域下的  this  指向  window<br>如果给元素的事件行为绑定函数，那么函数中的  this  指向当前被绑定的那个元素<br>函数中的  this，要看函数执行前有没有 . , 有 . 的话，点前面是谁，this  就指向谁，如果没有点，指向  window<br>自执行函数中的  this  永远指向  window<br>定时器中函数的  this  指向  window<br>构造函数中的  this  指向当前的实例<br>call、apply、bind  可以改变函数的  this  指向<br>箭头函数中没有  this，如果输出  this，就会输出箭头函数定义时所在的作用域中的  this</p>\n<hr>\n<h2 id=\"8-DOM\"><a href=\"#8-DOM\" class=\"headerlink\" title=\"8. DOM\"></a>8. DOM</h2><p><strong>1).新建节点</strong><br>document.createElement(“元素名”) // 新建一个元素节点<br>document.createAttribute(“属性名”) // 新建一个属性节点<br>document.createTextNode(“文本内容”) // 创建一个文本节点<br>document.createDocumentFragment() // 新建一个  DOM  片段<br><strong>2).添加、移除、替换、插入：</strong><br>appendChild() // 向节点的子节点末尾添加新的子节点<br>removerChild() // 移除<br>parentNode.replaceChild(newChild, oldChild );用新节点替换父节点中已有的子节点<br>insertBeform() // 在已有的子节点前插入一个新的子节点<br><strong>3).查找</strong><br>document.getElementById() // 通过元素  id  查找,唯一性<br>document.getElementByClassName() // 通过  class  名称查找<br>document.getElementsByTagName() // 通过标签名称查找<br>document.getElementsByName() // 通过元素的  Name  属性的值查找</p>\n<hr>\n<h3 id=\"8-1-DOM-回流、重绘\"><a href=\"#8-1-DOM-回流、重绘\" class=\"headerlink\" title=\"8.1 DOM 回流、重绘\"></a>8.1 DOM 回流、重绘</h3><p>DOM 回流  (reflow)：页面中的元素增加、删除、大小、位置的改变，会引起浏览器重新计算<br>其他元素的位置，这种现象称为  DOM  回流。DOM  回流非常消耗性能，尽量避免  DOM  回流<br>DOM 重绘：元素的某些  css  样式如背景色、字体颜色等发生改变时，浏览器需要重新描绘渲 染这个元素，这种现象称为  DOM  重绘。</p>\n<h3 id=\"8-2-DOM-操作的读写分离\"><a href=\"#8-2-DOM-操作的读写分离\" class=\"headerlink\" title=\"8.2 DOM 操作的读写分离:\"></a>8.2 DOM 操作的读写分离:</h3><p>在  JS  中把设置样式和获取样式的两种操作分来来写， 设置样式的操作放在一起，读取样式的操作放在一起，这样可以有效的减少  DOM  的回流和重绘；</p>\n<h3 id=\"8-3-DOM-事件：\"><a href=\"#8-3-DOM-事件：\" class=\"headerlink\" title=\"8.3 DOM 事件：\"></a>8.3 DOM 事件：</h3><p>事件的传播机制：先冒泡，然后是目标阶段 然后再去捕获，我们可以利用事件的冒泡来进行事件委托，、也就是可以在父元素上绑定事件，通过事件对象 e 来判断点击的具体元素；可以提供性能；<br>我们可以利用的 e.stopPropagation()来阻止冒泡；利用 e.preventDefault()  来阻止默认事件；<br>事件中有  0  级事件绑定和  2  级事件绑定</p>\n<h3 id=\"8-4-JS-盒子模型\"><a href=\"#8-4-JS-盒子模型\" class=\"headerlink\" title=\"8.4 JS 盒子模型\"></a>8.4 JS 盒子模型</h3><ul>\n<li>// client offset scroll width height left top</li>\n<li>// clientWidth 内容宽度 + 左右  padding</li>\n<li>// offsetWidth clientWidth + 左右 border</li>\n<li>// offsetTop 当前盒子的外边框到上级参照物的内边框的偏移量</li>\n<li>// offsetParent 上级参照物：有定位的上级（包含 父级，祖父，曾祖父…）元素，所有所有上级都没有定位， 则参照物就是 body</li>\n<li>// scroll 内容不溢出 等同于 client</li>\n<li>// 内容溢出时 没有设置  overflow 值是内容宽高 + 上或左  padding</li>\n<li>// 内容溢出时 有设置  overflow  时 值是内容宽高 + 上下或左右  padding</li>\n<li>// scrollTop 卷去内容的高度</li>\n<li>// 13 个属性 只有<br>scrollTop  和  scrollLeft  时可以设置值的， 其他的都是只读属性</li>\n</ul>\n<h2 id=\"9-JS-的异步编程\"><a href=\"#9-JS-的异步编程\" class=\"headerlink\" title=\"9. JS 的异步编程\"></a>9. JS 的异步编程</h2><p><strong>因为 js 是单线程的。浏览器遇到 etTimeout 和 setInterval 会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码</strong></p>\n<p>常用的方式：setTimeout setIntervel ajax Promise  asyc/await</p>\n<p>宏任务 (marcotask) 微任务 (microtask) 的执行顺序：</p>\n<p>先执行宏任务，然后在执行微任务；</p>\n<p>JS 中的宏任务：setTimeout setIntervel ajax</p>\n<p>JS 中的微任务：Promise.then  Promise.catch   await (可以理解成 Promise.then)</p>\n<p>JS 的执行顺序是先同步 再异步；同步执行完成之前 异步不会执行</p>\n<p>EventLoop 事件循环</p>\n<p>EventQueue 事件队列</p>\n<h3 id=\"9-1-异步编程相关练习\"><a href=\"#9-1-异步编程相关练习\" class=\"headerlink\" title=\"9.1 异步编程相关练习\"></a>9.1 异步编程相关练习</h3><p><strong>[ 第一题 ]</strong></p>\n<pre><code class=\"javascript\">async function async1() &#123;\n  console.log(&quot;async1 start&quot;);\n  await async2();\n  console.log(&quot;async1 end&quot;);\n&#125;\nasync function async2() &#123;\n  console.log(&quot;async2&quot;);\n&#125;\nconsole.log(&quot;script start&quot;);\nsetTimeout(function () &#123;\n  console.log(&quot;settimeout&quot;);\n&#125;, 0);\nasync1();\nnew Promise(function (resolve) &#123;\n  console.log(&quot;promise1&quot;);\n  resolve();\n&#125;).then(function () &#123;\n  console.log(&quot;promise2&quot;);\n&#125;);\nconsole.log(&quot;script end&quot;);\n</code></pre>\n<p><strong>[ 第二题 ]</strong></p>\n<pre><code class=\"javascript\">async function async1() &#123;\n  console.log(&quot;async1 start&quot;);\n  await async2();\n  console.log(&quot;async1 end&quot;);\n&#125;\nasync function async2() &#123;\n  console.log(&quot;async2&quot;);\n&#125;\nconsole.log(&quot;script start&quot;);\nsetTimeout(function () &#123;\n  console.log(&quot;settimeout&quot;);\n&#125;);\nasync1();\nnew Promise(function (resolve) &#123;\n  console.log(&quot;promise1&quot;);\n  resolve();\n&#125;).then(function () &#123;\n  console.log(&quot;promise2&quot;);\n&#125;);\nsetImmediate(() =&gt; &#123;\n  console.log(&quot;setImmediate&quot;);\n&#125;);\nprocess.nextTick(() =&gt; &#123;\n  console.log(&quot;process&quot;);\n&#125;);\nconsole.log(&quot;script end&quot;);\n</code></pre>\n<h2 id=\"10-正则\"><a href=\"#10-正则\" class=\"headerlink\" title=\"10. 正则\"></a>10. 正则</h2><h3 id=\"10-1-解析-URL-Params-为对象\"><a href=\"#10-1-解析-URL-Params-为对象\" class=\"headerlink\" title=\"10.1 解析 URL Params 为对象\"></a>10.1 解析 URL Params 为对象</h3><pre><code class=\"javascript\">var str = &quot;http://www.zhufengpeixun.cn/?lx=1&amp;from=wx&amp;b=12&amp;c=13#qqqq&quot;;\nfunction getParam(url) &#123;\n  var reg = /([?=&amp;]+)=([?=&amp;#]+)/g;\n  let obj = &#123;&#125;;\n  url.match(reg).forEach((item) =&gt; &#123;\n    let a = item.split(&quot;=&quot;); // [&#39;lx&#39;,&#39;1&#39;]\n    obj[a[0]] = a[1];\n  &#125;);\n  return obj;\n&#125;\ngetParam(str);\n</code></pre>\n<h3 id=\"10-2-模板引擎实现\"><a href=\"#10-2-模板引擎实现\" class=\"headerlink\" title=\"10.2 模板引擎实现\"></a>10.2 模板引擎实现</h3><pre><code class=\"javascript\">let template = &quot;我是&#123;&#123;name&#125;&#125;，年龄&#123;&#123;age&#125;&#125;，性别&#123;&#123;sex&#125;&#125;&quot;;\nlet data = &#123;\n  name: &quot;姓名&quot;,\n  age: 18,\n&#125;;\nrender(template, data); // 我是姓名，年龄18，性别undefined\nfunction render(template, data) &#123;\n  const reg = /&#123;&#123;(\\w+)&#125;&#125;/; // 模板字符串正则\n  if (reg.test(template)) &#123;\n    // 判断模板里是否有模板字符串\n    const name = reg.exec(template)[1]; // 查找当前模板里第一个模板字符串的字段\n    template = template.replace(reg, data[name]); // 将第一个模板字符串渲染\n    return render(template, data); // 递归的渲染并返回渲染后的结构\n  &#125;\n  return template; // 如果模板没有模板字符串直接返回\n&#125;\n</code></pre>\n<h3 id=\"10-3-出现次数最多的字符\"><a href=\"#10-3-出现次数最多的字符\" class=\"headerlink\" title=\"10.3 出现次数最多的字符\"></a>10.3 出现次数最多的字符</h3><pre><code class=\"javascript\">var str = &quot;sfgsdfgsertdgfsdfgsertwegdsfgertewgsdfgsdg&quot;;\nfunction getMax2(str) &#123;\n  str = str.split(&quot;&quot;).sort().join(&quot;&quot;); // 把字符串进行排序\n  let key = &quot;&quot;,\n    num = 0;\n  str.replace(/(\\w)\\1*/g, function ($0, $1) &#123;\n    if ($0.length &gt; num) &#123;\n      num = $0.length;\n      key = $1;\n    &#125;\n  &#125;);\n  return &#123;\n    key,\n    num,\n  &#125;;\n&#125;\ngetMax2(str);\n</code></pre>\n<h3 id=\"10-4-千分符的实现\"><a href=\"#10-4-千分符的实现\" class=\"headerlink\" title=\"10.4 千分符的实现\"></a>10.4 千分符的实现</h3><pre><code class=\"javascript\">// 100,000,00\n\n//[ 方法1 ]\n\nvar str = &quot;1234567&quot;; // 1,234,567\nfunction moneyFormate(str) &#123;\n  str = str.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  let s = &quot;&quot;;\n  for (let i = 0; i &lt; str.length; i++) &#123;\n    i % 3 == 2 ? (s += str[i] + &quot;,&quot;) : (s += str[i]);\n  &#125;\n  s = s.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  return s;\n&#125;\nmoneyFormate(str); // 1,234,567\n\n//[ 方法2 ]\n\nvar str = &quot;1234567&quot;;\nfunction moneyFormate2(str) &#123;\n  let s = &quot;&quot;;\n  // s = str.replace(/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)/g,function(a)&#123;\n  //     console.log(arguments)\n  //     return a + &#39;,&#39;\n  // &#125;)\n  s = str.replace(/(\\d&#123;1,3&#125;)(?=(\\d&#123;3&#125;)+$)/g, &quot;$1,&quot;);\n  return s;\n&#125;\nmoneyFormate2(str);\n</code></pre>\n<hr>\n<pre><code class=\"javascript\">var str = &quot;   sdfgsg   fsgfsd    &quot;;\n// 使用正则去除字符串的首尾空格\n// 以 1 到 多个 空格开头或者结尾的 都替换成空；\nvar res = str.replace(/^ +| +$/g, &quot;&quot;);\n</code></pre>\n<hr>\n<h2 id=\"11-http-amp-ajax\"><a href=\"#11-http-amp-ajax\" class=\"headerlink\" title=\"11. http &amp; ajax\"></a>11. http &amp; ajax</h2><h3 id=\"11-1-TCP-IP-的三次握手和四次挥手\"><a href=\"#11-1-TCP-IP-的三次握手和四次挥手\" class=\"headerlink\" title=\"11.1 TCP / IP 的三次握手和四次挥手\"></a>11.1 TCP / IP 的三次握手和四次挥手</h3><p><strong>三次握手:</strong></p>\n<p>第一次握手：客户端向服务端发送  SYN  码数据包，表示客户端要求和服务端建立连接；<br>第二次握手：服务端收到客户端的连接请求后，会发送  ACK  数据包给客户端，表示你的连接请求已经收到，询问客户端是否真的需要建立连接；<br>第三次握手：客户端收到  ACK  码以后会检验是否正确，如果正确，客户端会再次发送  ACK  码给服务端，表示确认建立连接； (三次握手都成功以后才会建立连接，然后才会发送数据；)</p>\n<p><strong>四次挥手：</strong><br>**<br>第一次挥手：当客户端发送数据结束后，会发送  FIN  码数据包给服务端，表示告知服务端客 户端的数据已经传递完了。<br>第二次挥手：当服务端收到  FIN  后，会发送  ACK  给客户端，表示服务端已经知道客户端传完<br>了。客户端收到 ACK  以后就会把传递数据给服务端的通道关闭；<br>第三次挥手：当服务端把响应的数据发送完毕后，会发送一个  FIN  给客户端，告知客户端响 应的数据已经发送完毕；<br>第四次挥手：当客户端收到  FIN  后，会发送一个  ACK  码数据包给服务端，告知服务端客户端已<br>经知道数据发送完毕；服务端收到  ACK  码后，可以安心的把数据传递通道关闭掉。</p>\n<h3 id=\"11-2-http-常用状态码-http-status-code\"><a href=\"#11-2-http-常用状态码-http-status-code\" class=\"headerlink\" title=\"11.2 http 常用状态码  (http-status-code):\"></a>11.2 http 常用状态码  (http-status-code):</h3><p>2xx:表示成功<br>200 OK 表示所有东西都正常<br>204 表示请求成功,但是服务端没有内容给你<br>3xx: 表示重定向<br>301 永久重定向(当访问一个永久重定向的网站的时候,一个域名被指向一个其他网站,且是永久的)<br>302 临时重定向<br>304 走缓存(服务端觉得你之前请求过这个东西,而且服务器上的那一份没有发生变化,告诉客户端用缓存 就行)</p>\n<ul>\n<li>301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了 301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。</li>\n<li>302，Fount。临时重定向，但是会在重定向的时候改变 method:<br>把 POST 改成 GET，于是有了 307</li>\n<li>307，Temporary Redirect。临时重定向，在重定向时不会改变 method</li>\n</ul>\n<p>4xx: 表示客户端错误<br>400 参数传递不当,导致的错误<br>401 权限不够导致的<br>403 服务端已经理解请求,但是拒绝响应<br>404 客户端请求的资源或者数据不存在(发现请求接口  404,  有两种情况一种是咱们写错接口了或者服 务端还没部署)<br>5xx: 表示服务端错误(遇到以 5 开头的错误去找服务端错误)<br>500 服务端内部错误<br>502 网关错误</p>\n<h3 id=\"11-3-从浏览器输入-URL-按回车到页面显示都发生了什么\"><a href=\"#11-3-从浏览器输入-URL-按回车到页面显示都发生了什么\" class=\"headerlink\" title=\"11.3 从浏览器输入  URL  按回车到页面显示都发生了什么?\"></a>11.3 从浏览器输入  URL  按回车到页面显示都发生了什么?</h3><ul>\n<li><p>浏览器根据  URL  进行  DNS  查询</p>\n</li>\n<li><p>首先从  DNS  缓存中查询</p>\n</li>\n<li><p>若未在缓存中找到，则不停的向上一级级请求  DNS  服务器</p>\n</li>\n<li><p>取得  IP  地址，建立  TCP  连接</p>\n</li>\n<li><p>构造  HTTP  请求报</p>\n</li>\n<li><p>添加一些  HTTP  首部</p>\n</li>\n<li><p>根据同源政策添加  cookie</p>\n</li>\n<li><p>在  TCP  连接上发送  HTTP  报文，等待响应</p>\n</li>\n<li><p>服务器处理  HTTP  请求报文，返回响应  HTTP  响应报文</p>\n</li>\n<li><p>浏览器处理服务器返回的  HTTP  响应报文，若为  HTML  则渲染页面，不包括脚本的简单渲染流程如下</p>\n<p>1.   解析  DOM、CSSOM<br>2.   根据  DOM、CSSOM  计算  render tree<br>3.   根据  render tree  进行  layout<br>4.   paint，至此，用户可以看到页面了</p>\n</li>\n</ul>\n<h3 id=\"11-4-HTTPS-和-HTTP-的区别主要如下\"><a href=\"#11-4-HTTPS-和-HTTP-的区别主要如下\" class=\"headerlink\" title=\"11.4 HTTPS 和  HTTP  的区别主要如下?\"></a>11.4 HTTPS 和  HTTP  的区别主要如下?</h3><p>HTTPS 协议是由  SSL+HTTP  协议构建的可进行加密传输、身份认证的网络协议，要比  http  协议安全。<br>1、https  协议需要到  ca  申请证书，一般免费证书较少，因而需要一定费用。<br>2、http  是超文本传输协议，信息是明文传输，https  则是具有安全性的  ssl  加密传输协议。<br>3、http  和  https  使用的是完全不同的连接方式，用的端口也不一样，前者是  80，后者是  443。<br>4、http  的连接很简单，是无状态的；HTTPS  协议是由  SSL + HTTP  协议构建的可进行加密传输、身份认证的网络协议，比  http  协议安全。</p>\n<p>**https ****主要解决三个安全问题：**</p>\n<ul>\n<li>内容隐私</li>\n<li>防篡改</li>\n<li>确认对方身份</li>\n</ul>\n<p>https 并不是直接通过非对称加密传输过程，而是有握手过程，握手过程主要是和服务器做通讯，生成私有秘钥，最后通过该秘钥对称加密传输数据。还有验证证书的正确性。<br>证书验证过程保证了对方是合法的，并且中间人无法通过伪造证书方式进行攻击。</p>\n<h3 id=\"11-5-浏览器缓存？\"><a href=\"#11-5-浏览器缓存？\" class=\"headerlink\" title=\"11.5 浏览器缓存？\"></a>11.5 浏览器缓存？</h3><p>强缓存：不会向服务器发送请求，直接从缓存中读取资源，在  chrome  控制台的  Network  选项中可以看到该请求返回  200  的状态码，并且  Size  显示  from disk cache  或  from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。<br>协商缓存：就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：<br>协商缓存生效，返回  304  和  Not Modified<br>协商缓存失效，返回  200  和请求结果协商缓存可以通过设置两种<br>HTTP Header 实现：Last-Modified 和<br>ETag 。<br><strong>强制缓存优先于协商缓存进行，若强制缓存  (Expires  和  Cache-Control)  生效则直接使用缓存，若不生效则进行协商缓存  (Last-Modified / If-Modified-Since  和  Etag /<br>If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回  200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回  304，继续使用缓存</strong>。</p>\n<h3 id=\"11-6-ajax-四步\"><a href=\"#11-6-ajax-四步\" class=\"headerlink\" title=\"11.6 ajax 四步\"></a>11.6 ajax 四步</h3><ol>\n<li>创建<br>XMLHttpRequest 对象,也就是创建一个异步调用对象</li>\n<li>创建一个新的 HTTP 请求,并指定该 HTTP 请求的方法、URL 及验证信息</li>\n<li>设置响应 HTTP 请求状态变化的函数</li>\n<li>发送 HTTP<br>请求<br>** **</li>\n</ol>\n<h3 id=\"11-7-你使用过哪些-ajax\"><a href=\"#11-7-你使用过哪些-ajax\" class=\"headerlink\" title=\"11.7 你使用过哪些  ajax?\"></a>11.7 你使用过哪些  ajax?</h3><p>从原生的  XHR  到  jquery ajax，再到现在的  axios  和  fetch。<br>axios 和  fetch  都是基于  Promise  的，一般我们在使用时都会进行二次封装<br>讲到  fetch  跟  jquery ajax  的区别，这也是它很奇怪的地方<br>当接收到一个代表错误的 HTTP 状态码时，从 fetch()  返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或<br>500。相反，它会将 Promise 状态标记为<br>resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ）， 仅当网络故障时或请求被阻止时，才会标记为 reject。<br>默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）</p>\n<h3 id=\"11-8-一般我们再拦截器中都会写什么代码？\"><a href=\"#11-8-一般我们再拦截器中都会写什么代码？\" class=\"headerlink\" title=\"11.8 一般我们再拦截器中都会写什么代码？\"></a>11.8 一般我们再拦截器中都会写什么代码？</h3><p>请求拦截中我们一半会把  token  写在这里，这样的话就不用每次请求都要写这个参数<br>还会做一个数据格式的处理，假如某个参数需要统一处理 可以放在这里，<br>响应拦截一半会做一个判断 请求失败的话直接调用失败提示框 这样不用每个接口都写同样的代码<br>也会再  return  时 return reponse.data;  这样就可以不用每个数据接受的时候都加一个  data.data</p>\n<h3 id=\"11-9-get-请求和-post-请求有什么区别？什么时候使用-post\"><a href=\"#11-9-get-请求和-post-请求有什么区别？什么时候使用-post\" class=\"headerlink\" title=\"11.9 get  请求和  post  请求有什么区别？什么时候使用  post?\"></a>11.9 get  请求和  post  请求有什么区别？什么时候使用  post?</h3><p><strong>GET：</strong>一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符  <br><strong>POST：</strong>一般用于修改服务器上的资源，对所发送的信息没有限制  <br>在以下情况中，请使用 POST 请求： 1. 无法使用缓存文件（更新服务器上的文件或数据库） 2. 向服务器发送大量数据（POST 没有数据量限制） 3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠<br>实际上  HTTP 协议从未规定 GET / POST 的请求长度限制是多少。对  get  请求参数的限制是来源与浏览器或  web  服务器，浏览器或  web  服务器限制了  url  的长度。为了明确这个概念，我们必须再次强调下面几点:<br>1、HTTP<br>协议 未规定 GET 和  POST  的长度限制<br>2、GET  的最大长度显示是因为<br>浏览器和 web  服务器限制了 URI  的长度<br>3、不同的浏览器和  WEB  服务器，限制的最大长度不一样<br>4、要支持  IE，则最大长度为  2083byte，若只支持  Chrome，则最大长度 8182byt</p>\n<h3 id=\"11-10-Cookie-和-Session-的区别\"><a href=\"#11-10-Cookie-和-Session-的区别\" class=\"headerlink\" title=\"11.10 Cookie 和 Session 的区别?\"></a>11.10 Cookie 和 Session 的区别?</h3><ul>\n<li><strong>安全性：</strong> Session 比<br>Cookie 安全，Session 是存储在服务器端的，Cookie<br>是存储在客户端的。</li>\n<li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li>\n<li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li>\n<li><strong>存储大小不同：</strong>  单个<br>Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483449621-708b077e-a6f7-4162-bfa2-6082a2761c3f.png#align=left&display=inline&height=749&name=6.png&originHeight=749&originWidth=1247&size=108475&status=done&style=none&width=1247\" alt=\"6.png\"></p>\n<h3 id=\"11-11-Token-相关？\"><a href=\"#11-11-Token-相关？\" class=\"headerlink\" title=\"11.11 Token 相关？\"></a>11.11 Token 相关？</h3><p>1.   客户端使用用户名跟密码请求登录<br>2.   服务端收到请求，去验证用户名与密码<br>3.   验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端<br>4.   客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里<br>5.   客户端每次向服务端请求资源的时候需要带着服务端签发的 token<br>6.   服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据<br>·      <strong>每一次请求都需要携带 token，需要把 token 放到 HTTP 的<br>Header 里</strong><br>·      <strong>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库</strong><br>·      **token ****完全由应用管理，所以它可以避开同源策略**</p>\n<h3 id=\"11-12-同源策略\"><a href=\"#11-12-同源策略\" class=\"headerlink\" title=\"11.12  同源策略\"></a>11.12  同源策略</h3><p>同源策略是客户端脚本（尤其是 Javascript）的重要的安全度量标准。其目的是防止某个文档或脚本从多个不同源装载。   这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。  <br> <strong>为什么要有同源限制？</strong><br>我们举例说明：比如一个黑客程序，他利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容，这样用户名，密码就轻松到手了</p>\n<h3 id=\"11-13-工作中是怎么解决跨域的？\"><a href=\"#11-13-工作中是怎么解决跨域的？\" class=\"headerlink\" title=\"11.13 工作中是怎么解决跨域的？\"></a>11.13 工作中是怎么解决跨域的？</h3><p><strong>1.jsonp</strong></p>\n<ol>\n<li>JSONP 原理<br><strong>利用  **</strong><script>**** ****标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP  请求一定需要对方的服务器做支持才可以。**</li>\n</ol>\n<p><strong>2.cors</strong><br>CORS 需要浏览器和后端同时支持。浏览器会自动进行 CORS 通信，实现<br>CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。<br>**3.proxy ****代理  **（适用于本地开发）<br>。。。（其他的方式 可自行去掘金上搜 9  种跨域的方式）</p>\n<ul>\n<li>§  CORS 支持所有类型的  HTTP  请求，是跨域  HTTP  请求的根本解决方案</li>\n<li>§  JSONP 只支持  GET  请求，JSONP  的优势在于支持老式浏览器，以及可以向不支持  CORS  的网站请求数据。</li>\n<li>§  不管是  Node  中间件代理还是  nginx  反向代理，主要是通过同源策略对服务器不加限制。</li>\n<li>§  日常工作中，用得比较多的跨域方案是  cors  和  nginx  反向代理</li>\n</ul>\n<h3 id=\"11-14-http1-与-http\"><a href=\"#11-14-http1-与-http\" class=\"headerlink\" title=\"11.14 http1 与  http\"></a>11.14 http1 与  http</h3><h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483526340-043eea87-483e-49b2-aef2-e0863666764e.png#align=left&display=inline&height=525&name=7.png&originHeight=525&originWidth=935&size=74104&status=done&style=none&width=935\" alt=\"7.png\"></h3><hr>\n<h2 id=\"12-编程题\"><a href=\"#12-编程题\" class=\"headerlink\" title=\"12. 编程题\"></a>12. 编程题</h2><h3 id=\"12-1\"><a href=\"#12-1\" class=\"headerlink\" title=\"12.1\"></a>12.1</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483772793-4d2a1c89-3368-4138-9d9e-addfe2e23e7f.png#align=left&display=inline&height=338&name=8%20%282%29.png&originHeight=338&originWidth=628&size=230392&status=done&style=none&width=628\" alt=\"8 (2).png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483788143-ba516091-fe6f-4385-b28c-6824b1884505.png#align=left&display=inline&height=195&name=9.png&originHeight=195&originWidth=848&size=241762&status=done&style=none&width=848\" alt=\"9.png\"></p>\n<h2 id=\"12-2-JavaScript-22-道高频手写面试题及答案\"><a href=\"#12-2-JavaScript-22-道高频手写面试题及答案\" class=\"headerlink\" title=\"12.2  JavaScript 22 道高频手写面试题及答案\"></a>12.2  JavaScript 22 道高频手写面试题及答案</h2><ul>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-1\" rel=\"external nofollow noreferrer\">实现防抖函数（debounce）</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-2\" rel=\"external nofollow noreferrer\">实现节流函数（throttle）</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-3\" rel=\"external nofollow noreferrer\">深克隆（deepclone）</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-4\" rel=\"external nofollow noreferrer\">实现 Event(event bus)</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-5\" rel=\"external nofollow noreferrer\">实现 instanceOf</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-6\" rel=\"external nofollow noreferrer\">模拟 new</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-7\" rel=\"external nofollow noreferrer\">实现一个 call</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-8\" rel=\"external nofollow noreferrer\">实现 apply  方法</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-9\" rel=\"external nofollow noreferrer\">实现 bind</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-10\" rel=\"external nofollow noreferrer\">模拟 Object.create</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-11\" rel=\"external nofollow noreferrer\">实现类的继承</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-12\" rel=\"external nofollow noreferrer\">实现 JSON.parse</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-13\" rel=\"external nofollow noreferrer\">实现 Promise</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-14\" rel=\"external nofollow noreferrer\">解析 URL<br>Params 为对象</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-15\" rel=\"external nofollow noreferrer\">模板引擎实现</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-16\" rel=\"external nofollow noreferrer\">转化为驼峰命名</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-17\" rel=\"external nofollow noreferrer\">查找字符串中出现最多的字符和个数</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-18\" rel=\"external nofollow noreferrer\">字符串查找</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-19\" rel=\"external nofollow noreferrer\">实现千位分隔符</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-20\" rel=\"external nofollow noreferrer\">判断是否是电话号码</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-21\" rel=\"external nofollow noreferrer\">验证是否是邮箱</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-22\" rel=\"external nofollow noreferrer\">验证是否是身份证</a></li>\n</ul>\n<p>**总链接：      ** <a href=\"https://juejin.im/post/5e100cdef265da5d75243229\" rel=\"external nofollow noreferrer\">https://juejin.im/post/5e100cdef265da5d75243229</a></p>\n<h2 id=\"13-前端-100-问\"><a href=\"#13-前端-100-问\" class=\"headerlink\" title=\"13. 前端 100 问\"></a>13. 前端 100 问</h2><p>**访问链接****：    **<a href=\"https://juejin.im/post/5d23e750f265da1b855c7bbe\" rel=\"external nofollow noreferrer\">https://juejin.im/post/5d23e750f265da1b855c7bbe</a></p>\n<h2 id=\"14-XSS-和-CSRF-区别\"><a href=\"#14-XSS-和-CSRF-区别\" class=\"headerlink\" title=\"14.XSS  和  CSRF  区别\"></a>14.XSS  和  CSRF  区别</h2><p><strong>跨站脚本攻击</strong>（Cross Site Scripting)，为了不和层叠样式表 CSS 混淆，故将跨站脚本攻击缩写为 XSS。恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。<br><strong>跨站请求伪造</strong>（Cross-site request forgery），是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。</p>\n<p><strong>区别：</strong><br>**</p>\n<ul>\n<li>原理不同，CSRF  是利用网站 A 本身的漏洞，去请求网站  A  的  api；XSS  是向目标网站注入  JS  代码，然后执行  JS 里的代码。</li>\n<li>CSRF  需要用户先登录目标网站获取  cookie，而  XSS  不需要登录</li>\n<li>CSRF  的目标是用户，XSS  的目标是服务器</li>\n<li>XSS 是利用合法用户获取其信息，而  CSRF  是伪造成合法用户发起请求</li>\n</ul>\n<hr>\n<p>以上更新于 2020 年 3 月 29 日</p>\n<hr>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"1-ES6-的新特性\"><a href=\"#1-ES6-的新特性\" class=\"headerlink\" title=\"1. ES6 的新特性\"></a>1. ES6 的新特性</h2><ul>\n<li><strong>let (声明变量**</strong>)**</li>\n<li><strong>const (声明常量**</strong>,*<strong>*常量不能修改的量)</strong></li>\n<li>**class (**<strong>创建类*</strong>*) **</li>\n<li><strong>import / export (基于 **<strong>ES6 *</strong>*的模块规范创建导入**</strong>/*<strong>*导出模块**</strong>(*<strong>*文件**</strong>/*<strong>*组件**</strong>))**</li>\n<li><strong>new set (数组去重**</strong>)**</li>\n<li><strong>Symbol (唯一的值**</strong>) ** var a = Symbol(‘qqq’)</li>\n<li><strong>…ary (展开运算符、剩余运算符**</strong>)**</li>\n<li><strong>${}**</strong>  模板字符串**</li>\n<li><strong>解构赋值**</strong>  let {a} = obj; let [b] = ary**</li>\n<li><strong>for of 循环</strong></li>\n<li><strong>()=&gt;{} 箭头函数</strong></li>\n<li><strong>数组新增方法：</strong>some every  filter  reduce<br>…</li>\n<li><strong>对象新增方法：</strong> Object.assign() <br>Object.values()  Object.keys()  Object.create()</li>\n<li>…</li>\n</ul>\n<h3 id=\"1-1-var、let、const-的区别\"><a href=\"#1-1-var、let、const-的区别\" class=\"headerlink\" title=\"1.1 var、let、const 的区别\"></a>1.1 var、let、const 的区别</h3><ol>\n<li>let 和 const 声明变量不存在变量提升，如果要使用这个变量，我们需要在变量定义之后使用;</li>\n<li>let 和 const 不能重复声明变量，如果重复声明会报错;</li>\n<li>用 let<br>和 const 在全局声明变量不会给 window 增加属性;</li>\n<li>let 和 const 出现在代码块中，会把代码块(字面量声明对象除外)变成块级作用域,并且出现暂时性死区</li>\n</ol>\n<h3 id=\"1-2-箭头函数与普通函数的区别：\"><a href=\"#1-2-箭头函数与普通函数的区别：\" class=\"headerlink\" title=\"1.2 箭头函数与普通函数的区别：\"></a>1.2 箭头函数与普通函数的区别：</h3><ol>\n<li>箭头函数是匿名函数，不能作为构造函数，不能使用 new</li>\n<li>箭头函数没有原型属性</li>\n<li>this 指向不同，箭头函数的 this 是定义时所在的对象，普通函数看前面有没有, .点前面是谁 this 就是谁,没有.就是 window</li>\n<li>不可以使用 arguments 对象，该对象在函数体内不存在。</li>\n</ol>\n<hr>\n<h2 id=\"2-JS-的数据类型：\"><a href=\"#2-JS-的数据类型：\" class=\"headerlink\" title=\"2. JS 的数据类型：\"></a>2. JS 的数据类型：</h2><h3 id=\"2-1-基本数据类型\"><a href=\"#2-1-基本数据类型\" class=\"headerlink\" title=\"2.1 基本数据类型\"></a>2.1 基本数据类型</h3><ul>\n<li><strong>number</strong> 数字；</li>\n<li><strong>boolean</strong> 布尔值 :有两个值 true、false ；</li>\n<li>**string **字符串</li>\n<li>**null **空对象；</li>\n<li>**undefined **未定义的值(很多浏览器的初始值是 undefined)</li>\n<li>**Sy****mbol()** 产生一个唯一的值,和谁都不重复</li>\n</ul>\n<p>**[ null ****和 undefined 的区别: ]**</p>\n<ul>\n<li>null 是一个表示”无”的对象，转为数值时为 0</li>\n<li>undefined 是一个表示”无”的原始值，转为数值时为 NaN</li>\n<li>当声明的变量还未被初始化时，变量的默认值为<br>undefined</li>\n<li>null 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象</li>\n</ul>\n<p><strong>undefined**</strong> *<strong>*表示 “缺少值”，就是此处应该有一个值，但是还没有定义。</strong><br><strong>典型用法是：</strong><br>  1. 变量被声明了，但没有赋值时，就等于 undefined<br>  2. 调用函数时，应该提供的参数没有提供，该参数等于 undefined<br>  3. 对象没有赋值的属性，该属性的值为 undefined<br>  4. 函数没有返回值时，默认返回 undefined <br><strong>null**</strong> *<strong>*表示“没有对象”，即该处不应该有值。</strong><br><strong>典型用法是：</strong><br>  1. 作为函数的参数，表示该函数的参数不是对象<br>  2. 作为对象原型链的终点</p>\n<h3 id=\"2-2-引用数据类型\"><a href=\"#2-2-引用数据类型\" class=\"headerlink\" title=\"2.2 引用数据类型:\"></a>2.2 引用数据类型:</h3><ul>\n<li><strong>对象</strong><ul>\n<li>普通对象</li>\n<li>数组对象</li>\n<li>正则对象(匹配字符串的规则)</li>\n<li>日期对象</li>\n<li>函数对象</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p><strong>[ 对象的存储过程: ]</strong></p>\n<ol>\n<li>开辟一个空间地址</li>\n<li>把键值对存储到这个空间地址的堆内存中</li>\n<li>把这个对象指针赋值给变量名</li>\n</ol>\n<pre><code class=\"javascript\">let obj = &#123;\n  a: 1,\n  fn: (function (val) &#123;\n    // 赋给fn的是自执行函数的执行结果\n    也就是一个undefined;\n    // 该自执行函数只会执行一次\n    console.log(val);\n  &#125;)(obj.a),\n&#125;;\nlet obj2 = obj; // 两者代表了同一个地址；\n// 获取属性的值 obj.fn 或者 obj[&#39;fn&#39;]\n// 新增属性： obj.c = 100 或者 obj[&#39;c&#39;] = 100\n// 真删除 delete obj.a (在严格模式下不支持该方法)； 假删除： obj.a = null;\n\n// 引用类型小习题\nlet a = 3;\nlet b = new Number(3);\nlet c = 3;\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);\n//=========================\nconst a = &#123;&#125;;\nconst b = &#123; key: &quot;b&quot; &#125;;\nconst c = &#123; key: &quot;c&quot; &#125;;\na[b] = 123;\na[c] = 456;\nconsole.log(a[b]);\n</code></pre>\n<h3 id=\"2-3-基本数据类型与引用数据类型的区别\"><a href=\"#2-3-基本数据类型与引用数据类型的区别\" class=\"headerlink\" title=\"2.3 基本数据类型与引用数据类型的区别\"></a>2.3 基本数据类型与引用数据类型的区别</h3><p>基本数据类型是操作值,引用数据类型操作的是堆内存空间地址，</p>\n<p>**布尔值转换: **0 NaN ‘’ null undefined 转化成布尔值是  false，其余的都是  true<br><strong>检验有效数字的方法：</strong>isNaN<br><strong>常用的数据类型检测方式:</strong> typeof constructor instanceof Object.prototype.toString.call()</p>\n<h3 id=\"2-4-比较运算符\"><a href=\"#2-4-比较运算符\" class=\"headerlink\" title=\"2.4 比较运算符\"></a>2.4 比较运算符</h3><p>==  相对比较：会进行默认的类型转化； 若转换之后的值相等，则结果就是  true<br>===  绝对比较，值不但要相同、类型也得相同。<br>引用数据类型之间的比较，就看是不是同一个地址；</p>\n<h3 id=\"2-5-逻辑运算符\"><a href=\"#2-5-逻辑运算符\" class=\"headerlink\" title=\"2.5 逻辑运算符\"></a>2.5 逻辑运算符</h3><p>||      表示或者,前边成立给前边，前边不成立给后边<br>&amp;&amp;  表示并且前边成立给后边，前边不成立给前边</p>\n<hr>\n<h2 id=\"3-定义函数的方法\"><a href=\"#3-定义函数的方法\" class=\"headerlink\" title=\"3. 定义函数的方法\"></a>3. 定义函数的方法</h2><h3 id=\"3-1-function-声明\"><a href=\"#3-1-function-声明\" class=\"headerlink\" title=\"3.1 function 声明\"></a>3.1 function 声明</h3><pre><code class=\"javascript\">//ES5\nfunction getSum()&#123;&#125;\nfunction ()&#123;&#125;//匿名函数\n//ES6\n()=&gt;&#123;&#125;\n</code></pre>\n<h3 id=\"3-2-函数表达式\"><a href=\"#3-2-函数表达式\" class=\"headerlink\" title=\"3.2 函数表达式\"></a>3.2 函数表达式</h3><pre><code class=\"javascript\">//ES5\nvar getSum = function () &#123;&#125;;\n//ES6\nlet getSum = () =&gt; &#123;&#125;;\n</code></pre>\n<h3 id=\"3-3-构造函数\"><a href=\"#3-3-构造函数\" class=\"headerlink\" title=\"3.3 构造函数\"></a>3.3 构造函数</h3><pre><code class=\"javascript\">const getSum = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);\n</code></pre>\n<h2 id=\"4-JS-作用域的理解\"><a href=\"#4-JS-作用域的理解\" class=\"headerlink\" title=\"4. JS 作用域的理解\"></a>4. JS 作用域的理解</h2><p><strong>JS 中的作用域分为两种：</strong></p>\n<ul>\n<li>全局作用域</li>\n<li>函数作用域。</li>\n</ul>\n<p><strong>函数作用域中定义的变量，只能在函数中调用，外界无法访问。</strong><br>**<br>没有块级作用域导致了 if 或 for 这样的逻辑语句中定义的变量可以被外界访问，**<br>**<br>因此 ES6 中新增了 let 和 const 命令来进行块级作用域的声明。**</p>\n<pre><code class=\"javascript\">//循环绑定的问题\nfor (var i = 0; i &lt; 3; i++) &#123;\n  setTimeout(() =&gt; console.log(i), 1);\n&#125;\nfor (let i = 0; i &lt; 3; i++) &#123;\n  setTimeout(() =&gt; console.log(i), 1);\n&#125;\n//作用域链  变量的查找机制\n// 上级作用域  函数在哪里定义的，那么该函数执行形成的作用的上级作用域就是谁\n// 了解了上级作用域， 就比较容易查找变量对应的值\n</code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"5-闭包的理解\"><a href=\"#5-闭包的理解\" class=\"headerlink\" title=\"5.闭包的理解\"></a>5.闭包的理解</h2><p>简单来说闭包就是在函数里面声明函数，本质上说就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量，但是反之不可以，这只是闭包的作用之一，另一个作用，则是保护变量不受外界污染，使其一直存在内存中，在工作中我们还是少使用闭包的好，因为闭包太消耗内存，不到万不得已的时候尽量不使用。</p>\n<h2 id=\"6-数组\"><a href=\"#6-数组\" class=\"headerlink\" title=\"6. 数组\"></a>6. 数组</h2><h3 id=\"6-1-数组去重\"><a href=\"#6-1-数组去重\" class=\"headerlink\" title=\"6.1 数组去重\"></a>6.1 数组去重</h3><p>1、双  for  循环去重<br>2、利用对象的属性名不能重复去重<br>3、利用  es6  的  Set  不能重复去重</p>\n<p>（具体代码自己查）</p>\n<h3 id=\"6-2-数组重组-（将-name-值相同的合并，并去除-age-的属性）\"><a href=\"#6-2-数组重组-（将-name-值相同的合并，并去除-age-的属性）\" class=\"headerlink\" title=\"6.2 数组重组   （将 name 值相同的合并，并去除 age 的属性）\"></a>6.2 数组重组   （将 name 值相同的合并，并去除 age 的属性）</h3><pre><code class=\"javascript\">let ary = [\n  &#123; name: 1, age: 2, number: 1, son: &quot;son1&quot; &#125;,\n  &#123; name: 2, age: 23, number: 2, son: &quot;son2&quot; &#125;,\n  &#123; name: 2, age: 22, number: 3, son: &quot;son3&quot; &#125;,\n  &#123; name: 1, age: 12, number: 4, son: &quot;son4&quot; &#125;,\n  &#123; name: 1, age: 42, number: 5, son: &quot;son5&quot; &#125;,\n];\nfn(ary)[\n  // 结果为\n  (&#123;\n    name: 1,\n    list: [\n      &#123; number: 1, son: &quot;son1&quot; &#125;,\n      &#123; number: 4, son: &quot;son4&quot; &#125;,\n      &#123; number: 5, son: &quot;son5&quot; &#125;,\n    ],\n  &#125;,\n  &#123;\n    name: 2,\n    list: [\n      &#123; number: 2, son: &quot;son2&quot; &#125;,\n      &#123; number: 3, son: &quot;son3&quot; &#125;,\n    ],\n  &#125;)\n];\nfunction fn(ary) &#123;\n  let arr = [];\n  ary.forEach((item) =&gt; &#123;\n    let bol = arr.some((val) =&gt; &#123;\n      if (val.name === item.name) &#123;\n        let obj = &#123;&#125;;\n        Object.keys(item).forEach((v) =&gt; &#123;\n          if (v != &quot;name&quot; &amp;&amp; v != &quot;age&quot;) &#123;\n            obj[v] = item[v];\n          &#125;\n        &#125;);\n        val.list.push(obj);\n        return true;\n      &#125;\n    &#125;);\n    if (!bol) &#123;\n      let obj = &#123;&#125;;\n      Object.keys(item).forEach((v) =&gt; &#123;\n        if (v != &quot;name&quot; &amp;&amp; v != &quot;age&quot;) &#123;\n          obj[v] = item[v];\n        &#125;\n      &#125;);\n      arr.push(&#123; name: item.name, list: [obj] &#125;);\n    &#125;\n  &#125;);\n  return arr;\n&#125;\nfn(ary);\n</code></pre>\n<h3 id=\"6-3-数组扁平化\"><a href=\"#6-3-数组扁平化\" class=\"headerlink\" title=\"6.3 数组扁平化\"></a>6.3 数组扁平化</h3><pre><code class=\"javascript\">var arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];\n\nfunction flat1(arr) &#123;\n  let temp = [];\n  function fn(ary) &#123;\n    ary.forEach((item) =&gt; &#123;\n      if (typeof item == &quot;object&quot;) &#123;\n        fn(item);\n      &#125; else &#123;\n        temp.push(item);\n      &#125;\n    &#125;);\n  &#125;\n  fn(arr);\n  return temp;\n&#125;\n\nfunction flat2() &#123;\n  return [].concat(\n    ...this.map((item) =&gt; (Array.isArray(item) ? item.flat2() : [item]))\n  );\n&#125;\n</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585475146362-3e854784-57e2-40b5-8cad-8a9db11b31af.png#align=left&display=inline&height=620&name=3.png&originHeight=620&originWidth=889&size=433833&status=done&style=none&width=889\" alt=\"3.png\"></p>\n<hr>\n<h2 id=\"7-原型及原型链\"><a href=\"#7-原型及原型链\" class=\"headerlink\" title=\"7. 原型及原型链\"></a>7. 原型及原型链</h2><h3 id=\"7-1-原型\"><a href=\"#7-1-原型\" class=\"headerlink\" title=\"7.1 原型\"></a>7.1 原型</h3><ul>\n<li>函数都带有一个 prototype 属性，这是属性是指向构造函数的原型对象，这个对象包含所有实例共享的属性和方法。</li>\n<li>原型对象都有一个 constructor 属性，这个属性指向所关联的构造函数。</li>\n<li>每个对象都有一个 <strong>proto</strong>  属性[非标准的方法]，这个属性指向构造函数的原型 prototype</li>\n</ul>\n<h3 id=\"7-2-原型链\"><a href=\"#7-2-原型链\" class=\"headerlink\" title=\"7.2 原型链\"></a>7.2 原型链</h3><ul>\n<li>当访问实例对象的某个属性时，会先在这个对象本身的属性上查找，如果没有找到，则会<br>通过   <strong>proto</strong>  属性去原型上查找，如果还没有 找到则会在构造函数的原型的 ** proto** 中查找， 这样一层层向上查找就会形成一个作用域链，称为原型链</li>\n</ul>\n<h3 id=\"7-3-原型相关习题\"><a href=\"#7-3-原型相关习题\" class=\"headerlink\" title=\"7.3 原型相关习题\"></a>7.3 原型相关习题</h3><p><strong>[ 第一题 ]</strong></p>\n<pre><code class=\"javascript\">function Fn() &#123;\n  this.x = 100;\n  this.y = 200;\n  this.getX = function () &#123;\n    console.log(this.x);\n  &#125;;\n&#125;\nFn.prototype = &#123;\n  y: 400,\n  getX: function () &#123;\n    console.log(this.x);\n  &#125;,\n  getY: function () &#123;\n    console.log(this.y);\n  &#125;,\n  sum: function () &#123;\n    console.log(this.x + this.y);\n  &#125;,\n&#125;;\nvar f1 = new Fn();\nvar f2 = new Fn();\nconsole.log(f1.getX === f2.getX);\nconsole.log(f1.getY === f2.getY);\nconsole.log(f1.__proto__.getY === Fn.prototype.getY);\nconsole.log(f1.__proto__.getX === f2.getX);\nconsole.log(f1.getX === Fn.prototype.getX);\nconsole.log(f1.constructor);\nconsole.log(Fn.prototype.__proto__.constructor);\nf1.getX();\nf1.__proto__.getX();\nf2.getY();\nFn.prototype.getY();\nf1.sum();\nFn.prototype.sum();\n</code></pre>\n<p><strong>[ 第二题 ]</strong></p>\n<pre><code class=\"javascript\">function Foo() &#123;\n  getName = function () &#123;\n    console.log(1);\n  &#125;;\n  return this;\n&#125;\nFoo.getName = function () &#123;\n  console.log(2);\n&#125;;\nFoo.prototype.getName = function () &#123;\n  console.log(3);\n&#125;;\nvar getName = function () &#123;\n  console.log(4);\n&#125;;\nfunction getName() &#123;\n  console.log(5);\n&#125;\n\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nvar a = new Foo.getName(); //\nvar b = new Foo().getName();\nvar c = new new Foo().getName();\nconsole.log(a, b, c);\n</code></pre>\n<p><strong>[ 第三题 ]</strong></p>\n<pre><code class=\"javascript\">function Person() &#123;\n  this.name = &quot;zhufeng&quot;;\n&#125;\nPerson.prototype.getName = function () &#123;\n  console.log(this.name);\n  console.log(this.age);\n&#125;;\nPerson.prototype.age = 5000;\n\nvar per1 = new Person();\nper1.getName();\nper1.age = 9;\nper1.getName();\nconsole.log(per1.age);\nvar per2 = new Person();\nconsole.log(per2.age);\n</code></pre>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"7-4-Object-create-的作用\"><a href=\"#7-4-Object-create-的作用\" class=\"headerlink\" title=\"7.4 Object.create 的作用\"></a>7.4 Object.create 的作用</h3><pre><code class=\"javascript\">let obj = &#123; a: 123 &#125;;\nlet o = Object.create(obj);\n//该函数返回了一个新的空对象，但是该空对象的__proto__是指向了obj这个参数\n// 手写Object.create\nfunction create(proto) &#123;\n  function F() &#123;&#125;\n  F.prototype = proto;\n\n  return new F();\n&#125;\n</code></pre>\n<h3 id=\"7-5-new-的执行过程是怎么回事？\"><a href=\"#7-5-new-的执行过程是怎么回事？\" class=\"headerlink\" title=\"7.5 new 的执行过程是怎么回事？\"></a>7.5 new 的执行过程是怎么回事？</h3><p>new 操作符做了这些事：</p>\n<ul>\n<li>它创建了一个全新的对象</li>\n<li>它会被执行  [[Prototype]]（也就是  <strong>proto</strong>）链接</li>\n<li>它使  this  指向新创建的对象</li>\n<li>通过  new  创建的每个对象将最终被  [[Prototype]]  链接到这个函数的  prototype  对象上</li>\n<li>如果函数没有返回对象类型  Object (包含  Functoin, Array, Date, RegExg,<br>Error)，那么  new  表达式中的函数调用将返回该对象引用</li>\n</ul>\n<p><strong>[ 模拟 new ]</strong></p>\n<pre><code class=\"javascript\">function objectFactory() &#123;\n  const obj = new Object();\n  const Constructor = [].shift.call(arguments);\n\n  obj.__proto__ = Constructor.prototype;\n\n  const ret = Constructor.apply(obj, arguments);\n\n  return typeof ret === &quot;object&quot; ? ret : obj;\n&#125;\n</code></pre>\n<h3 id=\"7-6-call-apply-bind-三者的区别？\"><a href=\"#7-6-call-apply-bind-三者的区别？\" class=\"headerlink\" title=\"7.6 call, apply, bind 三者的区别？\"></a>7.6 call, apply, bind 三者的区别？</h3><p><strong>[ apply() 方法 ]</strong><br>**</p>\n<ul>\n<li>apply() 方法调用一个函数, 其具有一个指定的 this 值，以及作为一个数组（或类似数组的对象）提供的参数 fun.apply(thisArg, [argsArray]</li>\n<li>apply 和 call<br>基本类似，他们的区别只是传入的参数不同。</li>\n<li>apply 和 call<br>的区别是 call 方法接受的是若干个参数列表，而 apply<br>接收的是一个包含多个参数的数组。</li>\n</ul>\n<p><strong>[ 模拟 apply ]</strong><br>**</p>\n<pre><code class=\"javascript\">Function.prototype.myapply = function (context, arr) &#123;\n  var context = Object(context) || window;\n  context.fn = this;\n\n  var result;\n  if (!arr) &#123;\n    result = context.fn();\n  &#125; else &#123;\n    var args = [];\n    for (var i = 0, len = arr.length; i &lt; len; i++) &#123;\n      args.push(&quot;arr[&quot; + i + &quot;]&quot;);\n    &#125;\n    result = eval(&quot;context.fn(&quot; + args + &quot;)&quot;);\n  &#125;\n\n  delete context.fn;\n  return result;\n&#125;;\n</code></pre>\n<p><strong>[ bind() 方法 ]</strong></p>\n<ul>\n<li>bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</li>\n</ul>\n<p><strong>[ bind() 方法的实现 ]</strong><br>实现 bind 要做什么</p>\n<ul>\n<li>返回一个函数，绑定  this，传递预置参数</li>\n<li>bind 返回的函数可以作为构造函数使用。故作为构造函数时应使得 this 失效，但是传入的参数依然有效</li>\n</ul>\n<pre><code class=\"javascript\">// mdn的实现\nif (!Function.prototype.bind) &#123;\n  Function.prototype.bind = function(oThis) &#123;\n    if (typeof this !== &#39;function&#39;) &#123;\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(&#39;Function.prototype.bind - what is trying\nto be bound is not callable&#39;);\n    &#125;\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function()\n&#123;&#125;,\n        fBound  = function() &#123;\n          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用\n          return fToBind.apply(this instanceof fBound\n                 ? this\n                 : oThis,\n                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        &#125;;\n\n    // 维护原型关系\n    if (this.prototype) &#123;\n      // Function.prototype doesn&#39;t have a prototype property\n      fNOP.prototype = this.prototype;\n    &#125;\n    // 下行的代码使fBound.prototype是fNOP的实例,因此\n    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  &#125;;\n&#125;\n</code></pre>\n<p><strong>[ call() 方法 ]</strong></p>\n<ul>\n<li>将函数设为对象的属性</li>\n<li>执行  &amp;  删除这个函数</li>\n<li>指定  this  到函数并传入给定参数执行函数</li>\n<li>如果不传入参数，默认指向为 window</li>\n</ul>\n<p><strong>[ call() 方法的实现 ]</strong></p>\n<pre><code class=\"javascript\">Function.prototype.myCall = function (context) &#123;\n  //此处没有考虑context非object情况\n  context.fn = this;\n  let args = [];\n  for (let i = 1, len = arguments.length; i &lt; len; i++) &#123;\n    args.push(arguments[i]);\n  &#125;\n  context.fn(...args);\n  let result = context.fn(...args);\n  delete context.fn;\n  return result;\n&#125;;\n</code></pre>\n<h3 id=\"7-7-实现类的继承\"><a href=\"#7-7-实现类的继承\" class=\"headerlink\" title=\"7.7 实现类的继承\"></a>7.7 实现类的继承</h3><p>类的继承在几年前是重点内容，有 n 种继承方式各有优劣，es6  普及后越来越不重要，那么多种写法有点『回字有四样写法』的意思，如果还想深入理解的去看红宝书即可，我们目前只实现一种最理想的继承方式。</p>\n<pre><code class=\"javascript\">function Parent(name) &#123;\n  this.parent = name;\n&#125;\nParent.prototype.say = function () &#123;\n  console.log(`$&#123;this.parent&#125;: 你打篮球的样子像kunkun`);\n&#125;;\nfunction Child(name, parent) &#123;\n  // 将父类的构造函数绑定在子类上\n  Parent.call(this, parent);\n  this.child = name;\n&#125;\n/** \n 1. 这一步不用Child.prototype =Parent.prototype的原因是怕共享内存，修改父类原型对象就会影响子类\n 2. 不用Child.prototype = new Parent()的原因是会调用2次父类的构造方法（另一次是call），会存在一份多余的父类实例属性\n3.\nObject.create是创建了父类原型的副本，与父类原型完全隔离\n*/\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.say = function () &#123;\n  console.log(`$&#123;this.parent&#125;好，我是练习时长两年半的$&#123;this.child&#125;`);\n&#125;;\n// 注意记得把子类的构造指向子类本身\nChild.prototype.constructor = Child;\nvar parent = new Parent(&quot;father&quot;);\nparent.say(); // father: 你打篮球的样子像kunkun\nvar child = new Child(&quot;cxk&quot;, &quot;father&quot;);\nchild.say(); // father好，我是练习时长两年半的cxk\n</code></pre>\n<h3 id=\"7-8-谈谈你对-this-指向的理解\"><a href=\"#7-8-谈谈你对-this-指向的理解\" class=\"headerlink\" title=\"7.8 谈谈你对  this  指向的理解\"></a>7.8 谈谈你对  this  指向的理解</h3><p>this 的指向，始终坚持一个原理：**this ****永远指向最后调用它的那个对象**<br>改变 this 的指向我总结有以下几种方法：</p>\n<ul>\n<li>使用<br>ES6 的箭头函数</li>\n<li>在函数内部使用  _this = this</li>\n<li>使用  apply、call、bind</li>\n<li>new 实例化一个对象</li>\n</ul>\n<p>全局作用域下的  this  指向  window<br>如果给元素的事件行为绑定函数，那么函数中的  this  指向当前被绑定的那个元素<br>函数中的  this，要看函数执行前有没有 . , 有 . 的话，点前面是谁，this  就指向谁，如果没有点，指向  window<br>自执行函数中的  this  永远指向  window<br>定时器中函数的  this  指向  window<br>构造函数中的  this  指向当前的实例<br>call、apply、bind  可以改变函数的  this  指向<br>箭头函数中没有  this，如果输出  this，就会输出箭头函数定义时所在的作用域中的  this</p>\n<hr>\n<h2 id=\"8-DOM\"><a href=\"#8-DOM\" class=\"headerlink\" title=\"8. DOM\"></a>8. DOM</h2><p><strong>1).新建节点</strong><br>document.createElement(“元素名”) // 新建一个元素节点<br>document.createAttribute(“属性名”) // 新建一个属性节点<br>document.createTextNode(“文本内容”) // 创建一个文本节点<br>document.createDocumentFragment() // 新建一个  DOM  片段<br><strong>2).添加、移除、替换、插入：</strong><br>appendChild() // 向节点的子节点末尾添加新的子节点<br>removerChild() // 移除<br>parentNode.replaceChild(newChild, oldChild );用新节点替换父节点中已有的子节点<br>insertBeform() // 在已有的子节点前插入一个新的子节点<br><strong>3).查找</strong><br>document.getElementById() // 通过元素  id  查找,唯一性<br>document.getElementByClassName() // 通过  class  名称查找<br>document.getElementsByTagName() // 通过标签名称查找<br>document.getElementsByName() // 通过元素的  Name  属性的值查找</p>\n<hr>\n<h3 id=\"8-1-DOM-回流、重绘\"><a href=\"#8-1-DOM-回流、重绘\" class=\"headerlink\" title=\"8.1 DOM 回流、重绘\"></a>8.1 DOM 回流、重绘</h3><p>DOM 回流  (reflow)：页面中的元素增加、删除、大小、位置的改变，会引起浏览器重新计算<br>其他元素的位置，这种现象称为  DOM  回流。DOM  回流非常消耗性能，尽量避免  DOM  回流<br>DOM 重绘：元素的某些  css  样式如背景色、字体颜色等发生改变时，浏览器需要重新描绘渲 染这个元素，这种现象称为  DOM  重绘。</p>\n<h3 id=\"8-2-DOM-操作的读写分离\"><a href=\"#8-2-DOM-操作的读写分离\" class=\"headerlink\" title=\"8.2 DOM 操作的读写分离:\"></a>8.2 DOM 操作的读写分离:</h3><p>在  JS  中把设置样式和获取样式的两种操作分来来写， 设置样式的操作放在一起，读取样式的操作放在一起，这样可以有效的减少  DOM  的回流和重绘；</p>\n<h3 id=\"8-3-DOM-事件：\"><a href=\"#8-3-DOM-事件：\" class=\"headerlink\" title=\"8.3 DOM 事件：\"></a>8.3 DOM 事件：</h3><p>事件的传播机制：先冒泡，然后是目标阶段 然后再去捕获，我们可以利用事件的冒泡来进行事件委托，、也就是可以在父元素上绑定事件，通过事件对象 e 来判断点击的具体元素；可以提供性能；<br>我们可以利用的 e.stopPropagation()来阻止冒泡；利用 e.preventDefault()  来阻止默认事件；<br>事件中有  0  级事件绑定和  2  级事件绑定</p>\n<h3 id=\"8-4-JS-盒子模型\"><a href=\"#8-4-JS-盒子模型\" class=\"headerlink\" title=\"8.4 JS 盒子模型\"></a>8.4 JS 盒子模型</h3><ul>\n<li>// client offset scroll width height left top</li>\n<li>// clientWidth 内容宽度 + 左右  padding</li>\n<li>// offsetWidth clientWidth + 左右 border</li>\n<li>// offsetTop 当前盒子的外边框到上级参照物的内边框的偏移量</li>\n<li>// offsetParent 上级参照物：有定位的上级（包含 父级，祖父，曾祖父…）元素，所有所有上级都没有定位， 则参照物就是 body</li>\n<li>// scroll 内容不溢出 等同于 client</li>\n<li>// 内容溢出时 没有设置  overflow 值是内容宽高 + 上或左  padding</li>\n<li>// 内容溢出时 有设置  overflow  时 值是内容宽高 + 上下或左右  padding</li>\n<li>// scrollTop 卷去内容的高度</li>\n<li>// 13 个属性 只有<br>scrollTop  和  scrollLeft  时可以设置值的， 其他的都是只读属性</li>\n</ul>\n<h2 id=\"9-JS-的异步编程\"><a href=\"#9-JS-的异步编程\" class=\"headerlink\" title=\"9. JS 的异步编程\"></a>9. JS 的异步编程</h2><p><strong>因为 js 是单线程的。浏览器遇到 etTimeout 和 setInterval 会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码</strong></p>\n<p>常用的方式：setTimeout setIntervel ajax Promise  asyc/await</p>\n<p>宏任务 (marcotask) 微任务 (microtask) 的执行顺序：</p>\n<p>先执行宏任务，然后在执行微任务；</p>\n<p>JS 中的宏任务：setTimeout setIntervel ajax</p>\n<p>JS 中的微任务：Promise.then  Promise.catch   await (可以理解成 Promise.then)</p>\n<p>JS 的执行顺序是先同步 再异步；同步执行完成之前 异步不会执行</p>\n<p>EventLoop 事件循环</p>\n<p>EventQueue 事件队列</p>\n<h3 id=\"9-1-异步编程相关练习\"><a href=\"#9-1-异步编程相关练习\" class=\"headerlink\" title=\"9.1 异步编程相关练习\"></a>9.1 异步编程相关练习</h3><p><strong>[ 第一题 ]</strong></p>\n<pre><code class=\"javascript\">async function async1() &#123;\n  console.log(&quot;async1 start&quot;);\n  await async2();\n  console.log(&quot;async1 end&quot;);\n&#125;\nasync function async2() &#123;\n  console.log(&quot;async2&quot;);\n&#125;\nconsole.log(&quot;script start&quot;);\nsetTimeout(function () &#123;\n  console.log(&quot;settimeout&quot;);\n&#125;, 0);\nasync1();\nnew Promise(function (resolve) &#123;\n  console.log(&quot;promise1&quot;);\n  resolve();\n&#125;).then(function () &#123;\n  console.log(&quot;promise2&quot;);\n&#125;);\nconsole.log(&quot;script end&quot;);\n</code></pre>\n<p><strong>[ 第二题 ]</strong></p>\n<pre><code class=\"javascript\">async function async1() &#123;\n  console.log(&quot;async1 start&quot;);\n  await async2();\n  console.log(&quot;async1 end&quot;);\n&#125;\nasync function async2() &#123;\n  console.log(&quot;async2&quot;);\n&#125;\nconsole.log(&quot;script start&quot;);\nsetTimeout(function () &#123;\n  console.log(&quot;settimeout&quot;);\n&#125;);\nasync1();\nnew Promise(function (resolve) &#123;\n  console.log(&quot;promise1&quot;);\n  resolve();\n&#125;).then(function () &#123;\n  console.log(&quot;promise2&quot;);\n&#125;);\nsetImmediate(() =&gt; &#123;\n  console.log(&quot;setImmediate&quot;);\n&#125;);\nprocess.nextTick(() =&gt; &#123;\n  console.log(&quot;process&quot;);\n&#125;);\nconsole.log(&quot;script end&quot;);\n</code></pre>\n<h2 id=\"10-正则\"><a href=\"#10-正则\" class=\"headerlink\" title=\"10. 正则\"></a>10. 正则</h2><h3 id=\"10-1-解析-URL-Params-为对象\"><a href=\"#10-1-解析-URL-Params-为对象\" class=\"headerlink\" title=\"10.1 解析 URL Params 为对象\"></a>10.1 解析 URL Params 为对象</h3><pre><code class=\"javascript\">var str = &quot;http://www.zhufengpeixun.cn/?lx=1&amp;from=wx&amp;b=12&amp;c=13#qqqq&quot;;\nfunction getParam(url) &#123;\n  var reg = /([?=&amp;]+)=([?=&amp;#]+)/g;\n  let obj = &#123;&#125;;\n  url.match(reg).forEach((item) =&gt; &#123;\n    let a = item.split(&quot;=&quot;); // [&#39;lx&#39;,&#39;1&#39;]\n    obj[a[0]] = a[1];\n  &#125;);\n  return obj;\n&#125;\ngetParam(str);\n</code></pre>\n<h3 id=\"10-2-模板引擎实现\"><a href=\"#10-2-模板引擎实现\" class=\"headerlink\" title=\"10.2 模板引擎实现\"></a>10.2 模板引擎实现</h3><pre><code class=\"javascript\">let template = &quot;我是&#123;&#123;name&#125;&#125;，年龄&#123;&#123;age&#125;&#125;，性别&#123;&#123;sex&#125;&#125;&quot;;\nlet data = &#123;\n  name: &quot;姓名&quot;,\n  age: 18,\n&#125;;\nrender(template, data); // 我是姓名，年龄18，性别undefined\nfunction render(template, data) &#123;\n  const reg = /&#123;&#123;(\\w+)&#125;&#125;/; // 模板字符串正则\n  if (reg.test(template)) &#123;\n    // 判断模板里是否有模板字符串\n    const name = reg.exec(template)[1]; // 查找当前模板里第一个模板字符串的字段\n    template = template.replace(reg, data[name]); // 将第一个模板字符串渲染\n    return render(template, data); // 递归的渲染并返回渲染后的结构\n  &#125;\n  return template; // 如果模板没有模板字符串直接返回\n&#125;\n</code></pre>\n<h3 id=\"10-3-出现次数最多的字符\"><a href=\"#10-3-出现次数最多的字符\" class=\"headerlink\" title=\"10.3 出现次数最多的字符\"></a>10.3 出现次数最多的字符</h3><pre><code class=\"javascript\">var str = &quot;sfgsdfgsertdgfsdfgsertwegdsfgertewgsdfgsdg&quot;;\nfunction getMax2(str) &#123;\n  str = str.split(&quot;&quot;).sort().join(&quot;&quot;); // 把字符串进行排序\n  let key = &quot;&quot;,\n    num = 0;\n  str.replace(/(\\w)\\1*/g, function ($0, $1) &#123;\n    if ($0.length &gt; num) &#123;\n      num = $0.length;\n      key = $1;\n    &#125;\n  &#125;);\n  return &#123;\n    key,\n    num,\n  &#125;;\n&#125;\ngetMax2(str);\n</code></pre>\n<h3 id=\"10-4-千分符的实现\"><a href=\"#10-4-千分符的实现\" class=\"headerlink\" title=\"10.4 千分符的实现\"></a>10.4 千分符的实现</h3><pre><code class=\"javascript\">// 100,000,00\n\n//[ 方法1 ]\n\nvar str = &quot;1234567&quot;; // 1,234,567\nfunction moneyFormate(str) &#123;\n  str = str.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  let s = &quot;&quot;;\n  for (let i = 0; i &lt; str.length; i++) &#123;\n    i % 3 == 2 ? (s += str[i] + &quot;,&quot;) : (s += str[i]);\n  &#125;\n  s = s.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  return s;\n&#125;\nmoneyFormate(str); // 1,234,567\n\n//[ 方法2 ]\n\nvar str = &quot;1234567&quot;;\nfunction moneyFormate2(str) &#123;\n  let s = &quot;&quot;;\n  // s = str.replace(/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)/g,function(a)&#123;\n  //     console.log(arguments)\n  //     return a + &#39;,&#39;\n  // &#125;)\n  s = str.replace(/(\\d&#123;1,3&#125;)(?=(\\d&#123;3&#125;)+$)/g, &quot;$1,&quot;);\n  return s;\n&#125;\nmoneyFormate2(str);\n</code></pre>\n<hr>\n<pre><code class=\"javascript\">var str = &quot;   sdfgsg   fsgfsd    &quot;;\n// 使用正则去除字符串的首尾空格\n// 以 1 到 多个 空格开头或者结尾的 都替换成空；\nvar res = str.replace(/^ +| +$/g, &quot;&quot;);\n</code></pre>\n<hr>\n<h2 id=\"11-http-amp-ajax\"><a href=\"#11-http-amp-ajax\" class=\"headerlink\" title=\"11. http &amp; ajax\"></a>11. http &amp; ajax</h2><h3 id=\"11-1-TCP-IP-的三次握手和四次挥手\"><a href=\"#11-1-TCP-IP-的三次握手和四次挥手\" class=\"headerlink\" title=\"11.1 TCP / IP 的三次握手和四次挥手\"></a>11.1 TCP / IP 的三次握手和四次挥手</h3><p><strong>三次握手:</strong></p>\n<p>第一次握手：客户端向服务端发送  SYN  码数据包，表示客户端要求和服务端建立连接；<br>第二次握手：服务端收到客户端的连接请求后，会发送  ACK  数据包给客户端，表示你的连接请求已经收到，询问客户端是否真的需要建立连接；<br>第三次握手：客户端收到  ACK  码以后会检验是否正确，如果正确，客户端会再次发送  ACK  码给服务端，表示确认建立连接； (三次握手都成功以后才会建立连接，然后才会发送数据；)</p>\n<p><strong>四次挥手：</strong><br>**<br>第一次挥手：当客户端发送数据结束后，会发送  FIN  码数据包给服务端，表示告知服务端客 户端的数据已经传递完了。<br>第二次挥手：当服务端收到  FIN  后，会发送  ACK  给客户端，表示服务端已经知道客户端传完<br>了。客户端收到 ACK  以后就会把传递数据给服务端的通道关闭；<br>第三次挥手：当服务端把响应的数据发送完毕后，会发送一个  FIN  给客户端，告知客户端响 应的数据已经发送完毕；<br>第四次挥手：当客户端收到  FIN  后，会发送一个  ACK  码数据包给服务端，告知服务端客户端已<br>经知道数据发送完毕；服务端收到  ACK  码后，可以安心的把数据传递通道关闭掉。</p>\n<h3 id=\"11-2-http-常用状态码-http-status-code\"><a href=\"#11-2-http-常用状态码-http-status-code\" class=\"headerlink\" title=\"11.2 http 常用状态码  (http-status-code):\"></a>11.2 http 常用状态码  (http-status-code):</h3><p>2xx:表示成功<br>200 OK 表示所有东西都正常<br>204 表示请求成功,但是服务端没有内容给你<br>3xx: 表示重定向<br>301 永久重定向(当访问一个永久重定向的网站的时候,一个域名被指向一个其他网站,且是永久的)<br>302 临时重定向<br>304 走缓存(服务端觉得你之前请求过这个东西,而且服务器上的那一份没有发生变化,告诉客户端用缓存 就行)</p>\n<ul>\n<li>301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了 301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。</li>\n<li>302，Fount。临时重定向，但是会在重定向的时候改变 method:<br>把 POST 改成 GET，于是有了 307</li>\n<li>307，Temporary Redirect。临时重定向，在重定向时不会改变 method</li>\n</ul>\n<p>4xx: 表示客户端错误<br>400 参数传递不当,导致的错误<br>401 权限不够导致的<br>403 服务端已经理解请求,但是拒绝响应<br>404 客户端请求的资源或者数据不存在(发现请求接口  404,  有两种情况一种是咱们写错接口了或者服 务端还没部署)<br>5xx: 表示服务端错误(遇到以 5 开头的错误去找服务端错误)<br>500 服务端内部错误<br>502 网关错误</p>\n<h3 id=\"11-3-从浏览器输入-URL-按回车到页面显示都发生了什么\"><a href=\"#11-3-从浏览器输入-URL-按回车到页面显示都发生了什么\" class=\"headerlink\" title=\"11.3 从浏览器输入  URL  按回车到页面显示都发生了什么?\"></a>11.3 从浏览器输入  URL  按回车到页面显示都发生了什么?</h3><ul>\n<li><p>浏览器根据  URL  进行  DNS  查询</p>\n</li>\n<li><p>首先从  DNS  缓存中查询</p>\n</li>\n<li><p>若未在缓存中找到，则不停的向上一级级请求  DNS  服务器</p>\n</li>\n<li><p>取得  IP  地址，建立  TCP  连接</p>\n</li>\n<li><p>构造  HTTP  请求报</p>\n</li>\n<li><p>添加一些  HTTP  首部</p>\n</li>\n<li><p>根据同源政策添加  cookie</p>\n</li>\n<li><p>在  TCP  连接上发送  HTTP  报文，等待响应</p>\n</li>\n<li><p>服务器处理  HTTP  请求报文，返回响应  HTTP  响应报文</p>\n</li>\n<li><p>浏览器处理服务器返回的  HTTP  响应报文，若为  HTML  则渲染页面，不包括脚本的简单渲染流程如下</p>\n<p>1.   解析  DOM、CSSOM<br>2.   根据  DOM、CSSOM  计算  render tree<br>3.   根据  render tree  进行  layout<br>4.   paint，至此，用户可以看到页面了</p>\n</li>\n</ul>\n<h3 id=\"11-4-HTTPS-和-HTTP-的区别主要如下\"><a href=\"#11-4-HTTPS-和-HTTP-的区别主要如下\" class=\"headerlink\" title=\"11.4 HTTPS 和  HTTP  的区别主要如下?\"></a>11.4 HTTPS 和  HTTP  的区别主要如下?</h3><p>HTTPS 协议是由  SSL+HTTP  协议构建的可进行加密传输、身份认证的网络协议，要比  http  协议安全。<br>1、https  协议需要到  ca  申请证书，一般免费证书较少，因而需要一定费用。<br>2、http  是超文本传输协议，信息是明文传输，https  则是具有安全性的  ssl  加密传输协议。<br>3、http  和  https  使用的是完全不同的连接方式，用的端口也不一样，前者是  80，后者是  443。<br>4、http  的连接很简单，是无状态的；HTTPS  协议是由  SSL + HTTP  协议构建的可进行加密传输、身份认证的网络协议，比  http  协议安全。</p>\n<p>**https ****主要解决三个安全问题：**</p>\n<ul>\n<li>内容隐私</li>\n<li>防篡改</li>\n<li>确认对方身份</li>\n</ul>\n<p>https 并不是直接通过非对称加密传输过程，而是有握手过程，握手过程主要是和服务器做通讯，生成私有秘钥，最后通过该秘钥对称加密传输数据。还有验证证书的正确性。<br>证书验证过程保证了对方是合法的，并且中间人无法通过伪造证书方式进行攻击。</p>\n<h3 id=\"11-5-浏览器缓存？\"><a href=\"#11-5-浏览器缓存？\" class=\"headerlink\" title=\"11.5 浏览器缓存？\"></a>11.5 浏览器缓存？</h3><p>强缓存：不会向服务器发送请求，直接从缓存中读取资源，在  chrome  控制台的  Network  选项中可以看到该请求返回  200  的状态码，并且  Size  显示  from disk cache  或  from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。<br>协商缓存：就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：<br>协商缓存生效，返回  304  和  Not Modified<br>协商缓存失效，返回  200  和请求结果协商缓存可以通过设置两种<br>HTTP Header 实现：Last-Modified 和<br>ETag 。<br><strong>强制缓存优先于协商缓存进行，若强制缓存  (Expires  和  Cache-Control)  生效则直接使用缓存，若不生效则进行协商缓存  (Last-Modified / If-Modified-Since  和  Etag /<br>If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回  200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回  304，继续使用缓存</strong>。</p>\n<h3 id=\"11-6-ajax-四步\"><a href=\"#11-6-ajax-四步\" class=\"headerlink\" title=\"11.6 ajax 四步\"></a>11.6 ajax 四步</h3><ol>\n<li>创建<br>XMLHttpRequest 对象,也就是创建一个异步调用对象</li>\n<li>创建一个新的 HTTP 请求,并指定该 HTTP 请求的方法、URL 及验证信息</li>\n<li>设置响应 HTTP 请求状态变化的函数</li>\n<li>发送 HTTP<br>请求<br>** **</li>\n</ol>\n<h3 id=\"11-7-你使用过哪些-ajax\"><a href=\"#11-7-你使用过哪些-ajax\" class=\"headerlink\" title=\"11.7 你使用过哪些  ajax?\"></a>11.7 你使用过哪些  ajax?</h3><p>从原生的  XHR  到  jquery ajax，再到现在的  axios  和  fetch。<br>axios 和  fetch  都是基于  Promise  的，一般我们在使用时都会进行二次封装<br>讲到  fetch  跟  jquery ajax  的区别，这也是它很奇怪的地方<br>当接收到一个代表错误的 HTTP 状态码时，从 fetch()  返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或<br>500。相反，它会将 Promise 状态标记为<br>resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ）， 仅当网络故障时或请求被阻止时，才会标记为 reject。<br>默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）</p>\n<h3 id=\"11-8-一般我们再拦截器中都会写什么代码？\"><a href=\"#11-8-一般我们再拦截器中都会写什么代码？\" class=\"headerlink\" title=\"11.8 一般我们再拦截器中都会写什么代码？\"></a>11.8 一般我们再拦截器中都会写什么代码？</h3><p>请求拦截中我们一半会把  token  写在这里，这样的话就不用每次请求都要写这个参数<br>还会做一个数据格式的处理，假如某个参数需要统一处理 可以放在这里，<br>响应拦截一半会做一个判断 请求失败的话直接调用失败提示框 这样不用每个接口都写同样的代码<br>也会再  return  时 return reponse.data;  这样就可以不用每个数据接受的时候都加一个  data.data</p>\n<h3 id=\"11-9-get-请求和-post-请求有什么区别？什么时候使用-post\"><a href=\"#11-9-get-请求和-post-请求有什么区别？什么时候使用-post\" class=\"headerlink\" title=\"11.9 get  请求和  post  请求有什么区别？什么时候使用  post?\"></a>11.9 get  请求和  post  请求有什么区别？什么时候使用  post?</h3><p><strong>GET：</strong>一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符  <br><strong>POST：</strong>一般用于修改服务器上的资源，对所发送的信息没有限制  <br>在以下情况中，请使用 POST 请求： 1. 无法使用缓存文件（更新服务器上的文件或数据库） 2. 向服务器发送大量数据（POST 没有数据量限制） 3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠<br>实际上  HTTP 协议从未规定 GET / POST 的请求长度限制是多少。对  get  请求参数的限制是来源与浏览器或  web  服务器，浏览器或  web  服务器限制了  url  的长度。为了明确这个概念，我们必须再次强调下面几点:<br>1、HTTP<br>协议 未规定 GET 和  POST  的长度限制<br>2、GET  的最大长度显示是因为<br>浏览器和 web  服务器限制了 URI  的长度<br>3、不同的浏览器和  WEB  服务器，限制的最大长度不一样<br>4、要支持  IE，则最大长度为  2083byte，若只支持  Chrome，则最大长度 8182byt</p>\n<h3 id=\"11-10-Cookie-和-Session-的区别\"><a href=\"#11-10-Cookie-和-Session-的区别\" class=\"headerlink\" title=\"11.10 Cookie 和 Session 的区别?\"></a>11.10 Cookie 和 Session 的区别?</h3><ul>\n<li><strong>安全性：</strong> Session 比<br>Cookie 安全，Session 是存储在服务器端的，Cookie<br>是存储在客户端的。</li>\n<li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li>\n<li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li>\n<li><strong>存储大小不同：</strong>  单个<br>Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483449621-708b077e-a6f7-4162-bfa2-6082a2761c3f.png#align=left&display=inline&height=749&name=6.png&originHeight=749&originWidth=1247&size=108475&status=done&style=none&width=1247\" alt=\"6.png\"></p>\n<h3 id=\"11-11-Token-相关？\"><a href=\"#11-11-Token-相关？\" class=\"headerlink\" title=\"11.11 Token 相关？\"></a>11.11 Token 相关？</h3><p>1.   客户端使用用户名跟密码请求登录<br>2.   服务端收到请求，去验证用户名与密码<br>3.   验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端<br>4.   客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里<br>5.   客户端每次向服务端请求资源的时候需要带着服务端签发的 token<br>6.   服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据<br>·      <strong>每一次请求都需要携带 token，需要把 token 放到 HTTP 的<br>Header 里</strong><br>·      <strong>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库</strong><br>·      **token ****完全由应用管理，所以它可以避开同源策略**</p>\n<h3 id=\"11-12-同源策略\"><a href=\"#11-12-同源策略\" class=\"headerlink\" title=\"11.12  同源策略\"></a>11.12  同源策略</h3><p>同源策略是客户端脚本（尤其是 Javascript）的重要的安全度量标准。其目的是防止某个文档或脚本从多个不同源装载。   这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。  <br> <strong>为什么要有同源限制？</strong><br>我们举例说明：比如一个黑客程序，他利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容，这样用户名，密码就轻松到手了</p>\n<h3 id=\"11-13-工作中是怎么解决跨域的？\"><a href=\"#11-13-工作中是怎么解决跨域的？\" class=\"headerlink\" title=\"11.13 工作中是怎么解决跨域的？\"></a>11.13 工作中是怎么解决跨域的？</h3><p><strong>1.jsonp</strong></p>\n<ol>\n<li>JSONP 原理<br><strong>利用  **</strong><script>**** ****标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP  请求一定需要对方的服务器做支持才可以。**</li>\n</ol>\n<p><strong>2.cors</strong><br>CORS 需要浏览器和后端同时支持。浏览器会自动进行 CORS 通信，实现<br>CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。<br>**3.proxy ****代理  **（适用于本地开发）<br>。。。（其他的方式 可自行去掘金上搜 9  种跨域的方式）</p>\n<ul>\n<li>§  CORS 支持所有类型的  HTTP  请求，是跨域  HTTP  请求的根本解决方案</li>\n<li>§  JSONP 只支持  GET  请求，JSONP  的优势在于支持老式浏览器，以及可以向不支持  CORS  的网站请求数据。</li>\n<li>§  不管是  Node  中间件代理还是  nginx  反向代理，主要是通过同源策略对服务器不加限制。</li>\n<li>§  日常工作中，用得比较多的跨域方案是  cors  和  nginx  反向代理</li>\n</ul>\n<h3 id=\"11-14-http1-与-http\"><a href=\"#11-14-http1-与-http\" class=\"headerlink\" title=\"11.14 http1 与  http\"></a>11.14 http1 与  http</h3><h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483526340-043eea87-483e-49b2-aef2-e0863666764e.png#align=left&display=inline&height=525&name=7.png&originHeight=525&originWidth=935&size=74104&status=done&style=none&width=935\" alt=\"7.png\"></h3><hr>\n<h2 id=\"12-编程题\"><a href=\"#12-编程题\" class=\"headerlink\" title=\"12. 编程题\"></a>12. 编程题</h2><h3 id=\"12-1\"><a href=\"#12-1\" class=\"headerlink\" title=\"12.1\"></a>12.1</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483772793-4d2a1c89-3368-4138-9d9e-addfe2e23e7f.png#align=left&display=inline&height=338&name=8%20%282%29.png&originHeight=338&originWidth=628&size=230392&status=done&style=none&width=628\" alt=\"8 (2).png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585483788143-ba516091-fe6f-4385-b28c-6824b1884505.png#align=left&display=inline&height=195&name=9.png&originHeight=195&originWidth=848&size=241762&status=done&style=none&width=848\" alt=\"9.png\"></p>\n<h2 id=\"12-2-JavaScript-22-道高频手写面试题及答案\"><a href=\"#12-2-JavaScript-22-道高频手写面试题及答案\" class=\"headerlink\" title=\"12.2  JavaScript 22 道高频手写面试题及答案\"></a>12.2  JavaScript 22 道高频手写面试题及答案</h2><ul>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-1\">实现防抖函数（debounce）</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-2\">实现节流函数（throttle）</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-3\">深克隆（deepclone）</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-4\">实现 Event(event bus)</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-5\">实现 instanceOf</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-6\">模拟 new</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-7\">实现一个 call</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-8\">实现 apply  方法</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-9\">实现 bind</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-10\">模拟 Object.create</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-11\">实现类的继承</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-12\">实现 JSON.parse</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-13\">实现 Promise</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-14\">解析 URL<br>Params 为对象</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-15\">模板引擎实现</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-16\">转化为驼峰命名</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-17\">查找字符串中出现最多的字符和个数</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-18\">字符串查找</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-19\">实现千位分隔符</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-20\">判断是否是电话号码</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-21\">验证是否是邮箱</a></li>\n<li><a href=\"https://juejin.im/post/5d51e16d6fb9a06ae17d6bbc#heading-22\">验证是否是身份证</a></li>\n</ul>\n<p>**总链接：      ** <a href=\"https://juejin.im/post/5e100cdef265da5d75243229\">https://juejin.im/post/5e100cdef265da5d75243229</a></p>\n<h2 id=\"13-前端-100-问\"><a href=\"#13-前端-100-问\" class=\"headerlink\" title=\"13. 前端 100 问\"></a>13. 前端 100 问</h2><p>**访问链接****：    **<a href=\"https://juejin.im/post/5d23e750f265da1b855c7bbe\">https://juejin.im/post/5d23e750f265da1b855c7bbe</a></p>\n<h2 id=\"14-XSS-和-CSRF-区别\"><a href=\"#14-XSS-和-CSRF-区别\" class=\"headerlink\" title=\"14.XSS  和  CSRF  区别\"></a>14.XSS  和  CSRF  区别</h2><p><strong>跨站脚本攻击</strong>（Cross Site Scripting)，为了不和层叠样式表 CSS 混淆，故将跨站脚本攻击缩写为 XSS。恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。<br><strong>跨站请求伪造</strong>（Cross-site request forgery），是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份，再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。</p>\n<p><strong>区别：</strong><br>**</p>\n<ul>\n<li>原理不同，CSRF  是利用网站 A 本身的漏洞，去请求网站  A  的  api；XSS  是向目标网站注入  JS  代码，然后执行  JS 里的代码。</li>\n<li>CSRF  需要用户先登录目标网站获取  cookie，而  XSS  不需要登录</li>\n<li>CSRF  的目标是用户，XSS  的目标是服务器</li>\n<li>XSS 是利用合法用户获取其信息，而  CSRF  是伪造成合法用户发起请求</li>\n</ul>\n<hr>\n<p>以上更新于 2020 年 3 月 29 日</p>\n<hr>\n"},{"title":"前端九部","urlname":"kg8m6l","date":"2021-10-17T06:28:12.000Z","abbrlink":496996022,"_content":"\n[前端九部](https://www.yuque.com/fe9?view=doc_embed)\n","source":"_posts/语雀/kg8m6l.md","raw":"---\ntitle: 前端九部\nurlname: kg8m6l\ndate: '2021-10-17 14:28:12 +0800'\ntags: []\ncategories: []\nabbrlink: 496996022\n---\n\n[前端九部](https://www.yuque.com/fe9?view=doc_embed)\n","slug":"语雀/kg8m6l","published":1,"updated":"2022-03-03T11:26:07.577Z","_id":"cl0awjjpc000o081bdcara8n3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.yuque.com/fe9?view=doc_embed\" rel=\"external nofollow noreferrer\">前端九部</a></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><a href=\"https://www.yuque.com/fe9?view=doc_embed\">前端九部</a></p>\n"},{"title":"React 起步","urlname":"llu1ig","date":"2020-01-04T14:21:36.000Z","abbrlink":2224364838,"_content":"\n","source":"_posts/语雀/llu1ig.md","raw":"---\ntitle: React 起步\nurlname: llu1ig\ndate: '2020-01-04 22:21:36 +0800'\ntags: []\ncategories: []\nabbrlink: 2224364838\n---\n\n","slug":"语雀/llu1ig","published":1,"updated":"2022-03-03T11:26:07.578Z","_id":"cl0awjjpc000p081b4any61hq","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"webPack 加载器","urlname":"me6f4v","date":"2020-01-04T14:06:33.000Z","abbrlink":1819133539,"_content":"\n## 图片加载器  \n\n> - file-loader --D (把图片解析成文件输出)\n> - url-loader --D (把比较小的图片解析成 Base64,提高页面加载速度，如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出)\n> - html-withimg-loader --D (识别 html 页面中引入的图片)\n\n**file-loader 和 url-loader 区别：**\n\n> 1. url-loader 依赖 file-loader\n> 1. 当使用 url-loader 加载图片，图片大小小于上限值，则将图片转 base64 字符串，；否则使用 file-loader 加载图片，都是为了提高浏览器加载图片速度。\n> 1. 使用 url-loader 加载图片比 file-loader 更优秀\n\n## JS 加载器\n\n**babel (JS 编译器，编译成所有浏览器都支持的代码 )**\n\n> - babel-loader  -D ( babel 和 webpack 的一个桥梁，解析 JS 代码)\n> - @babel/core -D （ babel 的核心模块）\n> - @babel/preset-env -D （主要是把 es6 转换成 es5 的插件的集合）\n> - core-js@3 (安装在生产环境 相当于 babel-poliyfill 解析更高版本的 js)\n> - @babel/plugin-proposal-class-properties -D （处理类草案的语法）\n> - @babel/plugin-proposal-decorators -D (处理装饰器)\n> - @babel/plugin-transform-runtime(调用 @babel/runtime)  @babel/runtime（减少冗余的代码）\n\n```javascript\n/***\n *  需要配置 .babelrc 文件\n *\n */\n{\n    // 预设（插件的集合） 从上往下执行\n    \"presets\": [\n        [\"@babel/preset-env\",{\n            \"useBuiltIns\": \"usage\", // entry usage  优化 不是转化所有的 api,而是用到那个就转化哪一个\n            \"corejs\": 3 // 转化 es6 中高版本的 api\n        }]\n    ],\n    // 一个一个的插件 从上往下执行\n    \"plugins\": [\n        \"@babel/plugin-transform-runtime\",   // 依赖于 @babel/runtime\n        // 使用legacy: true模式时，@babel/plugin-proposal-class-properties必须在loose模式下使用以支持@babel/plugin-proposal-decorators。\n        [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],  // \"loose\" : true 此值必须为 true\n        // loose boolean，默认为false。 何时true，将编译类属性以使用赋值表达式而不是Object.defineProperty。\n        [\"@babel/plugin-proposal-class-properties\", { \"loose\" : true }]\n    ]\n}\n```\n\n## webpack.config.js 配置文件\n\n```javascript\n// 配置文件\n\nconst path = require('path');\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n\n    // 入口\n    entry: {\n        index: './src/index.js',\n    },\n\n    // 出口\n    output: {\n        // filename: 'index.js',\n        filename: '[name].js',\n        path: path.resolve(__dirname,\"dist\")\n    },\n\n    // 加载机\n    module: {\n        rules: [\n            // css 加载机\n            {\n                test:/\\.css$/,\n                // [] {} ''\n                use: ['style-loader','css-loader']\n            },\n            // less 加载器\n            {\n                test:/\\.less$/,\n                use: ['style-loader', 'css-loader', 'less-loader']\n            },\n            // img 加载器\n            // {\n            //     test:/\\.(jpg|jpeg|png|gif)$/,\n            //     use: {\n            //         loader: 'file-loader' ,\n            //         options: {\n            //             // 修改打包后的目录及文件名\n            //             name:'img/[name].[ext]'\n            //         }\n            //     }\n            // },\n\n            {   // 图片小于 100kb 使用 url-loader ,\n                test:/\\.(jpg|jpeg|png|gif)$/,\n                use: {\n                    loader: 'url-loader' , // 如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出\n                    options: {\n                        limit: 100 * 1024 ,  //100kb\n                        outputPath: 'img',\n                        // publicPath:'http://www.zhufeng.peixun/img'\n                    }\n                }\n            },\n             {\n                test:/\\.(eot|svg|ttf|woff|woff2)$/,\n                use: {\n                    loader: 'file-loader',\n                }\n            },\n\n            // js 加载机\n            {\n                test: /\\.js$/,\n                use: 'babel-loader',\n                include:path.resolve(__dirname,'src'), // 需要编译的 js 文件目录\n                exclude:/node_modules/, // 排除需要编译的 js 文件目录\n            },\n\n        ]\n    },\n\n    // 服务器\n    devServer: {\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n    // 插件\n    plugins: [\n        new CleanWebpackPlugin(), // 清空输出目录\n\n        new HtmlWebpackPlugin({\n            template: './index.html',\n            filename: 'index.html',\n            hash: true,\n        }),\n    ],\n\n}\n```\n","source":"_posts/语雀/me6f4v.md","raw":"---\ntitle: webPack 加载器\nurlname: me6f4v\ndate: '2020-01-04 22:06:33 +0800'\ntags: []\ncategories: []\nabbrlink: 1819133539\n---\n\n## 图片加载器  \n\n> - file-loader --D (把图片解析成文件输出)\n> - url-loader --D (把比较小的图片解析成 Base64,提高页面加载速度，如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出)\n> - html-withimg-loader --D (识别 html 页面中引入的图片)\n\n**file-loader 和 url-loader 区别：**\n\n> 1. url-loader 依赖 file-loader\n> 1. 当使用 url-loader 加载图片，图片大小小于上限值，则将图片转 base64 字符串，；否则使用 file-loader 加载图片，都是为了提高浏览器加载图片速度。\n> 1. 使用 url-loader 加载图片比 file-loader 更优秀\n\n## JS 加载器\n\n**babel (JS 编译器，编译成所有浏览器都支持的代码 )**\n\n> - babel-loader  -D ( babel 和 webpack 的一个桥梁，解析 JS 代码)\n> - @babel/core -D （ babel 的核心模块）\n> - @babel/preset-env -D （主要是把 es6 转换成 es5 的插件的集合）\n> - core-js@3 (安装在生产环境 相当于 babel-poliyfill 解析更高版本的 js)\n> - @babel/plugin-proposal-class-properties -D （处理类草案的语法）\n> - @babel/plugin-proposal-decorators -D (处理装饰器)\n> - @babel/plugin-transform-runtime(调用 @babel/runtime)  @babel/runtime（减少冗余的代码）\n\n```javascript\n/***\n *  需要配置 .babelrc 文件\n *\n */\n{\n    // 预设（插件的集合） 从上往下执行\n    \"presets\": [\n        [\"@babel/preset-env\",{\n            \"useBuiltIns\": \"usage\", // entry usage  优化 不是转化所有的 api,而是用到那个就转化哪一个\n            \"corejs\": 3 // 转化 es6 中高版本的 api\n        }]\n    ],\n    // 一个一个的插件 从上往下执行\n    \"plugins\": [\n        \"@babel/plugin-transform-runtime\",   // 依赖于 @babel/runtime\n        // 使用legacy: true模式时，@babel/plugin-proposal-class-properties必须在loose模式下使用以支持@babel/plugin-proposal-decorators。\n        [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],  // \"loose\" : true 此值必须为 true\n        // loose boolean，默认为false。 何时true，将编译类属性以使用赋值表达式而不是Object.defineProperty。\n        [\"@babel/plugin-proposal-class-properties\", { \"loose\" : true }]\n    ]\n}\n```\n\n## webpack.config.js 配置文件\n\n```javascript\n// 配置文件\n\nconst path = require('path');\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n\n    // 入口\n    entry: {\n        index: './src/index.js',\n    },\n\n    // 出口\n    output: {\n        // filename: 'index.js',\n        filename: '[name].js',\n        path: path.resolve(__dirname,\"dist\")\n    },\n\n    // 加载机\n    module: {\n        rules: [\n            // css 加载机\n            {\n                test:/\\.css$/,\n                // [] {} ''\n                use: ['style-loader','css-loader']\n            },\n            // less 加载器\n            {\n                test:/\\.less$/,\n                use: ['style-loader', 'css-loader', 'less-loader']\n            },\n            // img 加载器\n            // {\n            //     test:/\\.(jpg|jpeg|png|gif)$/,\n            //     use: {\n            //         loader: 'file-loader' ,\n            //         options: {\n            //             // 修改打包后的目录及文件名\n            //             name:'img/[name].[ext]'\n            //         }\n            //     }\n            // },\n\n            {   // 图片小于 100kb 使用 url-loader ,\n                test:/\\.(jpg|jpeg|png|gif)$/,\n                use: {\n                    loader: 'url-loader' , // 如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出\n                    options: {\n                        limit: 100 * 1024 ,  //100kb\n                        outputPath: 'img',\n                        // publicPath:'http://www.zhufeng.peixun/img'\n                    }\n                }\n            },\n             {\n                test:/\\.(eot|svg|ttf|woff|woff2)$/,\n                use: {\n                    loader: 'file-loader',\n                }\n            },\n\n            // js 加载机\n            {\n                test: /\\.js$/,\n                use: 'babel-loader',\n                include:path.resolve(__dirname,'src'), // 需要编译的 js 文件目录\n                exclude:/node_modules/, // 排除需要编译的 js 文件目录\n            },\n\n        ]\n    },\n\n    // 服务器\n    devServer: {\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n    // 插件\n    plugins: [\n        new CleanWebpackPlugin(), // 清空输出目录\n\n        new HtmlWebpackPlugin({\n            template: './index.html',\n            filename: 'index.html',\n            hash: true,\n        }),\n    ],\n\n}\n```\n","slug":"语雀/me6f4v","published":1,"updated":"2022-03-03T11:26:07.578Z","_id":"cl0awjjpd000q081b5vo0geqg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"图片加载器\"><a href=\"#图片加载器\" class=\"headerlink\" title=\"图片加载器\"></a>图片加载器</h2><blockquote>\n<ul>\n<li>file-loader –D (把图片解析成文件输出)</li>\n<li>url-loader –D (把比较小的图片解析成 Base64,提高页面加载速度，如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出)</li>\n<li>html-withimg-loader –D (识别 html 页面中引入的图片)</li>\n</ul>\n</blockquote>\n<p><strong>file-loader 和 url-loader 区别：</strong></p>\n<blockquote>\n<ol>\n<li>url-loader 依赖 file-loader</li>\n<li>当使用 url-loader 加载图片，图片大小小于上限值，则将图片转 base64 字符串，；否则使用 file-loader 加载图片，都是为了提高浏览器加载图片速度。</li>\n<li>使用 url-loader 加载图片比 file-loader 更优秀</li>\n</ol>\n</blockquote>\n<h2 id=\"JS-加载器\"><a href=\"#JS-加载器\" class=\"headerlink\" title=\"JS 加载器\"></a>JS 加载器</h2><p><strong>babel (JS 编译器，编译成所有浏览器都支持的代码 )</strong></p>\n<blockquote>\n<ul>\n<li>babel-loader  -D ( babel 和 webpack 的一个桥梁，解析 JS 代码)</li>\n<li>@babel/core -D （ babel 的核心模块）</li>\n<li>@babel/preset-env -D （主要是把 es6 转换成 es5 的插件的集合）</li>\n<li>core-js@3 (安装在生产环境 相当于 babel-poliyfill 解析更高版本的 js)</li>\n<li>@babel/plugin-proposal-class-properties -D （处理类草案的语法）</li>\n<li>@babel/plugin-proposal-decorators -D (处理装饰器)</li>\n<li>@babel/plugin-transform-runtime(调用 @babel/runtime)  @babel/runtime（减少冗余的代码）</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">/***\n *  需要配置 .babelrc 文件\n *\n */\n&#123;\n    // 预设（插件的集合） 从上往下执行\n    &quot;presets&quot;: [\n        [&quot;@babel/preset-env&quot;,&#123;\n            &quot;useBuiltIns&quot;: &quot;usage&quot;, // entry usage  优化 不是转化所有的 api,而是用到那个就转化哪一个\n            &quot;corejs&quot;: 3 // 转化 es6 中高版本的 api\n        &#125;]\n    ],\n    // 一个一个的插件 从上往下执行\n    &quot;plugins&quot;: [\n        &quot;@babel/plugin-transform-runtime&quot;,   // 依赖于 @babel/runtime\n        // 使用legacy: true模式时，@babel/plugin-proposal-class-properties必须在loose模式下使用以支持@babel/plugin-proposal-decorators。\n        [&quot;@babel/plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],  // &quot;loose&quot; : true 此值必须为 true\n        // loose boolean，默认为false。 何时true，将编译类属性以使用赋值表达式而不是Object.defineProperty。\n        [&quot;@babel/plugin-proposal-class-properties&quot;, &#123; &quot;loose&quot; : true &#125;]\n    ]\n&#125;\n</code></pre>\n<h2 id=\"webpack-config-js-配置文件\"><a href=\"#webpack-config-js-配置文件\" class=\"headerlink\" title=\"webpack.config.js 配置文件\"></a>webpack.config.js 配置文件</h2><pre><code class=\"javascript\">// 配置文件\n\nconst path = require(&#39;path&#39;);\nconst &#123;CleanWebpackPlugin&#125; = require(&#39;clean-webpack-plugin&#39;);\nconst HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)\n\nmodule.exports = &#123;\n\n    // 入口\n    entry: &#123;\n        index: &#39;./src/index.js&#39;,\n    &#125;,\n\n    // 出口\n    output: &#123;\n        // filename: &#39;index.js&#39;,\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname,&quot;dist&quot;)\n    &#125;,\n\n    // 加载机\n    module: &#123;\n        rules: [\n            // css 加载机\n            &#123;\n                test:/\\.css$/,\n                // [] &#123;&#125; &#39;&#39;\n                use: [&#39;style-loader&#39;,&#39;css-loader&#39;]\n            &#125;,\n            // less 加载器\n            &#123;\n                test:/\\.less$/,\n                use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]\n            &#125;,\n            // img 加载器\n            // &#123;\n            //     test:/\\.(jpg|jpeg|png|gif)$/,\n            //     use: &#123;\n            //         loader: &#39;file-loader&#39; ,\n            //         options: &#123;\n            //             // 修改打包后的目录及文件名\n            //             name:&#39;img/[name].[ext]&#39;\n            //         &#125;\n            //     &#125;\n            // &#125;,\n\n            &#123;   // 图片小于 100kb 使用 url-loader ,\n                test:/\\.(jpg|jpeg|png|gif)$/,\n                use: &#123;\n                    loader: &#39;url-loader&#39; , // 如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出\n                    options: &#123;\n                        limit: 100 * 1024 ,  //100kb\n                        outputPath: &#39;img&#39;,\n                        // publicPath:&#39;http://www.zhufeng.peixun/img&#39;\n                    &#125;\n                &#125;\n            &#125;,\n             &#123;\n                test:/\\.(eot|svg|ttf|woff|woff2)$/,\n                use: &#123;\n                    loader: &#39;file-loader&#39;,\n                &#125;\n            &#125;,\n\n            // js 加载机\n            &#123;\n                test: /\\.js$/,\n                use: &#39;babel-loader&#39;,\n                include:path.resolve(__dirname,&#39;src&#39;), // 需要编译的 js 文件目录\n                exclude:/node_modules/, // 排除需要编译的 js 文件目录\n            &#125;,\n\n        ]\n    &#125;,\n\n    // 服务器\n    devServer: &#123;\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n    // 插件\n    plugins: [\n        new CleanWebpackPlugin(), // 清空输出目录\n\n        new HtmlWebpackPlugin(&#123;\n            template: &#39;./index.html&#39;,\n            filename: &#39;index.html&#39;,\n            hash: true,\n        &#125;),\n    ],\n\n&#125;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"图片加载器\"><a href=\"#图片加载器\" class=\"headerlink\" title=\"图片加载器\"></a>图片加载器</h2><blockquote>\n<ul>\n<li>file-loader –D (把图片解析成文件输出)</li>\n<li>url-loader –D (把比较小的图片解析成 Base64,提高页面加载速度，如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出)</li>\n<li>html-withimg-loader –D (识别 html 页面中引入的图片)</li>\n</ul>\n</blockquote>\n<p><strong>file-loader 和 url-loader 区别：</strong></p>\n<blockquote>\n<ol>\n<li>url-loader 依赖 file-loader</li>\n<li>当使用 url-loader 加载图片，图片大小小于上限值，则将图片转 base64 字符串，；否则使用 file-loader 加载图片，都是为了提高浏览器加载图片速度。</li>\n<li>使用 url-loader 加载图片比 file-loader 更优秀</li>\n</ol>\n</blockquote>\n<h2 id=\"JS-加载器\"><a href=\"#JS-加载器\" class=\"headerlink\" title=\"JS 加载器\"></a>JS 加载器</h2><p><strong>babel (JS 编译器，编译成所有浏览器都支持的代码 )</strong></p>\n<blockquote>\n<ul>\n<li>babel-loader  -D ( babel 和 webpack 的一个桥梁，解析 JS 代码)</li>\n<li>@babel/core -D （ babel 的核心模块）</li>\n<li>@babel/preset-env -D （主要是把 es6 转换成 es5 的插件的集合）</li>\n<li>core-js@3 (安装在生产环境 相当于 babel-poliyfill 解析更高版本的 js)</li>\n<li>@babel/plugin-proposal-class-properties -D （处理类草案的语法）</li>\n<li>@babel/plugin-proposal-decorators -D (处理装饰器)</li>\n<li>@babel/plugin-transform-runtime(调用 @babel/runtime)  @babel/runtime（减少冗余的代码）</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">/***\n *  需要配置 .babelrc 文件\n *\n */\n&#123;\n    // 预设（插件的集合） 从上往下执行\n    &quot;presets&quot;: [\n        [&quot;@babel/preset-env&quot;,&#123;\n            &quot;useBuiltIns&quot;: &quot;usage&quot;, // entry usage  优化 不是转化所有的 api,而是用到那个就转化哪一个\n            &quot;corejs&quot;: 3 // 转化 es6 中高版本的 api\n        &#125;]\n    ],\n    // 一个一个的插件 从上往下执行\n    &quot;plugins&quot;: [\n        &quot;@babel/plugin-transform-runtime&quot;,   // 依赖于 @babel/runtime\n        // 使用legacy: true模式时，@babel/plugin-proposal-class-properties必须在loose模式下使用以支持@babel/plugin-proposal-decorators。\n        [&quot;@babel/plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],  // &quot;loose&quot; : true 此值必须为 true\n        // loose boolean，默认为false。 何时true，将编译类属性以使用赋值表达式而不是Object.defineProperty。\n        [&quot;@babel/plugin-proposal-class-properties&quot;, &#123; &quot;loose&quot; : true &#125;]\n    ]\n&#125;\n</code></pre>\n<h2 id=\"webpack-config-js-配置文件\"><a href=\"#webpack-config-js-配置文件\" class=\"headerlink\" title=\"webpack.config.js 配置文件\"></a>webpack.config.js 配置文件</h2><pre><code class=\"javascript\">// 配置文件\n\nconst path = require(&#39;path&#39;);\nconst &#123;CleanWebpackPlugin&#125; = require(&#39;clean-webpack-plugin&#39;);\nconst HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)\n\nmodule.exports = &#123;\n\n    // 入口\n    entry: &#123;\n        index: &#39;./src/index.js&#39;,\n    &#125;,\n\n    // 出口\n    output: &#123;\n        // filename: &#39;index.js&#39;,\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname,&quot;dist&quot;)\n    &#125;,\n\n    // 加载机\n    module: &#123;\n        rules: [\n            // css 加载机\n            &#123;\n                test:/\\.css$/,\n                // [] &#123;&#125; &#39;&#39;\n                use: [&#39;style-loader&#39;,&#39;css-loader&#39;]\n            &#125;,\n            // less 加载器\n            &#123;\n                test:/\\.less$/,\n                use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]\n            &#125;,\n            // img 加载器\n            // &#123;\n            //     test:/\\.(jpg|jpeg|png|gif)$/,\n            //     use: &#123;\n            //         loader: &#39;file-loader&#39; ,\n            //         options: &#123;\n            //             // 修改打包后的目录及文件名\n            //             name:&#39;img/[name].[ext]&#39;\n            //         &#125;\n            //     &#125;\n            // &#125;,\n\n            &#123;   // 图片小于 100kb 使用 url-loader ,\n                test:/\\.(jpg|jpeg|png|gif)$/,\n                use: &#123;\n                    loader: &#39;url-loader&#39; , // 如果图片小于 100kb 作为 base64 输出，大于 100kb 会自动调用 file-loader 打包成文件输出\n                    options: &#123;\n                        limit: 100 * 1024 ,  //100kb\n                        outputPath: &#39;img&#39;,\n                        // publicPath:&#39;http://www.zhufeng.peixun/img&#39;\n                    &#125;\n                &#125;\n            &#125;,\n             &#123;\n                test:/\\.(eot|svg|ttf|woff|woff2)$/,\n                use: &#123;\n                    loader: &#39;file-loader&#39;,\n                &#125;\n            &#125;,\n\n            // js 加载机\n            &#123;\n                test: /\\.js$/,\n                use: &#39;babel-loader&#39;,\n                include:path.resolve(__dirname,&#39;src&#39;), // 需要编译的 js 文件目录\n                exclude:/node_modules/, // 排除需要编译的 js 文件目录\n            &#125;,\n\n        ]\n    &#125;,\n\n    // 服务器\n    devServer: &#123;\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n    // 插件\n    plugins: [\n        new CleanWebpackPlugin(), // 清空输出目录\n\n        new HtmlWebpackPlugin(&#123;\n            template: &#39;./index.html&#39;,\n            filename: &#39;index.html&#39;,\n            hash: true,\n        &#125;),\n    ],\n\n&#125;\n</code></pre>\n"},{"title":"性能测试理论","urlname":"mp3qrl","date":"2020-07-21T09:19:46.000Z","abbrlink":2252031482,"_content":"\n> **性能测试的目的：发现性能的瓶颈**\n\n### 负载测试\n\n```\n通过逐步加压的方法，达到既定的性能阀值的目标。\n\t阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n```\n\n### 压力测试\n\n```\n通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n```\n\n### 并发测试\n\n```\n同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n```\n\n### 容量测试\n\n```\n通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n\t测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n```\n\n### 可靠性测试（稳定性测试 / 疲劳测试）\n\n```\n系统在高压的情况下，长时间的运行系统是否稳定。\n\t如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n```\n\n### 异常测试（失败测试）\n\n```\n指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n```\n\n### 性能测试指标定义\n\n- 事务\n\n```\n从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n```\n\n- TPS (Transactions Per Second)\n\n```\n每秒钟系统可以处理的事务数\n```\n\n- QPS：(Query per second )\n\n```\n一台查询服务器每秒处理的请求次数\n```\n\n- 请求响应时间\n\n```\n从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n```\n\n- 事务响应时间\n\n```\n事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n```\n\n- 并发定义\n\n```\n没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n```\n\n- 并发用户数\n\n```\n同一单位时间内，对系统发起请求的用户数量\n```\n\n- 吞吐量\n\n```\n一次性能测试过程中，网络上传输的数据量的总和\n```\n\n- 吞吐率\n\n```\n单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n```\n\n- 点击率\n\n```\n每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n```\n\n- 资源使用率\n\n```\n对不同的系统资源的使用情况，如： CPU、内存、 IO\n```\n\n### 性能测试的监控指标\n\n- 响应时间\n\n```\n反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n```\n\n- 吞吐量\n\n```\n反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n```\n\n- 服务器资源占用\n\n```\n服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n```\n\n### 性能测试的原理\n\n- 用户行为模拟\n\n```\n低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n\t1. 通过参数化，实现不同用户使用不同数据\n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n```\n\n- 性能指标监控\n\n```\n通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n```\n\n- 性能调优\n\n```\n通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n```\n\n## 性能测试的工作流程\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#crop=0&crop=0&crop=1&crop=1&height=426&id=c4e91&originHeight=426&originWidth=767&originalType=binary∶=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=767)\n\n### 性能测试的需求分析\n\n- 目的: 明确测试目标和测试场景\n- 新系统\n  - 同行业比较\n  - 业务预期\n- 老系统\n  - 对比以往用户的使用行为以及用户量\n- 性能需求的的提取\n\n```\n1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n```\n\n### 系统应用分层架构\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#crop=0&crop=0&crop=1&crop=1&height=438&id=s0he6&originHeight=438&originWidth=832&originalType=binary∶=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=832)\n\n## JMeter 性能测试\n\n### JMeter 实现逻辑分支控制\n\n- 逻辑控制器\n  - 用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)\n  - 如果（if）控制器\n  - include Controller\n  - Runtime Controller\n  - Switch Controller\n  - While Controller\n\n### JMeter 实现配置管理\n\n- 配置元件\n\n### JMeter 函数助手\n\n- \\_CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时\n\n```\n_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==> 指${__CSVRead(,)}中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==> 指${__CSVRead(,)}中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： ${__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)}\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n```\n\n- \\_Random： 生成随机数\n\n```\n_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==> 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==> 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==> 为生成随机数添加变量名称   id(可任意)\n\n\t生成的函数字符串：${__Random(2,100,)}  ==> id = 55(随机数)\n```\n\n- \\_Log：\n\n```\nlog 函数参数说明：\n\n    String to be logged (and returned) ==> 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==> 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==> 抛出的异常信息\n```\n\n- \\_Split： 字符串分割函数\n\n### 聚合报告\n\n- Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值\n- #Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟 10 个用户，每个用户迭代 10 次，那么这里显示 100\n- Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间\n- Median：中位数，也就是 50％ 用户的响应时间\n- 90% Line：90％ 用户的响应时间\n- Min：最小响应时间\n- Max：最大响应时间\n- Error%：错误率 —— 错误请求数 / 请求总数\n- Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数\n- KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec\n\n**重点关注的数据：**\n\n- Samples： 请求数\n- Average： 平均响应时间\n- Min： 最小响应时间\n- Max： 最大响应时间\n- Error%： 错误率\n- Throughput： 吞吐量\n\n### JMeter 扩展组件开发\n\n```shell\n$ Git 地址：\n```\n\n## Linux 服务器监控性能测试\n\n### 测试范围及性能指标\n\n**—— —— CPU 内存 磁盘 网络 版本**\n\n### 进程和线程\n\n- 进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）\n- 线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程\n\n#### 进程与线程的区别\n\n1. 一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。\n1. 线程是进程工作的最小单位，\n1. 一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。\n1. 同一个进程下的不同的多个线程，共享父进程的地址空间。\n1. 线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。\n1. 线程作为调度和分派的基本单位，进程作为拥有资源的基本单位\n\n#### 进程的优缺点\n\n[ 优点 ]\n\n- 每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程\n- 通过添加 CPU 可以扩充性能\n- 可以尽量减少线程加锁和解锁的影响，极大地提高了性能\n\n[ 缺点 ]\n\n- 逻辑控制复杂，需要和主程序交互\n- 多进程调度开销大\n\n#### 线程的优缺点\n\n[ 优点 ]\n\n- 程序的逻辑和控制方式简单\n- 所有线程可以共享内存和变量等\n- 线程方式消耗的总资源比进程方式少\n\n[ 缺点 ]\n\n- 线程与主程序共用地址空间，最大内存地址受限\n- 线程之间的同步和加锁不易控制（同步锁）\n- 一个线程的崩溃可能影响整个程序的稳定性\n\n### Linux 服务器监控命令\n\n#### 实时监控命令\n\n- top (实时监控-综合)\n  - 作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序\n  - top -h：帮助\n  - top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID\n- top 任务区命令(top 进入任务区)\n  - M：按内存使用率排序\n  - P: 按 CPU 使用率排序\n  - z: 彩色 / 黑白显示\n\n```\nload average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n```\n\n- vmstat（实时监控 - 综合）\n  - 功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息\n  - 选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）\n  - 语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n- free (实时监控-内存)\n  - 功能：监控系统内存的使用状态\n  - 语法：free -h\n\n```\nfree - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n```\n\n- mpstat（实时监控 - CPU）\n  - 功能：可以查看多核心 CPU 中每个计算核心的统计数据\n  - 参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息\n  - 语法：mpstat [-P | ALL] [interval | count]\n\n```\nmpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n```\n\n- netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）\n  - netstat -n 拒绝显示别名，能显示数字的全部显示数字\n  - netstat -l 仅列出有在 Listen（监听）的服务状态\n  - netstat -p 显示建立相关链接的程序名\n  - netstat -t 显示 TCP 相关选项\n  - netstat -u 仅显示 UDP 相关选项\n  - netstat -i 显示自动匹配接口的信息 ==> 查看网络传输的大小以及有没有发生错误\n  - netstat -c 每隔一个固定时间，执行该 netstat 命令\n- iostat (实时监控 - 磁盘)\n  - 作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况\n  - iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）\n\n```shell\n[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n\t重点关注： r/s 、w/s、 %util(繁忙程度)\n\n\t>> 将命令结果以二进制格式存放在文件中\n```\n\n- sar 万能命令\n  - 功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告\n  - 监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动\n  - 语法：sar [options] [-O file] t n ==> (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)\n\n```shell\noptions 选项：\n    -A: 所有报告的总和；\n    -u: CPU 利用率；\n    -v: 进程、节点、文件和锁表的状态；\n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n```\n\n#### 进程追踪命令\n\n- strace\n  - 功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程\n  - 选项 -p： 跟踪指定进程\n  - 选项 -f: 跟踪由 fork 子进程系统调用\n  - 选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等\n  - 选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级\n  - 选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出\n  - 选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹\n\n#### 监控工具 nmon\n\n```\n说明：\n下载：\n    wget\n```\n\n## 数据驱动性能测试\n\n```\n定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n\t1. 测试数据与测试代码分离\n\t2. 数据控制过程\n\t3. 可以减少测试代码量\n\t4. 降低脚本开发和维护的成本\n\t5. 便于用例的修改和维护\n要求：\n\t1. 较强的代码能力\n\t2. 较强的分层架构设计思维\n\t3. 对开发框架有一定的了解\n使用场景：\n \t1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n```\n\n## 数据库的架构设计\n\n### 数据库性能测试\n\n- 测试范围\n\n```\n1. SQL 语句   => 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n```\n\n### 数据库架构\n\n- 一主多从\n\n```\n读写分离：\n    master(主写，主库)\n    ==>复制 slave(从读，从库)\n    ==>复制 slave(从读，从库)\n缺点： 主从延迟\n```\n\n- 双机热备\n\n```\nKeepAlived\n    ==> VIP (虚拟 IP)\n    ==> master  ==> 复制 ==> slave\n缺点：\n优点：\n```\n\n### 数据库主从同步的工作原理\n\n```\n1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n```\n\n### 数据库分库分表的设计方法\n\n```\n分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==> 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==> userid%3 == 1\n            ==> userid%3 == 2\n            ==> userid%3 == 3\n```\n\n## 数据库性能测试\n\n### MySQL\n\n- MariaDB(主流分支)\n  - MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL\n  - 兼容 MySQL, 对于开发者来说感知不到变化\n  - MariaDB is free and open source software\n\n### MySQL 数据库监控指标\n\n- QPS(Queries per seconds)\n  - 每秒钟查询数量\n  - show global status like 'Question%';\n- TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds\n  - show global status like 'Com_commit';\n  - show global status like 'Com_rollback';\n- 线程连接数\n  - show global status like 'Max_used_connections';(使用的最大连接数)\n  - show global status like 'Max_connections';(设置的最大连接数)\n  - show global status like 'Threads%';\n- Query Cache\n  - 查询缓存，用于缓存 select 查询结果\n  - 当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果\n  - 适用于大量查询，很少改变表中的数据\n- Query Cache 命中率（MySQL 特有）\n  - show global status like 'Qcache%';\n  - 命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) \\* 100%\n\n```\n开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    => 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    => 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n```\n\n- 锁定状态\n  - show global status like '%lock';\n  - table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重\n  - innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的\n  - 表锁、行锁、间隙锁\n- 主从延时\n  - 查询主从延时时间： show slave status\n\n### MySQL 慢查询工作原理及操作\n\n```\n慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n```\n\n- 慢查询日志分析\n  - mysqldumpslow 命令\n  - -s : 表示按照何种方式排序\n  - -t : top n 的意思，即返回前面多少条数据\n  - -g : 后边可写正则匹配模式，大小写不敏感\n- mysqldumpslow -s 的更多参数\n  - c 访问计数\n  - i 锁定时间\n  - r 返回记录\n  - t 查询时间\n  - al 平均锁定时间\n  - ar 平均返回记录数\n  - at 平均查询时间\n\n```\n使用：\n    1. 得到返回记录集最多的 10 个 SQL\n    \tmysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n    \tmysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n    \tmysqldumpslow -s t -t 10 -g \"left join\" slow.log\n```\n\n- SQL 语句性能分析\n  - explain select 语句\n\n```markdown\nexplain 返回结果分析 1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行 2. select_type: 3. table: 显示查询表名，<derived N> 临时表\n**4. type: ** 1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all** 2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引 5. possible_keys: 可能使用的索引 6. key: 真正使用到的索引 7. key_len: 8. ref: 9. rows: 估算的扫描行数 10. extra:\n```\n\n### MySQL 索引的概念及作用\n\n[ 索引类型 ]\n\n- 主键索引（唯一索引，不允许有空值）\n- 全文索引（fulltext, MyISAM 表特有）\n- 唯一索引（值唯一，允许有空值）\n- 组合索引（多列索引，多列同时创建索引）\n- 普通索引（无限制）\n\n[ 索引创建规则 ]\n\n- 可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间\n- 在插入与更新数据时，要重写索引文件\n- 单张表索引数量最好不超过 5 个\n- 单个索引中的字段数不超过 5 个（组合索引）\n- 不适用索引的查询： like 模糊查询；反向查询，not in / not like\n\n### MySQL 存储引擎\n\n- MyISAM（只支持表锁）\n\n```\n优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n```\n\n- InnoDB\n\n```\n优点：\n    1. 支持事务\n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n```\n\n### MySQL 实时监控\n\n- orzdba(监控工具)\n\n```\n./orzdba 执行\n使用：\n```\n\n### MySQL 集群监控方案 - 天兔 LEPUS\n\n- 天兔 LEPUS 全部数据库实例监控\n\n```\n本地部署： 产品 > 文档中心 > 安装\n    admin /Lepusadmin\n```\n\n### MySQL 性能测试的用例准备\n\n```\n要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤：\n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n```\n","source":"_posts/语雀/mp3qrl.md","raw":"---\ntitle: 性能测试理论\nurlname: mp3qrl\ndate: '2020-07-21 17:19:46 +0800'\ntags: []\ncategories: []\nabbrlink: 2252031482\n---\n\n> **性能测试的目的：发现性能的瓶颈**\n\n### 负载测试\n\n```\n通过逐步加压的方法，达到既定的性能阀值的目标。\n\t阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n```\n\n### 压力测试\n\n```\n通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n```\n\n### 并发测试\n\n```\n同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n```\n\n### 容量测试\n\n```\n通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n\t测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n```\n\n### 可靠性测试（稳定性测试 / 疲劳测试）\n\n```\n系统在高压的情况下，长时间的运行系统是否稳定。\n\t如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n```\n\n### 异常测试（失败测试）\n\n```\n指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n```\n\n### 性能测试指标定义\n\n- 事务\n\n```\n从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n```\n\n- TPS (Transactions Per Second)\n\n```\n每秒钟系统可以处理的事务数\n```\n\n- QPS：(Query per second )\n\n```\n一台查询服务器每秒处理的请求次数\n```\n\n- 请求响应时间\n\n```\n从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n```\n\n- 事务响应时间\n\n```\n事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n```\n\n- 并发定义\n\n```\n没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n```\n\n- 并发用户数\n\n```\n同一单位时间内，对系统发起请求的用户数量\n```\n\n- 吞吐量\n\n```\n一次性能测试过程中，网络上传输的数据量的总和\n```\n\n- 吞吐率\n\n```\n单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n```\n\n- 点击率\n\n```\n每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n```\n\n- 资源使用率\n\n```\n对不同的系统资源的使用情况，如： CPU、内存、 IO\n```\n\n### 性能测试的监控指标\n\n- 响应时间\n\n```\n反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n```\n\n- 吞吐量\n\n```\n反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n```\n\n- 服务器资源占用\n\n```\n服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n```\n\n### 性能测试的原理\n\n- 用户行为模拟\n\n```\n低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n\t1. 通过参数化，实现不同用户使用不同数据\n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n```\n\n- 性能指标监控\n\n```\n通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n```\n\n- 性能调优\n\n```\n通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n```\n\n## 性能测试的工作流程\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#crop=0&crop=0&crop=1&crop=1&height=426&id=c4e91&originHeight=426&originWidth=767&originalType=binary∶=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=767)\n\n### 性能测试的需求分析\n\n- 目的: 明确测试目标和测试场景\n- 新系统\n  - 同行业比较\n  - 业务预期\n- 老系统\n  - 对比以往用户的使用行为以及用户量\n- 性能需求的的提取\n\n```\n1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n```\n\n### 系统应用分层架构\n\n![](https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#crop=0&crop=0&crop=1&crop=1&height=438&id=s0he6&originHeight=438&originWidth=832&originalType=binary∶=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=832)\n\n## JMeter 性能测试\n\n### JMeter 实现逻辑分支控制\n\n- 逻辑控制器\n  - 用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)\n  - 如果（if）控制器\n  - include Controller\n  - Runtime Controller\n  - Switch Controller\n  - While Controller\n\n### JMeter 实现配置管理\n\n- 配置元件\n\n### JMeter 函数助手\n\n- \\_CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时\n\n```\n_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==> 指${__CSVRead(,)}中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==> 指${__CSVRead(,)}中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： ${__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)}\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n```\n\n- \\_Random： 生成随机数\n\n```\n_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==> 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==> 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==> 为生成随机数添加变量名称   id(可任意)\n\n\t生成的函数字符串：${__Random(2,100,)}  ==> id = 55(随机数)\n```\n\n- \\_Log：\n\n```\nlog 函数参数说明：\n\n    String to be logged (and returned) ==> 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==> 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==> 抛出的异常信息\n```\n\n- \\_Split： 字符串分割函数\n\n### 聚合报告\n\n- Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值\n- #Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟 10 个用户，每个用户迭代 10 次，那么这里显示 100\n- Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间\n- Median：中位数，也就是 50％ 用户的响应时间\n- 90% Line：90％ 用户的响应时间\n- Min：最小响应时间\n- Max：最大响应时间\n- Error%：错误率 —— 错误请求数 / 请求总数\n- Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数\n- KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec\n\n**重点关注的数据：**\n\n- Samples： 请求数\n- Average： 平均响应时间\n- Min： 最小响应时间\n- Max： 最大响应时间\n- Error%： 错误率\n- Throughput： 吞吐量\n\n### JMeter 扩展组件开发\n\n```shell\n$ Git 地址：\n```\n\n## Linux 服务器监控性能测试\n\n### 测试范围及性能指标\n\n**—— —— CPU 内存 磁盘 网络 版本**\n\n### 进程和线程\n\n- 进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）\n- 线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程\n\n#### 进程与线程的区别\n\n1. 一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。\n1. 线程是进程工作的最小单位，\n1. 一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。\n1. 同一个进程下的不同的多个线程，共享父进程的地址空间。\n1. 线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。\n1. 线程作为调度和分派的基本单位，进程作为拥有资源的基本单位\n\n#### 进程的优缺点\n\n[ 优点 ]\n\n- 每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程\n- 通过添加 CPU 可以扩充性能\n- 可以尽量减少线程加锁和解锁的影响，极大地提高了性能\n\n[ 缺点 ]\n\n- 逻辑控制复杂，需要和主程序交互\n- 多进程调度开销大\n\n#### 线程的优缺点\n\n[ 优点 ]\n\n- 程序的逻辑和控制方式简单\n- 所有线程可以共享内存和变量等\n- 线程方式消耗的总资源比进程方式少\n\n[ 缺点 ]\n\n- 线程与主程序共用地址空间，最大内存地址受限\n- 线程之间的同步和加锁不易控制（同步锁）\n- 一个线程的崩溃可能影响整个程序的稳定性\n\n### Linux 服务器监控命令\n\n#### 实时监控命令\n\n- top (实时监控-综合)\n  - 作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序\n  - top -h：帮助\n  - top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID\n- top 任务区命令(top 进入任务区)\n  - M：按内存使用率排序\n  - P: 按 CPU 使用率排序\n  - z: 彩色 / 黑白显示\n\n```\nload average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n```\n\n- vmstat（实时监控 - 综合）\n  - 功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息\n  - 选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）\n  - 语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n- free (实时监控-内存)\n  - 功能：监控系统内存的使用状态\n  - 语法：free -h\n\n```\nfree - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n```\n\n- mpstat（实时监控 - CPU）\n  - 功能：可以查看多核心 CPU 中每个计算核心的统计数据\n  - 参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息\n  - 语法：mpstat [-P | ALL] [interval | count]\n\n```\nmpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n```\n\n- netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）\n  - netstat -n 拒绝显示别名，能显示数字的全部显示数字\n  - netstat -l 仅列出有在 Listen（监听）的服务状态\n  - netstat -p 显示建立相关链接的程序名\n  - netstat -t 显示 TCP 相关选项\n  - netstat -u 仅显示 UDP 相关选项\n  - netstat -i 显示自动匹配接口的信息 ==> 查看网络传输的大小以及有没有发生错误\n  - netstat -c 每隔一个固定时间，执行该 netstat 命令\n- iostat (实时监控 - 磁盘)\n  - 作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况\n  - iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）\n\n```shell\n[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n\t重点关注： r/s 、w/s、 %util(繁忙程度)\n\n\t>> 将命令结果以二进制格式存放在文件中\n```\n\n- sar 万能命令\n  - 功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告\n  - 监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动\n  - 语法：sar [options] [-O file] t n ==> (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)\n\n```shell\noptions 选项：\n    -A: 所有报告的总和；\n    -u: CPU 利用率；\n    -v: 进程、节点、文件和锁表的状态；\n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n```\n\n#### 进程追踪命令\n\n- strace\n  - 功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程\n  - 选项 -p： 跟踪指定进程\n  - 选项 -f: 跟踪由 fork 子进程系统调用\n  - 选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等\n  - 选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级\n  - 选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出\n  - 选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹\n\n#### 监控工具 nmon\n\n```\n说明：\n下载：\n    wget\n```\n\n## 数据驱动性能测试\n\n```\n定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n\t1. 测试数据与测试代码分离\n\t2. 数据控制过程\n\t3. 可以减少测试代码量\n\t4. 降低脚本开发和维护的成本\n\t5. 便于用例的修改和维护\n要求：\n\t1. 较强的代码能力\n\t2. 较强的分层架构设计思维\n\t3. 对开发框架有一定的了解\n使用场景：\n \t1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n```\n\n## 数据库的架构设计\n\n### 数据库性能测试\n\n- 测试范围\n\n```\n1. SQL 语句   => 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n```\n\n### 数据库架构\n\n- 一主多从\n\n```\n读写分离：\n    master(主写，主库)\n    ==>复制 slave(从读，从库)\n    ==>复制 slave(从读，从库)\n缺点： 主从延迟\n```\n\n- 双机热备\n\n```\nKeepAlived\n    ==> VIP (虚拟 IP)\n    ==> master  ==> 复制 ==> slave\n缺点：\n优点：\n```\n\n### 数据库主从同步的工作原理\n\n```\n1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n```\n\n### 数据库分库分表的设计方法\n\n```\n分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==> 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==> userid%3 == 1\n            ==> userid%3 == 2\n            ==> userid%3 == 3\n```\n\n## 数据库性能测试\n\n### MySQL\n\n- MariaDB(主流分支)\n  - MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL\n  - 兼容 MySQL, 对于开发者来说感知不到变化\n  - MariaDB is free and open source software\n\n### MySQL 数据库监控指标\n\n- QPS(Queries per seconds)\n  - 每秒钟查询数量\n  - show global status like 'Question%';\n- TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds\n  - show global status like 'Com_commit';\n  - show global status like 'Com_rollback';\n- 线程连接数\n  - show global status like 'Max_used_connections';(使用的最大连接数)\n  - show global status like 'Max_connections';(设置的最大连接数)\n  - show global status like 'Threads%';\n- Query Cache\n  - 查询缓存，用于缓存 select 查询结果\n  - 当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果\n  - 适用于大量查询，很少改变表中的数据\n- Query Cache 命中率（MySQL 特有）\n  - show global status like 'Qcache%';\n  - 命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) \\* 100%\n\n```\n开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    => 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    => 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n```\n\n- 锁定状态\n  - show global status like '%lock';\n  - table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重\n  - innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的\n  - 表锁、行锁、间隙锁\n- 主从延时\n  - 查询主从延时时间： show slave status\n\n### MySQL 慢查询工作原理及操作\n\n```\n慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n```\n\n- 慢查询日志分析\n  - mysqldumpslow 命令\n  - -s : 表示按照何种方式排序\n  - -t : top n 的意思，即返回前面多少条数据\n  - -g : 后边可写正则匹配模式，大小写不敏感\n- mysqldumpslow -s 的更多参数\n  - c 访问计数\n  - i 锁定时间\n  - r 返回记录\n  - t 查询时间\n  - al 平均锁定时间\n  - ar 平均返回记录数\n  - at 平均查询时间\n\n```\n使用：\n    1. 得到返回记录集最多的 10 个 SQL\n    \tmysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n    \tmysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n    \tmysqldumpslow -s t -t 10 -g \"left join\" slow.log\n```\n\n- SQL 语句性能分析\n  - explain select 语句\n\n```markdown\nexplain 返回结果分析 1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行 2. select_type: 3. table: 显示查询表名，<derived N> 临时表\n**4. type: ** 1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all** 2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引 5. possible_keys: 可能使用的索引 6. key: 真正使用到的索引 7. key_len: 8. ref: 9. rows: 估算的扫描行数 10. extra:\n```\n\n### MySQL 索引的概念及作用\n\n[ 索引类型 ]\n\n- 主键索引（唯一索引，不允许有空值）\n- 全文索引（fulltext, MyISAM 表特有）\n- 唯一索引（值唯一，允许有空值）\n- 组合索引（多列索引，多列同时创建索引）\n- 普通索引（无限制）\n\n[ 索引创建规则 ]\n\n- 可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间\n- 在插入与更新数据时，要重写索引文件\n- 单张表索引数量最好不超过 5 个\n- 单个索引中的字段数不超过 5 个（组合索引）\n- 不适用索引的查询： like 模糊查询；反向查询，not in / not like\n\n### MySQL 存储引擎\n\n- MyISAM（只支持表锁）\n\n```\n优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n```\n\n- InnoDB\n\n```\n优点：\n    1. 支持事务\n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n```\n\n### MySQL 实时监控\n\n- orzdba(监控工具)\n\n```\n./orzdba 执行\n使用：\n```\n\n### MySQL 集群监控方案 - 天兔 LEPUS\n\n- 天兔 LEPUS 全部数据库实例监控\n\n```\n本地部署： 产品 > 文档中心 > 安装\n    admin /Lepusadmin\n```\n\n### MySQL 性能测试的用例准备\n\n```\n要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤：\n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n```\n","slug":"语雀/mp3qrl","published":1,"updated":"2022-03-03T11:26:07.579Z","_id":"cl0awjjpd000r081be8g82857","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><strong>性能测试的目的：发现性能的瓶颈</strong></p>\n</blockquote>\n<h3 id=\"负载测试\"><a href=\"#负载测试\" class=\"headerlink\" title=\"负载测试\"></a>负载测试</h3><pre><code>通过逐步加压的方法，达到既定的性能阀值的目标。\n    阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n</code></pre>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><pre><code>通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n</code></pre>\n<h3 id=\"并发测试\"><a href=\"#并发测试\" class=\"headerlink\" title=\"并发测试\"></a>并发测试</h3><pre><code>同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n</code></pre>\n<h3 id=\"容量测试\"><a href=\"#容量测试\" class=\"headerlink\" title=\"容量测试\"></a>容量测试</h3><pre><code>通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n    测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n</code></pre>\n<h3 id=\"可靠性测试（稳定性测试-疲劳测试）\"><a href=\"#可靠性测试（稳定性测试-疲劳测试）\" class=\"headerlink\" title=\"可靠性测试（稳定性测试 / 疲劳测试）\"></a>可靠性测试（稳定性测试 / 疲劳测试）</h3><pre><code>系统在高压的情况下，长时间的运行系统是否稳定。\n    如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n</code></pre>\n<h3 id=\"异常测试（失败测试）\"><a href=\"#异常测试（失败测试）\" class=\"headerlink\" title=\"异常测试（失败测试）\"></a>异常测试（失败测试）</h3><pre><code>指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n</code></pre>\n<h3 id=\"性能测试指标定义\"><a href=\"#性能测试指标定义\" class=\"headerlink\" title=\"性能测试指标定义\"></a>性能测试指标定义</h3><ul>\n<li>事务</li>\n</ul>\n<pre><code>从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n</code></pre>\n<ul>\n<li>TPS (Transactions Per Second)</li>\n</ul>\n<pre><code>每秒钟系统可以处理的事务数\n</code></pre>\n<ul>\n<li>QPS：(Query per second )</li>\n</ul>\n<pre><code>一台查询服务器每秒处理的请求次数\n</code></pre>\n<ul>\n<li>请求响应时间</li>\n</ul>\n<pre><code>从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n</code></pre>\n<ul>\n<li>事务响应时间</li>\n</ul>\n<pre><code>事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n</code></pre>\n<ul>\n<li>并发定义</li>\n</ul>\n<pre><code>没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n</code></pre>\n<ul>\n<li>并发用户数</li>\n</ul>\n<pre><code>同一单位时间内，对系统发起请求的用户数量\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>一次性能测试过程中，网络上传输的数据量的总和\n</code></pre>\n<ul>\n<li>吞吐率</li>\n</ul>\n<pre><code>单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n</code></pre>\n<ul>\n<li>点击率</li>\n</ul>\n<pre><code>每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n</code></pre>\n<ul>\n<li>资源使用率</li>\n</ul>\n<pre><code>对不同的系统资源的使用情况，如： CPU、内存、 IO\n</code></pre>\n<h3 id=\"性能测试的监控指标\"><a href=\"#性能测试的监控指标\" class=\"headerlink\" title=\"性能测试的监控指标\"></a>性能测试的监控指标</h3><ul>\n<li>响应时间</li>\n</ul>\n<pre><code>反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n</code></pre>\n<ul>\n<li>服务器资源占用</li>\n</ul>\n<pre><code>服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n</code></pre>\n<h3 id=\"性能测试的原理\"><a href=\"#性能测试的原理\" class=\"headerlink\" title=\"性能测试的原理\"></a>性能测试的原理</h3><ul>\n<li>用户行为模拟</li>\n</ul>\n<pre><code>低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n    1. 通过参数化，实现不同用户使用不同数据\n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n</code></pre>\n<ul>\n<li>性能指标监控</li>\n</ul>\n<pre><code>通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n</code></pre>\n<ul>\n<li>性能调优</li>\n</ul>\n<pre><code>通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n</code></pre>\n<h2 id=\"性能测试的工作流程\"><a href=\"#性能测试的工作流程\" class=\"headerlink\" title=\"性能测试的工作流程\"></a>性能测试的工作流程</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#crop=0&crop=0&crop=1&crop=1&height=426&id=c4e91&originHeight=426&originWidth=767&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=767\"></p>\n<h3 id=\"性能测试的需求分析\"><a href=\"#性能测试的需求分析\" class=\"headerlink\" title=\"性能测试的需求分析\"></a>性能测试的需求分析</h3><ul>\n<li>目的: 明确测试目标和测试场景</li>\n<li>新系统<ul>\n<li>同行业比较</li>\n<li>业务预期</li>\n</ul>\n</li>\n<li>老系统<ul>\n<li>对比以往用户的使用行为以及用户量</li>\n</ul>\n</li>\n<li>性能需求的的提取</li>\n</ul>\n<pre><code>1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n</code></pre>\n<h3 id=\"系统应用分层架构\"><a href=\"#系统应用分层架构\" class=\"headerlink\" title=\"系统应用分层架构\"></a>系统应用分层架构</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#crop=0&crop=0&crop=1&crop=1&height=438&id=s0he6&originHeight=438&originWidth=832&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=832\"></p>\n<h2 id=\"JMeter-性能测试\"><a href=\"#JMeter-性能测试\" class=\"headerlink\" title=\"JMeter 性能测试\"></a>JMeter 性能测试</h2><h3 id=\"JMeter-实现逻辑分支控制\"><a href=\"#JMeter-实现逻辑分支控制\" class=\"headerlink\" title=\"JMeter 实现逻辑分支控制\"></a>JMeter 实现逻辑分支控制</h3><ul>\n<li>逻辑控制器<ul>\n<li>用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)</li>\n<li>如果（if）控制器</li>\n<li>include Controller</li>\n<li>Runtime Controller</li>\n<li>Switch Controller</li>\n<li>While Controller</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JMeter-实现配置管理\"><a href=\"#JMeter-实现配置管理\" class=\"headerlink\" title=\"JMeter 实现配置管理\"></a>JMeter 实现配置管理</h3><ul>\n<li>配置元件</li>\n</ul>\n<h3 id=\"JMeter-函数助手\"><a href=\"#JMeter-函数助手\" class=\"headerlink\" title=\"JMeter 函数助手\"></a>JMeter 函数助手</h3><ul>\n<li>_CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时</li>\n</ul>\n<pre><code>_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： $&#123;__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)&#125;\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n</code></pre>\n<ul>\n<li>_Random： 生成随机数</li>\n</ul>\n<pre><code>_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==&gt; 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==&gt; 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==&gt; 为生成随机数添加变量名称   id(可任意)\n\n    生成的函数字符串：$&#123;__Random(2,100,)&#125;  ==&gt; id = 55(随机数)\n</code></pre>\n<ul>\n<li>_Log：</li>\n</ul>\n<pre><code>log 函数参数说明：\n\n    String to be logged (and returned) ==&gt; 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==&gt; 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==&gt; 抛出的异常信息\n</code></pre>\n<ul>\n<li>_Split： 字符串分割函数</li>\n</ul>\n<h3 id=\"聚合报告\"><a href=\"#聚合报告\" class=\"headerlink\" title=\"聚合报告\"></a>聚合报告</h3><ul>\n<li>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值</li>\n<li>#Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟 10 个用户，每个用户迭代 10 次，那么这里显示 100</li>\n<li>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间</li>\n<li>Median：中位数，也就是 50％ 用户的响应时间</li>\n<li>90% Line：90％ 用户的响应时间</li>\n<li>Min：最小响应时间</li>\n<li>Max：最大响应时间</li>\n<li>Error%：错误率 —— 错误请求数 / 请求总数</li>\n<li>Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数</li>\n<li>KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec</li>\n</ul>\n<p><strong>重点关注的数据：</strong></p>\n<ul>\n<li>Samples： 请求数</li>\n<li>Average： 平均响应时间</li>\n<li>Min： 最小响应时间</li>\n<li>Max： 最大响应时间</li>\n<li>Error%： 错误率</li>\n<li>Throughput： 吞吐量</li>\n</ul>\n<h3 id=\"JMeter-扩展组件开发\"><a href=\"#JMeter-扩展组件开发\" class=\"headerlink\" title=\"JMeter 扩展组件开发\"></a>JMeter 扩展组件开发</h3><pre><code class=\"shell\">$ Git 地址：\n</code></pre>\n<h2 id=\"Linux-服务器监控性能测试\"><a href=\"#Linux-服务器监控性能测试\" class=\"headerlink\" title=\"Linux 服务器监控性能测试\"></a>Linux 服务器监控性能测试</h2><h3 id=\"测试范围及性能指标\"><a href=\"#测试范围及性能指标\" class=\"headerlink\" title=\"测试范围及性能指标\"></a>测试范围及性能指标</h3><p><strong>—— —— CPU 内存 磁盘 网络 版本</strong></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li>进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）</li>\n<li>线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程</li>\n</ul>\n<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><ol>\n<li>一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。</li>\n<li>线程是进程工作的最小单位，</li>\n<li>一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。</li>\n<li>同一个进程下的不同的多个线程，共享父进程的地址空间。</li>\n<li>线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。</li>\n<li>线程作为调度和分派的基本单位，进程作为拥有资源的基本单位</li>\n</ol>\n<h4 id=\"进程的优缺点\"><a href=\"#进程的优缺点\" class=\"headerlink\" title=\"进程的优缺点\"></a>进程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程</li>\n<li>通过添加 CPU 可以扩充性能</li>\n<li>可以尽量减少线程加锁和解锁的影响，极大地提高了性能</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>逻辑控制复杂，需要和主程序交互</li>\n<li>多进程调度开销大</li>\n</ul>\n<h4 id=\"线程的优缺点\"><a href=\"#线程的优缺点\" class=\"headerlink\" title=\"线程的优缺点\"></a>线程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>程序的逻辑和控制方式简单</li>\n<li>所有线程可以共享内存和变量等</li>\n<li>线程方式消耗的总资源比进程方式少</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>线程与主程序共用地址空间，最大内存地址受限</li>\n<li>线程之间的同步和加锁不易控制（同步锁）</li>\n<li>一个线程的崩溃可能影响整个程序的稳定性</li>\n</ul>\n<h3 id=\"Linux-服务器监控命令\"><a href=\"#Linux-服务器监控命令\" class=\"headerlink\" title=\"Linux 服务器监控命令\"></a>Linux 服务器监控命令</h3><h4 id=\"实时监控命令\"><a href=\"#实时监控命令\" class=\"headerlink\" title=\"实时监控命令\"></a>实时监控命令</h4><ul>\n<li>top (实时监控-综合)<ul>\n<li>作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序</li>\n<li>top -h：帮助</li>\n<li>top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID</li>\n</ul>\n</li>\n<li>top 任务区命令(top 进入任务区)<ul>\n<li>M：按内存使用率排序</li>\n<li>P: 按 CPU 使用率排序</li>\n<li>z: 彩色 / 黑白显示</li>\n</ul>\n</li>\n</ul>\n<pre><code>load average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n</code></pre>\n<ul>\n<li>vmstat（实时监控 - 综合）<ul>\n<li>功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息</li>\n<li>选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）</li>\n<li>语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）</li>\n</ul>\n</li>\n<li>free (实时监控-内存)<ul>\n<li>功能：监控系统内存的使用状态</li>\n<li>语法：free -h</li>\n</ul>\n</li>\n</ul>\n<pre><code>free - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n</code></pre>\n<ul>\n<li>mpstat（实时监控 - CPU）<ul>\n<li>功能：可以查看多核心 CPU 中每个计算核心的统计数据</li>\n<li>参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息</li>\n<li>语法：mpstat [-P | ALL] [interval | count]</li>\n</ul>\n</li>\n</ul>\n<pre><code>mpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n</code></pre>\n<ul>\n<li>netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）<ul>\n<li>netstat -n 拒绝显示别名，能显示数字的全部显示数字</li>\n<li>netstat -l 仅列出有在 Listen（监听）的服务状态</li>\n<li>netstat -p 显示建立相关链接的程序名</li>\n<li>netstat -t 显示 TCP 相关选项</li>\n<li>netstat -u 仅显示 UDP 相关选项</li>\n<li>netstat -i 显示自动匹配接口的信息 ==&gt; 查看网络传输的大小以及有没有发生错误</li>\n<li>netstat -c 每隔一个固定时间，执行该 netstat 命令</li>\n</ul>\n</li>\n<li>iostat (实时监控 - 磁盘)<ul>\n<li>作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况</li>\n<li>iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n    重点关注： r/s 、w/s、 %util(繁忙程度)\n\n    &gt;&gt; 将命令结果以二进制格式存放在文件中\n</code></pre>\n<ul>\n<li>sar 万能命令<ul>\n<li>功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告</li>\n<li>监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动</li>\n<li>语法：sar [options] [-O file] t n ==&gt; (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">options 选项：\n    -A: 所有报告的总和；\n    -u: CPU 利用率；\n    -v: 进程、节点、文件和锁表的状态；\n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n</code></pre>\n<h4 id=\"进程追踪命令\"><a href=\"#进程追踪命令\" class=\"headerlink\" title=\"进程追踪命令\"></a>进程追踪命令</h4><ul>\n<li>strace<ul>\n<li>功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程</li>\n<li>选项 -p： 跟踪指定进程</li>\n<li>选项 -f: 跟踪由 fork 子进程系统调用</li>\n<li>选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等</li>\n<li>选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级</li>\n<li>选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出</li>\n<li>选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"监控工具-nmon\"><a href=\"#监控工具-nmon\" class=\"headerlink\" title=\"监控工具 nmon\"></a>监控工具 nmon</h4><pre><code>说明：\n下载：\n    wget\n</code></pre>\n<h2 id=\"数据驱动性能测试\"><a href=\"#数据驱动性能测试\" class=\"headerlink\" title=\"数据驱动性能测试\"></a>数据驱动性能测试</h2><pre><code>定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n    1. 测试数据与测试代码分离\n    2. 数据控制过程\n    3. 可以减少测试代码量\n    4. 降低脚本开发和维护的成本\n    5. 便于用例的修改和维护\n要求：\n    1. 较强的代码能力\n    2. 较强的分层架构设计思维\n    3. 对开发框架有一定的了解\n使用场景：\n     1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n</code></pre>\n<h2 id=\"数据库的架构设计\"><a href=\"#数据库的架构设计\" class=\"headerlink\" title=\"数据库的架构设计\"></a>数据库的架构设计</h2><h3 id=\"数据库性能测试\"><a href=\"#数据库性能测试\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h3><ul>\n<li>测试范围</li>\n</ul>\n<pre><code>1. SQL 语句   =&gt; 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n</code></pre>\n<h3 id=\"数据库架构\"><a href=\"#数据库架构\" class=\"headerlink\" title=\"数据库架构\"></a>数据库架构</h3><ul>\n<li>一主多从</li>\n</ul>\n<pre><code>读写分离：\n    master(主写，主库)\n    ==&gt;复制 slave(从读，从库)\n    ==&gt;复制 slave(从读，从库)\n缺点： 主从延迟\n</code></pre>\n<ul>\n<li>双机热备</li>\n</ul>\n<pre><code>KeepAlived\n    ==&gt; VIP (虚拟 IP)\n    ==&gt; master  ==&gt; 复制 ==&gt; slave\n缺点：\n优点：\n</code></pre>\n<h3 id=\"数据库主从同步的工作原理\"><a href=\"#数据库主从同步的工作原理\" class=\"headerlink\" title=\"数据库主从同步的工作原理\"></a>数据库主从同步的工作原理</h3><pre><code>1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n</code></pre>\n<h3 id=\"数据库分库分表的设计方法\"><a href=\"#数据库分库分表的设计方法\" class=\"headerlink\" title=\"数据库分库分表的设计方法\"></a>数据库分库分表的设计方法</h3><pre><code>分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==&gt; 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==&gt; userid%3 == 1\n            ==&gt; userid%3 == 2\n            ==&gt; userid%3 == 3\n</code></pre>\n<h2 id=\"数据库性能测试-1\"><a href=\"#数据库性能测试-1\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><ul>\n<li>MariaDB(主流分支)<ul>\n<li>MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL</li>\n<li>兼容 MySQL, 对于开发者来说感知不到变化</li>\n<li>MariaDB is free and open source software</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-数据库监控指标\"><a href=\"#MySQL-数据库监控指标\" class=\"headerlink\" title=\"MySQL 数据库监控指标\"></a>MySQL 数据库监控指标</h3><ul>\n<li>QPS(Queries per seconds)<ul>\n<li>每秒钟查询数量</li>\n<li>show global status like ‘Question%’;</li>\n</ul>\n</li>\n<li>TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds<ul>\n<li>show global status like ‘Com_commit’;</li>\n<li>show global status like ‘Com_rollback’;</li>\n</ul>\n</li>\n<li>线程连接数<ul>\n<li>show global status like ‘Max_used_connections’;(使用的最大连接数)</li>\n<li>show global status like ‘Max_connections’;(设置的最大连接数)</li>\n<li>show global status like ‘Threads%’;</li>\n</ul>\n</li>\n<li>Query Cache<ul>\n<li>查询缓存，用于缓存 select 查询结果</li>\n<li>当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果</li>\n<li>适用于大量查询，很少改变表中的数据</li>\n</ul>\n</li>\n<li>Query Cache 命中率（MySQL 特有）<ul>\n<li>show global status like ‘Qcache%’;</li>\n<li>命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) * 100%</li>\n</ul>\n</li>\n</ul>\n<pre><code>开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    =&gt; 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    =&gt; 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n</code></pre>\n<ul>\n<li>锁定状态<ul>\n<li>show global status like ‘%lock’;</li>\n<li>table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重</li>\n<li>innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的</li>\n<li>表锁、行锁、间隙锁</li>\n</ul>\n</li>\n<li>主从延时<ul>\n<li>查询主从延时时间： show slave status</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-慢查询工作原理及操作\"><a href=\"#MySQL-慢查询工作原理及操作\" class=\"headerlink\" title=\"MySQL 慢查询工作原理及操作\"></a>MySQL 慢查询工作原理及操作</h3><pre><code>慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n</code></pre>\n<ul>\n<li>慢查询日志分析<ul>\n<li>mysqldumpslow 命令</li>\n<li>-s : 表示按照何种方式排序</li>\n<li>-t : top n 的意思，即返回前面多少条数据</li>\n<li>-g : 后边可写正则匹配模式，大小写不敏感</li>\n</ul>\n</li>\n<li>mysqldumpslow -s 的更多参数<ul>\n<li>c 访问计数</li>\n<li>i 锁定时间</li>\n<li>r 返回记录</li>\n<li>t 查询时间</li>\n<li>al 平均锁定时间</li>\n<li>ar 平均返回记录数</li>\n<li>at 平均查询时间</li>\n</ul>\n</li>\n</ul>\n<pre><code>使用：\n    1. 得到返回记录集最多的 10 个 SQL\n        mysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n        mysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n        mysqldumpslow -s t -t 10 -g &quot;left join&quot; slow.log\n</code></pre>\n<ul>\n<li>SQL 语句性能分析<ul>\n<li>explain select 语句</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"markdown\">explain 返回结果分析 1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行 2. select_type: 3. table: 显示查询表名，&lt;derived N&gt; 临时表\n**4. type: ** 1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all** 2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引 5. possible_keys: 可能使用的索引 6. key: 真正使用到的索引 7. key_len: 8. ref: 9. rows: 估算的扫描行数 10. extra:\n</code></pre>\n<h3 id=\"MySQL-索引的概念及作用\"><a href=\"#MySQL-索引的概念及作用\" class=\"headerlink\" title=\"MySQL 索引的概念及作用\"></a>MySQL 索引的概念及作用</h3><p>[ 索引类型 ]</p>\n<ul>\n<li>主键索引（唯一索引，不允许有空值）</li>\n<li>全文索引（fulltext, MyISAM 表特有）</li>\n<li>唯一索引（值唯一，允许有空值）</li>\n<li>组合索引（多列索引，多列同时创建索引）</li>\n<li>普通索引（无限制）</li>\n</ul>\n<p>[ 索引创建规则 ]</p>\n<ul>\n<li>可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间</li>\n<li>在插入与更新数据时，要重写索引文件</li>\n<li>单张表索引数量最好不超过 5 个</li>\n<li>单个索引中的字段数不超过 5 个（组合索引）</li>\n<li>不适用索引的查询： like 模糊查询；反向查询，not in / not like</li>\n</ul>\n<h3 id=\"MySQL-存储引擎\"><a href=\"#MySQL-存储引擎\" class=\"headerlink\" title=\"MySQL 存储引擎\"></a>MySQL 存储引擎</h3><ul>\n<li>MyISAM（只支持表锁）</li>\n</ul>\n<pre><code>优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n</code></pre>\n<ul>\n<li>InnoDB</li>\n</ul>\n<pre><code>优点：\n    1. 支持事务\n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n</code></pre>\n<h3 id=\"MySQL-实时监控\"><a href=\"#MySQL-实时监控\" class=\"headerlink\" title=\"MySQL 实时监控\"></a>MySQL 实时监控</h3><ul>\n<li>orzdba(监控工具)</li>\n</ul>\n<pre><code>./orzdba 执行\n使用：\n</code></pre>\n<h3 id=\"MySQL-集群监控方案-天兔-LEPUS\"><a href=\"#MySQL-集群监控方案-天兔-LEPUS\" class=\"headerlink\" title=\"MySQL 集群监控方案 - 天兔 LEPUS\"></a>MySQL 集群监控方案 - 天兔 LEPUS</h3><ul>\n<li>天兔 LEPUS 全部数据库实例监控</li>\n</ul>\n<pre><code>本地部署： 产品 &gt; 文档中心 &gt; 安装\n    admin /Lepusadmin\n</code></pre>\n<h3 id=\"MySQL-性能测试的用例准备\"><a href=\"#MySQL-性能测试的用例准备\" class=\"headerlink\" title=\"MySQL 性能测试的用例准备\"></a>MySQL 性能测试的用例准备</h3><pre><code>要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤：\n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<blockquote>\n<p><strong>性能测试的目的：发现性能的瓶颈</strong></p>\n</blockquote>\n<h3 id=\"负载测试\"><a href=\"#负载测试\" class=\"headerlink\" title=\"负载测试\"></a>负载测试</h3><pre><code>通过逐步加压的方法，达到既定的性能阀值的目标。\n    阀值的设定应是小于等于某个值,如 CPU 的使用率小于等于 80%\n</code></pre>\n<h3 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h3><pre><code>通过逐步加压的方法，使系统的某些资源达到饱和，甚至失效的状态（也就是说什么条件下可以把系统压崩溃）\n</code></pre>\n<h3 id=\"并发测试\"><a href=\"#并发测试\" class=\"headerlink\" title=\"并发测试\"></a>并发测试</h3><pre><code>同一时间内，多个虚拟用户同时访问同一模块、同一功能。通常的测试方法是设置集合点。\n</code></pre>\n<h3 id=\"容量测试\"><a href=\"#容量测试\" class=\"headerlink\" title=\"容量测试\"></a>容量测试</h3><pre><code>通常是指数据库层面的，目标是获取数据库最佳容量的能力，又称为容量预估。\n    测试方法：在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标\n</code></pre>\n<h3 id=\"可靠性测试（稳定性测试-疲劳测试）\"><a href=\"#可靠性测试（稳定性测试-疲劳测试）\" class=\"headerlink\" title=\"可靠性测试（稳定性测试 / 疲劳测试）\"></a>可靠性测试（稳定性测试 / 疲劳测试）</h3><pre><code>系统在高压的情况下，长时间的运行系统是否稳定。\n    如 CPU 使用率在 80% 以上，7 * 24 小时运行，系统是否稳定\n</code></pre>\n<h3 id=\"异常测试（失败测试）\"><a href=\"#异常测试（失败测试）\" class=\"headerlink\" title=\"异常测试（失败测试）\"></a>异常测试（失败测试）</h3><pre><code>指系统架构方面的测试，如：在负载均衡架构中，要测试宕机（死机）、节点挂掉等情况下系统的反应。\n</code></pre>\n<h3 id=\"性能测试指标定义\"><a href=\"#性能测试指标定义\" class=\"headerlink\" title=\"性能测试指标定义\"></a>性能测试指标定义</h3><ul>\n<li>事务</li>\n</ul>\n<pre><code>从客户端发起的一个或多个请求(这些请求组成一个完整的操作)，到客户端接收到从服务器返回的响应。\n</code></pre>\n<ul>\n<li>TPS (Transactions Per Second)</li>\n</ul>\n<pre><code>每秒钟系统可以处理的事务数\n</code></pre>\n<ul>\n<li>QPS：(Query per second )</li>\n</ul>\n<pre><code>一台查询服务器每秒处理的请求次数\n</code></pre>\n<ul>\n<li>请求响应时间</li>\n</ul>\n<pre><code>从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间\n</code></pre>\n<ul>\n<li>事务响应时间</li>\n</ul>\n<pre><code>事务可能有一个或多个请求组成，事务的响应时间主要针对于用户的角度而言，如转账。\n</code></pre>\n<ul>\n<li>并发定义</li>\n</ul>\n<pre><code>没有严格意义上的并发，并发总有先后，无论是差距 1 毫秒或者是 1 微秒，总有一个时间差。所以并发讲的是一个时间范围内，比如 1S 内。\n</code></pre>\n<ul>\n<li>并发用户数</li>\n</ul>\n<pre><code>同一单位时间内，对系统发起请求的用户数量\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>一次性能测试过程中，网络上传输的数据量的总和\n</code></pre>\n<ul>\n<li>吞吐率</li>\n</ul>\n<pre><code>单位时间内网络上传输的数据量\n吞吐率 = 吞吐量 / 吞吐时间\n</code></pre>\n<ul>\n<li>点击率</li>\n</ul>\n<pre><code>每秒钟用户向服务器提交的请求数。Web 应用程序特有的指标，\n</code></pre>\n<ul>\n<li>资源使用率</li>\n</ul>\n<pre><code>对不同的系统资源的使用情况，如： CPU、内存、 IO\n</code></pre>\n<h3 id=\"性能测试的监控指标\"><a href=\"#性能测试的监控指标\" class=\"headerlink\" title=\"性能测试的监控指标\"></a>性能测试的监控指标</h3><ul>\n<li>响应时间</li>\n</ul>\n<pre><code>反映完成某笔业务（事务）所需要的时间。\n在性能测试中通过事务函数来完成对响应时间的统计，事务是指做某件事的操作，\n事务函数会记录开始做这件事情和该事情完成之间的时间差（事务响应时间 Transaction Response Time）\n\n    其他：\n    1. 响应时间的2、5、8原则\n    2. 80/20原则（又称帕累托效应，比如，某些系统一天中80%的访问量集中在20%的时间内）\n</code></pre>\n<ul>\n<li>吞吐量</li>\n</ul>\n<pre><code>反映单位时间内能够处理的事务数。\n在测试工具中，吞吐量也被称为TPS，单位时间内完成的事务数。\nTPS = 事务数 / 时间\n</code></pre>\n<ul>\n<li>服务器资源占用</li>\n</ul>\n<pre><code>服务器资源占用反映在负载下系统的资源利用率。资源的占用率越低，说明系统越优秀，资源是指系统运行的一切软硬件平台。\n在性能测试中，我们需要监控系统在负载下的硬件或者软件上的各种资源的使用情况，\n如：CPU的占用率、内存使用率、IO等（数据库中的查询Cache命中率）。\n对于终端用户来讲，其最关心的指标是响应时间。用户并不关心多少人使用，以及资源是否足够，所以性能测试必须保证在任意情况下终端用户使用的操作响应时间不大于5秒。\n</code></pre>\n<h3 id=\"性能测试的原理\"><a href=\"#性能测试的原理\" class=\"headerlink\" title=\"性能测试的原理\"></a>性能测试的原理</h3><ul>\n<li>用户行为模拟</li>\n</ul>\n<pre><code>低成本且具有可行性，模拟大量用户操作的一种技术，凭借此项技术将被测系统在测试阶段运行起来，以检测系统工作是否正常。\n    1. 通过参数化，实现不同用户使用不同数据\n    1. 通过集合点模拟多用户并发操作\n    2. 通过关联实现用户请求间的依赖关系\n    3. 通过思考时间代替请求间的延时时间\n</code></pre>\n<ul>\n<li>性能指标监控</li>\n</ul>\n<pre><code>通过模拟用户行为，在系统运行中需要监控各项性能指标，并分析指标正确性\n    1. 请求响应时间（通过事务实现 ）\n    2. 服务器处理能力监控（通过事务计算吞吐量）\n    3. 服务器资源利用率监控（计数器接口）\n</code></pre>\n<ul>\n<li>性能调优</li>\n</ul>\n<pre><code>通过指标的监控发现系统存在的性能缺陷，利用分析工具定位并修正性能问题。\n</code></pre>\n<h2 id=\"性能测试的工作流程\"><a href=\"#性能测试的工作流程\" class=\"headerlink\" title=\"性能测试的工作流程\"></a>性能测试的工作流程</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235372090-03e1cf57-25a2-4416-8850-168cf6f21260.png#crop=0&crop=0&crop=1&crop=1&height=426&id=c4e91&originHeight=426&originWidth=767&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=767\"></p>\n<h3 id=\"性能测试的需求分析\"><a href=\"#性能测试的需求分析\" class=\"headerlink\" title=\"性能测试的需求分析\"></a>性能测试的需求分析</h3><ul>\n<li>目的: 明确测试目标和测试场景</li>\n<li>新系统<ul>\n<li>同行业比较</li>\n<li>业务预期</li>\n</ul>\n</li>\n<li>老系统<ul>\n<li>对比以往用户的使用行为以及用户量</li>\n</ul>\n</li>\n<li>性能需求的的提取</li>\n</ul>\n<pre><code>1. 典型重要业务场景\n2. 高频使用场景\n3. 存在大量并发业务场景\n4. 容易出错的场景\n</code></pre>\n<h3 id=\"系统应用分层架构\"><a href=\"#系统应用分层架构\" class=\"headerlink\" title=\"系统应用分层架构\"></a>系统应用分层架构</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1598235371396-5205c275-4e4a-4807-985f-4920bfd9bc79.png#crop=0&crop=0&crop=1&crop=1&height=438&id=s0he6&originHeight=438&originWidth=832&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=832\"></p>\n<h2 id=\"JMeter-性能测试\"><a href=\"#JMeter-性能测试\" class=\"headerlink\" title=\"JMeter 性能测试\"></a>JMeter 性能测试</h2><h3 id=\"JMeter-实现逻辑分支控制\"><a href=\"#JMeter-实现逻辑分支控制\" class=\"headerlink\" title=\"JMeter 实现逻辑分支控制\"></a>JMeter 实现逻辑分支控制</h3><ul>\n<li>逻辑控制器<ul>\n<li>用来控制测试脚本的逻辑判断，即控制脚本的运行(以下为常用控制器)</li>\n<li>如果（if）控制器</li>\n<li>include Controller</li>\n<li>Runtime Controller</li>\n<li>Switch Controller</li>\n<li>While Controller</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JMeter-实现配置管理\"><a href=\"#JMeter-实现配置管理\" class=\"headerlink\" title=\"JMeter 实现配置管理\"></a>JMeter 实现配置管理</h3><ul>\n<li>配置元件</li>\n</ul>\n<h3 id=\"JMeter-函数助手\"><a href=\"#JMeter-函数助手\" class=\"headerlink\" title=\"JMeter 函数助手\"></a>JMeter 函数助手</h3><ul>\n<li>_CSVRead: 用于对脚本进行参数话，当脚本中不同变量需要不同参数值时</li>\n</ul>\n<pre><code>_CSVRead 函数参数说明：\n\nCSV file to get values from | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第一个参数，调用文件logins.txt的路径\nColumn number of CSV file | next | *alias ==&gt; 指$&#123;__CSVRead(,)&#125;中（）内的第二个参数，调用文件logins.txt中第几列的参数，注意第一列为0，第二列为1，依此类推。。。\n\n生成的函数字符串： $&#123;__CSVRead(C:\\Users\\234652\\Desktop\\JMeter\\log\\01.txt,5)&#125;\n[ 使用方法 ]： 配合 配置元件用户定义的变量使用\n</code></pre>\n<ul>\n<li>_Random： 生成随机数</li>\n</ul>\n<pre><code>_Random 函数参数说明：\n\n    The minimum value allowed for a range of values ==&gt; 一个范围内允许的最小的值   1\n    The maximum value allowed for a range of values ==&gt; 一个范围内允许的最大的值   100\n    Name of variable in which to store the result (optional) ==&gt; 为生成随机数添加变量名称   id(可任意)\n\n    生成的函数字符串：$&#123;__Random(2,100,)&#125;  ==&gt; id = 55(随机数)\n</code></pre>\n<ul>\n<li>_Log：</li>\n</ul>\n<pre><code>log 函数参数说明：\n\n    String to be logged (and returned) ==&gt; 日志输出的内容，可以引用变量名称\n    Log level (default INFO) or OUT or ERR ==&gt; 定义日志输出的级别，INFO、OUT、warn\n    Throwable text (optional) ==&gt; 抛出的异常信息\n</code></pre>\n<ul>\n<li>_Split： 字符串分割函数</li>\n</ul>\n<h3 id=\"聚合报告\"><a href=\"#聚合报告\" class=\"headerlink\" title=\"聚合报告\"></a>聚合报告</h3><ul>\n<li>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值</li>\n<li>#Samples：请求数——表示这次测试中一共发出了多少个请求，如果模拟 10 个用户，每个用户迭代 10 次，那么这里显示 100</li>\n<li>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，以 Transaction 为单位显示平均响应时间</li>\n<li>Median：中位数，也就是 50％ 用户的响应时间</li>\n<li>90% Line：90％ 用户的响应时间</li>\n<li>Min：最小响应时间</li>\n<li>Max：最大响应时间</li>\n<li>Error%：错误率 —— 错误请求数 / 请求总数</li>\n<li>Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数</li>\n<li>KB/Sec：每秒从服务器端接收到的数据量，相当于 LoadRunner 中的 Throughput / Sec</li>\n</ul>\n<p><strong>重点关注的数据：</strong></p>\n<ul>\n<li>Samples： 请求数</li>\n<li>Average： 平均响应时间</li>\n<li>Min： 最小响应时间</li>\n<li>Max： 最大响应时间</li>\n<li>Error%： 错误率</li>\n<li>Throughput： 吞吐量</li>\n</ul>\n<h3 id=\"JMeter-扩展组件开发\"><a href=\"#JMeter-扩展组件开发\" class=\"headerlink\" title=\"JMeter 扩展组件开发\"></a>JMeter 扩展组件开发</h3><pre><code class=\"shell\">$ Git 地址：\n</code></pre>\n<h2 id=\"Linux-服务器监控性能测试\"><a href=\"#Linux-服务器监控性能测试\" class=\"headerlink\" title=\"Linux 服务器监控性能测试\"></a>Linux 服务器监控性能测试</h2><h3 id=\"测试范围及性能指标\"><a href=\"#测试范围及性能指标\" class=\"headerlink\" title=\"测试范围及性能指标\"></a>测试范围及性能指标</h3><p><strong>—— —— CPU 内存 磁盘 网络 版本</strong></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li>进程： 具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。（进程是可以独立运行的）</li>\n<li>线程： 是进程的一个实体，是 CPU 调度和分派的基本单位他是比进程更小的能够独立运行的基本单位，线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源。一个线程可以创建和撤销另一个线程</li>\n</ul>\n<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><ol>\n<li>一个线程只属于一个进程，一个进程中可以拥有多个线程，线程之间可以互相操作。</li>\n<li>线程是进程工作的最小单位，</li>\n<li>一个进程会分配一个地址空间，进程与进程之间不共享地址空间。即不共享内存。</li>\n<li>同一个进程下的不同的多个线程，共享父进程的地址空间。</li>\n<li>线程在执行过程中，需要协作同步，不同进程的线程之间要利用消息通信的办法实现同步。</li>\n<li>线程作为调度和分派的基本单位，进程作为拥有资源的基本单位</li>\n</ol>\n<h4 id=\"进程的优缺点\"><a href=\"#进程的优缺点\" class=\"headerlink\" title=\"进程的优缺点\"></a>进程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>每个进程互相独立，不影响主程序的稳定性，子进程崩溃不影响其他进程</li>\n<li>通过添加 CPU 可以扩充性能</li>\n<li>可以尽量减少线程加锁和解锁的影响，极大地提高了性能</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>逻辑控制复杂，需要和主程序交互</li>\n<li>多进程调度开销大</li>\n</ul>\n<h4 id=\"线程的优缺点\"><a href=\"#线程的优缺点\" class=\"headerlink\" title=\"线程的优缺点\"></a>线程的优缺点</h4><p>[ 优点 ]</p>\n<ul>\n<li>程序的逻辑和控制方式简单</li>\n<li>所有线程可以共享内存和变量等</li>\n<li>线程方式消耗的总资源比进程方式少</li>\n</ul>\n<p>[ 缺点 ]</p>\n<ul>\n<li>线程与主程序共用地址空间，最大内存地址受限</li>\n<li>线程之间的同步和加锁不易控制（同步锁）</li>\n<li>一个线程的崩溃可能影响整个程序的稳定性</li>\n</ul>\n<h3 id=\"Linux-服务器监控命令\"><a href=\"#Linux-服务器监控命令\" class=\"headerlink\" title=\"Linux 服务器监控命令\"></a>Linux 服务器监控命令</h3><h4 id=\"实时监控命令\"><a href=\"#实时监控命令\" class=\"headerlink\" title=\"实时监控命令\"></a>实时监控命令</h4><ul>\n<li>top (实时监控-综合)<ul>\n<li>作用： 实时监控系统的运行状态，并且可以按照 CPU 及内存进行排序</li>\n<li>top -h：帮助</li>\n<li>top -p: 监控指定进程，当监控多个进程是，进程 ID 以逗号分隔。语法：top -p PID</li>\n</ul>\n</li>\n<li>top 任务区命令(top 进入任务区)<ul>\n<li>M：按内存使用率排序</li>\n<li>P: 按 CPU 使用率排序</li>\n<li>z: 彩色 / 黑白显示</li>\n</ul>\n</li>\n</ul>\n<pre><code>load average 说明：\n\n    1. top 中的 load average 表示系统运行队列的平均利用率，也可以认为是可运行进程的平均数\n    2. 三个值分别表示： 1 分钟、5 分钟、15 分钟的平均负载值\n    3. 在单核 CPU 中 load average 的值为 1 时，表示满负荷状态。\n    4. 同理，在多核 CPU 中满负载 load average 的值为 1 * CPU 核数。\n</code></pre>\n<ul>\n<li>vmstat（实时监控 - 综合）<ul>\n<li>功能：可以监控操作系统的进程状态、内存、虚拟内存、磁盘 IO、CPU 的信息</li>\n<li>选项：vmstat -S 使用指定单位显示，（k, K, m, M 分别代表 1000, 1024, 1000000, 1048576 字节，默认单位 K 1024）</li>\n<li>语法：vmstat 2 5 （2 表示时间间隔； 5 表示 显示次数）</li>\n</ul>\n</li>\n<li>free (实时监控-内存)<ul>\n<li>功能：监控系统内存的使用状态</li>\n<li>语法：free -h</li>\n</ul>\n</li>\n</ul>\n<pre><code>free - h 显示字段说明：\n\n    1. total： 总物理内存的大小\n    2. Used： 已经使用多大\n    3. Free: 可用多少\n    4. shared: 多个进程共享的内存总额\n    5. buffers/cached: 磁盘缓存的大小\n</code></pre>\n<ul>\n<li>mpstat（实时监控 - CPU）<ul>\n<li>功能：可以查看多核心 CPU 中每个计算核心的统计数据</li>\n<li>参数：无参数时，显示系统启动以后所有信息的平均值，有 interval 时，第一行的信息自系统启动以来的平均信息，从第二行开始，输出为前一个 interval 时间段的平均信息</li>\n<li>语法：mpstat [-P | ALL] [interval | count]</li>\n</ul>\n</li>\n</ul>\n<pre><code>mpstat 语法使用说明\n\n    1. -P: 表示监控那个 CPU ;在 [0, CPU 个数减一] 中取值\n    使用方法：mpstat -P 0（实时监控第一个 CPU）; mpstat -P 2(实时监控第三个 CPU);\n    2. interval 相邻两次采样的间隔事件; count 采样的次数，count 只能和 delay 一起使用\n    使用方法：mpstat 2 5 （2 表示时间间隔； 5 表示 显示次数）\n</code></pre>\n<ul>\n<li>netstat (实时监控 - 网络) （netstat -ntlp 查看端口有没有被监听）<ul>\n<li>netstat -n 拒绝显示别名，能显示数字的全部显示数字</li>\n<li>netstat -l 仅列出有在 Listen（监听）的服务状态</li>\n<li>netstat -p 显示建立相关链接的程序名</li>\n<li>netstat -t 显示 TCP 相关选项</li>\n<li>netstat -u 仅显示 UDP 相关选项</li>\n<li>netstat -i 显示自动匹配接口的信息 ==&gt; 查看网络传输的大小以及有没有发生错误</li>\n<li>netstat -c 每隔一个固定时间，执行该 netstat 命令</li>\n</ul>\n</li>\n<li>iostat (实时监控 - 磁盘)<ul>\n<li>作用： 显示磁盘读写操作的统计信息，同时给出 CPU 的使用情况</li>\n<li>iostat -x [设备名称] 1 2 输出指定要统计的磁盘设备名称，默认为所有磁盘设备（1，表示间隔时间，2 表示执行次数）</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">[root@dahuatech ~]# iostat -x\n    Linux 2.6.32-573.el6.x86_64 (dahuatech)         07/28/2020      _x86_64_        (8 CPU)\n\n    avg-cpu:  %user   %nice %system %iowait  %steal   %idle\n    15.64    0.15   14.30    0.48    0.00   69.43\n\n    Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util\n    sda               0.60   241.21    0.68   14.04    64.67  2041.76   143.15     0.09    6.17   1.37   2.01\n    dm-0              0.00     0.00    0.55    1.49     4.39    11.91     8.00     0.01    5.44   0.34   0.07\n    dm-1              0.00     0.00    0.00    0.00     0.01     0.00     7.94     0.00    3.88   1.21   0.00\n    dm-2              0.00     0.00    0.01  152.33     0.07  1218.60     8.00     1.56   10.24   0.03   0.39\n    dm-3              0.00     0.00    0.17    0.00    27.40     0.00   159.85     0.00    1.91   1.45   0.02\n    dm-4              0.00     0.00    0.16   97.30     9.72   778.39     8.09     0.26    2.69   0.08   0.77\n\n    重点关注： r/s 、w/s、 %util(繁忙程度)\n\n    &gt;&gt; 将命令结果以二进制格式存放在文件中\n</code></pre>\n<ul>\n<li>sar 万能命令<ul>\n<li>功能：linux 全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告</li>\n<li>监控范围： 文件读写情况、系统调用的使用情况、磁盘 I/O 、CPU 效率、内存使用情况、进程活动、IPC 有关的活动</li>\n<li>语法：sar [options] [-O file] t n ==&gt; (options: 命令行选项 t：表示采样间隔时间（必有）；n：表示采样次数（可选，默认 1); -o file: 表示将命令结果以二进制格式存放在文件中，file 表示文件名)</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">options 选项：\n    -A: 所有报告的总和；\n    -u: CPU 利用率；\n    -v: 进程、节点、文件和锁表的状态；\n    -r：显示系统内存的使用情况\n    -B: 内存分页情况\n    -b: 缓冲区使用情况（8 份区域）\n</code></pre>\n<h4 id=\"进程追踪命令\"><a href=\"#进程追踪命令\" class=\"headerlink\" title=\"进程追踪命令\"></a>进程追踪命令</h4><ul>\n<li>strace<ul>\n<li>功能：集诊断、调试、统计于一体的工具，追踪进程的运行过程</li>\n<li>选项 -p： 跟踪指定进程</li>\n<li>选项 -f: 跟踪由 fork 子进程系统调用</li>\n<li>选项 -c: 统计每一系统调用的所执行的时间，次数和出错的次数等</li>\n<li>选项 -t: 在输出中的每一行前加上时间信息， -tt 时间确定到微秒级</li>\n<li>选项 -e expr: 输出过滤器，通过表达式，可以过滤掉不想要的输出</li>\n<li>选项 -o filename: 默认将结果输出到 stdout,通过 -o 输出到指定文件夹</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"监控工具-nmon\"><a href=\"#监控工具-nmon\" class=\"headerlink\" title=\"监控工具 nmon\"></a>监控工具 nmon</h4><pre><code>说明：\n下载：\n    wget\n</code></pre>\n<h2 id=\"数据驱动性能测试\"><a href=\"#数据驱动性能测试\" class=\"headerlink\" title=\"数据驱动性能测试\"></a>数据驱动性能测试</h2><pre><code>定义：从数据文件中读取测试数据，驱动测试过程的一种测试方法（更高级的参数化）。\n特点：\n    1. 测试数据与测试代码分离\n    2. 数据控制过程\n    3. 可以减少测试代码量\n    4. 降低脚本开发和维护的成本\n    5. 便于用例的修改和维护\n要求：\n    1. 较强的代码能力\n    2. 较强的分层架构设计思维\n    3. 对开发框架有一定的了解\n使用场景：\n     1. 复杂的业务流程\n    2. 根据业务场景分流\n    3. 符合条件的并发场景\n</code></pre>\n<h2 id=\"数据库的架构设计\"><a href=\"#数据库的架构设计\" class=\"headerlink\" title=\"数据库的架构设计\"></a>数据库的架构设计</h2><h3 id=\"数据库性能测试\"><a href=\"#数据库性能测试\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h3><ul>\n<li>测试范围</li>\n</ul>\n<pre><code>1. SQL 语句   =&gt; 慢查询等\n2. 资源使用率\n3. 数据库架构的合理性\n4. 数据库的性能指标\n</code></pre>\n<h3 id=\"数据库架构\"><a href=\"#数据库架构\" class=\"headerlink\" title=\"数据库架构\"></a>数据库架构</h3><ul>\n<li>一主多从</li>\n</ul>\n<pre><code>读写分离：\n    master(主写，主库)\n    ==&gt;复制 slave(从读，从库)\n    ==&gt;复制 slave(从读，从库)\n缺点： 主从延迟\n</code></pre>\n<ul>\n<li>双机热备</li>\n</ul>\n<pre><code>KeepAlived\n    ==&gt; VIP (虚拟 IP)\n    ==&gt; master  ==&gt; 复制 ==&gt; slave\n缺点：\n优点：\n</code></pre>\n<h3 id=\"数据库主从同步的工作原理\"><a href=\"#数据库主从同步的工作原理\" class=\"headerlink\" title=\"数据库主从同步的工作原理\"></a>数据库主从同步的工作原理</h3><pre><code>1. master 将改变记录到二进制（binary log 文件）中\n2. slave 将 master 的 binary log events 拷贝到它的中继日志（relay log，转换日志）\n3. slave 重做中继日志中的事件，将改变反映他自己的数据\n</code></pre>\n<h3 id=\"数据库分库分表的设计方法\"><a href=\"#数据库分库分表的设计方法\" class=\"headerlink\" title=\"数据库分库分表的设计方法\"></a>数据库分库分表的设计方法</h3><pre><code>分库分表原因：\n    1. 单表或库数据量太大\n    2. 硬件不能升级或无法升级\n方案：\n    1. 业务拆分（用户、商品、订单、 ... ...）\n    2. 垂直拆分（商品 ==&gt; 电子商品、母婴商品、 ... ...）\n    3. 水平拆分(一致性哈西算法)\n    usreid  ==&gt; userid%3 == 1\n            ==&gt; userid%3 == 2\n            ==&gt; userid%3 == 3\n</code></pre>\n<h2 id=\"数据库性能测试-1\"><a href=\"#数据库性能测试-1\" class=\"headerlink\" title=\"数据库性能测试\"></a>数据库性能测试</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><ul>\n<li>MariaDB(主流分支)<ul>\n<li>MySQL 之父 Widenius 创建，目标在于替换现有的 MySQL</li>\n<li>兼容 MySQL, 对于开发者来说感知不到变化</li>\n<li>MariaDB is free and open source software</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-数据库监控指标\"><a href=\"#MySQL-数据库监控指标\" class=\"headerlink\" title=\"MySQL 数据库监控指标\"></a>MySQL 数据库监控指标</h3><ul>\n<li>QPS(Queries per seconds)<ul>\n<li>每秒钟查询数量</li>\n<li>show global status like ‘Question%’;</li>\n</ul>\n</li>\n<li>TPS (Transactions Per Second) TPS = Com_commit + Com_rollback) / seconds<ul>\n<li>show global status like ‘Com_commit’;</li>\n<li>show global status like ‘Com_rollback’;</li>\n</ul>\n</li>\n<li>线程连接数<ul>\n<li>show global status like ‘Max_used_connections’;(使用的最大连接数)</li>\n<li>show global status like ‘Max_connections’;(设置的最大连接数)</li>\n<li>show global status like ‘Threads%’;</li>\n</ul>\n</li>\n<li>Query Cache<ul>\n<li>查询缓存，用于缓存 select 查询结果</li>\n<li>当下次接收到相同查询请求时，不在执行实际查询处理而直接返回结果</li>\n<li>适用于大量查询，很少改变表中的数据</li>\n</ul>\n</li>\n<li>Query Cache 命中率（MySQL 特有）<ul>\n<li>show global status like ‘Qcache%’;</li>\n<li>命中率计算：Query_cache_hits = (Qcahce_hits/(Qcahce_hits + Qcahce_inserts)) * 100%</li>\n</ul>\n</li>\n</ul>\n<pre><code>开启：\n1. 修改 my.cnf 文件\n2. 将 query_cache_size 设置为具体的大小（取决于查询的实际情况，最好设置为 1024 的倍数，参考值 32M）\n3. 增加一行: query_cache_type = 0/1/2\n    =&gt; 1 表示缓存所有结果，除非你的 select 语句使用 SQL_NO_CACHE 禁用了查询缓存\n    =&gt; 2 表示只缓存在 select 语句中通过 SQL_CACHE 指定需要缓存的查询\n</code></pre>\n<ul>\n<li>锁定状态<ul>\n<li>show global status like ‘%lock’;</li>\n<li>table_locks_waited / table_lockks_immediate 值越大代表表锁造成的阻塞越严重</li>\n<li>innodb_row_lock_waits innodb 行锁,太大可能是间隙锁造成的</li>\n<li>表锁、行锁、间隙锁</li>\n</ul>\n</li>\n<li>主从延时<ul>\n<li>查询主从延时时间： show slave status</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-慢查询工作原理及操作\"><a href=\"#MySQL-慢查询工作原理及操作\" class=\"headerlink\" title=\"MySQL 慢查询工作原理及操作\"></a>MySQL 慢查询工作原理及操作</h3><pre><code>慢查询：\n    1. 执行速度超过定义的时间的查询\n    2. 不同系统定义不同的慢查询指标\n慢查询开启：\n    1. 编辑 etc/my.cnf 在 [mysqlid] 域中添加：\n    slow_query_log = 1 (开启慢查询)\n    2. 设置慢查询日志路径：\n    slow_query_log_file = /data/mysql/slow.log\n    3. 设置慢查询的时长\n    long_query_time = 1\n    4. 未使用索引的查询也被记录到慢查询日志中\n    log_queries_not_using_indexes = 1\n</code></pre>\n<ul>\n<li>慢查询日志分析<ul>\n<li>mysqldumpslow 命令</li>\n<li>-s : 表示按照何种方式排序</li>\n<li>-t : top n 的意思，即返回前面多少条数据</li>\n<li>-g : 后边可写正则匹配模式，大小写不敏感</li>\n</ul>\n</li>\n<li>mysqldumpslow -s 的更多参数<ul>\n<li>c 访问计数</li>\n<li>i 锁定时间</li>\n<li>r 返回记录</li>\n<li>t 查询时间</li>\n<li>al 平均锁定时间</li>\n<li>ar 平均返回记录数</li>\n<li>at 平均查询时间</li>\n</ul>\n</li>\n</ul>\n<pre><code>使用：\n    1. 得到返回记录集最多的 10 个 SQL\n        mysqldumpslow -s r -t 10 slow.log\n    2. 得到访问次数最多最多的 10 个 SQL\n        mysqldumpslow -s c -t 10 slow.log\n    3. 得到按照时间排序的前 10 条里面含有左连接的查询语句\n        mysqldumpslow -s t -t 10 -g &quot;left join&quot; slow.log\n</code></pre>\n<ul>\n<li>SQL 语句性能分析<ul>\n<li>explain select 语句</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"markdown\">explain 返回结果分析 1. ID： select 识别符，代表语句的执行顺序，id 数字越大越先执行，如果一样大，从上往下执行 2. select_type: 3. table: 显示查询表名，&lt;derived N&gt; 临时表\n**4. type: ** 1) 依次从好到差：**system, const, eq_ref,** ref, fulltext, ref_or_null, unique_subquery, index_subquery, range, **index_merge, index, all** 2) 除了 all, 其他 type 都可以使用到索引，除了 index_merge（表示查询使用两个以上的索引）, 其他 type 只可以用到一个索引 5. possible_keys: 可能使用的索引 6. key: 真正使用到的索引 7. key_len: 8. ref: 9. rows: 估算的扫描行数 10. extra:\n</code></pre>\n<h3 id=\"MySQL-索引的概念及作用\"><a href=\"#MySQL-索引的概念及作用\" class=\"headerlink\" title=\"MySQL 索引的概念及作用\"></a>MySQL 索引的概念及作用</h3><p>[ 索引类型 ]</p>\n<ul>\n<li>主键索引（唯一索引，不允许有空值）</li>\n<li>全文索引（fulltext, MyISAM 表特有）</li>\n<li>唯一索引（值唯一，允许有空值）</li>\n<li>组合索引（多列索引，多列同时创建索引）</li>\n<li>普通索引（无限制）</li>\n</ul>\n<p>[ 索引创建规则 ]</p>\n<ul>\n<li>可以提高查询速度，但是减低插入和更新的速度，并占用磁盘空间</li>\n<li>在插入与更新数据时，要重写索引文件</li>\n<li>单张表索引数量最好不超过 5 个</li>\n<li>单个索引中的字段数不超过 5 个（组合索引）</li>\n<li>不适用索引的查询： like 模糊查询；反向查询，not in / not like</li>\n</ul>\n<h3 id=\"MySQL-存储引擎\"><a href=\"#MySQL-存储引擎\" class=\"headerlink\" title=\"MySQL 存储引擎\"></a>MySQL 存储引擎</h3><ul>\n<li>MyISAM（只支持表锁）</li>\n</ul>\n<pre><code>优点：\n    1. 读取性能比 innoDB 高\n    2. 索引与数据分离，使用压缩，从而提高了内存使用率\n缺点：\n    1. 不支持事务\n    2. 写入数据时，直接锁表（表锁）\n</code></pre>\n<ul>\n<li>InnoDB</li>\n</ul>\n<pre><code>优点：\n    1. 支持事务\n    2. 支持外键\n    3. 支持行锁\n缺点：\n    1. 不支持 全文索引\n    2. 行锁并不绝对，当不确定扫描范围时，锁全表\n    3. 索引与数据捆绑，没有使用压缩，导致体积庞大\n</code></pre>\n<h3 id=\"MySQL-实时监控\"><a href=\"#MySQL-实时监控\" class=\"headerlink\" title=\"MySQL 实时监控\"></a>MySQL 实时监控</h3><ul>\n<li>orzdba(监控工具)</li>\n</ul>\n<pre><code>./orzdba 执行\n使用：\n</code></pre>\n<h3 id=\"MySQL-集群监控方案-天兔-LEPUS\"><a href=\"#MySQL-集群监控方案-天兔-LEPUS\" class=\"headerlink\" title=\"MySQL 集群监控方案 - 天兔 LEPUS\"></a>MySQL 集群监控方案 - 天兔 LEPUS</h3><ul>\n<li>天兔 LEPUS 全部数据库实例监控</li>\n</ul>\n<pre><code>本地部署： 产品 &gt; 文档中心 &gt; 安装\n    admin /Lepusadmin\n</code></pre>\n<h3 id=\"MySQL-性能测试的用例准备\"><a href=\"#MySQL-性能测试的用例准备\" class=\"headerlink\" title=\"MySQL 性能测试的用例准备\"></a>MySQL 性能测试的用例准备</h3><pre><code>要点：使用 sql 模拟用户使用场景(增删改查语句)\n工具：JMeter\n步骤：\n    1. JDBC Connection Configuration 配置 MySQL\n        Database URL:  jdbc:mysql://192.168.1.7:3306/test\n        Driver class:  com.mysql.cj.jdbc.Driver\n        Username:\n        Password:\n    2. JDBC Request 写 SQL 脚本\n        select * fom user\n</code></pre>\n"},{"title":"webPack 跨域","urlname":"nl9rau","date":"2020-01-04T14:06:33.000Z","abbrlink":25823144,"_content":"\n## 跨域请求数据\n\n- express -D node 服务器\n\n```javascript\n/***\n * 跨域 请求数据 ajax 四部曲\n *\n */\n\nlet xhr = new XMLHttpRequest();\nxhr.open('GET',\"/api/user\",true) // /api 开头的都是一个接口，像后端请求数据  true 表示异步\nxhr.onreadystatechange = function () {\n    console.log(xhr.response);\n}\nxhr.send();\n\n/***\n * webPack 文件 devServer 配置\n *\n */\ndevServer: {\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n        // 跨域请求\n        // 方式一: 启动代理\n\n        proxy: {\n            '/api':{\n                target: 'http://localhost:8090',\n                secure: false, // true 表示以 https 开头\n                pathRewrite: {\"^/api\" : \"\"}, //你不需要传递 /api ，则需要重写路径地址\n                changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n            }\n        },\n\n        // 方式二 自定义中间件\n        before:function(app, server){ //启动一个端口号为 8080 的服务\n            app.get('/api/user', function(req, res) {\n              res.json({ custom: 'response' });\n            });\n        }\n     },\n```\n\n##\n\n## webpack.config.js 配置文件\n\n```javascript\n// 配置文件\n\nconst path = require(\"path\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n  // 入口\n  entry: {\n    index: \"./src/index.js\",\n  },\n\n  // 出口\n  output: {\n    // filename: 'index.js',\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n\n  // 加载机\n  module: {\n    rules: [\n      // js 加载机\n      {\n        test: /\\.js$/,\n        use: \"babel-loader\",\n        include: path.resolve(__dirname, \"src\"), // 需要编译的 js 文件目录\n        exclude: /node_modules/, // 排除需要编译的 js 文件目录\n      },\n    ],\n  },\n\n  // 服务器\n  devServer: {\n    port: 8080,\n    compress: true, //是否压缩代码\n    open: true,\n    hot: true,\n    // 跨域请求\n\n    // proxy: {// 方式一: 启动代理\n    //     '/api':{\n    //         target: 'http://localhost:8090',\n    //         secure: false, // true 表示以 https 开头\n    //         pathRewrite: {\"^/api\" : \"\"}, //你不需要传递 /api ，则需要重写路径地址\n    //         changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n    //     }\n    // },\n\n    // 方式二 自定义中间件\n    before: function (app, server) {\n      //启动一个端口号为 8080 的服务\n      app.get(\"/api/user\", function (req, res) {\n        res.json({ custom: \"response\" });\n      });\n    },\n  },\n\n  // 插件\n  plugins: [\n    new CleanWebpackPlugin(), // 清空输出目录\n\n    new HtmlWebpackPlugin({\n      template: \"./index.html\",\n      filename: \"index.html\",\n      hash: true,\n    }),\n  ],\n};\n```\n","source":"_posts/语雀/nl9rau.md","raw":"---\ntitle: webPack 跨域\nurlname: nl9rau\ndate: '2020-01-04 22:06:33 +0800'\ntags: []\ncategories: []\nabbrlink: 25823144\n---\n\n## 跨域请求数据\n\n- express -D node 服务器\n\n```javascript\n/***\n * 跨域 请求数据 ajax 四部曲\n *\n */\n\nlet xhr = new XMLHttpRequest();\nxhr.open('GET',\"/api/user\",true) // /api 开头的都是一个接口，像后端请求数据  true 表示异步\nxhr.onreadystatechange = function () {\n    console.log(xhr.response);\n}\nxhr.send();\n\n/***\n * webPack 文件 devServer 配置\n *\n */\ndevServer: {\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n        // 跨域请求\n        // 方式一: 启动代理\n\n        proxy: {\n            '/api':{\n                target: 'http://localhost:8090',\n                secure: false, // true 表示以 https 开头\n                pathRewrite: {\"^/api\" : \"\"}, //你不需要传递 /api ，则需要重写路径地址\n                changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n            }\n        },\n\n        // 方式二 自定义中间件\n        before:function(app, server){ //启动一个端口号为 8080 的服务\n            app.get('/api/user', function(req, res) {\n              res.json({ custom: 'response' });\n            });\n        }\n     },\n```\n\n##\n\n## webpack.config.js 配置文件\n\n```javascript\n// 配置文件\n\nconst path = require(\"path\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n  // 入口\n  entry: {\n    index: \"./src/index.js\",\n  },\n\n  // 出口\n  output: {\n    // filename: 'index.js',\n    filename: \"[name].js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n\n  // 加载机\n  module: {\n    rules: [\n      // js 加载机\n      {\n        test: /\\.js$/,\n        use: \"babel-loader\",\n        include: path.resolve(__dirname, \"src\"), // 需要编译的 js 文件目录\n        exclude: /node_modules/, // 排除需要编译的 js 文件目录\n      },\n    ],\n  },\n\n  // 服务器\n  devServer: {\n    port: 8080,\n    compress: true, //是否压缩代码\n    open: true,\n    hot: true,\n    // 跨域请求\n\n    // proxy: {// 方式一: 启动代理\n    //     '/api':{\n    //         target: 'http://localhost:8090',\n    //         secure: false, // true 表示以 https 开头\n    //         pathRewrite: {\"^/api\" : \"\"}, //你不需要传递 /api ，则需要重写路径地址\n    //         changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n    //     }\n    // },\n\n    // 方式二 自定义中间件\n    before: function (app, server) {\n      //启动一个端口号为 8080 的服务\n      app.get(\"/api/user\", function (req, res) {\n        res.json({ custom: \"response\" });\n      });\n    },\n  },\n\n  // 插件\n  plugins: [\n    new CleanWebpackPlugin(), // 清空输出目录\n\n    new HtmlWebpackPlugin({\n      template: \"./index.html\",\n      filename: \"index.html\",\n      hash: true,\n    }),\n  ],\n};\n```\n","slug":"语雀/nl9rau","published":1,"updated":"2022-03-03T11:26:07.580Z","_id":"cl0awjjpd000s081b19pxc07t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"跨域请求数据\"><a href=\"#跨域请求数据\" class=\"headerlink\" title=\"跨域请求数据\"></a>跨域请求数据</h2><ul>\n<li>express -D node 服务器</li>\n</ul>\n<pre><code class=\"javascript\">/***\n * 跨域 请求数据 ajax 四部曲\n *\n */\n\nlet xhr = new XMLHttpRequest();\nxhr.open(&#39;GET&#39;,&quot;/api/user&quot;,true) // /api 开头的都是一个接口，像后端请求数据  true 表示异步\nxhr.onreadystatechange = function () &#123;\n    console.log(xhr.response);\n&#125;\nxhr.send();\n\n/***\n * webPack 文件 devServer 配置\n *\n */\ndevServer: &#123;\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n        // 跨域请求\n        // 方式一: 启动代理\n\n        proxy: &#123;\n            &#39;/api&#39;:&#123;\n                target: &#39;http://localhost:8090&#39;,\n                secure: false, // true 表示以 https 开头\n                pathRewrite: &#123;&quot;^/api&quot; : &quot;&quot;&#125;, //你不需要传递 /api ，则需要重写路径地址\n                changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n            &#125;\n        &#125;,\n\n        // 方式二 自定义中间件\n        before:function(app, server)&#123; //启动一个端口号为 8080 的服务\n            app.get(&#39;/api/user&#39;, function(req, res) &#123;\n              res.json(&#123; custom: &#39;response&#39; &#125;);\n            &#125;);\n        &#125;\n     &#125;,\n</code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"webpack-config-js-配置文件\"><a href=\"#webpack-config-js-配置文件\" class=\"headerlink\" title=\"webpack.config.js 配置文件\"></a>webpack.config.js 配置文件</h2><pre><code class=\"javascript\">// 配置文件\n\nconst path = require(&quot;path&quot;);\nconst &#123; CleanWebpackPlugin &#125; = require(&quot;clean-webpack-plugin&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\n\nmodule.exports = &#123;\n  // 入口\n  entry: &#123;\n    index: &quot;./src/index.js&quot;,\n  &#125;,\n\n  // 出口\n  output: &#123;\n    // filename: &#39;index.js&#39;,\n    filename: &quot;[name].js&quot;,\n    path: path.resolve(__dirname, &quot;dist&quot;),\n  &#125;,\n\n  // 加载机\n  module: &#123;\n    rules: [\n      // js 加载机\n      &#123;\n        test: /\\.js$/,\n        use: &quot;babel-loader&quot;,\n        include: path.resolve(__dirname, &quot;src&quot;), // 需要编译的 js 文件目录\n        exclude: /node_modules/, // 排除需要编译的 js 文件目录\n      &#125;,\n    ],\n  &#125;,\n\n  // 服务器\n  devServer: &#123;\n    port: 8080,\n    compress: true, //是否压缩代码\n    open: true,\n    hot: true,\n    // 跨域请求\n\n    // proxy: &#123;// 方式一: 启动代理\n    //     &#39;/api&#39;:&#123;\n    //         target: &#39;http://localhost:8090&#39;,\n    //         secure: false, // true 表示以 https 开头\n    //         pathRewrite: &#123;&quot;^/api&quot; : &quot;&quot;&#125;, //你不需要传递 /api ，则需要重写路径地址\n    //         changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n    //     &#125;\n    // &#125;,\n\n    // 方式二 自定义中间件\n    before: function (app, server) &#123;\n      //启动一个端口号为 8080 的服务\n      app.get(&quot;/api/user&quot;, function (req, res) &#123;\n        res.json(&#123; custom: &quot;response&quot; &#125;);\n      &#125;);\n    &#125;,\n  &#125;,\n\n  // 插件\n  plugins: [\n    new CleanWebpackPlugin(), // 清空输出目录\n\n    new HtmlWebpackPlugin(&#123;\n      template: &quot;./index.html&quot;,\n      filename: &quot;index.html&quot;,\n      hash: true,\n    &#125;),\n  ],\n&#125;;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"跨域请求数据\"><a href=\"#跨域请求数据\" class=\"headerlink\" title=\"跨域请求数据\"></a>跨域请求数据</h2><ul>\n<li>express -D node 服务器</li>\n</ul>\n<pre><code class=\"javascript\">/***\n * 跨域 请求数据 ajax 四部曲\n *\n */\n\nlet xhr = new XMLHttpRequest();\nxhr.open(&#39;GET&#39;,&quot;/api/user&quot;,true) // /api 开头的都是一个接口，像后端请求数据  true 表示异步\nxhr.onreadystatechange = function () &#123;\n    console.log(xhr.response);\n&#125;\nxhr.send();\n\n/***\n * webPack 文件 devServer 配置\n *\n */\ndevServer: &#123;\n        port: 8080,\n        compress: true, //是否压缩代码\n        open:true,\n        hot:true,\n        // 跨域请求\n        // 方式一: 启动代理\n\n        proxy: &#123;\n            &#39;/api&#39;:&#123;\n                target: &#39;http://localhost:8090&#39;,\n                secure: false, // true 表示以 https 开头\n                pathRewrite: &#123;&quot;^/api&quot; : &quot;&quot;&#125;, //你不需要传递 /api ，则需要重写路径地址\n                changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n            &#125;\n        &#125;,\n\n        // 方式二 自定义中间件\n        before:function(app, server)&#123; //启动一个端口号为 8080 的服务\n            app.get(&#39;/api/user&#39;, function(req, res) &#123;\n              res.json(&#123; custom: &#39;response&#39; &#125;);\n            &#125;);\n        &#125;\n     &#125;,\n</code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"webpack-config-js-配置文件\"><a href=\"#webpack-config-js-配置文件\" class=\"headerlink\" title=\"webpack.config.js 配置文件\"></a>webpack.config.js 配置文件</h2><pre><code class=\"javascript\">// 配置文件\n\nconst path = require(&quot;path&quot;);\nconst &#123; CleanWebpackPlugin &#125; = require(&quot;clean-webpack-plugin&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\n\nmodule.exports = &#123;\n  // 入口\n  entry: &#123;\n    index: &quot;./src/index.js&quot;,\n  &#125;,\n\n  // 出口\n  output: &#123;\n    // filename: &#39;index.js&#39;,\n    filename: &quot;[name].js&quot;,\n    path: path.resolve(__dirname, &quot;dist&quot;),\n  &#125;,\n\n  // 加载机\n  module: &#123;\n    rules: [\n      // js 加载机\n      &#123;\n        test: /\\.js$/,\n        use: &quot;babel-loader&quot;,\n        include: path.resolve(__dirname, &quot;src&quot;), // 需要编译的 js 文件目录\n        exclude: /node_modules/, // 排除需要编译的 js 文件目录\n      &#125;,\n    ],\n  &#125;,\n\n  // 服务器\n  devServer: &#123;\n    port: 8080,\n    compress: true, //是否压缩代码\n    open: true,\n    hot: true,\n    // 跨域请求\n\n    // proxy: &#123;// 方式一: 启动代理\n    //     &#39;/api&#39;:&#123;\n    //         target: &#39;http://localhost:8090&#39;,\n    //         secure: false, // true 表示以 https 开头\n    //         pathRewrite: &#123;&quot;^/api&quot; : &quot;&quot;&#125;, //你不需要传递 /api ，则需要重写路径地址\n    //         changeOrigin: true, //把请求头当中的 host 地址改成服务器的地址\n    //     &#125;\n    // &#125;,\n\n    // 方式二 自定义中间件\n    before: function (app, server) &#123;\n      //启动一个端口号为 8080 的服务\n      app.get(&quot;/api/user&quot;, function (req, res) &#123;\n        res.json(&#123; custom: &quot;response&quot; &#125;);\n      &#125;);\n    &#125;,\n  &#125;,\n\n  // 插件\n  plugins: [\n    new CleanWebpackPlugin(), // 清空输出目录\n\n    new HtmlWebpackPlugin(&#123;\n      template: &quot;./index.html&quot;,\n      filename: &quot;index.html&quot;,\n      hash: true,\n    &#125;),\n  ],\n&#125;;\n</code></pre>\n"},{"title":"年度计划模板","urlname":"mvuz6u","date":"2022-01-15T13:48:34.000Z","abbrlink":1138972641,"_content":"\n{\"format\":\"laketable\",\"type\":\"Table\",\"version\":\"1.2\",\"larkJson\":true,\"sheet\":\"x¥WÙÛÈ\\u0015ý\\u0017æU\\u000f\\u0012)R¿i¥\\bv«\\u0017m-\\u0019z(Å\\\"Ad\\u00177F?8\\b6lÏq2Y0±\\u0001Ïx\\u0010d\\f\\u0003FâxÉü¥î<Í/TKdËè45cèE%{ï©[uNUÝºM`Óç$Ø¹EXªÍ|ÙD\\nÎË\\u0000¡ L3F%\\u0004r¡\\u0010.\\u0016\\u001c\\u0001hD#¯¤ú³\\u0002©&¦4ÊóDÉ@\\\"Î«Ó\\b\\u0012\\u001a©\\u0016LMjNª¢)a7Oùrga?\\u001fCpèzÒ§Ú'®/«A0srDvYP#ÈTÃ¤ R¦Sbè /\\tmA\\\\)øëVÊ\\b3\\u0011DÐ\\u0004¤@×\\rè0¤5]\\b%Ñµ°*¢AÖI%øÃÈ&å\\\"©9¢?e\\neÑ\\u0000Ð¥\\u0010èB\\fÁÀ¨\\b¤KY¦,\\u0018g\\u0014m\\u001dt\\t2(a%.\\u0014N1\\u000eÂÀp¥ç¹¢ihL¢\\n½)\\u0010C\\\"&¹¸uÓ5\\u001cb§#DSw§FÜÓÛ\\u0001¦Ø!Þ¿zóß'*EÉÀÇªa¹N4T\\r\\tÎ|ôM~vP¯½XÆ|m| ìM»ëw\\u0001Û2!qKRÎÏî¿x¦´¡\\u000eÅ8gTÞÄÄ]\\u0014(ä\\bÓrTsÅÊ\\u0003º»¤õîóGÏ.¿\\\\|õ\\t±â`Ê\\u0018õÃ4\\u000fñV­A5òËÚëÀ;\\u000fÞ¿úzþéçó\\u0017Y\\u00078×ÖJW\\u0003Å\\u0016Ó 7\\u0003*ÿýý»/æwÎ*ÿk\\u001dØ)k\\r´\\u0011ØbZ}#ðüÞO\\u0017/]¼|2þ`\\u001dX\\rx?êÿÀz1ªIo\\u0004Îþçüõ?Î\\u001f}¿xùf\\u001dØpT¿¶Aµ\\u001cÓÉ\\n!\\t\\u001eS\\u000eÊ÷»íÉ\\u0005îîhZjÀYóÐ)°\\u0003nc%~~°8ûlñåÓÅ·ß§ë!\\u0001\\u0007¦+L®d±$ÍöG\\u0015¤I&\\u001f\\bMPk)lû¤\\u000b;\\u0011utMÞ{*Ì\\u001f>Nó\\n\\u00145Á¥¹©Unz¯ÁÌ8ET|³Ýë32âcek*8å\\u0001ê.s/Ý;à\\u000f¸!?Ê»UäKþ¾?ûC8\\u001c+[\\r\\u0006iîbnÍæâù\\u000fçoî&{eÅÆ3\\u0007`\\bº¹R\\u0001#$(\\u0003Ww\\u0006*ôã7X*®÷d\\u001b\\\\w$]þ³f¦Nº¼\\u001fe\\u0004¢£zp{ür&ÁXÙGùAAÀ¥¨\\u0006\\u000bGJ¯êOêá\\u0011.gâE\\u0019£m;;çÎª=[\\u0014\\u0004)¥e@¦Ñ$Ïô\\u0004i;\\t2Ó¸\\u0013d¦§Õ³l<Ef¹yÌtì\\u0004iÿ«ÝØìvî#l5v-ÅäR[\\t};Ñ$È­D¾¥d£ÊØ\\f¡Q7õË\\\"92ÖÂ|ülñ··\\u0017?Þó*ßÿñß³Ïçg^<|òëÛ{±T CnKµÈªîÀÈ\\u0012o&\\u001ag¸FÜ;\\u00078öå\\u001f\\b®6>³I*`Ë)-\\u0013t£p©ÌS!\\u001aGK«\\u0003ËÒå1\\u0016UÜ°ÿk\\u0011\\u001b>\\rât)Ú6TâÄÿ¯\\u0018éf,çõ1ý.¶¶ÕÉAâü¾ìuNÂns@³Ú>/\\u000e{6¨\\fuPÝ=0ÄF\\u0001$¦\\tüÐ4Ø:S8\\bz\\u0002#4Yìö{l¯.CI\\u0000vPÉÓì(Ý%ÇîFMbY¾£\\u0016~§EµC\\u000fé>­#ïØHn}\\\\\\u0000õ.[\\u0018¶è&2Kcz06]».\\u0016´\\u0014©YôañÈ\\u0012÷HVðe\\u0012ZÃâíÐlðv-äSd\\u001b7ynFÃ:Ì\\u001fWc¤qÜþ²YÖ\\u001bbw¯ìæ0²*Ë\\u000e=\\u001fÉ\\u001cÝ+Y¸\\u001a\\u0006cú ,\\fêr;E2õ@­±\\u00021d§S¤\\u0007:¥6§TïpÊ¦Èq«¡U[¥AKîc^eP·Ï5ýR¹<l\\u0005½r§\\\".ß\\u0000G½<>½£>2U¼×¶ú\\u000ek=ïØ\\u0012ª¿Û4\\u0014U AìÈ@·áöÆ\\u0006^îÐíÏÞë\\u000bfºÊÿ)é1\\u001f\\u0016\\\\c2çßÞ*|÷Kb2GÏ\\u0017\\u000fîÌ?ûÓù\\u000f\\u0017÷ÿº¸ÿîC«¹j%WîHR¶#\\u0005\\u001a®®'¾ÀW;µjøíÎI\\u00038à¦»íJ{ÙªËeË-­³5­Z°¥?ª\\u000e\\u0007Ôo­ïà\\u001b®Üëùdê8-à#»º÷On¸æ¯Éf\\u001aD.Û\\u0019>ìê­1¹ái±&é<\\u001fÇdõxÜðVY3Ét¶c²z\\rm0ù\\u0000D¤l&±älÅô[\\*Ô¥µgD²Bgy\\u001a.¯\\u000bñs%êÂééä\\u0010\\u0004Ä\\u0002\"}\n","source":"_posts/语雀/mvuz6u.md","raw":"---\ntitle: 年度计划模板\nurlname: mvuz6u\ndate: '2022-01-15 21:48:34 +0800'\ntags: []\ncategories: []\nabbrlink: 1138972641\n---\n\n{\"format\":\"laketable\",\"type\":\"Table\",\"version\":\"1.2\",\"larkJson\":true,\"sheet\":\"x¥WÙÛÈ\\u0015ý\\u0017æU\\u000f\\u0012)R¿i¥\\bv«\\u0017m-\\u0019z(Å\\\"Ad\\u00177F?8\\b6lÏq2Y0±\\u0001Ïx\\u0010d\\f\\u0003FâxÉü¥î<Í/TKdËè45cèE%{ï©[uNUÝºM`Óç$Ø¹EXªÍ|ÙD\\nÎË\\u0000¡ L3F%\\u0004r¡\\u0010.\\u0016\\u001c\\u0001hD#¯¤ú³\\u0002©&¦4ÊóDÉ@\\\"Î«Ó\\b\\u0012\\u001a©\\u0016LMjNª¢)a7Oùrga?\\u001fCpèzÒ§Ú'®/«A0srDvYP#ÈTÃ¤ R¦Sbè /\\tmA\\\\)øëVÊ\\b3\\u0011DÐ\\u0004¤@×\\rè0¤5]\\b%Ñµ°*¢AÖI%øÃÈ&å\\\"©9¢?e\\neÑ\\u0000Ð¥\\u0010èB\\fÁÀ¨\\b¤KY¦,\\u0018g\\u0014m\\u001dt\\t2(a%.\\u0014N1\\u000eÂÀp¥ç¹¢ihL¢\\n½)\\u0010C\\\"&¹¸uÓ5\\u001cb§#DSw§FÜÓÛ\\u0001¦Ø!Þ¿zóß'*EÉÀÇªa¹N4T\\r\\tÎ|ôM~vP¯½XÆ|m| ìM»ëw\\u0001Û2!qKRÎÏî¿x¦´¡\\u000eÅ8gTÞÄÄ]\\u0014(ä\\bÓrTsÅÊ\\u0003º»¤õîóGÏ.¿\\\\|õ\\t±â`Ê\\u0018õÃ4\\u000fñV­A5òËÚëÀ;\\u000fÞ¿úzþéçó\\u0017Y\\u00078×ÖJW\\u0003Å\\u0016Ó 7\\u0003*ÿýý»/æwÎ*ÿk\\u001dØ)k\\r´\\u0011ØbZ}#ðüÞO\\u0017/]¼|2þ`\\u001dX\\rx?êÿÀz1ªIo\\u0004Îþçüõ?Î\\u001f}¿xùf\\u001dØpT¿¶Aµ\\u001cÓÉ\\n!\\t\\u001eS\\u000eÊ÷»íÉ\\u0005îîhZjÀYóÐ)°\\u0003nc%~~°8ûlñåÓÅ·ß§ë!\\u0001\\u0007¦+L®d±$ÍöG\\u0015¤I&\\u001f\\bMPk)lû¤\\u000b;\\u0011utMÞ{*Ì\\u001f>Nó\\n\\u00145Á¥¹©Unz¯ÁÌ8ET|³Ýë32âcek*8å\\u0001ê.s/Ý;à\\u000f¸!?Ê»UäKþ¾?ûC8\\u001c+[\\r\\u0006iîbnÍæâù\\u000fçoî&{eÅÆ3\\u0007`\\bº¹R\\u0001#$(\\u0003Ww\\u0006*ôã7X*®÷d\\u001b\\\\w$]þ³f¦Nº¼\\u001fe\\u0004¢£zp{ür&ÁXÙGùAAÀ¥¨\\u0006\\u000bGJ¯êOêá\\u0011.gâE\\u0019£m;;çÎª=[\\u0014\\u0004)¥e@¦Ñ$Ïô\\u0004i;\\t2Ó¸\\u0013d¦§Õ³l<Ef¹yÌtì\\u0004iÿ«ÝØìvî#l5v-ÅäR[\\t};Ñ$È­D¾¥d£ÊØ\\f¡Q7õË\\\"92ÖÂ|ülñ··\\u0017?Þó*ßÿñß³Ïçg^<|òëÛ{±T CnKµÈªîÀÈ\\u0012o&\\u001ag¸FÜ;\\u00078öå\\u001f\\b®6>³I*`Ë)-\\u0013t£p©ÌS!\\u001aGK«\\u0003ËÒå1\\u0016UÜ°ÿk\\u0011\\u001b>\\rât)Ú6TâÄÿ¯\\u0018éf,çõ1ý.¶¶ÕÉAâü¾ìuNÂns@³Ú>/\\u000e{6¨\\fuPÝ=0ÄF\\u0001$¦\\tüÐ4Ø:S8\\bz\\u0002#4Yìö{l¯.CI\\u0000vPÉÓì(Ý%ÇîFMbY¾£\\u0016~§EµC\\u000fé>­#ïØHn}\\\\\\u0000õ.[\\u0018¶è&2Kcz06]».\\u0016´\\u0014©YôañÈ\\u0012÷HVðe\\u0012ZÃâíÐlðv-äSd\\u001b7ynFÃ:Ì\\u001fWc¤qÜþ²YÖ\\u001bbw¯ìæ0²*Ë\\u000e=\\u001fÉ\\u001cÝ+Y¸\\u001a\\u0006cú ,\\fêr;E2õ@­±\\u00021d§S¤\\u0007:¥6§TïpÊ¦Èq«¡U[¥AKîc^eP·Ï5ýR¹<l\\u0005½r§\\\".ß\\u0000G½<>½£>2U¼×¶ú\\u000ek=ïØ\\u0012ª¿Û4\\u0014U AìÈ@·áöÆ\\u0006^îÐíÏÞë\\u000bfºÊÿ)é1\\u001f\\u0016\\\\c2çßÞ*|÷Kb2GÏ\\u0017\\u000fîÌ?ûÓù\\u000f\\u0017÷ÿº¸ÿîC«¹j%WîHR¶#\\u0005\\u001a®®'¾ÀW;µjøíÎI\\u00038à¦»íJ{ÙªËeË-­³5­Z°¥?ª\\u000e\\u0007Ôo­ïà\\u001b®Üëùdê8-à#»º÷On¸æ¯Éf\\u001aD.Û\\u0019>ìê­1¹ái±&é<\\u001fÇdõxÜðVY3Ét¶c²z\\rm0ù\\u0000D¤l&±älÅô[\\*Ô¥µgD²Bgy\\u001a.¯\\u000bñs%êÂééä\\u0010\\u0004Ä\\u0002\"}\n","slug":"语雀/mvuz6u","published":1,"updated":"2022-03-03T11:26:07.581Z","_id":"cl0awjjpe000t081bhetk478z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>{“format”:”laketable”,”type”:”Table”,”version”:”1.2”,”larkJson”:true,”sheet”:”x¥WÙÛÈ\\u0015ý\\u0017æU\\u000f\\u0012)R¿i¥\\bv«\\u0017m-\\u0019z(Å&quot;Ad\\u00177F?8\\b6lÏq2Y0±\\u0001Ïx\\u0010d\\f\\u0003FâxÉü¥î&lt;Í/TKdËè45cèE%{ï©[uNUÝºM<code>Óç$Ø¹EXªÍ|ÙD\\nÎË\\u0000¡ L3F%\\u0004r¡\\u0010.\\u0016\\u001c\\u0001hD#¯¤ú³\\u0002©&amp;¦4ÊóDÉ@\\&quot;Î«Ó\\b\\u0012\\u001a©\\u0016LMjNª¢)a7Oùrga?\\u001fCpèzÒ§Ú&#39;®/«A0srDvYP#ÈTÃ¤ R¦Sbè /\\tmA\\\\)øëVÊ\\b3\\u0011DÐ\\u0004¤@×\\rè0¤5]\\b%Ñµ°*¢AÖI%øÃÈ&amp;å\\&quot;©9¢?e\\neÑ\\u0000Ð¥\\u0010èB\\fÁÀ¨\\b¤KY¦,\\u0018g\\u0014m\\u001dt\\t2(a%.\\u0014N1\\u000eÂÀp¥ç¹¢ihL¢\\n½)\\u0010C\\&quot;&amp;¹¸uÓ5\\u001cb§#DSw§FÜÓÛ\\u0001¦Ø!Þ¿zóß&#39;*EÉÀÇªa¹N4T\\r\\tÎ|ôM~vP¯½XÆ|m| ìM»ëw\\u0001Û2!qKRÎÏî¿x¦´¡\\u000eÅ8gTÞÄÄ]\\u0014(ä\\bÓrTsÅÊ\\u0003º»¤õîóGÏ.¿\\\\|õ\\t±â</code>Ê\\u0018õÃ4\\u000fñV­A5òËÚëÀ;\\u000fÞ¿úzþéçó\\u0017Y\\u00078×ÖJW\\u0003Å\\u0016Ó 7\\u0003<em>ÿýý»/æwÎ*ÿk\\u001dØ)k\\r´\\u0011ØbZ}#ðüÞO\\u0017/]¼|2þ`\\u001dX\\rx?êÿÀz1ªIo\\u0004Îþçüõ?Î\\u001f}¿xùf\\u001dØpT¿¶Aµ\\u001cÓÉ\\n!\\t\\u001eS\\u000eÊ÷»íÉ\\u0005îîhZjÀYóÐ)°\\u0003nc%~~°8ûlñåÓÅ·ß§ë!\\u0001\\u0007¦+L®d±$ÍöG\\u0015¤I&amp;\\u001f\\bMPk)lû¤\\u000b;\\u0011utMÞ{*Ì\\u001f&gt;Nó\\n\\u00145Á¥¹©Unz¯ÁÌ8ET|³Ýë32âcek</em>8å\\u0001ê.s/Ý;à\\u000f¸!?Ê»UäKþ¾?ûC8\\u001c+[\\r\\u0006iîbnÍæâù\\u000fçoî&amp;{eÅÆ3\\u0007<code>\\bº¹R\\u0001#$(\\u0003Ww\\u0006*ôã7X*®÷d\\u001b\\\\w$]þ³f¦Nº¼\\u001fe\\u0004¢£zp&#123;ür&amp;ÁXÙGùAAÀ¥¨\\u0006\\u000bGJ¯êOêá\\u0011.gâE\\u0019£m;;çÎª=[\\u0014\\u0004)¥e@¦Ñ$Ïô\\u0004i;\\t2Ó¸\\u0013d¦§Õ³l&lt;Ef¹yÌtì\\u0004iÿ«ÝØìvî#l5v-ÅäR[\\t&#125;;Ñ$È­D¾¥d£ÊØ\\f¡Q7õË\\&quot;92ÖÂ|ülñ··\\u0017?Þó*ßÿñß³Ïçg^&lt;|òëÛ&#123;±T CnKµÈªîÀÈ\\u0012o&amp;\\u001ag¸FÜ;\\u00078öå\\u001f\\b®6&gt;³I*</code>Ë)-\\u0013t£p©ÌS!\\u001aGK«\\u0003ËÒå1\\u0016UÜ°ÿk\\u0011\\u001b&gt;\\rât)Ú6TâÄÿ¯\\u0018éf,çõ1ý.¶¶ÕÉAâü¾ìuNÂns@³Ú&gt;/\\u000e{6¨\\fuPÝ=0ÄF\\u0001$¦\\tüÐ4Ø:S8\\bz\\u0002#4Yìö{l¯.CI\\u0000vPÉÓì(Ý%ÇîFMbY¾£\\u0016~§EµC\\u000fé&gt;­#ïØHn}\\\\u0000õ.[\\u0018¶è&amp;2Kcz06]».\\u0016´\\u0014©YôañÈ\\u0012÷HVðe\\u0012ZÃâíÐlðv-äSd\\u001b7ynFÃ:Ì\\u001fWc¤qÜþ²YÖ\\u001bbw¯ìæ0²<em>Ë\\u000e=\\u001fÉ\\u001cÝ+Y¸\\u001a\\u0006cú ,\\fêr;E2õ@­±\\u00021d§S¤\\u0007:¥6§TïpÊ¦Èq«¡U[¥AKîc^eP·Ï5ýR¹&lt;l\\u0005½r§&quot;.ß\\u0000G½&lt;&gt;½£&gt;2U¼×¶ú\\u000ek=ïØ\\u0012ª¿Û4\\u0014U AìÈ@·áöÆ\\u0006^îÐíÏÞë\\u000bfºÊÿ)é1\\u001f\\u0016\\c2çßÞ</em>|÷Kb2GÏ\\u0017\\u000fîÌ?ûÓù\\u000f\\u0017÷ÿº¸ÿîC«¹j%WîHR¶#\\u0005\\u001a®®’¾ÀW;µjøíÎI\\u00038à¦»íJ{ÙªËeË-­³5­Z°¥?ª\\u000e\\u0007Ôo­ïà\\u001b®Üëùdê8-à#»º÷On¸æ¯Éf\\u001aD.Û\\u0019&gt;ìê­1¹ái±&amp;é&lt;\\u001fÇdõxÜðVY3Ét¶c²z\\rm0ù\\u0000D¤l&amp;±älÅô[*Ô¥µgD²Bgy\\u001a.¯\\u000bñs%êÂééä\\u0010\\u0004Ä\\u0002”}</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p>{“format”:”laketable”,”type”:”Table”,”version”:”1.2”,”larkJson”:true,”sheet”:”x¥WÙÛÈ\\u0015ý\\u0017æU\\u000f\\u0012)R¿i¥\\bv«\\u0017m-\\u0019z(Å&quot;Ad\\u00177F?8\\b6lÏq2Y0±\\u0001Ïx\\u0010d\\f\\u0003FâxÉü¥î&lt;Í/TKdËè45cèE%{ï©[uNUÝºM<code>Óç$Ø¹EXªÍ|ÙD\\nÎË\\u0000¡ L3F%\\u0004r¡\\u0010.\\u0016\\u001c\\u0001hD#¯¤ú³\\u0002©&amp;¦4ÊóDÉ@\\&quot;Î«Ó\\b\\u0012\\u001a©\\u0016LMjNª¢)a7Oùrga?\\u001fCpèzÒ§Ú&#39;®/«A0srDvYP#ÈTÃ¤ R¦Sbè /\\tmA\\\\)øëVÊ\\b3\\u0011DÐ\\u0004¤@×\\rè0¤5]\\b%Ñµ°*¢AÖI%øÃÈ&amp;å\\&quot;©9¢?e\\neÑ\\u0000Ð¥\\u0010èB\\fÁÀ¨\\b¤KY¦,\\u0018g\\u0014m\\u001dt\\t2(a%.\\u0014N1\\u000eÂÀp¥ç¹¢ihL¢\\n½)\\u0010C\\&quot;&amp;¹¸uÓ5\\u001cb§#DSw§FÜÓÛ\\u0001¦Ø!Þ¿zóß&#39;*EÉÀÇªa¹N4T\\r\\tÎ|ôM~vP¯½XÆ|m| ìM»ëw\\u0001Û2!qKRÎÏî¿x¦´¡\\u000eÅ8gTÞÄÄ]\\u0014(ä\\bÓrTsÅÊ\\u0003º»¤õîóGÏ.¿\\\\|õ\\t±â</code>Ê\\u0018õÃ4\\u000fñV­A5òËÚëÀ;\\u000fÞ¿úzþéçó\\u0017Y\\u00078×ÖJW\\u0003Å\\u0016Ó 7\\u0003<em>ÿýý»/æwÎ*ÿk\\u001dØ)k\\r´\\u0011ØbZ}#ðüÞO\\u0017/]¼|2þ`\\u001dX\\rx?êÿÀz1ªIo\\u0004Îþçüõ?Î\\u001f}¿xùf\\u001dØpT¿¶Aµ\\u001cÓÉ\\n!\\t\\u001eS\\u000eÊ÷»íÉ\\u0005îîhZjÀYóÐ)°\\u0003nc%~~°8ûlñåÓÅ·ß§ë!\\u0001\\u0007¦+L®d±$ÍöG\\u0015¤I&amp;\\u001f\\bMPk)lû¤\\u000b;\\u0011utMÞ{*Ì\\u001f&gt;Nó\\n\\u00145Á¥¹©Unz¯ÁÌ8ET|³Ýë32âcek</em>8å\\u0001ê.s/Ý;à\\u000f¸!?Ê»UäKþ¾?ûC8\\u001c+[\\r\\u0006iîbnÍæâù\\u000fçoî&amp;{eÅÆ3\\u0007<code>\\bº¹R\\u0001#$(\\u0003Ww\\u0006*ôã7X*®÷d\\u001b\\\\w$]þ³f¦Nº¼\\u001fe\\u0004¢£zp&#123;ür&amp;ÁXÙGùAAÀ¥¨\\u0006\\u000bGJ¯êOêá\\u0011.gâE\\u0019£m;;çÎª=[\\u0014\\u0004)¥e@¦Ñ$Ïô\\u0004i;\\t2Ó¸\\u0013d¦§Õ³l&lt;Ef¹yÌtì\\u0004iÿ«ÝØìvî#l5v-ÅäR[\\t&#125;;Ñ$È­D¾¥d£ÊØ\\f¡Q7õË\\&quot;92ÖÂ|ülñ··\\u0017?Þó*ßÿñß³Ïçg^&lt;|òëÛ&#123;±T CnKµÈªîÀÈ\\u0012o&amp;\\u001ag¸FÜ;\\u00078öå\\u001f\\b®6&gt;³I*</code>Ë)-\\u0013t£p©ÌS!\\u001aGK«\\u0003ËÒå1\\u0016UÜ°ÿk\\u0011\\u001b&gt;\\rât)Ú6TâÄÿ¯\\u0018éf,çõ1ý.¶¶ÕÉAâü¾ìuNÂns@³Ú&gt;/\\u000e{6¨\\fuPÝ=0ÄF\\u0001$¦\\tüÐ4Ø:S8\\bz\\u0002#4Yìö{l¯.CI\\u0000vPÉÓì(Ý%ÇîFMbY¾£\\u0016~§EµC\\u000fé&gt;­#ïØHn}\\\\u0000õ.[\\u0018¶è&amp;2Kcz06]».\\u0016´\\u0014©YôañÈ\\u0012÷HVðe\\u0012ZÃâíÐlðv-äSd\\u001b7ynFÃ:Ì\\u001fWc¤qÜþ²YÖ\\u001bbw¯ìæ0²<em>Ë\\u000e=\\u001fÉ\\u001cÝ+Y¸\\u001a\\u0006cú ,\\fêr;E2õ@­±\\u00021d§S¤\\u0007:¥6§TïpÊ¦Èq«¡U[¥AKîc^eP·Ï5ýR¹&lt;l\\u0005½r§&quot;.ß\\u0000G½&lt;&gt;½£&gt;2U¼×¶ú\\u000ek=ïØ\\u0012ª¿Û4\\u0014U AìÈ@·áöÆ\\u0006^îÐíÏÞë\\u000bfºÊÿ)é1\\u001f\\u0016\\c2çßÞ</em>|÷Kb2GÏ\\u0017\\u000fîÌ?ûÓù\\u000f\\u0017÷ÿº¸ÿîC«¹j%WîHR¶#\\u0005\\u001a®®’¾ÀW;µjøíÎI\\u00038à¦»íJ{ÙªËeË-­³5­Z°¥?ª\\u000e\\u0007Ôo­ïà\\u001b®Üëùdê8-à#»º÷On¸æ¯Éf\\u001aD.Û\\u0019&gt;ìê­1¹ái±&amp;é&lt;\\u001fÇdõxÜðVY3Ét¶c²z\\rm0ù\\u0000D¤l&amp;±älÅô[*Ô¥µgD²Bgy\\u001a.¯\\u000bñs%êÂééä\\u0010\\u0004Ä\\u0002”}</p>\n"},{"title":"Python 基础","urlname":"nsgd8q","date":"2020-07-05T13:55:49.000Z","abbrlink":734607008,"_content":"\n---\n\n```\n保持纯真心态，精神饱满、持续，做人很傻很天真；工作总有不如意，敢于直面惨淡的人生。爱生活、爱家人、爱测试。\n```\n\n---\n\n## Python 环境搭建\n\n- 下载安装\n\n```shell\n$ 下载页面：https://www.python.org/downloads/windows/\n\t2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n\t3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n\t2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n\t3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n```\n\n- pip 升级\n\n```shell\n$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n```\n\n- 虚拟环境\n\n```shell\n在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    => 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n\t创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n```\n\n- 第三方包本地安装\n\n```shell\n$  **.whl :\n$\t\tpip install  **.whl\n$  **.egg :\n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n\t\tpython setup.py install\n```\n\n## Python 标准数据类型\n\n> 标准数据类型：\n> Number（数字）、String（字符串）、Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）\n\n**不可变数据类型：** Number（数字）、String（字符串）、Tuple（元组）\n\n**可变数据类型：**   List（列表）、Dictionary（字典）、Set（集合）\n\n**序列容器：** String（字符串）、List（列表）Tuple（元组）\n\n**非序列容器**：Dictionary（字典）、Set（集合）\n​\n\n**[ 扩展：python 字面量 ]**\n\n- 数值型\n- 字符型\n- 布尔型\n- 字面量集合：\\*\\* \\*\\*Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）\n- 特殊字面量：None\n\n### 数据类型之间的运算规则\n\n- 算术运算符\n\n```\n常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 <==> 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n```\n\n- 赋值运算符\n\n```\n常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=\t: A //= B <==> A = A // B\n%=\t: A %= B <==> A = A % B\n**= : A **= B <==> A = A ** B\n```\n\n- 比较运算符\n\n```\n常见运算符：>, < , >=, <=, ==, !=\n\nPython 中 没有 全等于 ===\n```\n\n- 逻辑运算符\n\n```python\n# 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n```\n\n- **数据类型之间运算规则**\n\n```\n总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n```\n\n### 数据类型转换\n\n**前提：可以转换为目标类型**\n\n- 转换为 Number 类型\n\n```python\nvalue = '666'\nint(value) # ==> 666\n```\n\n- 转换为 String 类型\n\n```python\nvalue = 666\nstr(value)  ==> '666'\n```\n\n- 转换为 float 类型\n\n```python\nvalue = 666 # ‘666’呢？\nfloat(value)  ==> 666.00\n```\n\n### 数字（Number）\n\n- 整数（integer）\n- 小数 / 浮点数（float）\n\n**[ 常用的数字函数 ]**\n\n```python\nabs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n```\n\n### 字符串（String）\n\n- 字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 \" )来创建字符串\n- 字符串切片索引\n\n```python\nstr = 'Runoob'\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + \"TEST\") # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n```\n\n**[ python 三引号 ]**\n\npython 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符\n\n```python\npara_str = \"\"\"这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    \"\"\"\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [\n]。\n```\n\n### 列表（List）\n\n- 列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型\n- 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可\n- 列表切片索引\n\n**[ 常用的列表函数 ]**\n\n```python\nlist.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n```\n\n### 元组（Tuple）\n\n- 元组与列表类似，不同之处在于元组的元素不能修改\n\n### 字典（Dictionary）\n\n- 字典是另一种可变容器模型，且可存储任意类型对象\n- **dict = {key1 : value1, key2 : value2 }：**每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中\n- **注意：**键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。\n\n**[ 访问字典的值 ]**\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n'''\n    del dict['Name']     # 删除键 'Name'\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    '''\nprint (\"dict['Name']: \", dict['Name'])\nprint (\"dict['Age']: \", dict['Age'])\n# 输出\ndict['Name']:  Runoob\n    dict['Age']:  7\n```\n\n**[ 字典键的特性 ]**\n\n- 不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Name': '小菜鸟'}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\ndict['Name']:  小菜鸟\n    12\n```\n\n- 键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行\n\n```python\ndict = {['Name']: 'Runoob', 'Age': 7}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\nTraceback (most recent call last):\n    File \"test.py\", line 3, in <module>\n    dict = {['Name']: 'Runoob', 'Age': 7}\n    TypeError: unhashable type: 'list'\n```\n\n**[ 字典函数 ]**\n\n```python\nradiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n```\n\n### 集合（Set）\n\n- 集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合\n- **注意：**创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典\n\n```python\nbasket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\nprint(basket)                      # 去重功能\n#输出\n{'orange', 'banana', 'pear', 'apple'}\n\n'orange' in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n'crabgrass' in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\n#输出\n{'a', 'r', 'b', 'c', 'd'}\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n{'d', 'b', 'r'}\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n{'c', 'b', 'r', 'z', 'l', 'm', 'a', 'd'}\n\nprint(a & b)                              # 集合a和b中都包含了的元素\n#输出\n{'a', 'c'}\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n{'l', 'b', 'z', 'r', 'm', 'd'}\n```\n\n**[ 添加元素 ]**\n\n- **s.add( x )** 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.add(\"Facebook\")\nprint(thisset)\n#输出\n{'Taobao', 'Facebook', 'Google', 'Runoob'}\n```\n\n- **s.update( x )** 参数可以是列表，元组，字典等\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.update({1,3})\nprint(thisset)\n#输出\n{1, 3, 'Google', 'Taobao', 'Runoob'}\n\nthisset.update([1,4],[5,6])\nprint(thisset)\n#输出\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n```\n\n**[ 移除元素 ]**\n\n```python\ns.remove( x )\t\t# 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )\t\t# 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()\t\t\t\t# 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n```\n\n**[ 集合函数 ]**\n\n```python\nadd()\t        #为集合添加元素\nclear()\t        #移除集合中的所有元素\ncopy()\t        #拷贝一个集合\nunion()\t        #返回两个集合的并集\nupdate()\t    #给集合添加元素\n```\n\n## Python 输入输出\n\n### 标准输入输出函数\n\n- **print()** 标准输出函数\n\n```python\n#  换行符  \\n,  end='\\n'\nprint('aaa' end='') # 不换行\nprint('bbb' end='#') # bbb 和 ccc 之间用 # 连接\nprint('ccc')\n\n# 格式化输出\nname = '鲁班'\nage = 20\n\n> %s ==> string\n> %d ==> digit(数字)\n> %f ==> float\n> %% ==> 输出 %\n\nprint('他的名字是' + name +',他的年龄是' + age + '。') # 输出格式\nprint('他的名字是%s,他的年龄是%d。' %(name, age))\n\nprint('胜率%d%%' % 87)  # %% 表示 %  ==> 87%\n```\n\n- **input()** 标准输入函数,输入的内容是字符串\n\n```python\nprint('请输入你的姓名：')\ninput()\n<==> input('请输入你的姓名：')\n\n# 保存输入的数据\n\ninput_content = input('请输入你的姓名：')\nprint( input_content)\n# 动态\nprint('欢迎您 %s !' % input_content)\n```\n\n## Python 分支语句\n\n### if 分支语句\n\n- 比较运算符\n\n```\n==  相等, !=  不相等, >   大于, <   小于, >=  大于等于, <=  小于等于\n```\n\n- if 语句\n\n```python\nif a > b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n```\n\n- 多个条件之间的关系\n\n```python\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a > b and a or b\n= false and a or b\n= false or b\n= b                 # ==> b 20\nret = a < b and a or b\n= true and a or b\n= a or b\n= a                 # ==> a 10\n# not(非)\n```\n\n### while 语句\n\n```python\n\"\"\"\n    我不喜欢这个世界，我只喜欢你！\n    \"\"\"\n# while 循环\n\n# i = 1\n# while i <= 100:\n#     print(i)\n#     i += 1\n#\n# print('END')\n\n# 1-100 偶数\n\n# i = 1\n# while i <= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input('开始数：'))\n# end = int(input('结束数：'))\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start <= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print('奇数和：',total)\n\n# 打印 *\n\n# n = 1\n# while n <= 5:\n#     print('*' * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i <= 100:\n#     if i > 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print('欢迎使用')\n    print('*' * 10 + '操作菜单' + '*' * 10)\n\n    print('1. 展示信息')\n    print('2. 新增信息')\n    print('3. 修改信息')\n    print('4. 删除信息')\n    print('5. 退出')\n    # 保存用户操作\n    user_operation = int(input('请输入您的操作：'))\n    if user_operation == 1:\n        print('姓名\\t年龄\\t')\n        print('鲁班\\t20\\t')\n        print('吕布\\t30\\t')\n        print('小乔\\t18\\t')\n        elif user_operation == 2:\n            name = input('请输入姓名：')\n            age = input('请输入年龄：')\n            print('%s 添加成功'% name)\n            elif user_operation == 3:\n                name = input('请输入修改姓名')\n                print('%s 修改成功'% name)\n\n\n                elif user_operation == 4:\n                    name = input('请输入修改姓名')\n                    print('%s 删除成功'% name)\n                    elif user_operation == 4:\n                        print('退出成功')\n                        break\n                        else:\n                            print('输入有误')\n\n                            print('*' * 27)\n```\n\n## Python 函数操作\n\n```python\n# 定义函数：\ndef 函数名():\n\t一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input('输入开始数字：'))\nend = int(input('输入结束数字：'))\ndef sum(start, end):\n    \"\"\"这是我的函数文档\"\"\"\n    if not isinstance(start, int):\n        print('请输入整数')\n        return None\n    if not isinstance(end, int):\n        print('请输入整数')\n        return None\n    if start > end:\n        print('start 必须小于 end')\n        return None\n    total = 0\n    whi le start <= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input('请输入运算符')\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == '+':\n                    result = a + b\n                    elif Oper == '-':\n                        result = a - b\n                        elif Oper == '*':\n                            result = a * b\n                            elif Oper == '/':\n                                result = a / b\n                                else:\n                                    print('输入有误')\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n```\n\n## 数据类型基础操作\n\n### 字符串（String）\n\n> 维度：方法的作用，参数，返回值，原数据是否改变\n\n##### 符串的遍历\n\n```python\nistr = 'hello'\n# 方法一\ni = 0\nwhile i < 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=' ')\n```\n\n##### 字符串的替换\n\n- **replace()** [ str.replace('old', 'new', 替换次数) ]\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nnewstr = strEmail.replace('y','#') # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace('y','#', 1) # 只替换第一次出现的 y\n```\n\n##### 字符串查找\n\n- **find()**\n- 返回第一次出现的位置，如果没有则返回 -1\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\n# 找到 @ 的位置\n\nstrEmail.find('@')\n```\n\n##### 字符串的切片\n\n```python\n# 以 @ 获取前后内容\n\nstrEmail = 'zxymaibox@yeah.net'\npossion = strEmail.find('@')  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  <==> print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username => print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui => print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n```\n\n##### 字符串拆分成列表\n\n- **split()**\n- 返回拆分后的列表\n\n```python\n# 以 @ 获取前后内容\nstrEmail = 'zxymaibox@yeah.net'\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count('@')\n\nif strCount == 1:\n    result = strEmail.split('@')\n\n    print(result)  # => ['zxymaibox', 'yeah.net']\n\n    username = result[0]\n    houzhui = result[1]\n```\n\n##### 查询某一字符出现的次数\n\n- **count()**\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nprint(strEmail.count('@')) # => 1\nprint(strEmail.count('y')) # => 2\n```\n\n##### 判断字符串是否全为字母\n\n- **isalpha()** [str.isalpha()]\n- 返回布尔值\n\n##### 字符串去除两侧空格\n\n- **strip()**\n- 返回新的字符串\n\n### 列表（List）\n\n```python\nlist = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n```\n\n##### 列表的遍历\n\n```python\nlist = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index < length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n```\n\n##### 列表元素插入\n\n```python\nlist = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n```\n\n##### 列表元素删除\n\n- **pop()** 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]\n- **remove()** 值删除， [ 默认删除第一次出现的值 ]\n- **clear() **清空列表，\n\n```python\nlist = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n```\n\n##### 列表元素查找和修改\n\n- **index(oldValue)** [ 如果值存在返回位置，不存在会报错 ]\n- **count(oldValue)** [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]\n\n```python\nlist = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n```\n\n##### 列表元素排序\n\n- **sort()** [默认从小到大, reverse= false ]\n- 参数： reverse=True 实现降序排列；\n- 逆序： reverse() [ 实现列表的逆序 ]\n\n```python\n# 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i < 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n```\n\n##### 两个列表元素追加\n\n- **extend()**\n\n```python\nlist1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n```\n\n### 元祖（Tuple）\n\n**可以理解为列表，但是他的元素不可修改**\n\n- 元组一旦创建不可修改\n- 元组只有一个元素时，需要在尾部添加一个逗号\n- 元组比列表更节省空间\n- 元组是序列式容器支持索引、切片操作\n\n```python\n# 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n```\n\n### 字典（Dictionary）\n\n```python\n# 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n```\n\n##### 字典元素访问\n\n```python\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 获取值\n1. print(dict['age'])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get('age', '我是默认返回值'))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict['score'] = 99       # 添加元素\ndict['name'] = '时光静好' # 修改元素\n```\n\n##### 字典元素删除\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 删除元素(也适用于列表)\ndel  person['age']\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n```\n\n##### 字典的遍历\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys(['name', 'gender', 'age'])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # ['name', 'gender', 'age']\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values(['serendipity', '女', '20'])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # ['serendipity', '女', '20']\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([('name': 'serendipity'),('gender': '女'), ('age' : '20')])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [('name': 'serendipity'),('gender': '女'), ('age' : '20')]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print('key:', value[0],'value:', value[1])\n\n\n        i = 0\n        while i < len(keyValList):\n            print('key:', keyValList[i][0], 'value:', keyValList[i][1] )\n            i += 1\n```\n\n### 集合（Set）\n\n## Python 文件操作\n\n### 文件的打开和关闭\n\n- **open(文件名, 访问模式)** 打开文件 [ 参数： 文件名 ， 访问模式]\n  - 访问模式： r 以只读方式打开文件（默认）\n  - 访问模式： w 打开文件只用于写入\n  - 访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n  - 访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头\n  - 访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入\n  - 访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n- **close()** 关闭文件\n\n** pyCharm 文件编码: file encodings: GBK **\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖\"\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open('test.md', 'r')\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n```\n\n### 文件读写\n\n- **write()**         一次只可以写一行\n- **writelines()**   一次写入多行，以列表形式\n- **read()**         没有参数读取文件所有数据，指定参数（1,2,3... ...）读取指定个数的数据\n- **readline()**     一次读取一行\n- **readlines()**   一次读取多行\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖!\"\nfileA.write(content)\n\nlines = ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open('test.md', 'r')\n\n\"\"\"文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    \"\"\"\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\n\n# 按行读取\nfor line in content4:\n    if line[-1] == '\\n':\n        print(line[:-1])\n        else:\n            print(line)\n\n            fileB.close()\n```\n\n### 文件拷贝\n\n```python\n# 获取要拷贝的文件名\n\nold_fileName = input('请输入您要拷贝的文件名：')\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + 'bk'\n\n# 打开新的文件\n\nfile_old = open(old_fileName, 'rb')\nfile_new = open(new_fileName, 'wb')\n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n```\n\n### 文件和目录操作\n\n```python\nimport os\n\n# 文件重命名\nos.rename('test.md', 'hello.txt')\n\n# 文件删除\nos.remove('test.md') # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir('abc')\nos.rmdir('abc')\n\n# 获取目录的文件列表\nos.listdir('abc')\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir('\\Users\\YII\\Desktop\\\\') # 设置默认工作目录\n```\n","source":"_posts/语雀/nsgd8q.md","raw":"---\ntitle: Python 基础\nurlname: nsgd8q\ndate: '2020-07-05 21:55:49 +0800'\ntags: []\ncategories: []\nabbrlink: 734607008\n---\n\n---\n\n```\n保持纯真心态，精神饱满、持续，做人很傻很天真；工作总有不如意，敢于直面惨淡的人生。爱生活、爱家人、爱测试。\n```\n\n---\n\n## Python 环境搭建\n\n- 下载安装\n\n```shell\n$ 下载页面：https://www.python.org/downloads/windows/\n\t2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n\t3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n\t2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n\t3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n```\n\n- pip 升级\n\n```shell\n$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n```\n\n- 虚拟环境\n\n```shell\n在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    => 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n\t创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n```\n\n- 第三方包本地安装\n\n```shell\n$  **.whl :\n$\t\tpip install  **.whl\n$  **.egg :\n$\t\t1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$\t\t2. easy_install **.egg\n$  **.zip / tar.gz\n\t\tpython setup.py install\n```\n\n## Python 标准数据类型\n\n> 标准数据类型：\n> Number（数字）、String（字符串）、Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）\n\n**不可变数据类型：** Number（数字）、String（字符串）、Tuple（元组）\n\n**可变数据类型：**   List（列表）、Dictionary（字典）、Set（集合）\n\n**序列容器：** String（字符串）、List（列表）Tuple（元组）\n\n**非序列容器**：Dictionary（字典）、Set（集合）\n​\n\n**[ 扩展：python 字面量 ]**\n\n- 数值型\n- 字符型\n- 布尔型\n- 字面量集合：\\*\\* \\*\\*Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）\n- 特殊字面量：None\n\n### 数据类型之间的运算规则\n\n- 算术运算符\n\n```\n常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 <==> 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n```\n\n- 赋值运算符\n\n```\n常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=\t: A //= B <==> A = A // B\n%=\t: A %= B <==> A = A % B\n**= : A **= B <==> A = A ** B\n```\n\n- 比较运算符\n\n```\n常见运算符：>, < , >=, <=, ==, !=\n\nPython 中 没有 全等于 ===\n```\n\n- 逻辑运算符\n\n```python\n# 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n```\n\n- **数据类型之间运算规则**\n\n```\n总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n```\n\n### 数据类型转换\n\n**前提：可以转换为目标类型**\n\n- 转换为 Number 类型\n\n```python\nvalue = '666'\nint(value) # ==> 666\n```\n\n- 转换为 String 类型\n\n```python\nvalue = 666\nstr(value)  ==> '666'\n```\n\n- 转换为 float 类型\n\n```python\nvalue = 666 # ‘666’呢？\nfloat(value)  ==> 666.00\n```\n\n### 数字（Number）\n\n- 整数（integer）\n- 小数 / 浮点数（float）\n\n**[ 常用的数字函数 ]**\n\n```python\nabs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n```\n\n### 字符串（String）\n\n- 字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 \" )来创建字符串\n- 字符串切片索引\n\n```python\nstr = 'Runoob'\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + \"TEST\") # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n```\n\n**[ python 三引号 ]**\n\npython 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符\n\n```python\npara_str = \"\"\"这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    \"\"\"\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [\n]。\n```\n\n### 列表（List）\n\n- 列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型\n- 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可\n- 列表切片索引\n\n**[ 常用的列表函数 ]**\n\n```python\nlist.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n```\n\n### 元组（Tuple）\n\n- 元组与列表类似，不同之处在于元组的元素不能修改\n\n### 字典（Dictionary）\n\n- 字典是另一种可变容器模型，且可存储任意类型对象\n- **dict = {key1 : value1, key2 : value2 }：**每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中\n- **注意：**键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。\n\n**[ 访问字典的值 ]**\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n'''\n    del dict['Name']     # 删除键 'Name'\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    '''\nprint (\"dict['Name']: \", dict['Name'])\nprint (\"dict['Age']: \", dict['Age'])\n# 输出\ndict['Name']:  Runoob\n    dict['Age']:  7\n```\n\n**[ 字典键的特性 ]**\n\n- 不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住\n\n```python\ndict = {'Name': 'Runoob', 'Age': 7, 'Name': '小菜鸟'}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\ndict['Name']:  小菜鸟\n    12\n```\n\n- 键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行\n\n```python\ndict = {['Name']: 'Runoob', 'Age': 7}\n\nprint (\"dict['Name']: \", dict['Name'])\n123\n#输出\nTraceback (most recent call last):\n    File \"test.py\", line 3, in <module>\n    dict = {['Name']: 'Runoob', 'Age': 7}\n    TypeError: unhashable type: 'list'\n```\n\n**[ 字典函数 ]**\n\n```python\nradiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n```\n\n### 集合（Set）\n\n- 集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合\n- **注意：**创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典\n\n```python\nbasket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\nprint(basket)                      # 去重功能\n#输出\n{'orange', 'banana', 'pear', 'apple'}\n\n'orange' in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n'crabgrass' in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\n#输出\n{'a', 'r', 'b', 'c', 'd'}\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n{'d', 'b', 'r'}\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n{'c', 'b', 'r', 'z', 'l', 'm', 'a', 'd'}\n\nprint(a & b)                              # 集合a和b中都包含了的元素\n#输出\n{'a', 'c'}\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n{'l', 'b', 'z', 'r', 'm', 'd'}\n```\n\n**[ 添加元素 ]**\n\n- **s.add( x )** 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.add(\"Facebook\")\nprint(thisset)\n#输出\n{'Taobao', 'Facebook', 'Google', 'Runoob'}\n```\n\n- **s.update( x )** 参数可以是列表，元组，字典等\n\n```python\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.update({1,3})\nprint(thisset)\n#输出\n{1, 3, 'Google', 'Taobao', 'Runoob'}\n\nthisset.update([1,4],[5,6])\nprint(thisset)\n#输出\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n```\n\n**[ 移除元素 ]**\n\n```python\ns.remove( x )\t\t# 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )\t\t# 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()\t\t\t\t# 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n```\n\n**[ 集合函数 ]**\n\n```python\nadd()\t        #为集合添加元素\nclear()\t        #移除集合中的所有元素\ncopy()\t        #拷贝一个集合\nunion()\t        #返回两个集合的并集\nupdate()\t    #给集合添加元素\n```\n\n## Python 输入输出\n\n### 标准输入输出函数\n\n- **print()** 标准输出函数\n\n```python\n#  换行符  \\n,  end='\\n'\nprint('aaa' end='') # 不换行\nprint('bbb' end='#') # bbb 和 ccc 之间用 # 连接\nprint('ccc')\n\n# 格式化输出\nname = '鲁班'\nage = 20\n\n> %s ==> string\n> %d ==> digit(数字)\n> %f ==> float\n> %% ==> 输出 %\n\nprint('他的名字是' + name +',他的年龄是' + age + '。') # 输出格式\nprint('他的名字是%s,他的年龄是%d。' %(name, age))\n\nprint('胜率%d%%' % 87)  # %% 表示 %  ==> 87%\n```\n\n- **input()** 标准输入函数,输入的内容是字符串\n\n```python\nprint('请输入你的姓名：')\ninput()\n<==> input('请输入你的姓名：')\n\n# 保存输入的数据\n\ninput_content = input('请输入你的姓名：')\nprint( input_content)\n# 动态\nprint('欢迎您 %s !' % input_content)\n```\n\n## Python 分支语句\n\n### if 分支语句\n\n- 比较运算符\n\n```\n==  相等, !=  不相等, >   大于, <   小于, >=  大于等于, <=  小于等于\n```\n\n- if 语句\n\n```python\nif a > b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n```\n\n- 多个条件之间的关系\n\n```python\n# and(且)  ==> 非 0 为真， 0 为假\nret = 0 and 2 # ==> 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==> 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==> 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a > b and a or b\n= false and a or b\n= false or b\n= b                 # ==> b 20\nret = a < b and a or b\n= true and a or b\n= a or b\n= a                 # ==> a 10\n# not(非)\n```\n\n### while 语句\n\n```python\n\"\"\"\n    我不喜欢这个世界，我只喜欢你！\n    \"\"\"\n# while 循环\n\n# i = 1\n# while i <= 100:\n#     print(i)\n#     i += 1\n#\n# print('END')\n\n# 1-100 偶数\n\n# i = 1\n# while i <= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input('开始数：'))\n# end = int(input('结束数：'))\n# total = 0\n# while start <= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start <= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print('奇数和：',total)\n\n# 打印 *\n\n# n = 1\n# while n <= 5:\n#     print('*' * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index <= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i <= 100:\n#     if i > 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print('欢迎使用')\n    print('*' * 10 + '操作菜单' + '*' * 10)\n\n    print('1. 展示信息')\n    print('2. 新增信息')\n    print('3. 修改信息')\n    print('4. 删除信息')\n    print('5. 退出')\n    # 保存用户操作\n    user_operation = int(input('请输入您的操作：'))\n    if user_operation == 1:\n        print('姓名\\t年龄\\t')\n        print('鲁班\\t20\\t')\n        print('吕布\\t30\\t')\n        print('小乔\\t18\\t')\n        elif user_operation == 2:\n            name = input('请输入姓名：')\n            age = input('请输入年龄：')\n            print('%s 添加成功'% name)\n            elif user_operation == 3:\n                name = input('请输入修改姓名')\n                print('%s 修改成功'% name)\n\n\n                elif user_operation == 4:\n                    name = input('请输入修改姓名')\n                    print('%s 删除成功'% name)\n                    elif user_operation == 4:\n                        print('退出成功')\n                        break\n                        else:\n                            print('输入有误')\n\n                            print('*' * 27)\n```\n\n## Python 函数操作\n\n```python\n# 定义函数：\ndef 函数名():\n\t一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input('输入开始数字：'))\nend = int(input('输入结束数字：'))\ndef sum(start, end):\n    \"\"\"这是我的函数文档\"\"\"\n    if not isinstance(start, int):\n        print('请输入整数')\n        return None\n    if not isinstance(end, int):\n        print('请输入整数')\n        return None\n    if start > end:\n        print('start 必须小于 end')\n        return None\n    total = 0\n    whi le start <= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input('请输入运算符')\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == '+':\n                    result = a + b\n                    elif Oper == '-':\n                        result = a - b\n                        elif Oper == '*':\n                            result = a * b\n                            elif Oper == '/':\n                                result = a / b\n                                else:\n                                    print('输入有误')\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n```\n\n## 数据类型基础操作\n\n### 字符串（String）\n\n> 维度：方法的作用，参数，返回值，原数据是否改变\n\n##### 符串的遍历\n\n```python\nistr = 'hello'\n# 方法一\ni = 0\nwhile i < 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=' ')\n```\n\n##### 字符串的替换\n\n- **replace()** [ str.replace('old', 'new', 替换次数) ]\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nnewstr = strEmail.replace('y','#') # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace('y','#', 1) # 只替换第一次出现的 y\n```\n\n##### 字符串查找\n\n- **find()**\n- 返回第一次出现的位置，如果没有则返回 -1\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\n# 找到 @ 的位置\n\nstrEmail.find('@')\n```\n\n##### 字符串的切片\n\n```python\n# 以 @ 获取前后内容\n\nstrEmail = 'zxymaibox@yeah.net'\npossion = strEmail.find('@')  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  <==> print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username => print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui => print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n```\n\n##### 字符串拆分成列表\n\n- **split()**\n- 返回拆分后的列表\n\n```python\n# 以 @ 获取前后内容\nstrEmail = 'zxymaibox@yeah.net'\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count('@')\n\nif strCount == 1:\n    result = strEmail.split('@')\n\n    print(result)  # => ['zxymaibox', 'yeah.net']\n\n    username = result[0]\n    houzhui = result[1]\n```\n\n##### 查询某一字符出现的次数\n\n- **count()**\n\n```python\nstrEmail = 'zxymaibox@yeah.net'\n\nprint(strEmail.count('@')) # => 1\nprint(strEmail.count('y')) # => 2\n```\n\n##### 判断字符串是否全为字母\n\n- **isalpha()** [str.isalpha()]\n- 返回布尔值\n\n##### 字符串去除两侧空格\n\n- **strip()**\n- 返回新的字符串\n\n### 列表（List）\n\n```python\nlist = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n```\n\n##### 列表的遍历\n\n```python\nlist = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index < length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n```\n\n##### 列表元素插入\n\n```python\nlist = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n```\n\n##### 列表元素删除\n\n- **pop()** 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]\n- **remove()** 值删除， [ 默认删除第一次出现的值 ]\n- **clear() **清空列表，\n\n```python\nlist = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n```\n\n##### 列表元素查找和修改\n\n- **index(oldValue)** [ 如果值存在返回位置，不存在会报错 ]\n- **count(oldValue)** [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]\n\n```python\nlist = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n```\n\n##### 列表元素排序\n\n- **sort()** [默认从小到大, reverse= false ]\n- 参数： reverse=True 实现降序排列；\n- 逆序： reverse() [ 实现列表的逆序 ]\n\n```python\n# 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i < 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n```\n\n##### 两个列表元素追加\n\n- **extend()**\n\n```python\nlist1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n```\n\n### 元祖（Tuple）\n\n**可以理解为列表，但是他的元素不可修改**\n\n- 元组一旦创建不可修改\n- 元组只有一个元素时，需要在尾部添加一个逗号\n- 元组比列表更节省空间\n- 元组是序列式容器支持索引、切片操作\n\n```python\n# 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n```\n\n### 字典（Dictionary）\n\n```python\n# 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n```\n\n##### 字典元素访问\n\n```python\ndict = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 获取值\n1. print(dict['age'])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get('age', '我是默认返回值'))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict['score'] = 99       # 添加元素\ndict['name'] = '时光静好' # 修改元素\n```\n\n##### 字典元素删除\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\n## 删除元素(也适用于列表)\ndel  person['age']\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n```\n\n##### 字典的遍历\n\n```python\nperson = {\n    'name': 'serendipity',\n    'gender': '女'\n    'age' : '20',\n}\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys(['name', 'gender', 'age'])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # ['name', 'gender', 'age']\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values(['serendipity', '女', '20'])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # ['serendipity', '女', '20']\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([('name': 'serendipity'),('gender': '女'), ('age' : '20')])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [('name': 'serendipity'),('gender': '女'), ('age' : '20')]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print('key:', value[0],'value:', value[1])\n\n\n        i = 0\n        while i < len(keyValList):\n            print('key:', keyValList[i][0], 'value:', keyValList[i][1] )\n            i += 1\n```\n\n### 集合（Set）\n\n## Python 文件操作\n\n### 文件的打开和关闭\n\n- **open(文件名, 访问模式)** 打开文件 [ 参数： 文件名 ， 访问模式]\n  - 访问模式： r 以只读方式打开文件（默认）\n  - 访问模式： w 打开文件只用于写入\n  - 访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n  - 访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头\n  - 访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入\n  - 访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入\n- **close()** 关闭文件\n\n** pyCharm 文件编码: file encodings: GBK **\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖\"\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open('test.md', 'r')\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n```\n\n### 文件读写\n\n- **write()**         一次只可以写一行\n- **writelines()**   一次写入多行，以列表形式\n- **read()**         没有参数读取文件所有数据，指定参数（1,2,3... ...）读取指定个数的数据\n- **readline()**     一次读取一行\n- **readlines()**   一次读取多行\n\n```python\n#  写入文件\nfileA= open('test.md', 'w') # 参数 文件名， 访问模式\n\ncontent= \"1. 时光静好，岁月安然 \\n 一人之间，山水江湖!\"\nfileA.write(content)\n\nlines = ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open('test.md', 'r')\n\n\"\"\"文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    \"\"\"\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # ['时光静好，岁月安然.\\n', '一人之间，山水江湖!\\n']\n\n# 按行读取\nfor line in content4:\n    if line[-1] == '\\n':\n        print(line[:-1])\n        else:\n            print(line)\n\n            fileB.close()\n```\n\n### 文件拷贝\n\n```python\n# 获取要拷贝的文件名\n\nold_fileName = input('请输入您要拷贝的文件名：')\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + 'bk'\n\n# 打开新的文件\n\nfile_old = open(old_fileName, 'rb')\nfile_new = open(new_fileName, 'wb')\n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n```\n\n### 文件和目录操作\n\n```python\nimport os\n\n# 文件重命名\nos.rename('test.md', 'hello.txt')\n\n# 文件删除\nos.remove('test.md') # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir('abc')\nos.rmdir('abc')\n\n# 获取目录的文件列表\nos.listdir('abc')\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir('\\Users\\YII\\Desktop\\\\') # 设置默认工作目录\n```\n","slug":"语雀/nsgd8q","published":1,"updated":"2022-03-03T11:26:07.581Z","_id":"cl0awjjpf000u081b0jn5c6wb","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<pre><code>保持纯真心态，精神饱满、持续，做人很傻很天真；工作总有不如意，敢于直面惨淡的人生。爱生活、爱家人、爱测试。\n</code></pre>\n<hr>\n<h2 id=\"Python-环境搭建\"><a href=\"#Python-环境搭建\" class=\"headerlink\" title=\"Python 环境搭建\"></a>Python 环境搭建</h2><ul>\n<li>下载安装</li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面：https://www.python.org/downloads/windows/\n    2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n    3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n    2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n    3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n</code></pre>\n<ul>\n<li>pip 升级</li>\n</ul>\n<pre><code class=\"shell\">$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n</code></pre>\n<ul>\n<li>虚拟环境</li>\n</ul>\n<pre><code class=\"shell\">在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    =&gt; 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n    创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n</code></pre>\n<ul>\n<li>第三方包本地安装</li>\n</ul>\n<pre><code class=\"shell\">$  **.whl :\n$        pip install  **.whl\n$  **.egg :\n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n        python setup.py install\n</code></pre>\n<h2 id=\"Python-标准数据类型\"><a href=\"#Python-标准数据类型\" class=\"headerlink\" title=\"Python 标准数据类型\"></a>Python 标准数据类型</h2><blockquote>\n<p>标准数据类型：<br>Number（数字）、String（字符串）、Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）</p>\n</blockquote>\n<p><strong>不可变数据类型：</strong> Number（数字）、String（字符串）、Tuple（元组）</p>\n<p><strong>可变数据类型：</strong>   List（列表）、Dictionary（字典）、Set（集合）</p>\n<p><strong>序列容器：</strong> String（字符串）、List（列表）Tuple（元组）</p>\n<p><strong>非序列容器</strong>：Dictionary（字典）、Set（集合）<br>​</p>\n<p><strong>[ 扩展：python 字面量 ]</strong></p>\n<ul>\n<li>数值型</li>\n<li>字符型</li>\n<li>布尔型</li>\n<li>字面量集合：** **Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）</li>\n<li>特殊字面量：None</li>\n</ul>\n<h3 id=\"数据类型之间的运算规则\"><a href=\"#数据类型之间的运算规则\" class=\"headerlink\" title=\"数据类型之间的运算规则\"></a>数据类型之间的运算规则</h3><ul>\n<li>算术运算符</li>\n</ul>\n<pre><code>常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 &lt;==&gt; 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n</code></pre>\n<ul>\n<li>赋值运算符</li>\n</ul>\n<pre><code>常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=    : A //= B &lt;==&gt; A = A // B\n%=    : A %= B &lt;==&gt; A = A % B\n**= : A **= B &lt;==&gt; A = A ** B\n</code></pre>\n<ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>常见运算符：&gt;, &lt; , &gt;=, &lt;=, ==, !=\n\nPython 中 没有 全等于 ===\n</code></pre>\n<ul>\n<li>逻辑运算符</li>\n</ul>\n<pre><code class=\"python\"># 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n</code></pre>\n<ul>\n<li><strong>数据类型之间运算规则</strong></li>\n</ul>\n<pre><code>总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n</code></pre>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p><strong>前提：可以转换为目标类型</strong></p>\n<ul>\n<li>转换为 Number 类型</li>\n</ul>\n<pre><code class=\"python\">value = &#39;666&#39;\nint(value) # ==&gt; 666\n</code></pre>\n<ul>\n<li>转换为 String 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666\nstr(value)  ==&gt; &#39;666&#39;\n</code></pre>\n<ul>\n<li>转换为 float 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666 # ‘666’呢？\nfloat(value)  ==&gt; 666.00\n</code></pre>\n<h3 id=\"数字（Number）\"><a href=\"#数字（Number）\" class=\"headerlink\" title=\"数字（Number）\"></a>数字（Number）</h3><ul>\n<li>整数（integer）</li>\n<li>小数 / 浮点数（float）</li>\n</ul>\n<p><strong>[ 常用的数字函数 ]</strong></p>\n<pre><code class=\"python\">abs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n</code></pre>\n<h3 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><ul>\n<li>字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 “ )来创建字符串</li>\n<li>字符串切片索引</li>\n</ul>\n<pre><code class=\"python\">str = &#39;Runoob&#39;\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + &quot;TEST&quot;) # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n</code></pre>\n<p><strong>[ python 三引号 ]</strong></p>\n<p>python 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p>\n<pre><code class=\"python\">para_str = &quot;&quot;&quot;这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    &quot;&quot;&quot;\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [\n]。\n</code></pre>\n<h3 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><ul>\n<li>列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型</li>\n<li>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可</li>\n<li>列表切片索引</li>\n</ul>\n<p><strong>[ 常用的列表函数 ]</strong></p>\n<pre><code class=\"python\">list.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n</code></pre>\n<h3 id=\"元组（Tuple）\"><a href=\"#元组（Tuple）\" class=\"headerlink\" title=\"元组（Tuple）\"></a>元组（Tuple）</h3><ul>\n<li>元组与列表类似，不同之处在于元组的元素不能修改</li>\n</ul>\n<h3 id=\"字典（Dictionary）\"><a href=\"#字典（Dictionary）\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><ul>\n<li>字典是另一种可变容器模型，且可存储任意类型对象</li>\n<li><strong>dict = {key1 : value1, key2 : value2 }：</strong>每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</li>\n<li><strong>注意：</strong>键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。</li>\n</ul>\n<p><strong>[ 访问字典的值 ]</strong></p>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;\n&#39;&#39;&#39;\n    del dict[&#39;Name&#39;]     # 删除键 &#39;Name&#39;\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    &#39;&#39;&#39;\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])\n# 输出\ndict[&#39;Name&#39;]:  Runoob\n    dict[&#39;Age&#39;]:  7\n</code></pre>\n<p><strong>[ 字典键的特性 ]</strong></p>\n<ul>\n<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;小菜鸟&#39;&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\ndict[&#39;Name&#39;]:  小菜鸟\n    12\n</code></pre>\n<ul>\n<li>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\nTraceback (most recent call last):\n    File &quot;test.py&quot;, line 3, in &lt;module&gt;\n    dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n    TypeError: unhashable type: &#39;list&#39;\n</code></pre>\n<p><strong>[ 字典函数 ]</strong></p>\n<pre><code class=\"python\">radiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n</code></pre>\n<h3 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><ul>\n<li>集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合</li>\n<li><strong>注意：</strong>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</li>\n</ul>\n<pre><code class=\"python\">basket = &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;\nprint(basket)                      # 去重功能\n#输出\n&#123;&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;&#125;\n\n&#39;orange&#39; in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n&#39;crabgrass&#39; in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)\n#输出\n&#123;&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n&#123;&#39;c&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;l&#39;, &#39;m&#39;, &#39;a&#39;, &#39;d&#39;&#125;\n\nprint(a &amp; b)                              # 集合a和b中都包含了的元素\n#输出\n&#123;&#39;a&#39;, &#39;c&#39;&#125;\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;m&#39;, &#39;d&#39;&#125;\n</code></pre>\n<p><strong>[ 添加元素 ]</strong></p>\n<ul>\n<li><strong>s.add( x )</strong> 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.add(&quot;Facebook&quot;)\nprint(thisset)\n#输出\n&#123;&#39;Taobao&#39;, &#39;Facebook&#39;, &#39;Google&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<ul>\n<li><strong>s.update( x )</strong> 参数可以是列表，元组，字典等</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.update(&#123;1,3&#125;)\nprint(thisset)\n#输出\n&#123;1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n\nthisset.update([1,4],[5,6])\nprint(thisset)\n#输出\n&#123;1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<p><strong>[ 移除元素 ]</strong></p>\n<pre><code class=\"python\">s.remove( x )        # 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )        # 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()                # 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n</code></pre>\n<p><strong>[ 集合函数 ]</strong></p>\n<pre><code class=\"python\">add()            #为集合添加元素\nclear()            #移除集合中的所有元素\ncopy()            #拷贝一个集合\nunion()            #返回两个集合的并集\nupdate()        #给集合添加元素\n</code></pre>\n<h2 id=\"Python-输入输出\"><a href=\"#Python-输入输出\" class=\"headerlink\" title=\"Python 输入输出\"></a>Python 输入输出</h2><h3 id=\"标准输入输出函数\"><a href=\"#标准输入输出函数\" class=\"headerlink\" title=\"标准输入输出函数\"></a>标准输入输出函数</h3><ul>\n<li><strong>print()</strong> 标准输出函数</li>\n</ul>\n<pre><code class=\"python\">#  换行符  \\n,  end=&#39;\\n&#39;\nprint(&#39;aaa&#39; end=&#39;&#39;) # 不换行\nprint(&#39;bbb&#39; end=&#39;#&#39;) # bbb 和 ccc 之间用 # 连接\nprint(&#39;ccc&#39;)\n\n# 格式化输出\nname = &#39;鲁班&#39;\nage = 20\n\n&gt; %s ==&gt; string\n&gt; %d ==&gt; digit(数字)\n&gt; %f ==&gt; float\n&gt; %% ==&gt; 输出 %\n\nprint(&#39;他的名字是&#39; + name +&#39;,他的年龄是&#39; + age + &#39;。&#39;) # 输出格式\nprint(&#39;他的名字是%s,他的年龄是%d。&#39; %(name, age))\n\nprint(&#39;胜率%d%%&#39; % 87)  # %% 表示 %  ==&gt; 87%\n</code></pre>\n<ul>\n<li><strong>input()</strong> 标准输入函数,输入的内容是字符串</li>\n</ul>\n<pre><code class=\"python\">print(&#39;请输入你的姓名：&#39;)\ninput()\n&lt;==&gt; input(&#39;请输入你的姓名：&#39;)\n\n# 保存输入的数据\n\ninput_content = input(&#39;请输入你的姓名：&#39;)\nprint( input_content)\n# 动态\nprint(&#39;欢迎您 %s !&#39; % input_content)\n</code></pre>\n<h2 id=\"Python-分支语句\"><a href=\"#Python-分支语句\" class=\"headerlink\" title=\"Python 分支语句\"></a>Python 分支语句</h2><h3 id=\"if-分支语句\"><a href=\"#if-分支语句\" class=\"headerlink\" title=\"if 分支语句\"></a>if 分支语句</h3><ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>==  相等, !=  不相等, &gt;   大于, &lt;   小于, &gt;=  大于等于, &lt;=  小于等于\n</code></pre>\n<ul>\n<li>if 语句</li>\n</ul>\n<pre><code class=\"python\">if a &gt; b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n</code></pre>\n<ul>\n<li>多个条件之间的关系</li>\n</ul>\n<pre><code class=\"python\"># and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a &gt; b and a or b\n= false and a or b\n= false or b\n= b                 # ==&gt; b 20\nret = a &lt; b and a or b\n= true and a or b\n= a or b\n= a                 # ==&gt; a 10\n# not(非)\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"python\">&quot;&quot;&quot;\n    我不喜欢这个世界，我只喜欢你！\n    &quot;&quot;&quot;\n# while 循环\n\n# i = 1\n# while i &lt;= 100:\n#     print(i)\n#     i += 1\n#\n# print(&#39;END&#39;)\n\n# 1-100 偶数\n\n# i = 1\n# while i &lt;= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input(&#39;开始数：&#39;))\n# end = int(input(&#39;结束数：&#39;))\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start &lt;= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print(&#39;奇数和：&#39;,total)\n\n# 打印 *\n\n# n = 1\n# while n &lt;= 5:\n#     print(&#39;*&#39; * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i &lt;= 100:\n#     if i &gt; 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print(&#39;欢迎使用&#39;)\n    print(&#39;*&#39; * 10 + &#39;操作菜单&#39; + &#39;*&#39; * 10)\n\n    print(&#39;1. 展示信息&#39;)\n    print(&#39;2. 新增信息&#39;)\n    print(&#39;3. 修改信息&#39;)\n    print(&#39;4. 删除信息&#39;)\n    print(&#39;5. 退出&#39;)\n    # 保存用户操作\n    user_operation = int(input(&#39;请输入您的操作：&#39;))\n    if user_operation == 1:\n        print(&#39;姓名\\t年龄\\t&#39;)\n        print(&#39;鲁班\\t20\\t&#39;)\n        print(&#39;吕布\\t30\\t&#39;)\n        print(&#39;小乔\\t18\\t&#39;)\n        elif user_operation == 2:\n            name = input(&#39;请输入姓名：&#39;)\n            age = input(&#39;请输入年龄：&#39;)\n            print(&#39;%s 添加成功&#39;% name)\n            elif user_operation == 3:\n                name = input(&#39;请输入修改姓名&#39;)\n                print(&#39;%s 修改成功&#39;% name)\n\n\n                elif user_operation == 4:\n                    name = input(&#39;请输入修改姓名&#39;)\n                    print(&#39;%s 删除成功&#39;% name)\n                    elif user_operation == 4:\n                        print(&#39;退出成功&#39;)\n                        break\n                        else:\n                            print(&#39;输入有误&#39;)\n\n                            print(&#39;*&#39; * 27)\n</code></pre>\n<h2 id=\"Python-函数操作\"><a href=\"#Python-函数操作\" class=\"headerlink\" title=\"Python 函数操作\"></a>Python 函数操作</h2><pre><code class=\"python\"># 定义函数：\ndef 函数名():\n    一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input(&#39;输入开始数字：&#39;))\nend = int(input(&#39;输入结束数字：&#39;))\ndef sum(start, end):\n    &quot;&quot;&quot;这是我的函数文档&quot;&quot;&quot;\n    if not isinstance(start, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if not isinstance(end, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if start &gt; end:\n        print(&#39;start 必须小于 end&#39;)\n        return None\n    total = 0\n    whi le start &lt;= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input(&#39;请输入运算符&#39;)\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == &#39;+&#39;:\n                    result = a + b\n                    elif Oper == &#39;-&#39;:\n                        result = a - b\n                        elif Oper == &#39;*&#39;:\n                            result = a * b\n                            elif Oper == &#39;/&#39;:\n                                result = a / b\n                                else:\n                                    print(&#39;输入有误&#39;)\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n</code></pre>\n<h2 id=\"数据类型基础操作\"><a href=\"#数据类型基础操作\" class=\"headerlink\" title=\"数据类型基础操作\"></a>数据类型基础操作</h2><h3 id=\"字符串（String）-1\"><a href=\"#字符串（String）-1\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><blockquote>\n<p>维度：方法的作用，参数，返回值，原数据是否改变</p>\n</blockquote>\n<h5 id=\"符串的遍历\"><a href=\"#符串的遍历\" class=\"headerlink\" title=\"符串的遍历\"></a>符串的遍历</h5><pre><code class=\"python\">istr = &#39;hello&#39;\n# 方法一\ni = 0\nwhile i &lt; 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=&#39; &#39;)\n</code></pre>\n<h5 id=\"字符串的替换\"><a href=\"#字符串的替换\" class=\"headerlink\" title=\"字符串的替换\"></a>字符串的替换</h5><ul>\n<li><strong>replace()</strong> [ str.replace(‘old’, ‘new’, 替换次数) ]</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;) # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;, 1) # 只替换第一次出现的 y\n</code></pre>\n<h5 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h5><ul>\n<li><strong>find()</strong></li>\n<li>返回第一次出现的位置，如果没有则返回 -1</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 找到 @ 的位置\n\nstrEmail.find(&#39;@&#39;)\n</code></pre>\n<h5 id=\"字符串的切片\"><a href=\"#字符串的切片\" class=\"headerlink\" title=\"字符串的切片\"></a>字符串的切片</h5><pre><code class=\"python\"># 以 @ 获取前后内容\n\nstrEmail = &#39;zxymaibox@yeah.net&#39;\npossion = strEmail.find(&#39;@&#39;)  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  &lt;==&gt; print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username =&gt; print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui =&gt; print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n</code></pre>\n<h5 id=\"字符串拆分成列表\"><a href=\"#字符串拆分成列表\" class=\"headerlink\" title=\"字符串拆分成列表\"></a>字符串拆分成列表</h5><ul>\n<li><strong>split()</strong></li>\n<li>返回拆分后的列表</li>\n</ul>\n<pre><code class=\"python\"># 以 @ 获取前后内容\nstrEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count(&#39;@&#39;)\n\nif strCount == 1:\n    result = strEmail.split(&#39;@&#39;)\n\n    print(result)  # =&gt; [&#39;zxymaibox&#39;, &#39;yeah.net&#39;]\n\n    username = result[0]\n    houzhui = result[1]\n</code></pre>\n<h5 id=\"查询某一字符出现的次数\"><a href=\"#查询某一字符出现的次数\" class=\"headerlink\" title=\"查询某一字符出现的次数\"></a>查询某一字符出现的次数</h5><ul>\n<li><strong>count()</strong></li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nprint(strEmail.count(&#39;@&#39;)) # =&gt; 1\nprint(strEmail.count(&#39;y&#39;)) # =&gt; 2\n</code></pre>\n<h5 id=\"判断字符串是否全为字母\"><a href=\"#判断字符串是否全为字母\" class=\"headerlink\" title=\"判断字符串是否全为字母\"></a>判断字符串是否全为字母</h5><ul>\n<li><strong>isalpha()</strong> [str.isalpha()]</li>\n<li>返回布尔值</li>\n</ul>\n<h5 id=\"字符串去除两侧空格\"><a href=\"#字符串去除两侧空格\" class=\"headerlink\" title=\"字符串去除两侧空格\"></a>字符串去除两侧空格</h5><ul>\n<li><strong>strip()</strong></li>\n<li>返回新的字符串</li>\n</ul>\n<h3 id=\"列表（List）-1\"><a href=\"#列表（List）-1\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n</code></pre>\n<h5 id=\"列表的遍历\"><a href=\"#列表的遍历\" class=\"headerlink\" title=\"列表的遍历\"></a>列表的遍历</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index &lt; length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n</code></pre>\n<h5 id=\"列表元素插入\"><a href=\"#列表元素插入\" class=\"headerlink\" title=\"列表元素插入\"></a>列表元素插入</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n</code></pre>\n<h5 id=\"列表元素删除\"><a href=\"#列表元素删除\" class=\"headerlink\" title=\"列表元素删除\"></a>列表元素删除</h5><ul>\n<li><strong>pop()</strong> 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]</li>\n<li><strong>remove()</strong> 值删除， [ 默认删除第一次出现的值 ]</li>\n<li>**clear() **清空列表，</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n</code></pre>\n<h5 id=\"列表元素查找和修改\"><a href=\"#列表元素查找和修改\" class=\"headerlink\" title=\"列表元素查找和修改\"></a>列表元素查找和修改</h5><ul>\n<li><strong>index(oldValue)</strong> [ 如果值存在返回位置，不存在会报错 ]</li>\n<li><strong>count(oldValue)</strong> [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n</code></pre>\n<h5 id=\"列表元素排序\"><a href=\"#列表元素排序\" class=\"headerlink\" title=\"列表元素排序\"></a>列表元素排序</h5><ul>\n<li><strong>sort()</strong> [默认从小到大, reverse= false ]</li>\n<li>参数： reverse=True 实现降序排列；</li>\n<li>逆序： reverse() [ 实现列表的逆序 ]</li>\n</ul>\n<pre><code class=\"python\"># 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i &lt; 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n</code></pre>\n<h5 id=\"两个列表元素追加\"><a href=\"#两个列表元素追加\" class=\"headerlink\" title=\"两个列表元素追加\"></a>两个列表元素追加</h5><ul>\n<li><strong>extend()</strong></li>\n</ul>\n<pre><code class=\"python\">list1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n</code></pre>\n<h3 id=\"元祖（Tuple）\"><a href=\"#元祖（Tuple）\" class=\"headerlink\" title=\"元祖（Tuple）\"></a>元祖（Tuple）</h3><p><strong>可以理解为列表，但是他的元素不可修改</strong></p>\n<ul>\n<li>元组一旦创建不可修改</li>\n<li>元组只有一个元素时，需要在尾部添加一个逗号</li>\n<li>元组比列表更节省空间</li>\n<li>元组是序列式容器支持索引、切片操作</li>\n</ul>\n<pre><code class=\"python\"># 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n</code></pre>\n<h3 id=\"字典（Dictionary）-1\"><a href=\"#字典（Dictionary）-1\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><pre><code class=\"python\"># 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n</code></pre>\n<h5 id=\"字典元素访问\"><a href=\"#字典元素访问\" class=\"headerlink\" title=\"字典元素访问\"></a>字典元素访问</h5><pre><code class=\"python\">dict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 获取值\n1. print(dict[&#39;age&#39;])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get(&#39;age&#39;, &#39;我是默认返回值&#39;))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict[&#39;score&#39;] = 99       # 添加元素\ndict[&#39;name&#39;] = &#39;时光静好&#39; # 修改元素\n</code></pre>\n<h5 id=\"字典元素删除\"><a href=\"#字典元素删除\" class=\"headerlink\" title=\"字典元素删除\"></a>字典元素删除</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 删除元素(也适用于列表)\ndel  person[&#39;age&#39;]\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n</code></pre>\n<h5 id=\"字典的遍历\"><a href=\"#字典的遍历\" class=\"headerlink\" title=\"字典的遍历\"></a>字典的遍历</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys([&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # [&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;]\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values([&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # [&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;]\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print(&#39;key:&#39;, value[0],&#39;value:&#39;, value[1])\n\n\n        i = 0\n        while i &lt; len(keyValList):\n            print(&#39;key:&#39;, keyValList[i][0], &#39;value:&#39;, keyValList[i][1] )\n            i += 1\n</code></pre>\n<h3 id=\"集合（Set）-1\"><a href=\"#集合（Set）-1\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><h2 id=\"Python-文件操作\"><a href=\"#Python-文件操作\" class=\"headerlink\" title=\"Python 文件操作\"></a>Python 文件操作</h2><h3 id=\"文件的打开和关闭\"><a href=\"#文件的打开和关闭\" class=\"headerlink\" title=\"文件的打开和关闭\"></a>文件的打开和关闭</h3><ul>\n<li><strong>open(文件名, 访问模式)</strong> 打开文件 [ 参数： 文件名 ， 访问模式]<ul>\n<li>访问模式： r 以只读方式打开文件（默认）</li>\n<li>访问模式： w 打开文件只用于写入</li>\n<li>访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n<li>访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头</li>\n<li>访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入</li>\n<li>访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n</ul>\n</li>\n<li><strong>close()</strong> 关闭文件</li>\n</ul>\n<p>** pyCharm 文件编码: file encodings: GBK **</p>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖&quot;\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n</code></pre>\n<h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3><ul>\n<li><strong>write()</strong>         一次只可以写一行</li>\n<li><strong>writelines()</strong>   一次写入多行，以列表形式</li>\n<li><strong>read()</strong>         没有参数读取文件所有数据，指定参数（1,2,3… …）读取指定个数的数据</li>\n<li><strong>readline()</strong>     一次读取一行</li>\n<li><strong>readlines()</strong>   一次读取多行</li>\n</ul>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖!&quot;\nfileA.write(content)\n\nlines = [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\n&quot;&quot;&quot;文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    &quot;&quot;&quot;\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\n\n# 按行读取\nfor line in content4:\n    if line[-1] == &#39;\\n&#39;:\n        print(line[:-1])\n        else:\n            print(line)\n\n            fileB.close()\n</code></pre>\n<h3 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h3><pre><code class=\"python\"># 获取要拷贝的文件名\n\nold_fileName = input(&#39;请输入您要拷贝的文件名：&#39;)\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + &#39;bk&#39;\n\n# 打开新的文件\n\nfile_old = open(old_fileName, &#39;rb&#39;)\nfile_new = open(new_fileName, &#39;wb&#39;)\n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n</code></pre>\n<h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><pre><code class=\"python\">import os\n\n# 文件重命名\nos.rename(&#39;test.md&#39;, &#39;hello.txt&#39;)\n\n# 文件删除\nos.remove(&#39;test.md&#39;) # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir(&#39;abc&#39;)\nos.rmdir(&#39;abc&#39;)\n\n# 获取目录的文件列表\nos.listdir(&#39;abc&#39;)\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir(&#39;\\Users\\YII\\Desktop\\\\&#39;) # 设置默认工作目录\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<hr>\n<pre><code>保持纯真心态，精神饱满、持续，做人很傻很天真；工作总有不如意，敢于直面惨淡的人生。爱生活、爱家人、爱测试。\n</code></pre>\n<hr>\n<h2 id=\"Python-环境搭建\"><a href=\"#Python-环境搭建\" class=\"headerlink\" title=\"Python 环境搭建\"></a>Python 环境搭建</h2><ul>\n<li>下载安装</li>\n</ul>\n<pre><code class=\"shell\">$ 下载页面：https://www.python.org/downloads/windows/\n    2.7：https://www.python.org/downloads/release/python-2718/（选择：Windows x86-64 MSI installer）\n    3.8：https://www.python.org/downloads/release/python-385/（选择：Windows x86-64 executable installer）\n\n    2.7 版本直连：https://www.python.org/ftp/python/2.7.18/python-2.7.18.amd64.msi\n    3.7 版本直连：https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe\n</code></pre>\n<ul>\n<li>pip 升级</li>\n</ul>\n<pre><code class=\"shell\">$ python2 -m pip install --upgrade pip --force-reinstall\n$ python3 -m pip install --upgrade pip --force-reinstall\n</code></pre>\n<ul>\n<li>虚拟环境</li>\n</ul>\n<pre><code class=\"shell\">在 python3 的环境下创建\n\n$ 安装虚拟环境软件包：pip3 install virtualenv\n$ 创建虚拟环境： virtualenv Venv\n$ 虚拟环境管理器安装： pip3 install virtualenvwrapper-win\n$ 添加全局变量配置虚拟环境路径： WORKON_HOME  / C:\\Python\\Virtualenv    =&gt; 虚拟环境都创建在此目录下\n    创建虚拟环境： mkvirtualenv Venv(虚拟环境名称)\n    激活虚拟环境： workon Venv(虚拟环境名称)\n    退出虚拟环境： deactivate\n    删除虚拟环境： rmvirtualenv Venv(虚拟环境名称)\n    列出虚拟环境： workon / lsvirtualenv\n\n    创建虚拟环境指定 Python 版本： mkvirtualenv --python==C:\\Python\\Python37\\python.exe 虚拟环境名称\n</code></pre>\n<ul>\n<li>第三方包本地安装</li>\n</ul>\n<pre><code class=\"shell\">$  **.whl :\n$        pip install  **.whl\n$  **.egg :\n$        1. 先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装\n$        2. easy_install **.egg\n$  **.zip / tar.gz\n        python setup.py install\n</code></pre>\n<h2 id=\"Python-标准数据类型\"><a href=\"#Python-标准数据类型\" class=\"headerlink\" title=\"Python 标准数据类型\"></a>Python 标准数据类型</h2><blockquote>\n<p>标准数据类型：<br>Number（数字）、String（字符串）、Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）</p>\n</blockquote>\n<p><strong>不可变数据类型：</strong> Number（数字）、String（字符串）、Tuple（元组）</p>\n<p><strong>可变数据类型：</strong>   List（列表）、Dictionary（字典）、Set（集合）</p>\n<p><strong>序列容器：</strong> String（字符串）、List（列表）Tuple（元组）</p>\n<p><strong>非序列容器</strong>：Dictionary（字典）、Set（集合）<br>​</p>\n<p><strong>[ 扩展：python 字面量 ]</strong></p>\n<ul>\n<li>数值型</li>\n<li>字符型</li>\n<li>布尔型</li>\n<li>字面量集合：** **Tuple（元组）、List（列表）、Dictionary（字典）、Set（集合）</li>\n<li>特殊字面量：None</li>\n</ul>\n<h3 id=\"数据类型之间的运算规则\"><a href=\"#数据类型之间的运算规则\" class=\"headerlink\" title=\"数据类型之间的运算规则\"></a>数据类型之间的运算规则</h3><ul>\n<li>算术运算符</li>\n</ul>\n<pre><code>常见运算符：+ 、 - 、 * 、/ （/ 在 python2 和 python3 中的作用不同）\n\n** : 幂运算 2 ** 3 &lt;==&gt; 2 的三次方\n// : 取整运算\n%  ：取余运算\n\n/ 在python 2.X 当除数与被除数都是整数时，取整数，当其中一个为浮点数时，结果为浮点数，在 3.x 则直接为浮点数\n</code></pre>\n<ul>\n<li>赋值运算符</li>\n</ul>\n<pre><code>常见运算符：= 、+= 、-= 、*=、/= (A += B 相当于 A = A + B)\n\n//=    : A //= B &lt;==&gt; A = A // B\n%=    : A %= B &lt;==&gt; A = A % B\n**= : A **= B &lt;==&gt; A = A ** B\n</code></pre>\n<ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>常见运算符：&gt;, &lt; , &gt;=, &lt;=, ==, !=\n\nPython 中 没有 全等于 ===\n</code></pre>\n<ul>\n<li>逻辑运算符</li>\n</ul>\n<pre><code class=\"python\"># 逻辑运算符:逻辑与 and， 逻辑或 or， 逻辑非not (and，全真则真； or，全假为假)\n# and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n</code></pre>\n<ul>\n<li><strong>数据类型之间运算规则</strong></li>\n</ul>\n<pre><code>总结：\n  1. 数字和数字之间可以进行所有的运算\n  2. 字符串和字符串之间只能进行加法运算\n  3. 数字和字符串之间只能进行乘法运算\n</code></pre>\n<h3 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h3><p><strong>前提：可以转换为目标类型</strong></p>\n<ul>\n<li>转换为 Number 类型</li>\n</ul>\n<pre><code class=\"python\">value = &#39;666&#39;\nint(value) # ==&gt; 666\n</code></pre>\n<ul>\n<li>转换为 String 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666\nstr(value)  ==&gt; &#39;666&#39;\n</code></pre>\n<ul>\n<li>转换为 float 类型</li>\n</ul>\n<pre><code class=\"python\">value = 666 # ‘666’呢？\nfloat(value)  ==&gt; 666.00\n</code></pre>\n<h3 id=\"数字（Number）\"><a href=\"#数字（Number）\" class=\"headerlink\" title=\"数字（Number）\"></a>数字（Number）</h3><ul>\n<li>整数（integer）</li>\n<li>小数 / 浮点数（float）</li>\n</ul>\n<p><strong>[ 常用的数字函数 ]</strong></p>\n<pre><code class=\"python\">abs(x)          #返回数字的绝对值，如abs(-10) 返回 10\nmath.fabs(x)    #返回数字的绝对值，如math.fabs(-10) 返回10.0\nexp(x)          #返回e的x次幂(e^x),如math.exp(1) 返回2.718281828459045\nmath.log(x)     #返回x的对数如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nmath.log10(x)   #返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmath.modf(x)    #返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示\npow(x)          #返回x**y 运算后的值\nmath.sqrt(x)    #返回数字x的平方根\nround(x,[n])    #返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数\nmath.sin(x)     #返回的x弧度的正弦值\n</code></pre>\n<h3 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><ul>\n<li>字符串是 Python 中最常用的数据类型。我们可以使用引号( ’ 或 “ )来创建字符串</li>\n<li>字符串切片索引</li>\n</ul>\n<pre><code class=\"python\">str = &#39;Runoob&#39;\n\nprint (str)          # 输出字符串\nprint (str[0:-1])    # 输出第一个到倒数第二个的所有字符\nprint (str[0])       # 输出字符串第一个字符\nprint (str[2:5])     # 输出从第三个开始到第五个的字符\nprint (str[2:])      # 输出从第三个开始的后的所有字符\nprint (str * 2)      # 输出字符串两次\nprint (str + &quot;TEST&quot;) # 连接字符串\n\n# 输出\n\nRunoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n</code></pre>\n<p><strong>[ python 三引号 ]</strong></p>\n<p>python 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p>\n<pre><code class=\"python\">para_str = &quot;&quot;&quot;这是一个多行字符串的实例\n    多行字符串可以使用制表符\n    TAB ( \\t )。\n    也可以使用换行符 [ \\n ]。\n    &quot;&quot;&quot;\nprint (para_str)\n# 输出\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (    )。\n也可以使用换行符 [\n]。\n</code></pre>\n<h3 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><ul>\n<li>列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型</li>\n<li>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可</li>\n<li>列表切片索引</li>\n</ul>\n<p><strong>[ 常用的列表函数 ]</strong></p>\n<pre><code class=\"python\">list.append(obj)          #在列表末尾添加新的对象\nlist.count(obj)           #统计某个元素在列表中出现的次数\nlist.extend(seq)          #在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\nlist.index(obj)           #从列表中找出某个值第一个匹配项的索引位置\nlist.pop([index=-1])      #移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\nlist.remove(obj)          #移除列表中某个值的第一个匹配项\nlist.reverse()            #反向列表中元素\nlist.sort( key=None, reverse=False)    #对原列表进行排序,True 降序,False 升序（默认）\nlist.clear()              #清空列表\nlist.copy()               #复制列表\n</code></pre>\n<h3 id=\"元组（Tuple）\"><a href=\"#元组（Tuple）\" class=\"headerlink\" title=\"元组（Tuple）\"></a>元组（Tuple）</h3><ul>\n<li>元组与列表类似，不同之处在于元组的元素不能修改</li>\n</ul>\n<h3 id=\"字典（Dictionary）\"><a href=\"#字典（Dictionary）\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><ul>\n<li>字典是另一种可变容器模型，且可存储任意类型对象</li>\n<li><strong>dict = {key1 : value1, key2 : value2 }：</strong>每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</li>\n<li><strong>注意：</strong>键必须是唯一的，但值则不必；值可以取任何数据类型（如字符串，数字或元组），但键必须是不可变的。</li>\n</ul>\n<p><strong>[ 访问字典的值 ]</strong></p>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;\n&#39;&#39;&#39;\n    del dict[&#39;Name&#39;]     # 删除键 &#39;Name&#39;\n    dict.clear()         # 清空字典\n    del dict             # 删除字典\n\n    &#39;&#39;&#39;\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])\n# 输出\ndict[&#39;Name&#39;]:  Runoob\n    dict[&#39;Age&#39;]:  7\n</code></pre>\n<p><strong>[ 字典键的特性 ]</strong></p>\n<ul>\n<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;小菜鸟&#39;&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\ndict[&#39;Name&#39;]:  小菜鸟\n    12\n</code></pre>\n<ul>\n<li>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</li>\n</ul>\n<pre><code class=\"python\">dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])\n123\n#输出\nTraceback (most recent call last):\n    File &quot;test.py&quot;, line 3, in &lt;module&gt;\n    dict = &#123;[&#39;Name&#39;]: &#39;Runoob&#39;, &#39;Age&#39;: 7&#125;\n    TypeError: unhashable type: &#39;list&#39;\n</code></pre>\n<p><strong>[ 字典函数 ]</strong></p>\n<pre><code class=\"python\">radiansdict.clear()          #删除字典内所有元素\npop(key[,default])           #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值\n</code></pre>\n<h3 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><ul>\n<li>集合是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合</li>\n<li><strong>注意：</strong>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</li>\n</ul>\n<pre><code class=\"python\">basket = &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;\nprint(basket)                      # 去重功能\n#输出\n&#123;&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;&#125;\n\n&#39;orange&#39; in basket                 # 快速判断元素是否在集合内\n#输出\nTrue\n\n&#39;crabgrass&#39; in basket\n#输出\nFalse\n\n# 下面展示两个集合间的运算\na = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)\n#输出\n&#123;&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n\nprint(a - b)                              # 集合a中包含而集合b中不包含的元素\n#输出\n&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n\nprint(a | b)                              # 集合a或b中包含的所有元素\n#输出\n&#123;&#39;c&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;l&#39;, &#39;m&#39;, &#39;a&#39;, &#39;d&#39;&#125;\n\nprint(a &amp; b)                              # 集合a和b中都包含了的元素\n#输出\n&#123;&#39;a&#39;, &#39;c&#39;&#125;\n\nprint(a ^ b)                              # 不同时包含于a和b的元素\n#输出\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;m&#39;, &#39;d&#39;&#125;\n</code></pre>\n<p><strong>[ 添加元素 ]</strong></p>\n<ul>\n<li><strong>s.add( x )</strong> 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.add(&quot;Facebook&quot;)\nprint(thisset)\n#输出\n&#123;&#39;Taobao&#39;, &#39;Facebook&#39;, &#39;Google&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<ul>\n<li><strong>s.update( x )</strong> 参数可以是列表，元组，字典等</li>\n</ul>\n<pre><code class=\"python\">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))\nthisset.update(&#123;1,3&#125;)\nprint(thisset)\n#输出\n&#123;1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n\nthisset.update([1,4],[5,6])\nprint(thisset)\n#输出\n&#123;1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;\n</code></pre>\n<p><strong>[ 移除元素 ]</strong></p>\n<pre><code class=\"python\">s.remove( x )        # 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误\n\ns.discard( x )        # 移除集合中的元素，如果元素不存在，不会发生错误\n\ns.pop()                # 随机删除集合中的一个元素，在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）\n</code></pre>\n<p><strong>[ 集合函数 ]</strong></p>\n<pre><code class=\"python\">add()            #为集合添加元素\nclear()            #移除集合中的所有元素\ncopy()            #拷贝一个集合\nunion()            #返回两个集合的并集\nupdate()        #给集合添加元素\n</code></pre>\n<h2 id=\"Python-输入输出\"><a href=\"#Python-输入输出\" class=\"headerlink\" title=\"Python 输入输出\"></a>Python 输入输出</h2><h3 id=\"标准输入输出函数\"><a href=\"#标准输入输出函数\" class=\"headerlink\" title=\"标准输入输出函数\"></a>标准输入输出函数</h3><ul>\n<li><strong>print()</strong> 标准输出函数</li>\n</ul>\n<pre><code class=\"python\">#  换行符  \\n,  end=&#39;\\n&#39;\nprint(&#39;aaa&#39; end=&#39;&#39;) # 不换行\nprint(&#39;bbb&#39; end=&#39;#&#39;) # bbb 和 ccc 之间用 # 连接\nprint(&#39;ccc&#39;)\n\n# 格式化输出\nname = &#39;鲁班&#39;\nage = 20\n\n&gt; %s ==&gt; string\n&gt; %d ==&gt; digit(数字)\n&gt; %f ==&gt; float\n&gt; %% ==&gt; 输出 %\n\nprint(&#39;他的名字是&#39; + name +&#39;,他的年龄是&#39; + age + &#39;。&#39;) # 输出格式\nprint(&#39;他的名字是%s,他的年龄是%d。&#39; %(name, age))\n\nprint(&#39;胜率%d%%&#39; % 87)  # %% 表示 %  ==&gt; 87%\n</code></pre>\n<ul>\n<li><strong>input()</strong> 标准输入函数,输入的内容是字符串</li>\n</ul>\n<pre><code class=\"python\">print(&#39;请输入你的姓名：&#39;)\ninput()\n&lt;==&gt; input(&#39;请输入你的姓名：&#39;)\n\n# 保存输入的数据\n\ninput_content = input(&#39;请输入你的姓名：&#39;)\nprint( input_content)\n# 动态\nprint(&#39;欢迎您 %s !&#39; % input_content)\n</code></pre>\n<h2 id=\"Python-分支语句\"><a href=\"#Python-分支语句\" class=\"headerlink\" title=\"Python 分支语句\"></a>Python 分支语句</h2><h3 id=\"if-分支语句\"><a href=\"#if-分支语句\" class=\"headerlink\" title=\"if 分支语句\"></a>if 分支语句</h3><ul>\n<li>比较运算符</li>\n</ul>\n<pre><code>==  相等, !=  不相等, &gt;   大于, &lt;   小于, &gt;=  大于等于, &lt;=  小于等于\n</code></pre>\n<ul>\n<li>if 语句</li>\n</ul>\n<pre><code class=\"python\">if a &gt; b  :\n    ret = a -b\n    else:\n        ret = a + b\n        print(ret)\n</code></pre>\n<ul>\n<li>多个条件之间的关系</li>\n</ul>\n<pre><code class=\"python\"># and(且)  ==&gt; 非 0 为真， 0 为假\nret = 0 and 2 # ==&gt; 第一个条件为假，没有必要检查第二个条件 故 输出第一个条件 0\nret = 1 and 0 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 0\nret = 1 and 2 # ==&gt; 第一个条件为真，第二个条件必须执行   输出第二个条件 2\n\n# or(或)   ==&gt; 一个为真则为真\nret = 1 or 2  # 检查第一个条件，为真， 输出第一个条件 0\nret = 0 or 1  # 第一个条件为假，第二个条件必须执行   输出第二个条件 1\nret = 0 or 0  # 第一个条件为假，第二个条件必须执行   输出第二个条件 0\n\n# 例  and 优先级 高于 or\na = 10\nb = 20\nret = a &gt; b and a or b\n= false and a or b\n= false or b\n= b                 # ==&gt; b 20\nret = a &lt; b and a or b\n= true and a or b\n= a or b\n= a                 # ==&gt; a 10\n# not(非)\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"python\">&quot;&quot;&quot;\n    我不喜欢这个世界，我只喜欢你！\n    &quot;&quot;&quot;\n# while 循环\n\n# i = 1\n# while i &lt;= 100:\n#     print(i)\n#     i += 1\n#\n# print(&#39;END&#39;)\n\n# 1-100 偶数\n\n# i = 1\n# while i &lt;= 100:\n#     # print(i)\n#     # i += 2\n#     if i % 2 == 0:\n#         print(i)\n#     i += 1\n\n# 1-100 累加和\n\n# start = 1\n# end = 100\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# start = int(input(&#39;开始数：&#39;))\n# end = int(input(&#39;结束数：&#39;))\n# total = 0\n# while start &lt;= end:\n#     total = total + start\n#     start += 1\n# print(total)\n\n# 1-100 奇数和\n\n# start = 1\n# total = 0\n# while start &lt;= 100:\n#     if start % 2 != 0:\n#         total = total + start\n#     start += 1\n# print(&#39;奇数和：&#39;,total)\n\n# 打印 *\n\n# n = 1\n# while n &lt;= 5:\n#     print(&#39;*&#39; * n)\n#     n += 1\n\n# 1- 100 除 50 不累加\n\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index != 50:\n#         total = total + index\n#     index += 1\n# print(total)\n# index = 1\n# total = 0\n# while index &lt;= 100:\n#     if index == 50:\n#         index += 1\n#         continue  # 跳过本次循环 不是退出循环\n#     total = total + index\n#     index += 1\n# print(total)\n\n# 大于 50 停止循环\n\n# i = 1\n# while i &lt;= 100:\n#     if i &gt; 50:\n#         break  # 后边的代码不执行，并且终止循环\n#     i += 1\n# print(i)\n\n# 简易版员工管理系统\n# 1 展示信息\n# 2 新增信息\n# 3 修改信息\n# 4 删除信息\n# 5 退出\n\nwhile True:\n    print(&#39;欢迎使用&#39;)\n    print(&#39;*&#39; * 10 + &#39;操作菜单&#39; + &#39;*&#39; * 10)\n\n    print(&#39;1. 展示信息&#39;)\n    print(&#39;2. 新增信息&#39;)\n    print(&#39;3. 修改信息&#39;)\n    print(&#39;4. 删除信息&#39;)\n    print(&#39;5. 退出&#39;)\n    # 保存用户操作\n    user_operation = int(input(&#39;请输入您的操作：&#39;))\n    if user_operation == 1:\n        print(&#39;姓名\\t年龄\\t&#39;)\n        print(&#39;鲁班\\t20\\t&#39;)\n        print(&#39;吕布\\t30\\t&#39;)\n        print(&#39;小乔\\t18\\t&#39;)\n        elif user_operation == 2:\n            name = input(&#39;请输入姓名：&#39;)\n            age = input(&#39;请输入年龄：&#39;)\n            print(&#39;%s 添加成功&#39;% name)\n            elif user_operation == 3:\n                name = input(&#39;请输入修改姓名&#39;)\n                print(&#39;%s 修改成功&#39;% name)\n\n\n                elif user_operation == 4:\n                    name = input(&#39;请输入修改姓名&#39;)\n                    print(&#39;%s 删除成功&#39;% name)\n                    elif user_operation == 4:\n                        print(&#39;退出成功&#39;)\n                        break\n                        else:\n                            print(&#39;输入有误&#39;)\n\n                            print(&#39;*&#39; * 27)\n</code></pre>\n<h2 id=\"Python-函数操作\"><a href=\"#Python-函数操作\" class=\"headerlink\" title=\"Python 函数操作\"></a>Python 函数操作</h2><pre><code class=\"python\"># 定义函数：\ndef 函数名():\n    一行或多行代码\n\n# def sum(a, b):\n#     ret = a + b\n#     return ret\n# result =  sum(10, 20)\n# result = result + 100\n# print(result)\n\n# 两个数之间的所有数之和\n\nstart = int(input(&#39;输入开始数字：&#39;))\nend = int(input(&#39;输入结束数字：&#39;))\ndef sum(start, end):\n    &quot;&quot;&quot;这是我的函数文档&quot;&quot;&quot;\n    if not isinstance(start, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if not isinstance(end, int):\n        print(&#39;请输入整数&#39;)\n        return None\n    if start &gt; end:\n        print(&#39;start 必须小于 end&#39;)\n        return None\n    total = 0\n    whi le start &lt;= end:\n        total = total + start\n        start += 1\n        print(total)\n\n        sum(start, end)\n\n        # 输入运算符进行计算\n\n        while True:\n            Operator = input(&#39;请输入运算符&#39;)\n\n            def Operation(left, right, Oper):\n                a = left\n                b = right\n                if Oper == &#39;+&#39;:\n                    result = a + b\n                    elif Oper == &#39;-&#39;:\n                        result = a - b\n                        elif Oper == &#39;*&#39;:\n                            result = a * b\n                            elif Oper == &#39;/&#39;:\n                                result = a / b\n                                else:\n                                    print(&#39;输入有误&#39;)\n                                    result = None\n                                    return result\n\n                                result = Operation(10, 20, Operator)\n                                print(result)\n</code></pre>\n<h2 id=\"数据类型基础操作\"><a href=\"#数据类型基础操作\" class=\"headerlink\" title=\"数据类型基础操作\"></a>数据类型基础操作</h2><h3 id=\"字符串（String）-1\"><a href=\"#字符串（String）-1\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h3><blockquote>\n<p>维度：方法的作用，参数，返回值，原数据是否改变</p>\n</blockquote>\n<h5 id=\"符串的遍历\"><a href=\"#符串的遍历\" class=\"headerlink\" title=\"符串的遍历\"></a>符串的遍历</h5><pre><code class=\"python\">istr = &#39;hello&#39;\n# 方法一\ni = 0\nwhile i &lt; 5:\n    print(istr[i])\n    i += 1\n    # 方法二\n    for v in istr:\n        print(v, end=&#39; &#39;)\n</code></pre>\n<h5 id=\"字符串的替换\"><a href=\"#字符串的替换\" class=\"headerlink\" title=\"字符串的替换\"></a>字符串的替换</h5><ul>\n<li><strong>replace()</strong> [ str.replace(‘old’, ‘new’, 替换次数) ]</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;) # 将所有的 y 替换成 ‘#’\nnewstr = strEmail.replace(&#39;y&#39;,&#39;#&#39;, 1) # 只替换第一次出现的 y\n</code></pre>\n<h5 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h5><ul>\n<li><strong>find()</strong></li>\n<li>返回第一次出现的位置，如果没有则返回 -1</li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 找到 @ 的位置\n\nstrEmail.find(&#39;@&#39;)\n</code></pre>\n<h5 id=\"字符串的切片\"><a href=\"#字符串的切片\" class=\"headerlink\" title=\"字符串的切片\"></a>字符串的切片</h5><pre><code class=\"python\"># 以 @ 获取前后内容\n\nstrEmail = &#39;zxymaibox@yeah.net&#39;\npossion = strEmail.find(&#39;@&#39;)  # 10\n\n# *****************\n\nstrEmail[起始 : 结束 : 步长]\n\n# 起始值不写表示从 0 开始\nprint(strEmail[: 9])\n\n# 结束值不写表示到最后\nprint(strEmail[10:])\n\n# 步长(第三个值表示步长)\nprint(strEmail[0: 9: 1])  &lt;==&gt; print(strEmail[0 : 9]) # zxymaibox\nprint(strEmail[0: 9: 2])  # zyabx\nprint(strEmail[0: 9: 3])  # zmb\n\n# 起始 : 结束 : 步长 可以是负值\nprint(strEmail[9: 1: -1]  # xobiamyxz\n\n      # 字符串的逆序\n      print(strEmail[:: -1])\n\n      # *****************\n\n      # 切片语法左闭右开\n\n      方法一：\n\n      username =&gt; print(strEmail[0: 9])\n      # 获取字符串长度\n      length = len(strEmail)\n\n      houzhui =&gt; print(strEmail[10: length])\n\n      方法二：\n\n      username = strEmail[:possion]\n      houzhui = strEmail[possion + 1:]\n      print(username, houzhui)\n</code></pre>\n<h5 id=\"字符串拆分成列表\"><a href=\"#字符串拆分成列表\" class=\"headerlink\" title=\"字符串拆分成列表\"></a>字符串拆分成列表</h5><ul>\n<li><strong>split()</strong></li>\n<li>返回拆分后的列表</li>\n</ul>\n<pre><code class=\"python\"># 以 @ 获取前后内容\nstrEmail = &#39;zxymaibox@yeah.net&#39;\n\n# 查询某一字符出现的次数\nstrCount = strEmail.count(&#39;@&#39;)\n\nif strCount == 1:\n    result = strEmail.split(&#39;@&#39;)\n\n    print(result)  # =&gt; [&#39;zxymaibox&#39;, &#39;yeah.net&#39;]\n\n    username = result[0]\n    houzhui = result[1]\n</code></pre>\n<h5 id=\"查询某一字符出现的次数\"><a href=\"#查询某一字符出现的次数\" class=\"headerlink\" title=\"查询某一字符出现的次数\"></a>查询某一字符出现的次数</h5><ul>\n<li><strong>count()</strong></li>\n</ul>\n<pre><code class=\"python\">strEmail = &#39;zxymaibox@yeah.net&#39;\n\nprint(strEmail.count(&#39;@&#39;)) # =&gt; 1\nprint(strEmail.count(&#39;y&#39;)) # =&gt; 2\n</code></pre>\n<h5 id=\"判断字符串是否全为字母\"><a href=\"#判断字符串是否全为字母\" class=\"headerlink\" title=\"判断字符串是否全为字母\"></a>判断字符串是否全为字母</h5><ul>\n<li><strong>isalpha()</strong> [str.isalpha()]</li>\n<li>返回布尔值</li>\n</ul>\n<h5 id=\"字符串去除两侧空格\"><a href=\"#字符串去除两侧空格\" class=\"headerlink\" title=\"字符串去除两侧空格\"></a>字符串去除两侧空格</h5><ul>\n<li><strong>strip()</strong></li>\n<li>返回新的字符串</li>\n</ul>\n<h3 id=\"列表（List）-1\"><a href=\"#列表（List）-1\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h3><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 列表支持切片语法,可以切成小列表\nlist[:: -1]\n</code></pre>\n<h5 id=\"列表的遍历\"><a href=\"#列表的遍历\" class=\"headerlink\" title=\"列表的遍历\"></a>列表的遍历</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 方法一\nindex = 0\nlength = len(list)\nwhile index &lt; length:\n    print(list[index])\n    index += 1\n    # 方法二\n    for val in list:\n        print(val)\n</code></pre>\n<h5 id=\"列表元素插入\"><a href=\"#列表元素插入\" class=\"headerlink\" title=\"列表元素插入\"></a>列表元素插入</h5><pre><code class=\"python\">list = [10, 20, 30, 40]\n# 尾部插入\nlist.append(30)\n# 指定位置插入\nlist.insert(0, 200)\n</code></pre>\n<h5 id=\"列表元素删除\"><a href=\"#列表元素删除\" class=\"headerlink\" title=\"列表元素删除\"></a>列表元素删除</h5><ul>\n<li><strong>pop()</strong> 位置删除，[ 无参数的时候，默认删除最后一个位置的元素 ]</li>\n<li><strong>remove()</strong> 值删除， [ 默认删除第一次出现的值 ]</li>\n<li>**clear() **清空列表，</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40, 20]\n# 位置删除 pop\nlist.pop()\nlist.pop(2)\n#  值删除\nlist.remove(20)\n# 列表清空\nlist.clear()\n</code></pre>\n<h5 id=\"列表元素查找和修改\"><a href=\"#列表元素查找和修改\" class=\"headerlink\" title=\"列表元素查找和修改\"></a>列表元素查找和修改</h5><ul>\n<li><strong>index(oldValue)</strong> [ 如果值存在返回位置，不存在会报错 ]</li>\n<li><strong>count(oldValue)</strong> [ 查找出现的次数，如果不为 0 ，再使用 index 方法 ]</li>\n</ul>\n<pre><code class=\"python\">list = [10, 20, 30, 40]\n# if list.count(20) != 0:\n#     indexC = list.index(20)\n#     # 修改值\n#     list[indexC] = 20\n\n或\n#  in 和 not in 判断值是否存在\n\nif 20 in list:\n    indexC = list.index(20)\n    # 修改值\n    list[indexC] = 20\n</code></pre>\n<h5 id=\"列表元素排序\"><a href=\"#列表元素排序\" class=\"headerlink\" title=\"列表元素排序\"></a>列表元素排序</h5><ul>\n<li><strong>sort()</strong> [默认从小到大, reverse= false ]</li>\n<li>参数： reverse=True 实现降序排列；</li>\n<li>逆序： reverse() [ 实现列表的逆序 ]</li>\n</ul>\n<pre><code class=\"python\"># 创建一个包含 10 个随机数的列表\nimport random\nlist = []\ni = 0\nwhile i &lt; 10:\n    randomNum =  random.randint(1, 100) # 1-100 的随机数\n    list.append(randomNum)\n    i += 1\n    print(list)\n    list.sort()\n</code></pre>\n<h5 id=\"两个列表元素追加\"><a href=\"#两个列表元素追加\" class=\"headerlink\" title=\"两个列表元素追加\"></a>两个列表元素追加</h5><ul>\n<li><strong>extend()</strong></li>\n</ul>\n<pre><code class=\"python\">list1 = [1,2,3,4]\nlist2 = [10,20,30,40]\n\nlist1.extend(list2)\nprint(list1)  # [1,2,3,4,10,20,30,40]\n</code></pre>\n<h3 id=\"元祖（Tuple）\"><a href=\"#元祖（Tuple）\" class=\"headerlink\" title=\"元祖（Tuple）\"></a>元祖（Tuple）</h3><p><strong>可以理解为列表，但是他的元素不可修改</strong></p>\n<ul>\n<li>元组一旦创建不可修改</li>\n<li>元组只有一个元素时，需要在尾部添加一个逗号</li>\n<li>元组比列表更节省空间</li>\n<li>元组是序列式容器支持索引、切片操作</li>\n</ul>\n<pre><code class=\"python\"># 定义元组\ntuple = (10,20,30,40)\n\n# 只支持不能修改元素的方法\n# 查询元素\n- index\n- count\n# 遍历操作\n- while\n- for\n</code></pre>\n<h3 id=\"字典（Dictionary）-1\"><a href=\"#字典（Dictionary）-1\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><pre><code class=\"python\"># 字典的定义，键是唯一的，值可以重复，不支持索引和切片\ndict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n</code></pre>\n<h5 id=\"字典元素访问\"><a href=\"#字典元素访问\" class=\"headerlink\" title=\"字典元素访问\"></a>字典元素访问</h5><pre><code class=\"python\">dict = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 获取值\n1. print(dict[&#39;age&#39;])   # 20 , 不存在会报错\n2. 使用 get 方法\nprint(dict.get(&#39;age&#39;, &#39;我是默认返回值&#39;))  # 20 , 不存在返回 None , 可以指定默认返回值\n\n## 添加和修改元素（如果 key 存在就是修改元素，不存在则添加元素）\ndict[&#39;score&#39;] = 99       # 添加元素\ndict[&#39;name&#39;] = &#39;时光静好&#39; # 修改元素\n</code></pre>\n<h5 id=\"字典元素删除\"><a href=\"#字典元素删除\" class=\"headerlink\" title=\"字典元素删除\"></a>字典元素删除</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\n## 删除元素(也适用于列表)\ndel  person[&#39;age&#39;]\n\n## 清空字典\nperson.clear()\n\n## 删除整个字典\ndel person\n</code></pre>\n<h5 id=\"字典的遍历\"><a href=\"#字典的遍历\" class=\"headerlink\" title=\"字典的遍历\"></a>字典的遍历</h5><pre><code class=\"python\">person = &#123;\n    &#39;name&#39;: &#39;serendipity&#39;,\n    &#39;gender&#39;: &#39;女&#39;\n    &#39;age&#39; : &#39;20&#39;,\n&#125;\n\nfor val in person:\n    print(val)   # name,gender,age 默认只能遍历键\n\n    # ***********************\n\n    # 遍历字典的键\n    personKeyList = person.keys()\n    print(personKeyList)  # dict_keys 类型： dict_keys([&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;])\n\n    # 把 dict_keys 类型 转换 成列表类型\n    print(list(personKeyList))  # [&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;]\n\n\n    # 遍历字典的值\n    personValList = person.values()\n    print(personValList)  # dict_values 类型： dict_values([&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;])\n\n    # 把 dict_values 类型 转换 成列表类型\n    print(list(personValList))  # [&#39;serendipity&#39;, &#39;女&#39;, &#39;20&#39;]\n\n\n    # 键值对遍历\n    personKeyValList = person.items()\n    print(personKeyValList)  # dict_items 类型： dict_items([(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)])\n\n    # 把 dict_items 类型 转换 成列表类型\n    print(list(personKeyValList))  # [(&#39;name&#39;: &#39;serendipity&#39;),(&#39;gender&#39;: &#39;女&#39;), (&#39;age&#39; : &#39;20&#39;)]\n\n\n    keyValList = list(person.items())\n\n    for value in keyValList:\n        print(value)\n        print(&#39;key:&#39;, value[0],&#39;value:&#39;, value[1])\n\n\n        i = 0\n        while i &lt; len(keyValList):\n            print(&#39;key:&#39;, keyValList[i][0], &#39;value:&#39;, keyValList[i][1] )\n            i += 1\n</code></pre>\n<h3 id=\"集合（Set）-1\"><a href=\"#集合（Set）-1\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><h2 id=\"Python-文件操作\"><a href=\"#Python-文件操作\" class=\"headerlink\" title=\"Python 文件操作\"></a>Python 文件操作</h2><h3 id=\"文件的打开和关闭\"><a href=\"#文件的打开和关闭\" class=\"headerlink\" title=\"文件的打开和关闭\"></a>文件的打开和关闭</h3><ul>\n<li><strong>open(文件名, 访问模式)</strong> 打开文件 [ 参数： 文件名 ， 访问模式]<ul>\n<li>访问模式： r 以只读方式打开文件（默认）</li>\n<li>访问模式： w 打开文件只用于写入</li>\n<li>访问模式： a 打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n<li>访问模式： rb 以二进制格式打开文件用于只读，文件指针放在开头</li>\n<li>访问模式： wb 以二进制格式打开文件用于写入，文件存在，将其覆盖，文件不存在，创建新文件进行写入</li>\n<li>访问模式： wb 以二进制格式打开文件用于追加，文件存在，新的内容写入已有内容之后，文件不存在，创建新文件进行写入</li>\n</ul>\n</li>\n<li><strong>close()</strong> 关闭文件</li>\n</ul>\n<p>** pyCharm 文件编码: file encodings: GBK **</p>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖&quot;\nfileA.write(content)\n\n# 关闭文件\nfileA.close()\n\n# 读取文件\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\ncontent = fileB.read()\nprint(content)\n\nfileB.close()\n</code></pre>\n<h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3><ul>\n<li><strong>write()</strong>         一次只可以写一行</li>\n<li><strong>writelines()</strong>   一次写入多行，以列表形式</li>\n<li><strong>read()</strong>         没有参数读取文件所有数据，指定参数（1,2,3… …）读取指定个数的数据</li>\n<li><strong>readline()</strong>     一次读取一行</li>\n<li><strong>readlines()</strong>   一次读取多行</li>\n</ul>\n<pre><code class=\"python\">#  写入文件\nfileA= open(&#39;test.md&#39;, &#39;w&#39;) # 参数 文件名， 访问模式\n\ncontent= &quot;1. 时光静好，岁月安然 \\n 一人之间，山水江湖!&quot;\nfileA.write(content)\n\nlines = [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\nfileA.writelines(lines)\n\n# 关闭文件\nfileA.close()\n\n## 读取文件\n\nfileB= open(&#39;test.md&#39;, &#39;r&#39;)\n\n&quot;&quot;&quot;文件内容:\n\n    时光静好，岁月安然.\n    一人之间，山水江湖!\n    &quot;&quot;&quot;\n\ncontent = fileB.read()\ncontent1 = fileB.readline()\ncontent2 = fileB.readline()\n\ncontent4 = fileB.readlines()\n\nprint(content)  # 读取所有内容\nprint(content1) # 时光静好，岁月安然.\nprint(content2) # 一人之间，山水江湖!(因为第一行content1 已经读过，所以读取下一行内容)\n\nprint(content4) # [&#39;时光静好，岁月安然.\\n&#39;, &#39;一人之间，山水江湖!\\n&#39;]\n\n# 按行读取\nfor line in content4:\n    if line[-1] == &#39;\\n&#39;:\n        print(line[:-1])\n        else:\n            print(line)\n\n            fileB.close()\n</code></pre>\n<h3 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h3><pre><code class=\"python\"># 获取要拷贝的文件名\n\nold_fileName = input(&#39;请输入您要拷贝的文件名：&#39;)\n\n# 读取拷贝文件内容\n\nnew_fileName = old_fileName + &#39;bk&#39;\n\n# 打开新的文件\n\nfile_old = open(old_fileName, &#39;rb&#39;)\nfile_new = open(new_fileName, &#39;wb&#39;)\n\n# 将老文件内容写入新文件\n\nold_fileContent = file_old.read()\nfile_new.write(old_fileContent)\n\n# 关闭文件\n\nfile_old.close()\nfile_new.close()\n</code></pre>\n<h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><pre><code class=\"python\">import os\n\n# 文件重命名\nos.rename(&#39;test.md&#39;, &#39;hello.txt&#39;)\n\n# 文件删除\nos.remove(&#39;test.md&#39;) # 路径问题：写绝对路径\n\n# 创建和删除目录\nos.mkdir(&#39;abc&#39;)\nos.rmdir(&#39;abc&#39;)\n\n# 获取目录的文件列表\nos.listdir(&#39;abc&#39;)\n\n# 获取和设置工作目录\nos.getCWD()  # CWD 默认当前文件路径\nos.chdir(&#39;\\Users\\YII\\Desktop\\\\&#39;) # 设置默认工作目录\n</code></pre>\n"},{"title":"Vue ElementUI","urlname":"nu3r7c","date":"2020-01-04T14:12:25.000Z","abbrlink":462816702,"_content":"\n## Element UI\n\n> - npm i element-ui -S\n\n```javascript\n/**\n *  src/main.js\n */\n\n//  Element UI\nimport ElementUI from \"element-ui\";\nimport \"element-ui/lib/theme-chalk/index.css\";\n\nVue.use(ElementUI); // 全局使用\n```\n\n## 导航守卫\n\n> - 全局守卫\n> - 路由守卫\n> - 组件守卫\n\n```javascript\n// 组件守卫\n    beforeRouteEnter(to, from, next) {\n        // to 表示要去的路径  from表示离开时的路径\n\n        console.log(to, from, next);\n        // 在渲染该组件的对应路由被 confirm 前调用\n        // 因为当守卫执行前，组件实例还没被创建\n        // 不能访问组件 this\n        // 访问方式 ：\n        next(vm => {\n            // 通过 vm 访问组件实例\n            console.log(vm);\n        });\n    },\n    beforeRouteUpdate(to, from, next) {\n        // 在当前路由改变，但是该组件被复用时调用\n        // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n        // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n        // 可以访问组件实例 `this`\n    },\n    beforeRouteLeave(to, from, next) {\n        // 导航离开该组件的对应路由时调用\n        // 可以访问组件实例 `this`\n\n        // 如果没有填写内容并且没有提交\n        if (!this.ruleForm.username && !this.flag) {\n            this.$confirm('是否提交', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning',\n            })\n            .then(() => {\n               next();\n            })\n            .catch(() => {  });\n        }else {\n            next()\n        }\n    },\n```\n\n## Vue 仿写 Element UI 弹层\n\n```javascript\n/**\n *  App.vue\n */\n\n// import Message from './Components/Message.js';// 弹窗第一种方式\n// export default {\n//     methods: {\n//         showMessage() {\n//             Message.info({\n//                 message: '你好',\n//                 duration: 2000,\n//             })\n//         }\n//     }\n// }\nimport Vue from 'vue';\nimport { Message } from './Components/Message.js'; // 弹窗第二种方式, 暴露全局\nVue.use(Message); // install\nexport default {\n    methods: {\n        showMessage() {\n            this.$message.info({\n                message: '你好',\n                duration: 2000,\n            })\n        }\n    }\n}\n\n\n/**\n * 组件的核心逻辑,渲染 message 组件 并且调用核心方法\n *  message.js\n */\n\nimport Vue from 'vue';\nimport MessagePopup from './MessagePopup.vue';\n\n\n**重点技巧知识**\n\nlet getInstance = () => {\n    let vm = new Vue({\n        render: h => h(MessagePopup),\n    });\n    vm.$mount(); // 没有传参数的时候，挂载在内存中,还没有挂载到 dom 元素\n    // 通过 vm.$el 获取 然后挂载到根实例 此时 Message 组件 就是 vm 实例的子组件\n    document.body.appendChild(vm.$el);\n    //  拿取子组件上的核心方法  $parent $children（获取所有的子组件）\n    let component = vm.$children[0];\n    return {\n        add: options => {\n            component.add(options); //add 再次封装\n        },\n    };\n};\n\n**重点技巧知识**\n// 单例模式解决 多次初始化 vue 的问题\nlet instance;\nlet getIns = () => {\n    //判断  instance 有无值，有值 说明 vue 已经初始化过了\n    instance = instance || getInstance();\n    return instance;\n};\n\n\nconst Message = {\n    info(options) {\n        getIns().add(options);\n    },\n    success() {},\n};\n//  export default Message;\n\n\n\n// 使用 vue.use 会调用 install 方法\n\n   Message.install = (Vue)=> {\n    //    alert(1)\n        // Message 的方法 放入 $message 中\n        let $message = {}\n        Object.keys(Message).forEach(key=>{\n            $message[key] = Message[key]\n        })\n\n        // 把 $message 放入 Vue 原型上\n        // console.log($message);\n        Vue.prototype.$message = $message;\n    }\n\n//  第二种方式导出\nexport { Message };\n```\n\n## 基于 Element UI 封装树形控件\n\n> - 树形菜单的接口\n> - 通过 axios 调用接口\n> - 格式化数据\n> - 自定义树形组件\n> - 扩展操作的列表\n> - 点击切换输入框\n> - 确认修改\n> - 删除文件或文件夹\n\n---\n\n以上更新于 2020 年 1 月 4 日\n\n---\n","source":"_posts/语雀/nu3r7c.md","raw":"---\ntitle: Vue ElementUI\nurlname: nu3r7c\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 462816702\n---\n\n## Element UI\n\n> - npm i element-ui -S\n\n```javascript\n/**\n *  src/main.js\n */\n\n//  Element UI\nimport ElementUI from \"element-ui\";\nimport \"element-ui/lib/theme-chalk/index.css\";\n\nVue.use(ElementUI); // 全局使用\n```\n\n## 导航守卫\n\n> - 全局守卫\n> - 路由守卫\n> - 组件守卫\n\n```javascript\n// 组件守卫\n    beforeRouteEnter(to, from, next) {\n        // to 表示要去的路径  from表示离开时的路径\n\n        console.log(to, from, next);\n        // 在渲染该组件的对应路由被 confirm 前调用\n        // 因为当守卫执行前，组件实例还没被创建\n        // 不能访问组件 this\n        // 访问方式 ：\n        next(vm => {\n            // 通过 vm 访问组件实例\n            console.log(vm);\n        });\n    },\n    beforeRouteUpdate(to, from, next) {\n        // 在当前路由改变，但是该组件被复用时调用\n        // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n        // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n        // 可以访问组件实例 `this`\n    },\n    beforeRouteLeave(to, from, next) {\n        // 导航离开该组件的对应路由时调用\n        // 可以访问组件实例 `this`\n\n        // 如果没有填写内容并且没有提交\n        if (!this.ruleForm.username && !this.flag) {\n            this.$confirm('是否提交', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning',\n            })\n            .then(() => {\n               next();\n            })\n            .catch(() => {  });\n        }else {\n            next()\n        }\n    },\n```\n\n## Vue 仿写 Element UI 弹层\n\n```javascript\n/**\n *  App.vue\n */\n\n// import Message from './Components/Message.js';// 弹窗第一种方式\n// export default {\n//     methods: {\n//         showMessage() {\n//             Message.info({\n//                 message: '你好',\n//                 duration: 2000,\n//             })\n//         }\n//     }\n// }\nimport Vue from 'vue';\nimport { Message } from './Components/Message.js'; // 弹窗第二种方式, 暴露全局\nVue.use(Message); // install\nexport default {\n    methods: {\n        showMessage() {\n            this.$message.info({\n                message: '你好',\n                duration: 2000,\n            })\n        }\n    }\n}\n\n\n/**\n * 组件的核心逻辑,渲染 message 组件 并且调用核心方法\n *  message.js\n */\n\nimport Vue from 'vue';\nimport MessagePopup from './MessagePopup.vue';\n\n\n**重点技巧知识**\n\nlet getInstance = () => {\n    let vm = new Vue({\n        render: h => h(MessagePopup),\n    });\n    vm.$mount(); // 没有传参数的时候，挂载在内存中,还没有挂载到 dom 元素\n    // 通过 vm.$el 获取 然后挂载到根实例 此时 Message 组件 就是 vm 实例的子组件\n    document.body.appendChild(vm.$el);\n    //  拿取子组件上的核心方法  $parent $children（获取所有的子组件）\n    let component = vm.$children[0];\n    return {\n        add: options => {\n            component.add(options); //add 再次封装\n        },\n    };\n};\n\n**重点技巧知识**\n// 单例模式解决 多次初始化 vue 的问题\nlet instance;\nlet getIns = () => {\n    //判断  instance 有无值，有值 说明 vue 已经初始化过了\n    instance = instance || getInstance();\n    return instance;\n};\n\n\nconst Message = {\n    info(options) {\n        getIns().add(options);\n    },\n    success() {},\n};\n//  export default Message;\n\n\n\n// 使用 vue.use 会调用 install 方法\n\n   Message.install = (Vue)=> {\n    //    alert(1)\n        // Message 的方法 放入 $message 中\n        let $message = {}\n        Object.keys(Message).forEach(key=>{\n            $message[key] = Message[key]\n        })\n\n        // 把 $message 放入 Vue 原型上\n        // console.log($message);\n        Vue.prototype.$message = $message;\n    }\n\n//  第二种方式导出\nexport { Message };\n```\n\n## 基于 Element UI 封装树形控件\n\n> - 树形菜单的接口\n> - 通过 axios 调用接口\n> - 格式化数据\n> - 自定义树形组件\n> - 扩展操作的列表\n> - 点击切换输入框\n> - 确认修改\n> - 删除文件或文件夹\n\n---\n\n以上更新于 2020 年 1 月 4 日\n\n---\n","slug":"语雀/nu3r7c","published":1,"updated":"2022-03-03T11:26:07.582Z","_id":"cl0awjjpg000v081b7kba59zi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Element-UI\"><a href=\"#Element-UI\" class=\"headerlink\" title=\"Element UI\"></a>Element UI</h2><blockquote>\n<ul>\n<li>npm i element-ui -S</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">/**\n *  src/main.js\n */\n\n//  Element UI\nimport ElementUI from &quot;element-ui&quot;;\nimport &quot;element-ui/lib/theme-chalk/index.css&quot;;\n\nVue.use(ElementUI); // 全局使用\n</code></pre>\n<h2 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h2><blockquote>\n<ul>\n<li>全局守卫</li>\n<li>路由守卫</li>\n<li>组件守卫</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 组件守卫\n    beforeRouteEnter(to, from, next) &#123;\n        // to 表示要去的路径  from表示离开时的路径\n\n        console.log(to, from, next);\n        // 在渲染该组件的对应路由被 confirm 前调用\n        // 因为当守卫执行前，组件实例还没被创建\n        // 不能访问组件 this\n        // 访问方式 ：\n        next(vm =&gt; &#123;\n            // 通过 vm 访问组件实例\n            console.log(vm);\n        &#125;);\n    &#125;,\n    beforeRouteUpdate(to, from, next) &#123;\n        // 在当前路由改变，但是该组件被复用时调用\n        // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n        // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n        // 可以访问组件实例 `this`\n    &#125;,\n    beforeRouteLeave(to, from, next) &#123;\n        // 导航离开该组件的对应路由时调用\n        // 可以访问组件实例 `this`\n\n        // 如果没有填写内容并且没有提交\n        if (!this.ruleForm.username &amp;&amp; !this.flag) &#123;\n            this.$confirm(&#39;是否提交&#39;, &#39;提示&#39;, &#123;\n                confirmButtonText: &#39;确定&#39;,\n                cancelButtonText: &#39;取消&#39;,\n                type: &#39;warning&#39;,\n            &#125;)\n            .then(() =&gt; &#123;\n               next();\n            &#125;)\n            .catch(() =&gt; &#123;  &#125;);\n        &#125;else &#123;\n            next()\n        &#125;\n    &#125;,\n</code></pre>\n<h2 id=\"Vue-仿写-Element-UI-弹层\"><a href=\"#Vue-仿写-Element-UI-弹层\" class=\"headerlink\" title=\"Vue 仿写 Element UI 弹层\"></a>Vue 仿写 Element UI 弹层</h2><pre><code class=\"javascript\">/**\n *  App.vue\n */\n\n// import Message from &#39;./Components/Message.js&#39;;// 弹窗第一种方式\n// export default &#123;\n//     methods: &#123;\n//         showMessage() &#123;\n//             Message.info(&#123;\n//                 message: &#39;你好&#39;,\n//                 duration: 2000,\n//             &#125;)\n//         &#125;\n//     &#125;\n// &#125;\nimport Vue from &#39;vue&#39;;\nimport &#123; Message &#125; from &#39;./Components/Message.js&#39;; // 弹窗第二种方式, 暴露全局\nVue.use(Message); // install\nexport default &#123;\n    methods: &#123;\n        showMessage() &#123;\n            this.$message.info(&#123;\n                message: &#39;你好&#39;,\n                duration: 2000,\n            &#125;)\n        &#125;\n    &#125;\n&#125;\n\n\n/**\n * 组件的核心逻辑,渲染 message 组件 并且调用核心方法\n *  message.js\n */\n\nimport Vue from &#39;vue&#39;;\nimport MessagePopup from &#39;./MessagePopup.vue&#39;;\n\n\n**重点技巧知识**\n\nlet getInstance = () =&gt; &#123;\n    let vm = new Vue(&#123;\n        render: h =&gt; h(MessagePopup),\n    &#125;);\n    vm.$mount(); // 没有传参数的时候，挂载在内存中,还没有挂载到 dom 元素\n    // 通过 vm.$el 获取 然后挂载到根实例 此时 Message 组件 就是 vm 实例的子组件\n    document.body.appendChild(vm.$el);\n    //  拿取子组件上的核心方法  $parent $children（获取所有的子组件）\n    let component = vm.$children[0];\n    return &#123;\n        add: options =&gt; &#123;\n            component.add(options); //add 再次封装\n        &#125;,\n    &#125;;\n&#125;;\n\n**重点技巧知识**\n// 单例模式解决 多次初始化 vue 的问题\nlet instance;\nlet getIns = () =&gt; &#123;\n    //判断  instance 有无值，有值 说明 vue 已经初始化过了\n    instance = instance || getInstance();\n    return instance;\n&#125;;\n\n\nconst Message = &#123;\n    info(options) &#123;\n        getIns().add(options);\n    &#125;,\n    success() &#123;&#125;,\n&#125;;\n//  export default Message;\n\n\n\n// 使用 vue.use 会调用 install 方法\n\n   Message.install = (Vue)=&gt; &#123;\n    //    alert(1)\n        // Message 的方法 放入 $message 中\n        let $message = &#123;&#125;\n        Object.keys(Message).forEach(key=&gt;&#123;\n            $message[key] = Message[key]\n        &#125;)\n\n        // 把 $message 放入 Vue 原型上\n        // console.log($message);\n        Vue.prototype.$message = $message;\n    &#125;\n\n//  第二种方式导出\nexport &#123; Message &#125;;\n</code></pre>\n<h2 id=\"基于-Element-UI-封装树形控件\"><a href=\"#基于-Element-UI-封装树形控件\" class=\"headerlink\" title=\"基于 Element UI 封装树形控件\"></a>基于 Element UI 封装树形控件</h2><blockquote>\n<ul>\n<li>树形菜单的接口</li>\n<li>通过 axios 调用接口</li>\n<li>格式化数据</li>\n<li>自定义树形组件</li>\n<li>扩展操作的列表</li>\n<li>点击切换输入框</li>\n<li>确认修改</li>\n<li>删除文件或文件夹</li>\n</ul>\n</blockquote>\n<hr>\n<p>以上更新于 2020 年 1 月 4 日</p>\n<hr>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"Element-UI\"><a href=\"#Element-UI\" class=\"headerlink\" title=\"Element UI\"></a>Element UI</h2><blockquote>\n<ul>\n<li>npm i element-ui -S</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">/**\n *  src/main.js\n */\n\n//  Element UI\nimport ElementUI from &quot;element-ui&quot;;\nimport &quot;element-ui/lib/theme-chalk/index.css&quot;;\n\nVue.use(ElementUI); // 全局使用\n</code></pre>\n<h2 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h2><blockquote>\n<ul>\n<li>全局守卫</li>\n<li>路由守卫</li>\n<li>组件守卫</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">// 组件守卫\n    beforeRouteEnter(to, from, next) &#123;\n        // to 表示要去的路径  from表示离开时的路径\n\n        console.log(to, from, next);\n        // 在渲染该组件的对应路由被 confirm 前调用\n        // 因为当守卫执行前，组件实例还没被创建\n        // 不能访问组件 this\n        // 访问方式 ：\n        next(vm =&gt; &#123;\n            // 通过 vm 访问组件实例\n            console.log(vm);\n        &#125;);\n    &#125;,\n    beforeRouteUpdate(to, from, next) &#123;\n        // 在当前路由改变，但是该组件被复用时调用\n        // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n        // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n        // 可以访问组件实例 `this`\n    &#125;,\n    beforeRouteLeave(to, from, next) &#123;\n        // 导航离开该组件的对应路由时调用\n        // 可以访问组件实例 `this`\n\n        // 如果没有填写内容并且没有提交\n        if (!this.ruleForm.username &amp;&amp; !this.flag) &#123;\n            this.$confirm(&#39;是否提交&#39;, &#39;提示&#39;, &#123;\n                confirmButtonText: &#39;确定&#39;,\n                cancelButtonText: &#39;取消&#39;,\n                type: &#39;warning&#39;,\n            &#125;)\n            .then(() =&gt; &#123;\n               next();\n            &#125;)\n            .catch(() =&gt; &#123;  &#125;);\n        &#125;else &#123;\n            next()\n        &#125;\n    &#125;,\n</code></pre>\n<h2 id=\"Vue-仿写-Element-UI-弹层\"><a href=\"#Vue-仿写-Element-UI-弹层\" class=\"headerlink\" title=\"Vue 仿写 Element UI 弹层\"></a>Vue 仿写 Element UI 弹层</h2><pre><code class=\"javascript\">/**\n *  App.vue\n */\n\n// import Message from &#39;./Components/Message.js&#39;;// 弹窗第一种方式\n// export default &#123;\n//     methods: &#123;\n//         showMessage() &#123;\n//             Message.info(&#123;\n//                 message: &#39;你好&#39;,\n//                 duration: 2000,\n//             &#125;)\n//         &#125;\n//     &#125;\n// &#125;\nimport Vue from &#39;vue&#39;;\nimport &#123; Message &#125; from &#39;./Components/Message.js&#39;; // 弹窗第二种方式, 暴露全局\nVue.use(Message); // install\nexport default &#123;\n    methods: &#123;\n        showMessage() &#123;\n            this.$message.info(&#123;\n                message: &#39;你好&#39;,\n                duration: 2000,\n            &#125;)\n        &#125;\n    &#125;\n&#125;\n\n\n/**\n * 组件的核心逻辑,渲染 message 组件 并且调用核心方法\n *  message.js\n */\n\nimport Vue from &#39;vue&#39;;\nimport MessagePopup from &#39;./MessagePopup.vue&#39;;\n\n\n**重点技巧知识**\n\nlet getInstance = () =&gt; &#123;\n    let vm = new Vue(&#123;\n        render: h =&gt; h(MessagePopup),\n    &#125;);\n    vm.$mount(); // 没有传参数的时候，挂载在内存中,还没有挂载到 dom 元素\n    // 通过 vm.$el 获取 然后挂载到根实例 此时 Message 组件 就是 vm 实例的子组件\n    document.body.appendChild(vm.$el);\n    //  拿取子组件上的核心方法  $parent $children（获取所有的子组件）\n    let component = vm.$children[0];\n    return &#123;\n        add: options =&gt; &#123;\n            component.add(options); //add 再次封装\n        &#125;,\n    &#125;;\n&#125;;\n\n**重点技巧知识**\n// 单例模式解决 多次初始化 vue 的问题\nlet instance;\nlet getIns = () =&gt; &#123;\n    //判断  instance 有无值，有值 说明 vue 已经初始化过了\n    instance = instance || getInstance();\n    return instance;\n&#125;;\n\n\nconst Message = &#123;\n    info(options) &#123;\n        getIns().add(options);\n    &#125;,\n    success() &#123;&#125;,\n&#125;;\n//  export default Message;\n\n\n\n// 使用 vue.use 会调用 install 方法\n\n   Message.install = (Vue)=&gt; &#123;\n    //    alert(1)\n        // Message 的方法 放入 $message 中\n        let $message = &#123;&#125;\n        Object.keys(Message).forEach(key=&gt;&#123;\n            $message[key] = Message[key]\n        &#125;)\n\n        // 把 $message 放入 Vue 原型上\n        // console.log($message);\n        Vue.prototype.$message = $message;\n    &#125;\n\n//  第二种方式导出\nexport &#123; Message &#125;;\n</code></pre>\n<h2 id=\"基于-Element-UI-封装树形控件\"><a href=\"#基于-Element-UI-封装树形控件\" class=\"headerlink\" title=\"基于 Element UI 封装树形控件\"></a>基于 Element UI 封装树形控件</h2><blockquote>\n<ul>\n<li>树形菜单的接口</li>\n<li>通过 axios 调用接口</li>\n<li>格式化数据</li>\n<li>自定义树形组件</li>\n<li>扩展操作的列表</li>\n<li>点击切换输入框</li>\n<li>确认修改</li>\n<li>删除文件或文件夹</li>\n</ul>\n</blockquote>\n<hr>\n<p>以上更新于 2020 年 1 月 4 日</p>\n<hr>\n"},{"title":"Vue 生命周期","urlname":"pz9rgu","date":"2020-01-04T14:12:25.000Z","abbrlink":2096731031,"_content":"\n## Vue 生命周期\n\n> - beforeCreate   实例初始化之后,可以进行数据观测以及事件的配置\n> - created       实例已经创建完成,响应式属性或方法已经配置完成,可以拿到 data 中的数据,可以进行数据资源的请求(ajax 请求)\n> - beforeMount   挂载前,(确定 el 或 vm.$mount() 是否挂载 dom 元素,以及是否设置 template 选项,如果有则渲染 template 中的内容, 若没有则渲染外部 html )\n> - mounted       挂载后,可以获取到 dom 元素,对 dom 元素进行操作\n> - beforeUpdate   更新前\n> - updated       更新后   依赖于 dom 操作 ,不可更新 data 中的数据,会进入死循环\n> - beforeDestroy 销毁前   调用 vm.$destroy() 进入销毁期\n> - destroyed     销毁后   执行一些优化操作,如 清空定时器 销毁子组件 解除事件的绑定\n","source":"_posts/语雀/pz9rgu.md","raw":"---\ntitle: Vue 生命周期\nurlname: pz9rgu\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 2096731031\n---\n\n## Vue 生命周期\n\n> - beforeCreate   实例初始化之后,可以进行数据观测以及事件的配置\n> - created       实例已经创建完成,响应式属性或方法已经配置完成,可以拿到 data 中的数据,可以进行数据资源的请求(ajax 请求)\n> - beforeMount   挂载前,(确定 el 或 vm.$mount() 是否挂载 dom 元素,以及是否设置 template 选项,如果有则渲染 template 中的内容, 若没有则渲染外部 html )\n> - mounted       挂载后,可以获取到 dom 元素,对 dom 元素进行操作\n> - beforeUpdate   更新前\n> - updated       更新后   依赖于 dom 操作 ,不可更新 data 中的数据,会进入死循环\n> - beforeDestroy 销毁前   调用 vm.$destroy() 进入销毁期\n> - destroyed     销毁后   执行一些优化操作,如 清空定时器 销毁子组件 解除事件的绑定\n","slug":"语雀/pz9rgu","published":1,"updated":"2022-03-03T11:26:07.583Z","_id":"cl0awjjpg000w081bh5xa89ep","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Vue-生命周期\"><a href=\"#Vue-生命周期\" class=\"headerlink\" title=\"Vue 生命周期\"></a>Vue 生命周期</h2><blockquote>\n<ul>\n<li>beforeCreate   实例初始化之后,可以进行数据观测以及事件的配置</li>\n<li>created       实例已经创建完成,响应式属性或方法已经配置完成,可以拿到 data 中的数据,可以进行数据资源的请求(ajax 请求)</li>\n<li>beforeMount   挂载前,(确定 el 或 vm.$mount() 是否挂载 dom 元素,以及是否设置 template 选项,如果有则渲染 template 中的内容, 若没有则渲染外部 html )</li>\n<li>mounted       挂载后,可以获取到 dom 元素,对 dom 元素进行操作</li>\n<li>beforeUpdate   更新前</li>\n<li>updated       更新后   依赖于 dom 操作 ,不可更新 data 中的数据,会进入死循环</li>\n<li>beforeDestroy 销毁前   调用 vm.$destroy() 进入销毁期</li>\n<li>destroyed     销毁后   执行一些优化操作,如 清空定时器 销毁子组件 解除事件的绑定</li>\n</ul>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"Vue-生命周期\"><a href=\"#Vue-生命周期\" class=\"headerlink\" title=\"Vue 生命周期\"></a>Vue 生命周期</h2><blockquote>\n<ul>\n<li>beforeCreate   实例初始化之后,可以进行数据观测以及事件的配置</li>\n<li>created       实例已经创建完成,响应式属性或方法已经配置完成,可以拿到 data 中的数据,可以进行数据资源的请求(ajax 请求)</li>\n<li>beforeMount   挂载前,(确定 el 或 vm.$mount() 是否挂载 dom 元素,以及是否设置 template 选项,如果有则渲染 template 中的内容, 若没有则渲染外部 html )</li>\n<li>mounted       挂载后,可以获取到 dom 元素,对 dom 元素进行操作</li>\n<li>beforeUpdate   更新前</li>\n<li>updated       更新后   依赖于 dom 操作 ,不可更新 data 中的数据,会进入死循环</li>\n<li>beforeDestroy 销毁前   调用 vm.$destroy() 进入销毁期</li>\n<li>destroyed     销毁后   执行一些优化操作,如 清空定时器 销毁子组件 解除事件的绑定</li>\n</ul>\n</blockquote>\n"},{"title":"JavaScript 对象","urlname":"rugw85","date":"2020-01-04T14:05:46.000Z","abbrlink":1553366290,"_content":"\n## JavaScript 对象中常用的方法\n\n### Object 构造函数的属性\n\n> - Object.length : 值为 1。\n> - Object.prototype : 表示 Object 的原型对象。改变 Object 原型，会通过原型链改变所有对象；\n\n### Object 构造函数的方法\n\n> - Object.assign() : 通过复制一个或多个对象来创建一个新的对象。\n> - Object.getOwnPropertyDescriptor() : 返回对象指定的属性配置。\n> - Object.getOwnPropertyDescriptors() ： 用来获取一个对象的所有自身属性的描述符。如果没有任何自身属性，则返回空对象。\n> - Object.getOwnPropertyNames() : 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n> - Object.getOwnPropertySymbols() : 返回一个数组，它包含了指定对象自身所有的符号属性。\n> - Object.is() : 比较两个值是否相同。所有 NaN 值都相等（这与和=不同）。\n> - Object.preventExtensions() : 防止对象的任何扩展。\n> - Object.seal() : 防止其他代码删除对象的属性。\n> - Object.create() : 使用指定的原型对象和属性创建一个新对象。\n> - Object.defineProperties() : 给对象添加多个属性并分别指定它们的配置。\n> - Object.defineProperty() : 给对象添加一个属性并指定该属性的配置。\n> - Object.freeze() : 冻结对象:其他代码不能删除或更改任何属性。\n> - Object.getPrototypeOf() : 返回指定对象的原型对象。\n> - Object.setPrototypeOf() : 设置对象的原型（即内部 [[Prototype]] 属性）\n> - Object.isExtensible() : 判断对象是否可扩展。\n> - Object.isFrozen() : 判断对象是否已经冻结。\n> - Object.isSealed() : 判断对象是否已经密封。\n> - Object.keys() : 返回一个包含所有给定对象自身可枚举属性名称的数组。\n> - Object.entries() : 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。\n> - Object.fromEntries() : 把键值对列表转换为一个对象。\n> - Object.values() : 返回给定对象自身可枚举值的数组。\n\n### Object 原型对象的方法\n\n[ 属性 ]\n\n> - Object.prototype.constructor : 特定的函数，用于创建一个对象的原型。。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。\n> - **proto** : 指向当对象被实例化的时候，用作原型的对象。**proto** 属性是一个访问器属性（一个 getter 函数和一个 setter 函数）, 暴露了通过它访问的对象的内部[[Prototype]] (一个对象或 null)。\n\n[ 方法 ]\n\n> - Object.prototype.**defineGetter**() : 关联一个函数到一个属性。访问该函数时，执行该函数并返回其返回值。\n> - Object.prototype.**defineSetter**() : 关联一个函数到一个属性。设置该函数时，执行该修改属性的函数。\n> - Object.prototype.hasOwnProperty() : 返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。\n> - Object.prototype.**lookupGetter**() : 返回使用 **defineGetter** 定义的方法函数 。\n> - Object.prototype.**lookupSetter**() : 返回使用 **defineSetter** 定义的方法函数 。\n> - Object.prototype.isPrototypeOf() : 返回一个布尔值，表示指定的对象是否在本对象的原型链中。\n> - Object.prototype.propertyIsEnumerable() : 返回一个布尔值，表示指定的属性是否可枚举。\n> - Object.prototype.toString() : 返回一个表示该对象的字符串。\n> - Object.prototype.valueOf() : 返回指定对象的原始值。\n> - Object.prototype.toLocaleString() : 直接调用 toString()方法。返回一个表示该对象的字符串。\n\n> -\n","source":"_posts/语雀/rugw85.md","raw":"---\ntitle: JavaScript 对象\nurlname: rugw85\ndate: '2020-01-04 22:05:46 +0800'\ntags: []\ncategories: []\nabbrlink: 1553366290\n---\n\n## JavaScript 对象中常用的方法\n\n### Object 构造函数的属性\n\n> - Object.length : 值为 1。\n> - Object.prototype : 表示 Object 的原型对象。改变 Object 原型，会通过原型链改变所有对象；\n\n### Object 构造函数的方法\n\n> - Object.assign() : 通过复制一个或多个对象来创建一个新的对象。\n> - Object.getOwnPropertyDescriptor() : 返回对象指定的属性配置。\n> - Object.getOwnPropertyDescriptors() ： 用来获取一个对象的所有自身属性的描述符。如果没有任何自身属性，则返回空对象。\n> - Object.getOwnPropertyNames() : 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n> - Object.getOwnPropertySymbols() : 返回一个数组，它包含了指定对象自身所有的符号属性。\n> - Object.is() : 比较两个值是否相同。所有 NaN 值都相等（这与和=不同）。\n> - Object.preventExtensions() : 防止对象的任何扩展。\n> - Object.seal() : 防止其他代码删除对象的属性。\n> - Object.create() : 使用指定的原型对象和属性创建一个新对象。\n> - Object.defineProperties() : 给对象添加多个属性并分别指定它们的配置。\n> - Object.defineProperty() : 给对象添加一个属性并指定该属性的配置。\n> - Object.freeze() : 冻结对象:其他代码不能删除或更改任何属性。\n> - Object.getPrototypeOf() : 返回指定对象的原型对象。\n> - Object.setPrototypeOf() : 设置对象的原型（即内部 [[Prototype]] 属性）\n> - Object.isExtensible() : 判断对象是否可扩展。\n> - Object.isFrozen() : 判断对象是否已经冻结。\n> - Object.isSealed() : 判断对象是否已经密封。\n> - Object.keys() : 返回一个包含所有给定对象自身可枚举属性名称的数组。\n> - Object.entries() : 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。\n> - Object.fromEntries() : 把键值对列表转换为一个对象。\n> - Object.values() : 返回给定对象自身可枚举值的数组。\n\n### Object 原型对象的方法\n\n[ 属性 ]\n\n> - Object.prototype.constructor : 特定的函数，用于创建一个对象的原型。。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。\n> - **proto** : 指向当对象被实例化的时候，用作原型的对象。**proto** 属性是一个访问器属性（一个 getter 函数和一个 setter 函数）, 暴露了通过它访问的对象的内部[[Prototype]] (一个对象或 null)。\n\n[ 方法 ]\n\n> - Object.prototype.**defineGetter**() : 关联一个函数到一个属性。访问该函数时，执行该函数并返回其返回值。\n> - Object.prototype.**defineSetter**() : 关联一个函数到一个属性。设置该函数时，执行该修改属性的函数。\n> - Object.prototype.hasOwnProperty() : 返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。\n> - Object.prototype.**lookupGetter**() : 返回使用 **defineGetter** 定义的方法函数 。\n> - Object.prototype.**lookupSetter**() : 返回使用 **defineSetter** 定义的方法函数 。\n> - Object.prototype.isPrototypeOf() : 返回一个布尔值，表示指定的对象是否在本对象的原型链中。\n> - Object.prototype.propertyIsEnumerable() : 返回一个布尔值，表示指定的属性是否可枚举。\n> - Object.prototype.toString() : 返回一个表示该对象的字符串。\n> - Object.prototype.valueOf() : 返回指定对象的原始值。\n> - Object.prototype.toLocaleString() : 直接调用 toString()方法。返回一个表示该对象的字符串。\n\n> -\n","slug":"语雀/rugw85","published":1,"updated":"2022-03-03T11:26:07.583Z","_id":"cl0awjjpg000x081b09g340z4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JavaScript-对象中常用的方法\"><a href=\"#JavaScript-对象中常用的方法\" class=\"headerlink\" title=\"JavaScript 对象中常用的方法\"></a>JavaScript 对象中常用的方法</h2><h3 id=\"Object-构造函数的属性\"><a href=\"#Object-构造函数的属性\" class=\"headerlink\" title=\"Object 构造函数的属性\"></a>Object 构造函数的属性</h3><blockquote>\n<ul>\n<li>Object.length : 值为 1。</li>\n<li>Object.prototype : 表示 Object 的原型对象。改变 Object 原型，会通过原型链改变所有对象；</li>\n</ul>\n</blockquote>\n<h3 id=\"Object-构造函数的方法\"><a href=\"#Object-构造函数的方法\" class=\"headerlink\" title=\"Object 构造函数的方法\"></a>Object 构造函数的方法</h3><blockquote>\n<ul>\n<li>Object.assign() : 通过复制一个或多个对象来创建一个新的对象。</li>\n<li>Object.getOwnPropertyDescriptor() : 返回对象指定的属性配置。</li>\n<li>Object.getOwnPropertyDescriptors() ： 用来获取一个对象的所有自身属性的描述符。如果没有任何自身属性，则返回空对象。</li>\n<li>Object.getOwnPropertyNames() : 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</li>\n<li>Object.getOwnPropertySymbols() : 返回一个数组，它包含了指定对象自身所有的符号属性。</li>\n<li>Object.is() : 比较两个值是否相同。所有 NaN 值都相等（这与和=不同）。</li>\n<li>Object.preventExtensions() : 防止对象的任何扩展。</li>\n<li>Object.seal() : 防止其他代码删除对象的属性。</li>\n<li>Object.create() : 使用指定的原型对象和属性创建一个新对象。</li>\n<li>Object.defineProperties() : 给对象添加多个属性并分别指定它们的配置。</li>\n<li>Object.defineProperty() : 给对象添加一个属性并指定该属性的配置。</li>\n<li>Object.freeze() : 冻结对象:其他代码不能删除或更改任何属性。</li>\n<li>Object.getPrototypeOf() : 返回指定对象的原型对象。</li>\n<li>Object.setPrototypeOf() : 设置对象的原型（即内部 [[Prototype]] 属性）</li>\n<li>Object.isExtensible() : 判断对象是否可扩展。</li>\n<li>Object.isFrozen() : 判断对象是否已经冻结。</li>\n<li>Object.isSealed() : 判断对象是否已经密封。</li>\n<li>Object.keys() : 返回一个包含所有给定对象自身可枚举属性名称的数组。</li>\n<li>Object.entries() : 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</li>\n<li>Object.fromEntries() : 把键值对列表转换为一个对象。</li>\n<li>Object.values() : 返回给定对象自身可枚举值的数组。</li>\n</ul>\n</blockquote>\n<h3 id=\"Object-原型对象的方法\"><a href=\"#Object-原型对象的方法\" class=\"headerlink\" title=\"Object 原型对象的方法\"></a>Object 原型对象的方法</h3><p>[ 属性 ]</p>\n<blockquote>\n<ul>\n<li>Object.prototype.constructor : 特定的函数，用于创建一个对象的原型。。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。</li>\n<li><strong>proto</strong> : 指向当对象被实例化的时候，用作原型的对象。<strong>proto</strong> 属性是一个访问器属性（一个 getter 函数和一个 setter 函数）, 暴露了通过它访问的对象的内部[[Prototype]] (一个对象或 null)。</li>\n</ul>\n</blockquote>\n<p>[ 方法 ]</p>\n<blockquote>\n<ul>\n<li>Object.prototype.<strong>defineGetter</strong>() : 关联一个函数到一个属性。访问该函数时，执行该函数并返回其返回值。</li>\n<li>Object.prototype.<strong>defineSetter</strong>() : 关联一个函数到一个属性。设置该函数时，执行该修改属性的函数。</li>\n<li>Object.prototype.hasOwnProperty() : 返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</li>\n<li>Object.prototype.<strong>lookupGetter</strong>() : 返回使用 <strong>defineGetter</strong> 定义的方法函数 。</li>\n<li>Object.prototype.<strong>lookupSetter</strong>() : 返回使用 <strong>defineSetter</strong> 定义的方法函数 。</li>\n<li>Object.prototype.isPrototypeOf() : 返回一个布尔值，表示指定的对象是否在本对象的原型链中。</li>\n<li>Object.prototype.propertyIsEnumerable() : 返回一个布尔值，表示指定的属性是否可枚举。</li>\n<li>Object.prototype.toString() : 返回一个表示该对象的字符串。</li>\n<li>Object.prototype.valueOf() : 返回指定对象的原始值。</li>\n<li>Object.prototype.toLocaleString() : 直接调用 toString()方法。返回一个表示该对象的字符串。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>-</p>\n</blockquote>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"JavaScript-对象中常用的方法\"><a href=\"#JavaScript-对象中常用的方法\" class=\"headerlink\" title=\"JavaScript 对象中常用的方法\"></a>JavaScript 对象中常用的方法</h2><h3 id=\"Object-构造函数的属性\"><a href=\"#Object-构造函数的属性\" class=\"headerlink\" title=\"Object 构造函数的属性\"></a>Object 构造函数的属性</h3><blockquote>\n<ul>\n<li>Object.length : 值为 1。</li>\n<li>Object.prototype : 表示 Object 的原型对象。改变 Object 原型，会通过原型链改变所有对象；</li>\n</ul>\n</blockquote>\n<h3 id=\"Object-构造函数的方法\"><a href=\"#Object-构造函数的方法\" class=\"headerlink\" title=\"Object 构造函数的方法\"></a>Object 构造函数的方法</h3><blockquote>\n<ul>\n<li>Object.assign() : 通过复制一个或多个对象来创建一个新的对象。</li>\n<li>Object.getOwnPropertyDescriptor() : 返回对象指定的属性配置。</li>\n<li>Object.getOwnPropertyDescriptors() ： 用来获取一个对象的所有自身属性的描述符。如果没有任何自身属性，则返回空对象。</li>\n<li>Object.getOwnPropertyNames() : 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</li>\n<li>Object.getOwnPropertySymbols() : 返回一个数组，它包含了指定对象自身所有的符号属性。</li>\n<li>Object.is() : 比较两个值是否相同。所有 NaN 值都相等（这与和=不同）。</li>\n<li>Object.preventExtensions() : 防止对象的任何扩展。</li>\n<li>Object.seal() : 防止其他代码删除对象的属性。</li>\n<li>Object.create() : 使用指定的原型对象和属性创建一个新对象。</li>\n<li>Object.defineProperties() : 给对象添加多个属性并分别指定它们的配置。</li>\n<li>Object.defineProperty() : 给对象添加一个属性并指定该属性的配置。</li>\n<li>Object.freeze() : 冻结对象:其他代码不能删除或更改任何属性。</li>\n<li>Object.getPrototypeOf() : 返回指定对象的原型对象。</li>\n<li>Object.setPrototypeOf() : 设置对象的原型（即内部 [[Prototype]] 属性）</li>\n<li>Object.isExtensible() : 判断对象是否可扩展。</li>\n<li>Object.isFrozen() : 判断对象是否已经冻结。</li>\n<li>Object.isSealed() : 判断对象是否已经密封。</li>\n<li>Object.keys() : 返回一个包含所有给定对象自身可枚举属性名称的数组。</li>\n<li>Object.entries() : 返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</li>\n<li>Object.fromEntries() : 把键值对列表转换为一个对象。</li>\n<li>Object.values() : 返回给定对象自身可枚举值的数组。</li>\n</ul>\n</blockquote>\n<h3 id=\"Object-原型对象的方法\"><a href=\"#Object-原型对象的方法\" class=\"headerlink\" title=\"Object 原型对象的方法\"></a>Object 原型对象的方法</h3><p>[ 属性 ]</p>\n<blockquote>\n<ul>\n<li>Object.prototype.constructor : 特定的函数，用于创建一个对象的原型。。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。</li>\n<li><strong>proto</strong> : 指向当对象被实例化的时候，用作原型的对象。<strong>proto</strong> 属性是一个访问器属性（一个 getter 函数和一个 setter 函数）, 暴露了通过它访问的对象的内部[[Prototype]] (一个对象或 null)。</li>\n</ul>\n</blockquote>\n<p>[ 方法 ]</p>\n<blockquote>\n<ul>\n<li>Object.prototype.<strong>defineGetter</strong>() : 关联一个函数到一个属性。访问该函数时，执行该函数并返回其返回值。</li>\n<li>Object.prototype.<strong>defineSetter</strong>() : 关联一个函数到一个属性。设置该函数时，执行该修改属性的函数。</li>\n<li>Object.prototype.hasOwnProperty() : 返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</li>\n<li>Object.prototype.<strong>lookupGetter</strong>() : 返回使用 <strong>defineGetter</strong> 定义的方法函数 。</li>\n<li>Object.prototype.<strong>lookupSetter</strong>() : 返回使用 <strong>defineSetter</strong> 定义的方法函数 。</li>\n<li>Object.prototype.isPrototypeOf() : 返回一个布尔值，表示指定的对象是否在本对象的原型链中。</li>\n<li>Object.prototype.propertyIsEnumerable() : 返回一个布尔值，表示指定的属性是否可枚举。</li>\n<li>Object.prototype.toString() : 返回一个表示该对象的字符串。</li>\n<li>Object.prototype.valueOf() : 返回指定对象的原始值。</li>\n<li>Object.prototype.toLocaleString() : 直接调用 toString()方法。返回一个表示该对象的字符串。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>-</p>\n</blockquote>\n"},{"title":"Charles","urlname":"rxbxg6","date":"2022-01-11T13:37:21.000Z","abbrlink":4178019943,"_content":"\n","source":"_posts/语雀/rxbxg6.md","raw":"---\ntitle: Charles\nurlname: rxbxg6\ndate: '2022-01-11 21:37:21 +0800'\ntags: []\ncategories: []\nabbrlink: 4178019943\n---\n\n","slug":"语雀/rxbxg6","published":1,"updated":"2022-03-03T11:26:07.584Z","_id":"cl0awjjph000y081ba2xr59k4","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"shell 编程","urlname":"sftyat","date":"2021-02-01T01:38:22.000Z","abbrlink":4046588353,"_content":"\n> shell 编程基础\n\n[ 特征 ]\n\n- 文件前添加`#!/bin/bash` 或 `#!/bin/sh`\n  - 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序\n  - 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。\n\n## shell 实例\n\n- echo 用于向窗口输出文本\n\n```shell\n#!/bin/bash\n\necho \"时光静好，岁月安然！\"\n```\n\n- 脚本运行\n\n```shell\n$ ./test.sh\n\n$  sh test.sh\n```\n\n## 变量\n\n[ **变量名的命名规则** ]\n\n1. 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头\n1. 中间不能有空格，可以使用下划线（\\_）\n1. 不能使用标点符号\n1. 不能使用 bash 里的关键字（可用 help 命令查看保留关键字）\n\n- **变量赋值**\n\n```shell\n#!/bin/bash\n\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 使用变量\necho ${string}\n\n# 语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\nfor file in `ls /etc` 或 for file in $(ls /etc)\n\tdo\n\techo \"文件： ${file}\"\n\tdone\n```\n\n- **只读变量( readonly  )**\n\n```shell\n#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=\"www.baidu.com\"\nreadonly base_url\nbase_url=\"www.google.com\"\n\n# 运行脚本，结果如下：\n\t/bin/bash: NAME: This variable is read only.\n```\n\n- **删除变量（unset ）**\n\n```shell\n#!/bin/bash\n\nvariable_name=\"System\"\nunset variable_name\n\necho ${variable_name}  # 没有任何输出\n```\n\n- **变量类型**\n\n```shell\n1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n```\n\n## 字符串\n\n- 字符串可以用单引号，也可以用双引号，也可以不用引号\n\n```shell\n#!/bin/bash\n\n# 单引号\nstr='this is a string'\n单引号字符串的限制：\n\t单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n\t单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n\n# 双引号\n_name='system'\nstr=\"Hello, I know you are \\\"${_name}\\\"! \\n\"\necho -e ${str}\n\n# 输出结果为：\n\tHello, I know you are \"runoob\"!\n\n双引号的优点：\n\t双引号里可以有变量\n\t双引号里可以出现转义字符\n```\n\n- **字符串拼接**\n\n```shell\n#!/bin/bash\n\n_name=\"system\"\n# 使用双引号拼接\ngreeting=\"hello, \"$_name\" !\"  \t# 双引号拼接\ngreeting_1=\"hello, ${_name} !\"\t# 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2='hello, '$_name' !'  # 单引号拼接\ngreeting_3='hello, ${_name} !'  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, ${_name} !   # 单引号字符串中存在变量，原样输出\n```\n\n- **获取字符串长度**\n\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\necho ${#string}  # 输出 27 包含空格\n```\n\n- **提取字符串**\n\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\necho ${string:0:6}  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0\n\n注意：\n\t1. 不支持负数切片\n\t2. 如果后一个数小于开始的数字，则该值表示向后延伸长度（如：${string:7:3} >> 夏天雨）\n\t3. 如果后一个数大于开始的数字，则该值表示向后延伸位置（如：${string:3:7} >> 天冷呀 夏天雨）\n```\n\n- **查找字符串**\n\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\n\necho `expr index \"$string\" 呀秋` # 输出 6（从 1 开始 ）\n```\n\n## shell 数组\n\n- **定义数组**\n  在 Shell 中，用括号来表示数组，数组元素用\"空格\"符号分割开。定义数组的一般形式为\n\n```shell\n# 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen\t# 可以不使用连续的下标，而且下标的范围没有限制\n```\n\n- **读取数组**\n\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" (value0 value1 value2 value3) )\n\necho ${array[0]}\n\n# 使用 @ 或 * 符号可以获取数组中的所有元素\necho ${array[@]} # 输出： 0 1 2 3 时光 静好\n```\n\n- **获取数组的长度**\n\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" )\n\n# 取得数组元素的个数\nlength=${#array[@]}\n# 或者\nlength=${#array[*]}\necho ${length} # 6\n\n# 取得数组单个元素的长度\nlengthn=${#array_name[n]}\n\nlengthn=${#array_name[4]}\necho ${lengthn} # 2\n```\n\n## shell 注释\n\n- 以 **#** 开头的行就是注释，会被解释器忽略\n\n```shell\n#!/bin/bash\n\n#--------------------------------------------\n# 这是一个注释\n# author：\n# site：\n# slogan：\n#--------------------------------------------\n##### 用户配置区 开始 #####\n#\n#\n# 这里可以添加脚本描述信息\n#\n#\n##### 用户配置区 结束  #####\n```\n\n- **多行注释**\n\n```shell\n#!/bin/bash\n\n:<<EOF\n注释内容...\n注释内容...\n注释内容...\nEOF\n\n# EOF 也可以使用其他符号:\n\n:<<'\n注释内容...\n注释内容...\n注释内容...\n'\n\n:<<!\n注释内容...\n注释内容...\n注释内容...\n!\n```\n\n## shell 传递参数\n\n> 在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n**。**n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……\n\n- 实例\n\n```shell\n#!/bin/bash\n# file_name = test.sh\n# 以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\n\necho \"Shell 传递参数实例！\";\necho \"执行的文件名：$0\";\necho \"第一个参数为：$1\";\necho \"第二个参数为：$2\";\necho \"第三个参数为：$3\";\n\n# 执行脚本\nsh test.sh 1 2 3\n    Shell 传递参数实例！\n    执行的文件名：test.sh\n    第一个参数为：1\n    第二个参数为：2\n    第三个参数为：3\n\n./test.sh 3 2 1\n    Shell 传递参数实例！\n    执行的文件名：./test.sh\n    第一个参数为：3\n    第二个参数为：2\n    第三个参数为：1\n```\n\n| 参数处理   | 说明|\n| ---------- ||\n| $#         | 传递到脚本的参数个数|\n| $\\*        | 以一个单字符串显示所有向脚本传递的参数。 如\"$\\*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。|\n| $$         | 脚本运行的当前进程 ID 号                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| $!         | 后台运行的最后一个进程的 ID 号|\n| $@         | 与 ![](https://g.yuque.com/gr/latex?*%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22#card=math&code=%2A%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22&id=MSwzI)@\"用「\"」括起来的情况、以\"$1\" \"![](https://g.yuque.com/gr/latex?2%22%20%E2%80%A6%20%22#card=math&code=2%22%20%E2%80%A6%20%22&id=Z0dFd)n\" 的形式输出所有参数。 |\n| $-         | 显示 Shell 使用的当前选项，与 [set 命令](https://www.runoob.com/linux/linux-comm-set.html|\n| 功能相同。 |\n| $?         | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。|\n\n- \\*\\*$_ 与 $@ 区别_\n\n```shell\n#!/bin/bash\n\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n```\n\n## shell 运算符\n\n> shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符\n> 原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。\n> expr 是一款表达式计算工具，使用它能完成表达式的求值操作。\n\n- 实例\n\n```shell\n#!/bin/bash\n\nval=`expr 5 + 5`\n\n# 等价于\nval=$[a+b]\n\necho ${val} # 10\n```\n\n- 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。\n- 完整的表达式要被 `` 包含\n- **算术运算符**\n\n```shell\n#!/bin/bash\n\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=\n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho \"a + b : ${result}\"\n\nresult=`expr ${a} - ${b}`\necho \"a - b : ${result}\"\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 \"*\" 不需要转义符号 \"\\\"\nresult=`expr $a \\* $b`\necho \"a * b : ${result}\"\n\nresult=`expr $a / $b`\necho \"a / b : ${result}\"\n\nresult=`expr $a % $b`\necho \"a % b : ${result}\"\n\n# 注意空格 [ $a == $b ]\nif [ $a == $b ]\nthen\n\techo \" a 等于 b\"\nfi\n\nif [ $a != $b ]\nthen\n\techo \"a 不等于 b\"\nfi\n```\n\n- **关系运算符**\n  > 关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20）                | 举例                       |\n| ------ | ----------------------------------------------------- | -------------------------- |\n| -eq    | 检测两个数是否相等，相等返回 true。                   | [ $a -eq $b ] 返回 false。 |\n| -ne    | 检测两个数是否不相等，不相等返回 true。               | [ $a -ne $b ] 返回 true。  |\n| -gt    | 检测左边的数是否大于右边的，如果是，则返回 true。     | [ $a -gt $b ] 返回 false。 |\n| -lt    | 检测左边的数是否小于右边的，如果是，则返回 true。     | [ $a -lt $b ] 返回 true。  |\n| -ge    | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | [ $a -ge $b ] 返回 false。 |\n| -le    | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | [ $a -le $b ] 返回 true。  |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen\n\techo \"-eq : a 等于 b\"\nelse\n\techo \"-eq : a 不等于 b\"\nfi\n```\n\n- **布尔运算符**\n  | 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n  | --- | --- | --- |\n  | ! | 非运算，表达式为 true 则返回 false，否则返回 true。 | [ ! false ] 返回 true。 |\n  | -o | 或运算，有一个表达式为 true 则返回 true。 | [ $a -lt 20 -o $b -gt 100 ] 返回 true。 |\n  | -a | 与运算，两个表达式都为 true 才返回 true。 | [ $a -lt 20 -a $b -gt 100 ] 返回 false。 |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen\n\techo \"a 不等于 b， 返回 true\"\nelse\n\techo \" a 等于 b\"\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n\techo \"a 大于 100或 b小于50 满足一个条件成立 \"\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n\techo \"a 大于 100 与 b小于50 返回 false \"\nelse\n\techo \"条件不成立， 必须同时满足， a 大于 100， b 小于 50\"\n```\n\n- **逻辑运算符**\n  | 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n  | --- | --- | --- |\n  | && | 逻辑的 AND | [[$a -lt 100 && $b -gt 100]] 返回 false |\n  | || | 逻辑的 OR | [[$a -lt 100 || $b -gt 100]] 返回 true |\n\n```shell\n#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n\techo \"a 大于 100 或 b 小于 50 条件成立 返回 true\"\nelse\n\techo \"a 大于 100 或 b 小于 50 条件不成立 返回 false\"\nfi\n\nif [[ $a -gt 100 && $b -lt 50 ]]\nthen\n\techo \"a 大于 100 与 b小于50 返回 true \"\nelse\n\techo \"条件不成立, false， 必须同时满足， a 大于 100， b 小于 50\"\nfi\n```\n\n- **字符串运算符**\n  | 运算符 | 说明（假定变量 a 为 \"abc\"，变量 b 为 \"efg\"） | 举例 |\n  | --- | --- | --- |\n  | = | 检测两个字符串是否相等，相等返回 true。 | [ $a = $b ] 返回 false。 |\n  | != | 检测两个字符串是否相等，不相等返回 true。 | [ $a != $b ] 返回 true。 |\n  | -z | 检测字符串长度是否为 0，为 0 返回 true。 | [ -z $a ] 返回 false。 |\n  | -n | 检测字符串长度是否不为 0，不为 0 返回 true。 | [ -n \"$a\" ] 返回 true。 |\n  | $ | 检测字符串是否为空，不为空返回 true。 | [ $a ] 返回 true。 |\n\n- **文件测试运算符**\n  > 文件测试运算符用于检测 Unix 文件的各种属性。\n\n| 操作符  | 说明                                                                        | 举例                      |\n| ------- | --------------------------------------------------------------------------- | ------------------------- |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。                             | [ -b $file ] 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。                           | [ -c $file ] 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。                                   | [ -d $file ] 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | [ -f $file ] 返回 true。  |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。                           | [ -g $file ] 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。                 | [ -k $file ] 返回 false。 |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。                               | [ -p $file ] 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。                           | [ -u $file ] 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。                                     | [ -r $file ] 返回 true。  |\n| -w file | 检测文件是否可写，如果是，则返回 true。                                     | [ -w $file ] 返回 true。  |\n| -x file | 检测文件是否可执行，如果是，则返回 true。                                   | [ -x $file ] 返回 true。  |\n| -s file | 检测文件是否为空（文件大小是否大于 0），不为空返回 true。                   | [ -s $file ] 返回 true。  |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。                         | [ -e $file ] 返回 true。  |\n\n- 其他检查符：\n  - **-S**: 判断某文件是否 socket。\n  - **-L**: 检测文件是否存在并且是一个符号链接。\n\n```shell\n#!/bin/bash\n\nfile=\"/tmp/exlog/test.sh\"\n\nif [ -d $file ]\nthen\n   echo \"文件是个目录\"\nelse\n   echo \"文件不是个目录\"\nfi\nif [ -r $file ]\nthen\n   echo \"文件可读\"\nelse\n   echo \"文件不可读\"\nfi\nif [ -w $file ]\nthen\n   echo \"文件可写\"\nelse\n   echo \"文件不可写\"\nfi\nif [ -x $file ]\nthen\n   echo \"文件可执行\"\nelse\n   echo \"文件不可执行\"\nfi\n```\n\n## shell 输出\n\n#### echo 命令\n\n```shell\n#!/bin/bash\n\necho \"It is a test\" / echo It is a test\n\n### 显示转义字符\necho \"\\\"It is a test\\\"\"\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf \"请输入变量： \"\nread name\necho \"$name It is a test\"\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh\n请输入变量：qwe\nqwe It is a test\n\n### 显示换行\necho -e \"OK! \\n\" # -e 开启转义\necho \"It is a test\"\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e \"OK! \\c\" # -e 开启转义 \\c 不换行\necho \"It is a test\"\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf \"请输入变量： \"\nread name\necho \"$name It is a test\" > test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho '$name\\\"'\n\n# 输入结果\t$name\\\"\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 '\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n```\n\n#### printf 命令\n\n> printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。\n> 默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n\n\n```shell\n#!/bin/bash\necho \"Hello, Shell\"\nprintf \"Hello, Shell\\n\"\n\nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg\nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234\nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543\nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n```\n\n**%s %c %d %f** 都是格式替代符，**％s** 输出一个字符串，**％d** 整型输出，**％c** 输出一个字符，**％f** 输出实数，以小数形式输出。\n\n**%-10s** 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n\n**%-4.2f** 指格式化为小数，其中 **.2** 指保留 2 位小数。\n\n## Shell 输入/输出重定向\n\n| 命令            | 说明                                               |\n| --------------- | -------------------------------------------------- |\n| command > file  | 将输出重定向到 file。                              |\n| command < file  | 将输入重定向到 file。                              |\n| command >> file | 将输出以追加的方式重定向到 file。                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file。             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m          | 将输出文件 m 和 n 合并。                           |\n| n <& m          | 将输入文件 m 和 n 合并。                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n> _需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。_\n\n## shell 流程控制\n\n### if 控制语句\n\n```shell\n#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nelif [ $a -gt $b ]\nthen\n   echo \"a 大于 b\"\nelif [ $a -lt $b ]\nthen\n   echo \"a 小于 b\"\nelse\n   echo \"没有符合的条件\"\nfi\n```\n\n### for 循环\n\n```shell\n#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo \"The value is: $loop\"\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i<=5;i++));do\n    echo \"这是第 $i 次调用\";\ndone;\n```\n\n### while 语句\n\n```shell\n#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int<=5 ))\ndo\n    echo $int\n    let \"int++\"\ndone\n```\n\n> 以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量\n\n### 无限循环\n\n```shell\n#!/bin/bash\nwhile true\ndo\n\tprintf \"请输入内容：\"\n\tread content\n\techo \"您输入额内容是 ${content}\"\ndone\n\n# 或者\n\nwhile ：\ndo\n\tprintf \"请输入内容：\"\n\tread content\n\techo \"您输入额内容是 ${content}\"\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n\tprintf \"请输入内容：\"\n\tread content\n\techo \"您输入额内容是 ${content}\"\ndone\n```\n\n### until 循环\n\n> until 循环执行一系列命令直至条件为 true 时停止。\n> until 循环与 while 循环在处理方式上刚好相反。\n> 一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。\n\n```shell\n#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n```\n\n### case ... esac\n\n> **case ... esac** 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 **;;** 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。\n> 可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。\n\n```shell\n\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n### 跳出循环\n\n- **break**\n  > break 命令允许跳出所有循环（终止执行后面的所有循环）\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字:\"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n            break\n        ;;\n    esac\ndone\n```\n\n- **continue**\n  > continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字: \"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的!\"\n            continue\n            echo \"游戏结束\"\n        ;;\n    esac\ndone\n```\n\n## Shell 函数\n\n```shell\n#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n{\n\n    action;\n\n    [return int;]\n\n}\n```\n\n> - 可以带 function fun() 定义，也可以直接 fun() 定义,不带任何参数。\n> - 参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return 后跟数值 n(0-255)\n\n- **实例**\n\n```shell\n#!/bin/bash\n\nfunction demo (){\n\techo \"这是一个 shell 函数！\"\n}\n\necho \"----- 函数开始执行 -----\"\n\ndemo()\n\necho \"----- 函数执行完毕 -----\"\n\n# 函数 return\n\nfunction demo_return(){\n\ta=10\n\tb=20\n\treturn $((a + b))\n\t# return $(($a + $b))\n\t# return $[a + b]\n}\n\ndemo_return\necho \"和：$?\"\n```\n\n> 函数返回值在调用该函数后通过 $? 来获得。\n> 注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可\n\n- **函数参数**\n  > 在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n> 注意，![](https://g.yuque.com/gr/latex?10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81#card=math&code=10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81&id=K39Jb){10}。当n>=10时，需要使用${n}来获取参数。\n\n| 参数处理 | 说明                                                           |\n| -------- | -------------------------------------------------------------- |\n| $#       | 传递到脚本或函数的参数个数                                     |\n| $\\*      | 以一个单字符串显示所有向脚本传递的参数                         |\n| $$       | 脚本运行的当前进程 ID 号                                       |\n| $!       | 后台运行的最后一个进程的 ID 号                                 |\n| $@       | 与$\\*相同，但是使用时加引号，并在引号中返回每个参数。          |\n| $-       | 显示 Shell 使用的当前选项，与 set 命令功能相同。               |\n| $?       | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。 |\n\n```shell\n#!/bin/bash\n\nfunWithParam(){\n    echo \"第一个参数为 $1 !\"\n    echo \"第二个参数为 $2 !\"\n    echo \"第十个参数为 $10 !\"\n    echo \"第十个参数为 ${10} !\"\n    echo \"第十一个参数为 ${11} !\"\n    echo \"参数总数有 $# 个!\"\n    echo \"作为一个字符串输出所有参数 $* !\"\n    echo \"脚本运行的当前进程ID号: $$\"\n    echo \"后台运行的最后一个进程的ID号:$!\"\n    echo \"$-\"\n    echo \"$?\"\n\n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n\n- **注意点**\n\n```shell\n#!/bin/bash\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\n\nfunction demoFun2(){\n echo \"这是我的第二个 shell 函数!\"\n expr 1 + 1\n}\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n```\n\n> 调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。\n> 第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。\n> 下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：\n\n```shell\n#!/bin/bash\n\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n```\n","source":"_posts/语雀/sftyat.md","raw":"---\ntitle: shell 编程\nurlname: sftyat\ndate: '2021-02-01 09:38:22 +0800'\ntags: []\ncategories: []\nabbrlink: 4046588353\n---\n\n> shell 编程基础\n\n[ 特征 ]\n\n- 文件前添加`#!/bin/bash` 或 `#!/bin/sh`\n  - 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序\n  - 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。\n\n## shell 实例\n\n- echo 用于向窗口输出文本\n\n```shell\n#!/bin/bash\n\necho \"时光静好，岁月安然！\"\n```\n\n- 脚本运行\n\n```shell\n$ ./test.sh\n\n$  sh test.sh\n```\n\n## 变量\n\n[ **变量名的命名规则** ]\n\n1. 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头\n1. 中间不能有空格，可以使用下划线（\\_）\n1. 不能使用标点符号\n1. 不能使用 bash 里的关键字（可用 help 命令查看保留关键字）\n\n- **变量赋值**\n\n```shell\n#!/bin/bash\n\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 使用变量\necho ${string}\n\n# 语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\nfor file in `ls /etc` 或 for file in $(ls /etc)\n\tdo\n\techo \"文件： ${file}\"\n\tdone\n```\n\n- **只读变量( readonly  )**\n\n```shell\n#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=\"www.baidu.com\"\nreadonly base_url\nbase_url=\"www.google.com\"\n\n# 运行脚本，结果如下：\n\t/bin/bash: NAME: This variable is read only.\n```\n\n- **删除变量（unset ）**\n\n```shell\n#!/bin/bash\n\nvariable_name=\"System\"\nunset variable_name\n\necho ${variable_name}  # 没有任何输出\n```\n\n- **变量类型**\n\n```shell\n1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n```\n\n## 字符串\n\n- 字符串可以用单引号，也可以用双引号，也可以不用引号\n\n```shell\n#!/bin/bash\n\n# 单引号\nstr='this is a string'\n单引号字符串的限制：\n\t单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n\t单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n\n# 双引号\n_name='system'\nstr=\"Hello, I know you are \\\"${_name}\\\"! \\n\"\necho -e ${str}\n\n# 输出结果为：\n\tHello, I know you are \"runoob\"!\n\n双引号的优点：\n\t双引号里可以有变量\n\t双引号里可以出现转义字符\n```\n\n- **字符串拼接**\n\n```shell\n#!/bin/bash\n\n_name=\"system\"\n# 使用双引号拼接\ngreeting=\"hello, \"$_name\" !\"  \t# 双引号拼接\ngreeting_1=\"hello, ${_name} !\"\t# 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2='hello, '$_name' !'  # 单引号拼接\ngreeting_3='hello, ${_name} !'  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, ${_name} !   # 单引号字符串中存在变量，原样输出\n```\n\n- **获取字符串长度**\n\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\necho ${#string}  # 输出 27 包含空格\n```\n\n- **提取字符串**\n\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\necho ${string:0:6}  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0\n\n注意：\n\t1. 不支持负数切片\n\t2. 如果后一个数小于开始的数字，则该值表示向后延伸长度（如：${string:7:3} >> 夏天雨）\n\t3. 如果后一个数大于开始的数字，则该值表示向后延伸位置（如：${string:3:7} >> 天冷呀 夏天雨）\n```\n\n- **查找字符串**\n\n```shell\n#!/bin/sh\nstring=\"从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀\"\n\n# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\n\necho `expr index \"$string\" 呀秋` # 输出 6（从 1 开始 ）\n```\n\n## shell 数组\n\n- **定义数组**\n  在 Shell 中，用括号来表示数组，数组元素用\"空格\"符号分割开。定义数组的一般形式为\n\n```shell\n# 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen\t# 可以不使用连续的下标，而且下标的范围没有限制\n```\n\n- **读取数组**\n\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" (value0 value1 value2 value3) )\n\necho ${array[0]}\n\n# 使用 @ 或 * 符号可以获取数组中的所有元素\necho ${array[@]} # 输出： 0 1 2 3 时光 静好\n```\n\n- **获取数组的长度**\n\n```shell\n#!/bin/bash\narray=(0 1 2 3 \"时光\" \"静好\" )\n\n# 取得数组元素的个数\nlength=${#array[@]}\n# 或者\nlength=${#array[*]}\necho ${length} # 6\n\n# 取得数组单个元素的长度\nlengthn=${#array_name[n]}\n\nlengthn=${#array_name[4]}\necho ${lengthn} # 2\n```\n\n## shell 注释\n\n- 以 **#** 开头的行就是注释，会被解释器忽略\n\n```shell\n#!/bin/bash\n\n#--------------------------------------------\n# 这是一个注释\n# author：\n# site：\n# slogan：\n#--------------------------------------------\n##### 用户配置区 开始 #####\n#\n#\n# 这里可以添加脚本描述信息\n#\n#\n##### 用户配置区 结束  #####\n```\n\n- **多行注释**\n\n```shell\n#!/bin/bash\n\n:<<EOF\n注释内容...\n注释内容...\n注释内容...\nEOF\n\n# EOF 也可以使用其他符号:\n\n:<<'\n注释内容...\n注释内容...\n注释内容...\n'\n\n:<<!\n注释内容...\n注释内容...\n注释内容...\n!\n```\n\n## shell 传递参数\n\n> 在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n**。**n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……\n\n- 实例\n\n```shell\n#!/bin/bash\n# file_name = test.sh\n# 以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\n\necho \"Shell 传递参数实例！\";\necho \"执行的文件名：$0\";\necho \"第一个参数为：$1\";\necho \"第二个参数为：$2\";\necho \"第三个参数为：$3\";\n\n# 执行脚本\nsh test.sh 1 2 3\n    Shell 传递参数实例！\n    执行的文件名：test.sh\n    第一个参数为：1\n    第二个参数为：2\n    第三个参数为：3\n\n./test.sh 3 2 1\n    Shell 传递参数实例！\n    执行的文件名：./test.sh\n    第一个参数为：3\n    第二个参数为：2\n    第三个参数为：1\n```\n\n| 参数处理   | 说明|\n| ---------- ||\n| $#         | 传递到脚本的参数个数|\n| $\\*        | 以一个单字符串显示所有向脚本传递的参数。 如\"$\\*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。|\n| $$         | 脚本运行的当前进程 ID 号|\n| $!         | 后台运行的最后一个进程的 ID 号|\n| $@         | 与 ![](https://g.yuque.com/gr/latex?*%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22#card=math&code=%2A%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22&id=MSwzI)@\"用「\"」括起来的情况、以\"$1\" \"![](https://g.yuque.com/gr/latex?2%22%20%E2%80%A6%20%22#card=math&code=2%22%20%E2%80%A6%20%22&id=Z0dFd)n\" 的形式输出所有参数。 |\n| $-         | 显示 Shell 使用的当前选项，与 [set 命令](https://www.runoob.com/linux/linux-comm-set.html|\n| 功能相同。 |\n| $?         | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。|\n\n- \\*\\*$_ 与 $@ 区别_\n\n```shell\n#!/bin/bash\n\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n```\n\n## shell 运算符\n\n> shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符\n> 原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。\n> expr 是一款表达式计算工具，使用它能完成表达式的求值操作。\n\n- 实例\n\n```shell\n#!/bin/bash\n\nval=`expr 5 + 5`\n\n# 等价于\nval=$[a+b]\n\necho ${val} # 10\n```\n\n- 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。\n- 完整的表达式要被 `` 包含\n- **算术运算符**\n\n```shell\n#!/bin/bash\n\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=\n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho \"a + b : ${result}\"\n\nresult=`expr ${a} - ${b}`\necho \"a - b : ${result}\"\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 \"*\" 不需要转义符号 \"\\\"\nresult=`expr $a \\* $b`\necho \"a * b : ${result}\"\n\nresult=`expr $a / $b`\necho \"a / b : ${result}\"\n\nresult=`expr $a % $b`\necho \"a % b : ${result}\"\n\n# 注意空格 [ $a == $b ]\nif [ $a == $b ]\nthen\n\techo \" a 等于 b\"\nfi\n\nif [ $a != $b ]\nthen\n\techo \"a 不等于 b\"\nfi\n```\n\n- **关系运算符**\n  > 关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n| 运算符 | 说明（假定变量 a 为 10，变量 b 为 20）                | 举例                       |\n| ------ | ----------------------------------------------------- | -------------------------- |\n| -eq    | 检测两个数是否相等，相等返回 true。                   | [ $a -eq $b ] 返回 false。 |\n| -ne    | 检测两个数是否不相等，不相等返回 true。               | [ $a -ne $b ] 返回 true。  |\n| -gt    | 检测左边的数是否大于右边的，如果是，则返回 true。     | [ $a -gt $b ] 返回 false。 |\n| -lt    | 检测左边的数是否小于右边的，如果是，则返回 true。     | [ $a -lt $b ] 返回 true。  |\n| -ge    | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | [ $a -ge $b ] 返回 false。 |\n| -le    | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | [ $a -le $b ] 返回 true。  |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen\n\techo \"-eq : a 等于 b\"\nelse\n\techo \"-eq : a 不等于 b\"\nfi\n```\n\n- **布尔运算符**\n  | 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n  | --- | --- | --- |\n  | ! | 非运算，表达式为 true 则返回 false，否则返回 true。 | [ ! false ] 返回 true。 |\n  | -o | 或运算，有一个表达式为 true 则返回 true。 | [ $a -lt 20 -o $b -gt 100 ] 返回 true。 |\n  | -a | 与运算，两个表达式都为 true 才返回 true。 | [ $a -lt 20 -a $b -gt 100 ] 返回 false。 |\n\n```shell\n#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen\n\techo \"a 不等于 b， 返回 true\"\nelse\n\techo \" a 等于 b\"\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n\techo \"a 大于 100或 b小于50 满足一个条件成立 \"\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n\techo \"a 大于 100 与 b小于50 返回 false \"\nelse\n\techo \"条件不成立， 必须同时满足， a 大于 100， b 小于 50\"\n```\n\n- **逻辑运算符**\n  | 运算符 | 说明（假定变量 a 为 10，变量 b 为 20） | 举例 |\n  | --- | --- | --- |\n  | && | 逻辑的 AND | [[$a -lt 100 && $b -gt 100]] 返回 false |\n  | || | 逻辑的 OR | [[$a -lt 100 || $b -gt 100]] 返回 true |\n\n```shell\n#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n\techo \"a 大于 100 或 b 小于 50 条件成立 返回 true\"\nelse\n\techo \"a 大于 100 或 b 小于 50 条件不成立 返回 false\"\nfi\n\nif [[ $a -gt 100 && $b -lt 50 ]]\nthen\n\techo \"a 大于 100 与 b小于50 返回 true \"\nelse\n\techo \"条件不成立, false， 必须同时满足， a 大于 100， b 小于 50\"\nfi\n```\n\n- **字符串运算符**\n  | 运算符 | 说明（假定变量 a 为 \"abc\"，变量 b 为 \"efg\"） | 举例 |\n  | --- | --- | --- |\n  | = | 检测两个字符串是否相等，相等返回 true。 | [ $a = $b ] 返回 false。 |\n  | != | 检测两个字符串是否相等，不相等返回 true。 | [ $a != $b ] 返回 true。 |\n  | -z | 检测字符串长度是否为 0，为 0 返回 true。 | [ -z $a ] 返回 false。 |\n  | -n | 检测字符串长度是否不为 0，不为 0 返回 true。 | [ -n \"$a\" ] 返回 true。 |\n  | $ | 检测字符串是否为空，不为空返回 true。 | [ $a ] 返回 true。 |\n\n- **文件测试运算符**\n  > 文件测试运算符用于检测 Unix 文件的各种属性。\n\n| 操作符  | 说明                                                                        | 举例                      |\n| ------- | --------------------------------------------------------------------------- | ------------------------- |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。                             | [ -b $file ] 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。                           | [ -c $file ] 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。                                   | [ -d $file ] 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | [ -f $file ] 返回 true。  |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。                           | [ -g $file ] 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。                 | [ -k $file ] 返回 false。 |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。                               | [ -p $file ] 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。                           | [ -u $file ] 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。                                     | [ -r $file ] 返回 true。  |\n| -w file | 检测文件是否可写，如果是，则返回 true。                                     | [ -w $file ] 返回 true。  |\n| -x file | 检测文件是否可执行，如果是，则返回 true。                                   | [ -x $file ] 返回 true。  |\n| -s file | 检测文件是否为空（文件大小是否大于 0），不为空返回 true。                   | [ -s $file ] 返回 true。  |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。                         | [ -e $file ] 返回 true。  |\n\n- 其他检查符：\n  - **-S**: 判断某文件是否 socket。\n  - **-L**: 检测文件是否存在并且是一个符号链接。\n\n```shell\n#!/bin/bash\n\nfile=\"/tmp/exlog/test.sh\"\n\nif [ -d $file ]\nthen\n   echo \"文件是个目录\"\nelse\n   echo \"文件不是个目录\"\nfi\nif [ -r $file ]\nthen\n   echo \"文件可读\"\nelse\n   echo \"文件不可读\"\nfi\nif [ -w $file ]\nthen\n   echo \"文件可写\"\nelse\n   echo \"文件不可写\"\nfi\nif [ -x $file ]\nthen\n   echo \"文件可执行\"\nelse\n   echo \"文件不可执行\"\nfi\n```\n\n## shell 输出\n\n#### echo 命令\n\n```shell\n#!/bin/bash\n\necho \"It is a test\" / echo It is a test\n\n### 显示转义字符\necho \"\\\"It is a test\\\"\"\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf \"请输入变量： \"\nread name\necho \"$name It is a test\"\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh\n请输入变量：qwe\nqwe It is a test\n\n### 显示换行\necho -e \"OK! \\n\" # -e 开启转义\necho \"It is a test\"\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e \"OK! \\c\" # -e 开启转义 \\c 不换行\necho \"It is a test\"\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf \"请输入变量： \"\nread name\necho \"$name It is a test\" > test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho '$name\\\"'\n\n# 输入结果\t$name\\\"\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 '\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n```\n\n#### printf 命令\n\n> printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。\n> 默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n\n\n```shell\n#!/bin/bash\necho \"Hello, Shell\"\nprintf \"Hello, Shell\\n\"\n\nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg\nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234\nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543\nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n```\n\n**%s %c %d %f** 都是格式替代符，**％s** 输出一个字符串，**％d** 整型输出，**％c** 输出一个字符，**％f** 输出实数，以小数形式输出。\n\n**%-10s** 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n\n**%-4.2f** 指格式化为小数，其中 **.2** 指保留 2 位小数。\n\n## Shell 输入/输出重定向\n\n| 命令            | 说明                                               |\n| --------------- | -------------------------------------------------- |\n| command > file  | 将输出重定向到 file。                              |\n| command < file  | 将输入重定向到 file。                              |\n| command >> file | 将输出以追加的方式重定向到 file。                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file。             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m          | 将输出文件 m 和 n 合并。                           |\n| n <& m          | 将输入文件 m 和 n 合并。                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n> _需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。_\n\n## shell 流程控制\n\n### if 控制语句\n\n```shell\n#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nelif [ $a -gt $b ]\nthen\n   echo \"a 大于 b\"\nelif [ $a -lt $b ]\nthen\n   echo \"a 小于 b\"\nelse\n   echo \"没有符合的条件\"\nfi\n```\n\n### for 循环\n\n```shell\n#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo \"The value is: $loop\"\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i<=5;i++));do\n    echo \"这是第 $i 次调用\";\ndone;\n```\n\n### while 语句\n\n```shell\n#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int<=5 ))\ndo\n    echo $int\n    let \"int++\"\ndone\n```\n\n> 以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量\n\n### 无限循环\n\n```shell\n#!/bin/bash\nwhile true\ndo\n\tprintf \"请输入内容：\"\n\tread content\n\techo \"您输入额内容是 ${content}\"\ndone\n\n# 或者\n\nwhile ：\ndo\n\tprintf \"请输入内容：\"\n\tread content\n\techo \"您输入额内容是 ${content}\"\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n\tprintf \"请输入内容：\"\n\tread content\n\techo \"您输入额内容是 ${content}\"\ndone\n```\n\n### until 循环\n\n> until 循环执行一系列命令直至条件为 true 时停止。\n> until 循环与 while 循环在处理方式上刚好相反。\n> 一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。\n\n```shell\n#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n```\n\n### case ... esac\n\n> **case ... esac** 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 **;;** 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。\n> 可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。\n\n```shell\n\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n### 跳出循环\n\n- **break**\n  > break 命令允许跳出所有循环（终止执行后面的所有循环）\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字:\"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n            break\n        ;;\n    esac\ndone\n```\n\n- **continue**\n  > continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。\n\n```shell\n#!/bin/bash\nwhile :\ndo\n    echo -n \"输入 1 到 5 之间的数字: \"\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n        ;;\n        *) echo \"你输入的数字不是 1 到 5 之间的!\"\n            continue\n            echo \"游戏结束\"\n        ;;\n    esac\ndone\n```\n\n## Shell 函数\n\n```shell\n#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n{\n\n    action;\n\n    [return int;]\n\n}\n```\n\n> - 可以带 function fun() 定义，也可以直接 fun() 定义,不带任何参数。\n> - 参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return 后跟数值 n(0-255)\n\n- **实例**\n\n```shell\n#!/bin/bash\n\nfunction demo (){\n\techo \"这是一个 shell 函数！\"\n}\n\necho \"----- 函数开始执行 -----\"\n\ndemo()\n\necho \"----- 函数执行完毕 -----\"\n\n# 函数 return\n\nfunction demo_return(){\n\ta=10\n\tb=20\n\treturn $((a + b))\n\t# return $(($a + $b))\n\t# return $[a + b]\n}\n\ndemo_return\necho \"和：$?\"\n```\n\n> 函数返回值在调用该函数后通过 $? 来获得。\n> 注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可\n\n- **函数参数**\n  > 在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n> 注意，![](https://g.yuque.com/gr/latex?10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81#card=math&code=10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81&id=K39Jb){10}。当n>=10时，需要使用${n}来获取参数。\n\n| 参数处理 | 说明                                                           |\n| -------- | -------------------------------------------------------------- |\n| $#       | 传递到脚本或函数的参数个数                                     |\n| $\\*      | 以一个单字符串显示所有向脚本传递的参数                         |\n| $$       | 脚本运行的当前进程 ID 号                                       |\n| $!       | 后台运行的最后一个进程的 ID 号                                 |\n| $@       | 与$\\*相同，但是使用时加引号，并在引号中返回每个参数。          |\n| $-       | 显示 Shell 使用的当前选项，与 set 命令功能相同。               |\n| $?       | 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。 |\n\n```shell\n#!/bin/bash\n\nfunWithParam(){\n    echo \"第一个参数为 $1 !\"\n    echo \"第二个参数为 $2 !\"\n    echo \"第十个参数为 $10 !\"\n    echo \"第十个参数为 ${10} !\"\n    echo \"第十一个参数为 ${11} !\"\n    echo \"参数总数有 $# 个!\"\n    echo \"作为一个字符串输出所有参数 $* !\"\n    echo \"脚本运行的当前进程ID号: $$\"\n    echo \"后台运行的最后一个进程的ID号:$!\"\n    echo \"$-\"\n    echo \"$?\"\n\n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n\n- **注意点**\n\n```shell\n#!/bin/bash\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\n\nfunction demoFun2(){\n echo \"这是我的第二个 shell 函数!\"\n expr 1 + 1\n}\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n```\n\n> 调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。\n> 第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。\n> 下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：\n\n```shell\n#!/bin/bash\n\nfunction demoFun1(){\n    echo \"这是我的第一个 shell 函数!\"\n    return `expr 1 + 1`\n}\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n```\n","slug":"语雀/sftyat","published":1,"updated":"2022-03-03T11:26:07.585Z","_id":"cl0awjjph000z081bcrpua0z5","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>shell 编程基础</p>\n</blockquote>\n<p>[ 特征 ]</p>\n<ul>\n<li>文件前添加<code>#!/bin/bash</code> 或 <code>#!/bin/sh</code><ul>\n<li>告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序</li>\n<li>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"shell-实例\"><a href=\"#shell-实例\" class=\"headerlink\" title=\"shell 实例\"></a>shell 实例</h2><ul>\n<li>echo 用于向窗口输出文本</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\necho &quot;时光静好，岁月安然！&quot;\n</code></pre>\n<ul>\n<li>脚本运行</li>\n</ul>\n<pre><code class=\"shell\">$ ./test.sh\n\n$  sh test.sh\n</code></pre>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>[ <strong>变量名的命名规则</strong> ]</p>\n<ol>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>\n<li>中间不能有空格，可以使用下划线（_）</li>\n<li>不能使用标点符号</li>\n<li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）</li>\n</ol>\n<ul>\n<li><strong>变量赋值</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\n# 使用变量\necho $&#123;string&#125;\n\n# 语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\nfor file in `ls /etc` 或 for file in $(ls /etc)\n    do\n    echo &quot;文件： $&#123;file&#125;&quot;\n    done\n</code></pre>\n<ul>\n<li><strong>只读变量( readonly  )</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=&quot;www.baidu.com&quot;\nreadonly base_url\nbase_url=&quot;www.google.com&quot;\n\n# 运行脚本，结果如下：\n    /bin/bash: NAME: This variable is read only.\n</code></pre>\n<ul>\n<li><strong>删除变量（unset ）</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nvariable_name=&quot;System&quot;\nunset variable_name\n\necho $&#123;variable_name&#125;  # 没有任何输出\n</code></pre>\n<ul>\n<li><strong>变量类型</strong></li>\n</ul>\n<pre><code class=\"shell\">1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>字符串可以用单引号，也可以用双引号，也可以不用引号</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n# 单引号\nstr=&#39;this is a string&#39;\n单引号字符串的限制：\n    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n    单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n\n# 双引号\n_name=&#39;system&#39;\nstr=&quot;Hello, I know you are \\&quot;$&#123;_name&#125;\\&quot;! \\n&quot;\necho -e $&#123;str&#125;\n\n# 输出结果为：\n    Hello, I know you are &quot;runoob&quot;!\n\n双引号的优点：\n    双引号里可以有变量\n    双引号里可以出现转义字符\n</code></pre>\n<ul>\n<li><strong>字符串拼接</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n_name=&quot;system&quot;\n# 使用双引号拼接\ngreeting=&quot;hello, &quot;$_name&quot; !&quot;      # 双引号拼接\ngreeting_1=&quot;hello, $&#123;_name&#125; !&quot;    # 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2=&#39;hello, &#39;$_name&#39; !&#39;  # 单引号拼接\ngreeting_3=&#39;hello, $&#123;_name&#125; !&#39;  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, $&#123;_name&#125; !   # 单引号字符串中存在变量，原样输出\n</code></pre>\n<ul>\n<li><strong>获取字符串长度</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/sh\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\necho $&#123;#string&#125;  # 输出 27 包含空格\n</code></pre>\n<ul>\n<li><strong>提取字符串</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/sh\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\necho $&#123;string:0:6&#125;  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0\n\n注意：\n    1. 不支持负数切片\n    2. 如果后一个数小于开始的数字，则该值表示向后延伸长度（如：$&#123;string:7:3&#125; &gt;&gt; 夏天雨）\n    3. 如果后一个数大于开始的数字，则该值表示向后延伸位置（如：$&#123;string:3:7&#125; &gt;&gt; 天冷呀 夏天雨）\n</code></pre>\n<ul>\n<li><strong>查找字符串</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/sh\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\n# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\n\necho `expr index &quot;$string&quot; 呀秋` # 输出 6（从 1 开始 ）\n</code></pre>\n<h2 id=\"shell-数组\"><a href=\"#shell-数组\" class=\"headerlink\" title=\"shell 数组\"></a>shell 数组</h2><ul>\n<li><strong>定义数组</strong><br>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为</li>\n</ul>\n<pre><code class=\"shell\"># 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen    # 可以不使用连续的下标，而且下标的范围没有限制\n</code></pre>\n<ul>\n<li><strong>读取数组</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\narray=(0 1 2 3 &quot;时光&quot; &quot;静好&quot; (value0 value1 value2 value3) )\n\necho $&#123;array[0]&#125;\n\n# 使用 @ 或 * 符号可以获取数组中的所有元素\necho $&#123;array[@]&#125; # 输出： 0 1 2 3 时光 静好\n</code></pre>\n<ul>\n<li><strong>获取数组的长度</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\narray=(0 1 2 3 &quot;时光&quot; &quot;静好&quot; )\n\n# 取得数组元素的个数\nlength=$&#123;#array[@]&#125;\n# 或者\nlength=$&#123;#array[*]&#125;\necho $&#123;length&#125; # 6\n\n# 取得数组单个元素的长度\nlengthn=$&#123;#array_name[n]&#125;\n\nlengthn=$&#123;#array_name[4]&#125;\necho $&#123;lengthn&#125; # 2\n</code></pre>\n<h2 id=\"shell-注释\"><a href=\"#shell-注释\" class=\"headerlink\" title=\"shell 注释\"></a>shell 注释</h2><ul>\n<li>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n#--------------------------------------------\n# 这是一个注释\n# author：\n# site：\n# slogan：\n#--------------------------------------------\n##### 用户配置区 开始 #####\n#\n#\n# 这里可以添加脚本描述信息\n#\n#\n##### 用户配置区 结束  #####\n</code></pre>\n<ul>\n<li><strong>多行注释</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n:&lt;&lt;EOF\n注释内容...\n注释内容...\n注释内容...\nEOF\n\n# EOF 也可以使用其他符号:\n\n:&lt;&lt;&#39;\n注释内容...\n注释内容...\n注释内容...\n&#39;\n\n:&lt;&lt;!\n注释内容...\n注释内容...\n注释内容...\n!\n</code></pre>\n<h2 id=\"shell-传递参数\"><a href=\"#shell-传递参数\" class=\"headerlink\" title=\"shell 传递参数\"></a>shell 传递参数</h2><blockquote>\n<p>在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p>\n</blockquote>\n<ul>\n<li>实例</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n# file_name = test.sh\n# 以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\n\necho &quot;Shell 传递参数实例！&quot;;\necho &quot;执行的文件名：$0&quot;;\necho &quot;第一个参数为：$1&quot;;\necho &quot;第二个参数为：$2&quot;;\necho &quot;第三个参数为：$3&quot;;\n\n# 执行脚本\nsh test.sh 1 2 3\n    Shell 传递参数实例！\n    执行的文件名：test.sh\n    第一个参数为：1\n    第二个参数为：2\n    第三个参数为：3\n\n./test.sh 3 2 1\n    Shell 传递参数实例！\n    执行的文件名：./test.sh\n    第一个参数为：3\n    第二个参数为：2\n    第三个参数为：1\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$#</td>\n<td>传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数。 如”$*“用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程 ID 号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>与 <img src=\"https://g.yuque.com/gr/latex?*%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22#card=math&code=%2A%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22&id=MSwzI\">@”用「”」括起来的情况、以”$1” “<img src=\"https://g.yuque.com/gr/latex?2%22%20%E2%80%A6%20%22#card=math&code=2%22%20%E2%80%A6%20%22&id=Z0dFd\">n” 的形式输出所有参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示 Shell 使用的当前选项，与 <a href=\"https://www.runoob.com/linux/linux-comm-set.html\" rel=\"external nofollow noreferrer\">set 命令</a></td>\n</tr>\n<tr>\n<td>功能相同。</td>\n<td></td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>**$_ 与 $@ 区别_</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 &quot; * &quot; 等价于 &quot;1 2 3&quot;（传递了一个参数），而 &quot;@&quot; 等价于 &quot;1&quot; &quot;2&quot; &quot;3&quot;（传递了三个参数）。\n</code></pre>\n<h2 id=\"shell-运算符\"><a href=\"#shell-运算符\" class=\"headerlink\" title=\"shell 运算符\"></a>shell 运算符</h2><blockquote>\n<p>shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符<br>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。<br>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>\n</blockquote>\n<ul>\n<li>实例</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nval=`expr 5 + 5`\n\n# 等价于\nval=$[a+b]\n\necho $&#123;val&#125; # 10\n</code></pre>\n<ul>\n<li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li>\n<li>完整的表达式要被 `` 包含</li>\n<li><strong>算术运算符</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=\n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho &quot;a + b : $&#123;result&#125;&quot;\n\nresult=`expr $&#123;a&#125; - $&#123;b&#125;`\necho &quot;a - b : $&#123;result&#125;&quot;\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 &quot;*&quot; 不需要转义符号 &quot;\\&quot;\nresult=`expr $a \\* $b`\necho &quot;a * b : $&#123;result&#125;&quot;\n\nresult=`expr $a / $b`\necho &quot;a / b : $&#123;result&#125;&quot;\n\nresult=`expr $a % $b`\necho &quot;a % b : $&#123;result&#125;&quot;\n\n# 注意空格 [ $a == $b ]\nif [ $a == $b ]\nthen\n    echo &quot; a 等于 b&quot;\nfi\n\nif [ $a != $b ]\nthen\n    echo &quot;a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>关系运算符</strong><blockquote>\n<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-eq</td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td>[ $a -eq $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>检测两个数是否不相等，不相等返回 true。</td>\n<td>[ $a -ne $b ] 返回 true。</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td>[ $a -gt $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td>[ $a -lt $b ] 返回 true。</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td>[ $a -ge $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td>[ $a -le $b ] 返回 true。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen\n    echo &quot;-eq : a 等于 b&quot;\nelse\n    echo &quot;-eq : a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>布尔运算符</strong><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!</td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td>[ ! false ] 返回 true。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen\n    echo &quot;a 不等于 b， 返回 true&quot;\nelse\n    echo &quot; a 等于 b&quot;\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n    echo &quot;a 大于 100或 b小于50 满足一个条件成立 &quot;\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n    echo &quot;a 大于 100 与 b小于50 返回 false &quot;\nelse\n    echo &quot;条件不成立， 必须同时满足， a 大于 100， b 小于 50&quot;\n</code></pre>\n<ul>\n<li><strong>逻辑运算符</strong><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>逻辑的 AND</td>\n<td>[[$a -lt 100 &amp;&amp; $b -gt 100]] 返回 false</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n    echo &quot;a 大于 100 或 b 小于 50 条件成立 返回 true&quot;\nelse\n    echo &quot;a 大于 100 或 b 小于 50 条件不成立 返回 false&quot;\nfi\n\nif [[ $a -gt 100 &amp;&amp; $b -lt 50 ]]\nthen\n    echo &quot;a 大于 100 与 b小于50 返回 true &quot;\nelse\n    echo &quot;条件不成立, false， 必须同时满足， a 大于 100， b 小于 50&quot;\nfi\n</code></pre>\n<ul>\n<li><p><strong>字符串运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 “abc”，变量 b 为 “efg”）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td>[ $a = $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td>[ $a != $b ] 返回 true。</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>检测字符串长度是否为 0，为 0 返回 true。</td>\n<td>[ -z $a ] 返回 false。</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>检测字符串长度是否不为 0，不为 0 返回 true。</td>\n<td>[ -n “$a” ] 返回 true。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td>[ $a ] 返回 true。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>文件测试运算符</strong></p>\n<blockquote>\n<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td>[ -b $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td>[ -c $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td>[ -d $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td>[ -f $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td>[ -g $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td>[ -k $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td>[ -p $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td>[ -u $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td>[ -r $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td>[ -w $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td>[ -x $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td>\n<td>[ -s $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td>[ -e $file ] 返回 true。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其他检查符：<ul>\n<li><strong>-S</strong>: 判断某文件是否 socket。</li>\n<li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nfile=&quot;/tmp/exlog/test.sh&quot;\n\nif [ -d $file ]\nthen\n   echo &quot;文件是个目录&quot;\nelse\n   echo &quot;文件不是个目录&quot;\nfi\nif [ -r $file ]\nthen\n   echo &quot;文件可读&quot;\nelse\n   echo &quot;文件不可读&quot;\nfi\nif [ -w $file ]\nthen\n   echo &quot;文件可写&quot;\nelse\n   echo &quot;文件不可写&quot;\nfi\nif [ -x $file ]\nthen\n   echo &quot;文件可执行&quot;\nelse\n   echo &quot;文件不可执行&quot;\nfi\n</code></pre>\n<h2 id=\"shell-输出\"><a href=\"#shell-输出\" class=\"headerlink\" title=\"shell 输出\"></a>shell 输出</h2><h4 id=\"echo-命令\"><a href=\"#echo-命令\" class=\"headerlink\" title=\"echo 命令\"></a>echo 命令</h4><pre><code class=\"shell\">#!/bin/bash\n\necho &quot;It is a test&quot; / echo It is a test\n\n### 显示转义字符\necho &quot;\\&quot;It is a test\\&quot;&quot;\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf &quot;请输入变量： &quot;\nread name\necho &quot;$name It is a test&quot;\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh\n请输入变量：qwe\nqwe It is a test\n\n### 显示换行\necho -e &quot;OK! \\n&quot; # -e 开启转义\necho &quot;It is a test&quot;\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e &quot;OK! \\c&quot; # -e 开启转义 \\c 不换行\necho &quot;It is a test&quot;\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf &quot;请输入变量： &quot;\nread name\necho &quot;$name It is a test&quot; &gt; test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho &#39;$name\\&quot;&#39;\n\n# 输入结果    $name\\&quot;\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 &#39;\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n</code></pre>\n<h4 id=\"printf-命令\"><a href=\"#printf-命令\" class=\"headerlink\" title=\"printf 命令\"></a>printf 命令</h4><blockquote>\n<p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。<br>默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\necho &quot;Hello, Shell&quot;\nprintf &quot;Hello, Shell\\n&quot;\n\nprintf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n</code></pre>\n<p><strong>%s %c %d %f</strong> 都是格式替代符，<strong>％s</strong> 输出一个字符串，<strong>％d</strong> 整型输出，<strong>％c</strong> 输出一个字符，<strong>％f</strong> 输出实数，以小数形式输出。</p>\n<p><strong>%-10s</strong> 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p><strong>%-4.2f</strong> 指格式化为小数，其中 <strong>.2</strong> 指保留 2 位小数。</p>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>将输出重定向到 file。</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file。</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><em>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</em></p>\n</blockquote>\n<h2 id=\"shell-流程控制\"><a href=\"#shell-流程控制\" class=\"headerlink\" title=\"shell 流程控制\"></a>shell 流程控制</h2><h3 id=\"if-控制语句\"><a href=\"#if-控制语句\" class=\"headerlink\" title=\"if 控制语句\"></a>if 控制语句</h3><pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo &quot;a 等于 b&quot;\nelif [ $a -gt $b ]\nthen\n   echo &quot;a 大于 b&quot;\nelif [ $a -lt $b ]\nthen\n   echo &quot;a 小于 b&quot;\nelse\n   echo &quot;没有符合的条件&quot;\nfi\n</code></pre>\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><pre><code class=\"shell\">#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo &quot;The value is: $loop&quot;\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i&lt;=5;i++));do\n    echo &quot;这是第 $i 次调用&quot;;\ndone;\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"shell\">#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int&lt;=5 ))\ndo\n    echo $int\n    let &quot;int++&quot;\ndone\n</code></pre>\n<blockquote>\n<p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量</p>\n</blockquote>\n<h3 id=\"无限循环\"><a href=\"#无限循环\" class=\"headerlink\" title=\"无限循环\"></a>无限循环</h3><pre><code class=\"shell\">#!/bin/bash\nwhile true\ndo\n    printf &quot;请输入内容：&quot;\n    read content\n    echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n# 或者\n\nwhile ：\ndo\n    printf &quot;请输入内容：&quot;\n    read content\n    echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n    printf &quot;请输入内容：&quot;\n    read content\n    echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n</code></pre>\n<h3 id=\"until-循环\"><a href=\"#until-循环\" class=\"headerlink\" title=\"until 循环\"></a>until 循环</h3><blockquote>\n<p>until 循环执行一系列命令直至条件为 true 时停止。<br>until 循环与 while 循环在处理方式上刚好相反。<br>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n</code></pre>\n<h3 id=\"case-…-esac\"><a href=\"#case-…-esac\" class=\"headerlink\" title=\"case … esac\"></a>case … esac</h3><blockquote>\n<p><strong>case … esac</strong> 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。<br>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p>\n</blockquote>\n<pre><code class=\"shell\">\necho &#39;输入 1 到 4 之间的数字:&#39;\necho &#39;你输入的数字为:&#39;\nread aNum\ncase $aNum in\n    1)  echo &#39;你选择了 1&#39;\n    ;;\n    2)  echo &#39;你选择了 2&#39;\n    ;;\n    3)  echo &#39;你选择了 3&#39;\n    ;;\n    4)  echo &#39;你选择了 4&#39;\n    ;;\n    *)  echo &#39;你没有输入 1 到 4 之间的数字&#39;\n    ;;\nesac\n</code></pre>\n<h3 id=\"跳出循环\"><a href=\"#跳出循环\" class=\"headerlink\" title=\"跳出循环\"></a>跳出循环</h3><ul>\n<li><strong>break</strong><blockquote>\n<p>break 命令允许跳出所有循环（终止执行后面的所有循环）</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字:&quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;\n            break\n        ;;\n    esac\ndone\n</code></pre>\n<ul>\n<li><strong>continue</strong><blockquote>\n<p>continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字: &quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;\n            continue\n            echo &quot;游戏结束&quot;\n        ;;\n    esac\ndone\n</code></pre>\n<h2 id=\"Shell-函数\"><a href=\"#Shell-函数\" class=\"headerlink\" title=\"Shell 函数\"></a>Shell 函数</h2><pre><code class=\"shell\">#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n&#123;\n\n    action;\n\n    [return int;]\n\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>可以带 function fun() 定义，也可以直接 fun() 定义,不带任何参数。</li>\n<li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return 后跟数值 n(0-255)</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>实例</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunction demo ()&#123;\n    echo &quot;这是一个 shell 函数！&quot;\n&#125;\n\necho &quot;----- 函数开始执行 -----&quot;\n\ndemo()\n\necho &quot;----- 函数执行完毕 -----&quot;\n\n# 函数 return\n\nfunction demo_return()&#123;\n    a=10\n    b=20\n    return $((a + b))\n    # return $(($a + $b))\n    # return $[a + b]\n&#125;\n\ndemo_return\necho &quot;和：$?&quot;\n</code></pre>\n<blockquote>\n<p>函数返回值在调用该函数后通过 $? 来获得。<br>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可</p>\n</blockquote>\n<ul>\n<li><strong>函数参数</strong><blockquote>\n<p>在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…<br>注意，<img src=\"https://g.yuque.com/gr/latex?10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81#card=math&code=10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81&id=K39Jb\">{10}。当n&gt;=10时，需要使用${n}来获取参数。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$#</td>\n<td>传递到脚本或函数的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程 ID 号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示 Shell 使用的当前选项，与 set 命令功能相同。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunWithParam()&#123;\n    echo &quot;第一个参数为 $1 !&quot;\n    echo &quot;第二个参数为 $2 !&quot;\n    echo &quot;第十个参数为 $10 !&quot;\n    echo &quot;第十个参数为 $&#123;10&#125; !&quot;\n    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;\n    echo &quot;参数总数有 $# 个!&quot;\n    echo &quot;作为一个字符串输出所有参数 $* !&quot;\n    echo &quot;脚本运行的当前进程ID号: $$&quot;\n    echo &quot;后台运行的最后一个进程的ID号:$!&quot;\n    echo &quot;$-&quot;\n    echo &quot;$?&quot;\n\n&#125;\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n</code></pre>\n<ul>\n<li><strong>注意点</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\n\nfunction demoFun2()&#123;\n echo &quot;这是我的第二个 shell 函数!&quot;\n expr 1 + 1\n&#125;\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n</code></pre>\n<blockquote>\n<p>调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。<br>第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。<br>下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<blockquote>\n<p>shell 编程基础</p>\n</blockquote>\n<p>[ 特征 ]</p>\n<ul>\n<li>文件前添加<code>#!/bin/bash</code> 或 <code>#!/bin/sh</code><ul>\n<li>告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序</li>\n<li>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"shell-实例\"><a href=\"#shell-实例\" class=\"headerlink\" title=\"shell 实例\"></a>shell 实例</h2><ul>\n<li>echo 用于向窗口输出文本</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\necho &quot;时光静好，岁月安然！&quot;\n</code></pre>\n<ul>\n<li>脚本运行</li>\n</ul>\n<pre><code class=\"shell\">$ ./test.sh\n\n$  sh test.sh\n</code></pre>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>[ <strong>变量名的命名规则</strong> ]</p>\n<ol>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>\n<li>中间不能有空格，可以使用下划线（_）</li>\n<li>不能使用标点符号</li>\n<li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）</li>\n</ol>\n<ul>\n<li><strong>变量赋值</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\n# 使用变量\necho $&#123;string&#125;\n\n# 语句给变量赋值 (将 /etc 下目录的文件名循环出来。将文件名 赋值给 file)\nfor file in `ls /etc` 或 for file in $(ls /etc)\n    do\n    echo &quot;文件： $&#123;file&#125;&quot;\n    done\n</code></pre>\n<ul>\n<li><strong>只读变量( readonly  )</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n# 只读变量( readonly  )\nbase_url=&quot;www.baidu.com&quot;\nreadonly base_url\nbase_url=&quot;www.google.com&quot;\n\n# 运行脚本，结果如下：\n    /bin/bash: NAME: This variable is read only.\n</code></pre>\n<ul>\n<li><strong>删除变量（unset ）</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nvariable_name=&quot;System&quot;\nunset variable_name\n\necho $&#123;variable_name&#125;  # 没有任何输出\n</code></pre>\n<ul>\n<li><strong>变量类型</strong></li>\n</ul>\n<pre><code class=\"shell\">1) 局部变量: 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。\n\n2) 环境变量: 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。\n\n3) shell 变量: shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行\n</code></pre>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>字符串可以用单引号，也可以用双引号，也可以不用引号</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n# 单引号\nstr=&#39;this is a string&#39;\n单引号字符串的限制：\n    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n    单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。\n\n# 双引号\n_name=&#39;system&#39;\nstr=&quot;Hello, I know you are \\&quot;$&#123;_name&#125;\\&quot;! \\n&quot;\necho -e $&#123;str&#125;\n\n# 输出结果为：\n    Hello, I know you are &quot;runoob&quot;!\n\n双引号的优点：\n    双引号里可以有变量\n    双引号里可以出现转义字符\n</code></pre>\n<ul>\n<li><strong>字符串拼接</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n_name=&quot;system&quot;\n# 使用双引号拼接\ngreeting=&quot;hello, &quot;$_name&quot; !&quot;      # 双引号拼接\ngreeting_1=&quot;hello, $&#123;_name&#125; !&quot;    # 双引号存在变量\necho $greeting  $greeting_1\n\n# 使用单引号拼接\ngreeting_2=&#39;hello, &#39;$_name&#39; !&#39;  # 单引号拼接\ngreeting_3=&#39;hello, $&#123;_name&#125; !&#39;  # 单引号字符串中存在变量\necho $greeting_2  $greeting_3\n\n# 输出结果\nhello, system ! hello, system !\nhello, system ! hello, $&#123;_name&#125; !   # 单引号字符串中存在变量，原样输出\n</code></pre>\n<ul>\n<li><strong>获取字符串长度</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/sh\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\necho $&#123;#string&#125;  # 输出 27 包含空格\n</code></pre>\n<ul>\n<li><strong>提取字符串</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/sh\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\necho $&#123;string:0:6&#125;  # 输出 从前冬天冷呀(包含 0, 但不包含 6)  第一个字符的索引值为 0\n\n注意：\n    1. 不支持负数切片\n    2. 如果后一个数小于开始的数字，则该值表示向后延伸长度（如：$&#123;string:7:3&#125; &gt;&gt; 夏天雨）\n    3. 如果后一个数大于开始的数字，则该值表示向后延伸位置（如：$&#123;string:3:7&#125; &gt;&gt; 天冷呀 夏天雨）\n</code></pre>\n<ul>\n<li><strong>查找字符串</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/sh\nstring=&quot;从前冬天冷呀 夏天雨呀水呀 秋天远处传来你声音暖呀暖呀&quot;\n\n# 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：\n\necho `expr index &quot;$string&quot; 呀秋` # 输出 6（从 1 开始 ）\n</code></pre>\n<h2 id=\"shell-数组\"><a href=\"#shell-数组\" class=\"headerlink\" title=\"shell 数组\"></a>shell 数组</h2><ul>\n<li><strong>定义数组</strong><br>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为</li>\n</ul>\n<pre><code class=\"shell\"># 数组名=(值1 值2 ... 值n)\n\narray=(0 1 2 3 n)\n\n# 可以单独定义数组的各个分量：\narray_name[0]=value0\narray_name[1]=value1\narray_name[n]=valuen    # 可以不使用连续的下标，而且下标的范围没有限制\n</code></pre>\n<ul>\n<li><strong>读取数组</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\narray=(0 1 2 3 &quot;时光&quot; &quot;静好&quot; (value0 value1 value2 value3) )\n\necho $&#123;array[0]&#125;\n\n# 使用 @ 或 * 符号可以获取数组中的所有元素\necho $&#123;array[@]&#125; # 输出： 0 1 2 3 时光 静好\n</code></pre>\n<ul>\n<li><strong>获取数组的长度</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\narray=(0 1 2 3 &quot;时光&quot; &quot;静好&quot; )\n\n# 取得数组元素的个数\nlength=$&#123;#array[@]&#125;\n# 或者\nlength=$&#123;#array[*]&#125;\necho $&#123;length&#125; # 6\n\n# 取得数组单个元素的长度\nlengthn=$&#123;#array_name[n]&#125;\n\nlengthn=$&#123;#array_name[4]&#125;\necho $&#123;lengthn&#125; # 2\n</code></pre>\n<h2 id=\"shell-注释\"><a href=\"#shell-注释\" class=\"headerlink\" title=\"shell 注释\"></a>shell 注释</h2><ul>\n<li>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n#--------------------------------------------\n# 这是一个注释\n# author：\n# site：\n# slogan：\n#--------------------------------------------\n##### 用户配置区 开始 #####\n#\n#\n# 这里可以添加脚本描述信息\n#\n#\n##### 用户配置区 结束  #####\n</code></pre>\n<ul>\n<li><strong>多行注释</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n:&lt;&lt;EOF\n注释内容...\n注释内容...\n注释内容...\nEOF\n\n# EOF 也可以使用其他符号:\n\n:&lt;&lt;&#39;\n注释内容...\n注释内容...\n注释内容...\n&#39;\n\n:&lt;&lt;!\n注释内容...\n注释内容...\n注释内容...\n!\n</code></pre>\n<h2 id=\"shell-传递参数\"><a href=\"#shell-传递参数\" class=\"headerlink\" title=\"shell 传递参数\"></a>shell 传递参数</h2><blockquote>\n<p>在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p>\n</blockquote>\n<ul>\n<li>实例</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n# file_name = test.sh\n# 以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）\n\necho &quot;Shell 传递参数实例！&quot;;\necho &quot;执行的文件名：$0&quot;;\necho &quot;第一个参数为：$1&quot;;\necho &quot;第二个参数为：$2&quot;;\necho &quot;第三个参数为：$3&quot;;\n\n# 执行脚本\nsh test.sh 1 2 3\n    Shell 传递参数实例！\n    执行的文件名：test.sh\n    第一个参数为：1\n    第二个参数为：2\n    第三个参数为：3\n\n./test.sh 3 2 1\n    Shell 传递参数实例！\n    执行的文件名：./test.sh\n    第一个参数为：3\n    第二个参数为：2\n    第三个参数为：1\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$#</td>\n<td>传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数。 如”$*“用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程 ID 号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>与 <img src=\"https://g.yuque.com/gr/latex?*%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22#card=math&code=%2A%20%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22&id=MSwzI\">@”用「”」括起来的情况、以”$1” “<img src=\"https://g.yuque.com/gr/latex?2%22%20%E2%80%A6%20%22#card=math&code=2%22%20%E2%80%A6%20%22&id=Z0dFd\">n” 的形式输出所有参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示 Shell 使用的当前选项，与 <a href=\"https://www.runoob.com/linux/linux-comm-set.html\">set 命令</a></td>\n</tr>\n<tr>\n<td>功能相同。</td>\n<td></td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>**$_ 与 $@ 区别_</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n相同点：都是引用所有参数。\n不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 &quot; * &quot; 等价于 &quot;1 2 3&quot;（传递了一个参数），而 &quot;@&quot; 等价于 &quot;1&quot; &quot;2&quot; &quot;3&quot;（传递了三个参数）。\n</code></pre>\n<h2 id=\"shell-运算符\"><a href=\"#shell-运算符\" class=\"headerlink\" title=\"shell 运算符\"></a>shell 运算符</h2><blockquote>\n<p>shell 运算符包括 算术运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符<br>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。<br>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>\n</blockquote>\n<ul>\n<li>实例</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nval=`expr 5 + 5`\n\n# 等价于\nval=$[a+b]\n\necho $&#123;val&#125; # 10\n</code></pre>\n<ul>\n<li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li>\n<li>完整的表达式要被 `` 包含</li>\n<li><strong>算术运算符</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\n#  + 、- 、* 、 / 、= 、% 、 == 、 ！=\n# 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。\n\na=50\nb=27\n\nresult=`expr $a + $b`\necho &quot;a + b : $&#123;result&#125;&quot;\n\nresult=`expr $&#123;a&#125; - $&#123;b&#125;`\necho &quot;a - b : $&#123;result&#125;&quot;\n\n# 乘号(*)前边必须加反斜杠(\\)才能实现乘法运算\n# 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 &quot;*&quot; 不需要转义符号 &quot;\\&quot;\nresult=`expr $a \\* $b`\necho &quot;a * b : $&#123;result&#125;&quot;\n\nresult=`expr $a / $b`\necho &quot;a / b : $&#123;result&#125;&quot;\n\nresult=`expr $a % $b`\necho &quot;a % b : $&#123;result&#125;&quot;\n\n# 注意空格 [ $a == $b ]\nif [ $a == $b ]\nthen\n    echo &quot; a 等于 b&quot;\nfi\n\nif [ $a != $b ]\nthen\n    echo &quot;a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>关系运算符</strong><blockquote>\n<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-eq</td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td>[ $a -eq $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>检测两个数是否不相等，不相等返回 true。</td>\n<td>[ $a -ne $b ] 返回 true。</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td>[ $a -gt $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td>[ $a -lt $b ] 返回 true。</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td>[ $a -ge $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td>[ $a -le $b ] 返回 true。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\n# -eq\nif [ $a -eq $b ]\nthen\n    echo &quot;-eq : a 等于 b&quot;\nelse\n    echo &quot;-eq : a 不等于 b&quot;\nfi\n</code></pre>\n<ul>\n<li><strong>布尔运算符</strong><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!</td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td>[ ! false ] 返回 true。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=50\nb=20\n\nif [ $a != $b ]\nthen\n    echo &quot;a 不等于 b， 返回 true&quot;\nelse\n    echo &quot; a 等于 b&quot;\nfi\n\nif [ $a -gt 100 -o $b -lt 50 ]\nthen\n    echo &quot;a 大于 100或 b小于50 满足一个条件成立 &quot;\nfi\n\nif [ $a -gt 100 -a $b -lt 50 ]\nthen\n    echo &quot;a 大于 100 与 b小于50 返回 false &quot;\nelse\n    echo &quot;条件不成立， 必须同时满足， a 大于 100， b 小于 50&quot;\n</code></pre>\n<ul>\n<li><strong>逻辑运算符</strong><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 10，变量 b 为 20）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;&amp;</td>\n<td>逻辑的 AND</td>\n<td>[[$a -lt 100 &amp;&amp; $b -gt 100]] 返回 false</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\n\nif [[ $a -gt 100 || $b -lt 50 ]]\nthen\n    echo &quot;a 大于 100 或 b 小于 50 条件成立 返回 true&quot;\nelse\n    echo &quot;a 大于 100 或 b 小于 50 条件不成立 返回 false&quot;\nfi\n\nif [[ $a -gt 100 &amp;&amp; $b -lt 50 ]]\nthen\n    echo &quot;a 大于 100 与 b小于50 返回 true &quot;\nelse\n    echo &quot;条件不成立, false， 必须同时满足， a 大于 100， b 小于 50&quot;\nfi\n</code></pre>\n<ul>\n<li><p><strong>字符串运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明（假定变量 a 为 “abc”，变量 b 为 “efg”）</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td>[ $a = $b ] 返回 false。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td>[ $a != $b ] 返回 true。</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>检测字符串长度是否为 0，为 0 返回 true。</td>\n<td>[ -z $a ] 返回 false。</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>检测字符串长度是否不为 0，不为 0 返回 true。</td>\n<td>[ -n “$a” ] 返回 true。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td>[ $a ] 返回 true。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>文件测试运算符</strong></p>\n<blockquote>\n<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td>[ -b $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td>[ -c $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td>[ -d $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td>[ -f $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td>[ -g $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td>[ -k $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td>[ -p $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td>[ -u $file ] 返回 false。</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td>[ -r $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td>[ -w $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td>[ -x $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td>\n<td>[ -s $file ] 返回 true。</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td>[ -e $file ] 返回 true。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其他检查符：<ul>\n<li><strong>-S</strong>: 判断某文件是否 socket。</li>\n<li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nfile=&quot;/tmp/exlog/test.sh&quot;\n\nif [ -d $file ]\nthen\n   echo &quot;文件是个目录&quot;\nelse\n   echo &quot;文件不是个目录&quot;\nfi\nif [ -r $file ]\nthen\n   echo &quot;文件可读&quot;\nelse\n   echo &quot;文件不可读&quot;\nfi\nif [ -w $file ]\nthen\n   echo &quot;文件可写&quot;\nelse\n   echo &quot;文件不可写&quot;\nfi\nif [ -x $file ]\nthen\n   echo &quot;文件可执行&quot;\nelse\n   echo &quot;文件不可执行&quot;\nfi\n</code></pre>\n<h2 id=\"shell-输出\"><a href=\"#shell-输出\" class=\"headerlink\" title=\"shell 输出\"></a>shell 输出</h2><h4 id=\"echo-命令\"><a href=\"#echo-命令\" class=\"headerlink\" title=\"echo 命令\"></a>echo 命令</h4><pre><code class=\"shell\">#!/bin/bash\n\necho &quot;It is a test&quot; / echo It is a test\n\n### 显示转义字符\necho &quot;\\&quot;It is a test\\&quot;&quot;\n\n### 显示变量\n\n# read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量\nprintf &quot;请输入变量： &quot;\nread name\necho &quot;$name It is a test&quot;\n\n# 保存为 main.sh 文件 执行\n[root@localhost exlog]# sh main.sh\n请输入变量：qwe\nqwe It is a test\n\n### 显示换行\necho -e &quot;OK! \\n&quot; # -e 开启转义\necho &quot;It is a test&quot;\n# 输出结果：\nOK!\n\nIt is a test\n\n### 显示不换行\necho -e &quot;OK! \\c&quot; # -e 开启转义 \\c 不换行\necho &quot;It is a test&quot;\n# 输出结果：\nOK! It is a test\n\n### 显示结果定向至文件\nprintf &quot;请输入变量： &quot;\nread name\necho &quot;$name It is a test&quot; &gt; test.sh\n\n# 保存为 main.sh 文件 执行, cat test.sh\n\n### 原样输出字符串，不进行转义或取变量(用单引号)\n\necho &#39;$name\\&quot;&#39;\n\n# 输入结果    $name\\&quot;\n\n### 显示命令执行结果 注意： 这里使用的是反引号 `, 而不是单引号 &#39;\necho `date`\n\n# Thu Jul 24 10:08:46 CST 2014\n</code></pre>\n<h4 id=\"printf-命令\"><a href=\"#printf-命令\" class=\"headerlink\" title=\"printf 命令\"></a>printf 命令</h4><blockquote>\n<p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。<br>默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\necho &quot;Hello, Shell&quot;\nprintf &quot;Hello, Shell\\n&quot;\n\nprintf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876\n\n# 输出结果\n    姓名     性别   体重kg\n    郭靖     男      66.12\n    杨过     男      48.65\n    郭芙     女      47.99\n</code></pre>\n<p><strong>%s %c %d %f</strong> 都是格式替代符，<strong>％s</strong> 输出一个字符串，<strong>％d</strong> 整型输出，<strong>％c</strong> 输出一个字符，<strong>％f</strong> 输出实数，以小数形式输出。</p>\n<p><strong>%-10s</strong> 指一个宽度为 10 个字符（**-** 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p><strong>%-4.2f</strong> 指格式化为小数，其中 <strong>.2</strong> 指保留 2 位小数。</p>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>将输出重定向到 file。</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file。</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><em>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</em></p>\n</blockquote>\n<h2 id=\"shell-流程控制\"><a href=\"#shell-流程控制\" class=\"headerlink\" title=\"shell 流程控制\"></a>shell 流程控制</h2><h3 id=\"if-控制语句\"><a href=\"#if-控制语句\" class=\"headerlink\" title=\"if 控制语句\"></a>if 控制语句</h3><pre><code class=\"shell\">#!/bin/bash\n\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo &quot;a 等于 b&quot;\nelif [ $a -gt $b ]\nthen\n   echo &quot;a 大于 b&quot;\nelif [ $a -lt $b ]\nthen\n   echo &quot;a 小于 b&quot;\nelse\n   echo &quot;没有符合的条件&quot;\nfi\n</code></pre>\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><pre><code class=\"shell\">#!/bin/bash\n\nfor loop in 1 2 3 4 5\ndo\n    echo &quot;The value is: $loop&quot;\ndone\n\n# 序输出字符串中的字符\nfor str in This is a string\ndo\n    echo $str\ndone\n# 输出结果\n    This\n    is\n    a\n    string\n\n# 通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要\nfor((i=1;i&lt;=5;i++));do\n    echo &quot;这是第 $i 次调用&quot;;\ndone;\n</code></pre>\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h3><pre><code class=\"shell\">#!/bin/bash\n#!/bin/bash\nint=1\nwhile(( $int&lt;=5 ))\ndo\n    echo $int\n    let &quot;int++&quot;\ndone\n</code></pre>\n<blockquote>\n<p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量</p>\n</blockquote>\n<h3 id=\"无限循环\"><a href=\"#无限循环\" class=\"headerlink\" title=\"无限循环\"></a>无限循环</h3><pre><code class=\"shell\">#!/bin/bash\nwhile true\ndo\n    printf &quot;请输入内容：&quot;\n    read content\n    echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n# 或者\n\nwhile ：\ndo\n    printf &quot;请输入内容：&quot;\n    read content\n    echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n\n#或者\n\nfor (( ; ; ))\ndo\n    printf &quot;请输入内容：&quot;\n    read content\n    echo &quot;您输入额内容是 $&#123;content&#125;&quot;\ndone\n</code></pre>\n<h3 id=\"until-循环\"><a href=\"#until-循环\" class=\"headerlink\" title=\"until 循环\"></a>until 循环</h3><blockquote>\n<p>until 循环执行一系列命令直至条件为 true 时停止。<br>until 循环与 while 循环在处理方式上刚好相反。<br>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\na=0\n\nuntil [ ! $a -lt 10 ]\ndo\n   echo $a\n   a=`expr $a + 1`\ndone\n</code></pre>\n<h3 id=\"case-…-esac\"><a href=\"#case-…-esac\" class=\"headerlink\" title=\"case … esac\"></a>case … esac</h3><blockquote>\n<p><strong>case … esac</strong> 为多选择语句,是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。<br>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p>\n</blockquote>\n<pre><code class=\"shell\">\necho &#39;输入 1 到 4 之间的数字:&#39;\necho &#39;你输入的数字为:&#39;\nread aNum\ncase $aNum in\n    1)  echo &#39;你选择了 1&#39;\n    ;;\n    2)  echo &#39;你选择了 2&#39;\n    ;;\n    3)  echo &#39;你选择了 3&#39;\n    ;;\n    4)  echo &#39;你选择了 4&#39;\n    ;;\n    *)  echo &#39;你没有输入 1 到 4 之间的数字&#39;\n    ;;\nesac\n</code></pre>\n<h3 id=\"跳出循环\"><a href=\"#跳出循环\" class=\"headerlink\" title=\"跳出循环\"></a>跳出循环</h3><ul>\n<li><strong>break</strong><blockquote>\n<p>break 命令允许跳出所有循环（终止执行后面的所有循环）</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字:&quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;\n            break\n        ;;\n    esac\ndone\n</code></pre>\n<ul>\n<li><strong>continue</strong><blockquote>\n<p>continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nwhile :\ndo\n    echo -n &quot;输入 1 到 5 之间的数字: &quot;\n    read aNum\n    case $aNum in\n        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;\n        ;;\n        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;\n            continue\n            echo &quot;游戏结束&quot;\n        ;;\n    esac\ndone\n</code></pre>\n<h2 id=\"Shell-函数\"><a href=\"#Shell-函数\" class=\"headerlink\" title=\"Shell 函数\"></a>Shell 函数</h2><pre><code class=\"shell\">#!/bin/bash\n\n# shell 函数定义\n\n[ function ] funname [()]\n\n&#123;\n\n    action;\n\n    [return int;]\n\n&#125;\n</code></pre>\n<blockquote>\n<ul>\n<li>可以带 function fun() 定义，也可以直接 fun() 定义,不带任何参数。</li>\n<li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return 后跟数值 n(0-255)</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>实例</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunction demo ()&#123;\n    echo &quot;这是一个 shell 函数！&quot;\n&#125;\n\necho &quot;----- 函数开始执行 -----&quot;\n\ndemo()\n\necho &quot;----- 函数执行完毕 -----&quot;\n\n# 函数 return\n\nfunction demo_return()&#123;\n    a=10\n    b=20\n    return $((a + b))\n    # return $(($a + $b))\n    # return $[a + b]\n&#125;\n\ndemo_return\necho &quot;和：$?&quot;\n</code></pre>\n<blockquote>\n<p>函数返回值在调用该函数后通过 $? 来获得。<br>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可</p>\n</blockquote>\n<ul>\n<li><strong>函数参数</strong><blockquote>\n<p>在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…<br>注意，<img src=\"https://g.yuque.com/gr/latex?10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81#card=math&code=10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81&id=K39Jb\">{10}。当n&gt;=10时，需要使用${n}来获取参数。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$#</td>\n<td>传递到脚本或函数的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程 ID 号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示 Shell 使用的当前选项，与 set 命令功能相同。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunWithParam()&#123;\n    echo &quot;第一个参数为 $1 !&quot;\n    echo &quot;第二个参数为 $2 !&quot;\n    echo &quot;第十个参数为 $10 !&quot;\n    echo &quot;第十个参数为 $&#123;10&#125; !&quot;\n    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;\n    echo &quot;参数总数有 $# 个!&quot;\n    echo &quot;作为一个字符串输出所有参数 $* !&quot;\n    echo &quot;脚本运行的当前进程ID号: $$&quot;\n    echo &quot;后台运行的最后一个进程的ID号:$!&quot;\n    echo &quot;$-&quot;\n    echo &quot;$?&quot;\n\n&#125;\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n</code></pre>\n<ul>\n<li><strong>注意点</strong></li>\n</ul>\n<pre><code class=\"shell\">#!/bin/bash\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\n\nfunction demoFun2()&#123;\n echo &quot;这是我的第二个 shell 函数!&quot;\n expr 1 + 1\n&#125;\n\ndemoFun2\necho $?\ndemoFun1\necho 在这里插入命令！\necho $?  # 显示 上一条 echo 在这里插入命令！ 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n这是我的第二个 shell 函数!\n2\n0\n这是我的第一个 shell 函数!\n在这里插入命令！\n0\n</code></pre>\n<blockquote>\n<p>调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。<br>第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。<br>下面这个测试，连续使用两次 **echo $?**，得到的结果不同，更为直观：</p>\n</blockquote>\n<pre><code class=\"shell\">#!/bin/bash\n\nfunction demoFun1()&#123;\n    echo &quot;这是我的第一个 shell 函数!&quot;\n    return `expr 1 + 1`\n&#125;\n\ndemoFun1\necho $?\necho $?   # 显示 上一条 echo $? 的结果，0表示没有错误，其他任何值表明有错误。\n\n# 输出结果\n\n这是我的第一个 shell 函数!\n2\n0\n</code></pre>\n"},{"title":"Docker","urlname":"sovqbi","date":"2022-01-11T13:36:48.000Z","abbrlink":4126800539,"_content":"\n","source":"_posts/语雀/sovqbi.md","raw":"---\ntitle: Docker\nurlname: sovqbi\ndate: '2022-01-11 21:36:48 +0800'\ntags: []\ncategories: []\nabbrlink: 4126800539\n---\n\n","slug":"语雀/sovqbi","published":1,"updated":"2022-03-03T11:26:07.585Z","_id":"cl0awjjph0010081bbcaa4lpo","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"Python 面向对象","urlname":"sv9yd8","date":"2020-11-18T08:33:53.000Z","abbrlink":1505698396,"_content":"\n---\n2020-11-18\n原文链接： Python入门 class类的继承 - 木头人的文章 - 知乎 [https://zhuanlan.zhihu.com/p/30239694](https://zhuanlan.zhihu.com/p/30239694)\n---\n\n类是面向对象编程的核心， 它扮演相关数据及逻辑的容器角色。它们提供了创建“真实”对象(也就是实例)的蓝图。\n\n```python\n# 如何定义类\n# 使用 class 关键字定义类。 可以提供一个可选的父类或者说基类; 如果没有合适的基类，\n# 那就使用 object 作为基类。class 行之后是可选的文档字符串， 静态成员定义及方法定义。\nclass FooClass(object):\n    # my very first class: FooClass\n    version = 0.1\n    def __init__(self, nm='John Doe'):\n        \"\"\"constructor\"\"\"\n        self.name = nm # class instance (data) attribute\n        print 'Created a class instance for', nm\n    def showname(self):\n        \"\"\"display instance attribute and class name\"\"\"\n        print 'Your name is', self.name\n        print 'My name is', self.__class__.__name__\n    def showver(self):\n        \"\"\"display class(static) attribute\"\"\"\n        print self.version # references FooClass.version\n    def addMe2Me(self, x):\n        \"\"\"apply + operation to argument\"\"\"\n        return x + x\n```\n\n## Python 实例\n\n```python\n\tfoo1 = FooClass() # Created a class instance for John Doe\n\n\"\"\"\n    屏幕上显示的字符串正是自动调用 __init__() 方法的结果。当一个实例被创建，__init__()就会被自动调用。不管这个__int__()是自定义的还是默认的。创建一个类实例就像调用一个函数， 它们确实拥有一样的语法。它们都是可调用对象。类实例使用同样的函数运算符调用一个函数或方法。既然我们成功创建了第一个类实例， 那现在来进行一些方法调用\n\n\"\"\"\n\tfoo1.showname() Your name is John Doe\n\t\t# My name is __main__.FooClass\n\n \tfoo1.showver() # 0.1\n\tprint foo1.addMe2Me(5) # 10\n```\n\n> 在上面这个类中， 我们定义了一个静态变量 version, 它将被所有实例及四个方法共享，**init**()， showname(), showver(), 及熟悉的 addMe2Me(). 这些 show\\*() 方法并没有做什么有用的事情， 仅仅输出对应的信息。 **init**() 方法有一个特殊名字， 所有名字开始和结束都有两个下划线的方法都是特殊方法。\n> 当一个类实例被创建时， **init**() 方法会自动执行， 在类实例创建完毕后执行， 类似构建函数。**init**() 可以被当成构建函数， 不过不象其它语言中的构建函数， 它并不创建实例--它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的 **init**() 方法， 你可以覆盖默认的 **init**()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。在这个例子里， 我们初始化了一个名为 name 的类实例属性（或者说成员）。这个变量仅在类实例中存在， 它并不是实际类本身的一部分。\n> **init**()需要一个默认的参数， 前一节中曾经介绍过。毫无疑问，你也注意到每个方法都有的一个参数， self. 什么是 self ? 它是类实例自身的引用。其他语言通常使用一个名为 this 的标识符\n\n## Python 类的继承\n\n如下定义一个动物类 Animal 为基类/父类，它基本两个实例属性 name 和 age 、一个方法 call。\n\n```python\nclass Animal(object):  #  python3中所有类都可以继承于object 基类\n\tdef __init__(self, name, age):\n       \tself.name = name\n       \tself.age = age\n\n   \tdef call(self):\n       \tprint(self.name, '会叫')\n\n######\n# 现在我们需要定义一个 Cat 猫类继承于 Animal，猫类比动物类多一个 sex 属性。\n######\nclass Cat(Animal):\n   \tdef __init__(self,name,age,sex):\n       \tsuper(Cat, self).__init__(name,age)  # 不要忘记从 Animal 类引入属性\n       \tself.sex=sex\n\nif __name__ == '__main__':  # 单模块被引用时下面代码不会受影响，用于调试\n   \tc = Cat('喵喵', 2, '男')  #  Cat继承了父类Animal的属性\n   \tc.call()  # 输出 喵喵 会叫 ，Cat继承了父类Animal的方法\n```\n\n> **注意：**一定要用 super(Cat, self).**init**(name,age) 去初始化父类，否则，继承自 Animal 的 Cat 子类将没有 name 和 age 两个属性。\n> 函数 super(Cat, self)将返回当前类继承的父类，即 Animal，然后调用**init**()方法，注意 self 参数已在 super()中传入，在**init**()中将隐式传递，不能再写出 self。\n\n## Python 对子类方法的重构\n\n上面例子中 Animal 的子类 Cat 继承了父类的属性和方法，但是我们猫类 Cat 有自己的叫声 '喵喵' ，这时我们可以对父类的 Call() 方法进行重构。如下：\n\n```python\nclass Cat(Animal):\n   \tdef __init__(self, name, age, sex):\n       \tsuper(Cat, self).__init__(name,age)\n       \tself.sex = sex\n\n  \tdef call(self):\n      \tprint(self.name,'会“喵喵”叫')\n\nif __name__ == '__main__':\n   \tc = Cat('喵喵', 2, '男')\n   \tc.call()  # 输出：喵喵 会“喵喵”叫\n```\n\n> 类方法的调用顺序，当我们在子类中重构父类的方法后，Cat 子类的实例先会在自己的类 Cat 中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法。\n\n## Python 中子类与父类的关系\n\n```python\nclass Animal(object):\n   \tpass\n\nclass Cat(Animal):\n   \tpass\n\nA= Animal()\nC = Cat()\n```\n\n子类与父类的关系是 “is” 的关系，如上 Cat 继承于 Animal 类，我们可以说：\n\n**“A”是 Animal 类的实例，但，“A”不是 Cat 类的实例。**\n\n**“C”是 Animal 类的实例，“C”也是 Cat 类的实例。**\n\n判断对象之间的关系，我们可以通过 **isinstance** (变量,类型) 来进行判断：\n\n```python3\nprint('\"A\" IS Animal?', isinstance(A, Animal))\nprint('\"A\" IS Cat?', isinstance(A, Cat))\nprint('\"C\" IS Animal?', isinstance(C, Animal))\nprint('\"C\" IS Cat?', isinstance(C, Cat))\n```\n\n输出结果：\n\n```\n\"A\" IS Animal? True\n\"A\" IS Cat? False\n\"C\" IS Animal? True\n\"C\" IS Cat? True\n```\n\n**拓展：**isinstance() 判断变量类型\n\n函数 isinstance() 不止可以用在我们自定义的类，也可以判断一个变量的类型，如判断数据类型是否为 int、str、list、dict 等。\n\n```python3\nprint(isinstance(100, int))\nprint(isinstance('100', int))\nprint(isinstance(100, str))\nprint(isinstance('100', str))\n```\n\n输出：\n\n```\nTrue\nFalse\nFalse\nTrue\n```\n\n## python 中多态\n\n类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Animal 派生出 Cat 和 Dog，并都写了一个 call() 方法，如下示例：\n\n```python3\nclass Animal(object):\n   def __init__(self, name, age):\n       self.name = name\n       self.age = age\n   def call(self):\n       print(self.name, '会叫')\n\nclass Cat(Animal):\n   def __init__(self, name, age, sex):\n       super(Cat, self).__init__(name, age)\n       self.sex = sex\n\n   def call(self):\n       print(self.name, '会“喵喵”叫')\n\nclass Dog(Animal):\n   def __init__(self, name, age, sex):\n       super(Dog, self).__init__(name, age)\n       self.sex = sex\n   def call(self):\n       print(self.name, '会“汪汪”叫')\n```\n\n我们定义一个 do 函数，接收一个变量 ‘all’,如下：\n\n```python3\ndef do(all):\n   all.call()\n\nA = Animal('小黑',4)\nC = Cat('喵喵', 2, '男')\nD = Dog('旺财', 5, '女')\n\nfor x in (A,C,D):\n   do(x)\n```\n\n输出结果：\n\n```\n小黑 会叫\n喵喵 会“喵喵”叫\n旺财 会“汪汪”叫\n```\n\n**小知识：多态**\n\n这种行为称为多态。也就是说，方法调用将作用在 all 的实际类型上。C 是 Cat 类型，它实际上拥有自己的 call() 方法以及从 Animal 继承的 call 方法，但调用 C .call() 总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。\n\n传递给函数 do(all) 的参数 all 不一定是 Animal 或 Animal 的子类型。任何数据类型的实例都可以，只要它有一个 call() 的方法即可。其他类不继承于 Animal，具备 call 方法也可以使用 do 函数。这就是动态语言，动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。\n\n## Python 类继承的注意事项\n\n- 在继承中基类的构造方法（**init**()方法）不会被自动调用，它需要在其派生类的构造方法中亲自专门调用。\n- 在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。而在类中调用普通函数时并不需要带上 self 参数\n- Python 总是首先查找对应类的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）\n\n## 类的继承思维导图\n\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/518310/1605688490310-75bf1b3a-8514-46f9-857c-903ce2122fc8.jpeg#crop=0&crop=0&crop=1&crop=1&height=888&id=R7B4Z&originHeight=888&originWidth=720&originalType=binary∶=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=720)\n","source":"_posts/语雀/sv9yd8.md","raw":"---\ntitle: Python 面向对象\nurlname: sv9yd8\ndate: '2020-11-18 16:33:53 +0800'\ntags: []\ncategories: []\nabbrlink: 1505698396\n---\n\n---\n2020-11-18\n原文链接： Python入门 class类的继承 - 木头人的文章 - 知乎 [https://zhuanlan.zhihu.com/p/30239694](https://zhuanlan.zhihu.com/p/30239694)\n---\n\n类是面向对象编程的核心， 它扮演相关数据及逻辑的容器角色。它们提供了创建“真实”对象(也就是实例)的蓝图。\n\n```python\n# 如何定义类\n# 使用 class 关键字定义类。 可以提供一个可选的父类或者说基类; 如果没有合适的基类，\n# 那就使用 object 作为基类。class 行之后是可选的文档字符串， 静态成员定义及方法定义。\nclass FooClass(object):\n    # my very first class: FooClass\n    version = 0.1\n    def __init__(self, nm='John Doe'):\n        \"\"\"constructor\"\"\"\n        self.name = nm # class instance (data) attribute\n        print 'Created a class instance for', nm\n    def showname(self):\n        \"\"\"display instance attribute and class name\"\"\"\n        print 'Your name is', self.name\n        print 'My name is', self.__class__.__name__\n    def showver(self):\n        \"\"\"display class(static) attribute\"\"\"\n        print self.version # references FooClass.version\n    def addMe2Me(self, x):\n        \"\"\"apply + operation to argument\"\"\"\n        return x + x\n```\n\n## Python 实例\n\n```python\n\tfoo1 = FooClass() # Created a class instance for John Doe\n\n\"\"\"\n    屏幕上显示的字符串正是自动调用 __init__() 方法的结果。当一个实例被创建，__init__()就会被自动调用。不管这个__int__()是自定义的还是默认的。创建一个类实例就像调用一个函数， 它们确实拥有一样的语法。它们都是可调用对象。类实例使用同样的函数运算符调用一个函数或方法。既然我们成功创建了第一个类实例， 那现在来进行一些方法调用\n\n\"\"\"\n\tfoo1.showname() Your name is John Doe\n\t\t# My name is __main__.FooClass\n\n \tfoo1.showver() # 0.1\n\tprint foo1.addMe2Me(5) # 10\n```\n\n> 在上面这个类中， 我们定义了一个静态变量 version, 它将被所有实例及四个方法共享，**init**()， showname(), showver(), 及熟悉的 addMe2Me(). 这些 show\\*() 方法并没有做什么有用的事情， 仅仅输出对应的信息。 **init**() 方法有一个特殊名字， 所有名字开始和结束都有两个下划线的方法都是特殊方法。\n> 当一个类实例被创建时， **init**() 方法会自动执行， 在类实例创建完毕后执行， 类似构建函数。**init**() 可以被当成构建函数， 不过不象其它语言中的构建函数， 它并不创建实例--它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的 **init**() 方法， 你可以覆盖默认的 **init**()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。在这个例子里， 我们初始化了一个名为 name 的类实例属性（或者说成员）。这个变量仅在类实例中存在， 它并不是实际类本身的一部分。\n> **init**()需要一个默认的参数， 前一节中曾经介绍过。毫无疑问，你也注意到每个方法都有的一个参数， self. 什么是 self ? 它是类实例自身的引用。其他语言通常使用一个名为 this 的标识符\n\n## Python 类的继承\n\n如下定义一个动物类 Animal 为基类/父类，它基本两个实例属性 name 和 age 、一个方法 call。\n\n```python\nclass Animal(object):  #  python3中所有类都可以继承于object 基类\n\tdef __init__(self, name, age):\n       \tself.name = name\n       \tself.age = age\n\n   \tdef call(self):\n       \tprint(self.name, '会叫')\n\n######\n# 现在我们需要定义一个 Cat 猫类继承于 Animal，猫类比动物类多一个 sex 属性。\n######\nclass Cat(Animal):\n   \tdef __init__(self,name,age,sex):\n       \tsuper(Cat, self).__init__(name,age)  # 不要忘记从 Animal 类引入属性\n       \tself.sex=sex\n\nif __name__ == '__main__':  # 单模块被引用时下面代码不会受影响，用于调试\n   \tc = Cat('喵喵', 2, '男')  #  Cat继承了父类Animal的属性\n   \tc.call()  # 输出 喵喵 会叫 ，Cat继承了父类Animal的方法\n```\n\n> **注意：**一定要用 super(Cat, self).**init**(name,age) 去初始化父类，否则，继承自 Animal 的 Cat 子类将没有 name 和 age 两个属性。\n> 函数 super(Cat, self)将返回当前类继承的父类，即 Animal，然后调用**init**()方法，注意 self 参数已在 super()中传入，在**init**()中将隐式传递，不能再写出 self。\n\n## Python 对子类方法的重构\n\n上面例子中 Animal 的子类 Cat 继承了父类的属性和方法，但是我们猫类 Cat 有自己的叫声 '喵喵' ，这时我们可以对父类的 Call() 方法进行重构。如下：\n\n```python\nclass Cat(Animal):\n   \tdef __init__(self, name, age, sex):\n       \tsuper(Cat, self).__init__(name,age)\n       \tself.sex = sex\n\n  \tdef call(self):\n      \tprint(self.name,'会“喵喵”叫')\n\nif __name__ == '__main__':\n   \tc = Cat('喵喵', 2, '男')\n   \tc.call()  # 输出：喵喵 会“喵喵”叫\n```\n\n> 类方法的调用顺序，当我们在子类中重构父类的方法后，Cat 子类的实例先会在自己的类 Cat 中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法。\n\n## Python 中子类与父类的关系\n\n```python\nclass Animal(object):\n   \tpass\n\nclass Cat(Animal):\n   \tpass\n\nA= Animal()\nC = Cat()\n```\n\n子类与父类的关系是 “is” 的关系，如上 Cat 继承于 Animal 类，我们可以说：\n\n**“A”是 Animal 类的实例，但，“A”不是 Cat 类的实例。**\n\n**“C”是 Animal 类的实例，“C”也是 Cat 类的实例。**\n\n判断对象之间的关系，我们可以通过 **isinstance** (变量,类型) 来进行判断：\n\n```python3\nprint('\"A\" IS Animal?', isinstance(A, Animal))\nprint('\"A\" IS Cat?', isinstance(A, Cat))\nprint('\"C\" IS Animal?', isinstance(C, Animal))\nprint('\"C\" IS Cat?', isinstance(C, Cat))\n```\n\n输出结果：\n\n```\n\"A\" IS Animal? True\n\"A\" IS Cat? False\n\"C\" IS Animal? True\n\"C\" IS Cat? True\n```\n\n**拓展：**isinstance() 判断变量类型\n\n函数 isinstance() 不止可以用在我们自定义的类，也可以判断一个变量的类型，如判断数据类型是否为 int、str、list、dict 等。\n\n```python3\nprint(isinstance(100, int))\nprint(isinstance('100', int))\nprint(isinstance(100, str))\nprint(isinstance('100', str))\n```\n\n输出：\n\n```\nTrue\nFalse\nFalse\nTrue\n```\n\n## python 中多态\n\n类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Animal 派生出 Cat 和 Dog，并都写了一个 call() 方法，如下示例：\n\n```python3\nclass Animal(object):\n   def __init__(self, name, age):\n       self.name = name\n       self.age = age\n   def call(self):\n       print(self.name, '会叫')\n\nclass Cat(Animal):\n   def __init__(self, name, age, sex):\n       super(Cat, self).__init__(name, age)\n       self.sex = sex\n\n   def call(self):\n       print(self.name, '会“喵喵”叫')\n\nclass Dog(Animal):\n   def __init__(self, name, age, sex):\n       super(Dog, self).__init__(name, age)\n       self.sex = sex\n   def call(self):\n       print(self.name, '会“汪汪”叫')\n```\n\n我们定义一个 do 函数，接收一个变量 ‘all’,如下：\n\n```python3\ndef do(all):\n   all.call()\n\nA = Animal('小黑',4)\nC = Cat('喵喵', 2, '男')\nD = Dog('旺财', 5, '女')\n\nfor x in (A,C,D):\n   do(x)\n```\n\n输出结果：\n\n```\n小黑 会叫\n喵喵 会“喵喵”叫\n旺财 会“汪汪”叫\n```\n\n**小知识：多态**\n\n这种行为称为多态。也就是说，方法调用将作用在 all 的实际类型上。C 是 Cat 类型，它实际上拥有自己的 call() 方法以及从 Animal 继承的 call 方法，但调用 C .call() 总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。\n\n传递给函数 do(all) 的参数 all 不一定是 Animal 或 Animal 的子类型。任何数据类型的实例都可以，只要它有一个 call() 的方法即可。其他类不继承于 Animal，具备 call 方法也可以使用 do 函数。这就是动态语言，动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。\n\n## Python 类继承的注意事项\n\n- 在继承中基类的构造方法（**init**()方法）不会被自动调用，它需要在其派生类的构造方法中亲自专门调用。\n- 在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。而在类中调用普通函数时并不需要带上 self 参数\n- Python 总是首先查找对应类的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）\n\n## 类的继承思维导图\n\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/518310/1605688490310-75bf1b3a-8514-46f9-857c-903ce2122fc8.jpeg#crop=0&crop=0&crop=1&crop=1&height=888&id=R7B4Z&originHeight=888&originWidth=720&originalType=binary∶=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=720)\n","slug":"语雀/sv9yd8","published":1,"updated":"2022-03-03T11:26:07.586Z","_id":"cl0awjjpi0011081b6tyd59pg","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>2020-11-18<br>原文链接： Python入门 class类的继承 - 木头人的文章 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/30239694\" rel=\"external nofollow noreferrer\">https://zhuanlan.zhihu.com/p/30239694</a></p>\n<hr>\n<p>类是面向对象编程的核心， 它扮演相关数据及逻辑的容器角色。它们提供了创建“真实”对象(也就是实例)的蓝图。</p>\n<pre><code class=\"python\"># 如何定义类\n# 使用 class 关键字定义类。 可以提供一个可选的父类或者说基类; 如果没有合适的基类，\n# 那就使用 object 作为基类。class 行之后是可选的文档字符串， 静态成员定义及方法定义。\nclass FooClass(object):\n    # my very first class: FooClass\n    version = 0.1\n    def __init__(self, nm=&#39;John Doe&#39;):\n        &quot;&quot;&quot;constructor&quot;&quot;&quot;\n        self.name = nm # class instance (data) attribute\n        print &#39;Created a class instance for&#39;, nm\n    def showname(self):\n        &quot;&quot;&quot;display instance attribute and class name&quot;&quot;&quot;\n        print &#39;Your name is&#39;, self.name\n        print &#39;My name is&#39;, self.__class__.__name__\n    def showver(self):\n        &quot;&quot;&quot;display class(static) attribute&quot;&quot;&quot;\n        print self.version # references FooClass.version\n    def addMe2Me(self, x):\n        &quot;&quot;&quot;apply + operation to argument&quot;&quot;&quot;\n        return x + x\n</code></pre>\n<h2 id=\"Python-实例\"><a href=\"#Python-实例\" class=\"headerlink\" title=\"Python 实例\"></a>Python 实例</h2><pre><code class=\"python\">    foo1 = FooClass() # Created a class instance for John Doe\n\n&quot;&quot;&quot;\n    屏幕上显示的字符串正是自动调用 __init__() 方法的结果。当一个实例被创建，__init__()就会被自动调用。不管这个__int__()是自定义的还是默认的。创建一个类实例就像调用一个函数， 它们确实拥有一样的语法。它们都是可调用对象。类实例使用同样的函数运算符调用一个函数或方法。既然我们成功创建了第一个类实例， 那现在来进行一些方法调用\n\n&quot;&quot;&quot;\n    foo1.showname() Your name is John Doe\n        # My name is __main__.FooClass\n\n     foo1.showver() # 0.1\n    print foo1.addMe2Me(5) # 10\n</code></pre>\n<blockquote>\n<p>在上面这个类中， 我们定义了一个静态变量 version, 它将被所有实例及四个方法共享，<strong>init</strong>()， showname(), showver(), 及熟悉的 addMe2Me(). 这些 show*() 方法并没有做什么有用的事情， 仅仅输出对应的信息。 <strong>init</strong>() 方法有一个特殊名字， 所有名字开始和结束都有两个下划线的方法都是特殊方法。<br>当一个类实例被创建时， <strong>init</strong>() 方法会自动执行， 在类实例创建完毕后执行， 类似构建函数。<strong>init</strong>() 可以被当成构建函数， 不过不象其它语言中的构建函数， 它并不创建实例–它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的 <strong>init</strong>() 方法， 你可以覆盖默认的 <strong>init</strong>()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。在这个例子里， 我们初始化了一个名为 name 的类实例属性（或者说成员）。这个变量仅在类实例中存在， 它并不是实际类本身的一部分。<br><strong>init</strong>()需要一个默认的参数， 前一节中曾经介绍过。毫无疑问，你也注意到每个方法都有的一个参数， self. 什么是 self ? 它是类实例自身的引用。其他语言通常使用一个名为 this 的标识符</p>\n</blockquote>\n<h2 id=\"Python-类的继承\"><a href=\"#Python-类的继承\" class=\"headerlink\" title=\"Python 类的继承\"></a>Python 类的继承</h2><p>如下定义一个动物类 Animal 为基类/父类，它基本两个实例属性 name 和 age 、一个方法 call。</p>\n<pre><code class=\"python\">class Animal(object):  #  python3中所有类都可以继承于object 基类\n    def __init__(self, name, age):\n           self.name = name\n           self.age = age\n\n       def call(self):\n           print(self.name, &#39;会叫&#39;)\n\n######\n# 现在我们需要定义一个 Cat 猫类继承于 Animal，猫类比动物类多一个 sex 属性。\n######\nclass Cat(Animal):\n       def __init__(self,name,age,sex):\n           super(Cat, self).__init__(name,age)  # 不要忘记从 Animal 类引入属性\n           self.sex=sex\n\nif __name__ == &#39;__main__&#39;:  # 单模块被引用时下面代码不会受影响，用于调试\n       c = Cat(&#39;喵喵&#39;, 2, &#39;男&#39;)  #  Cat继承了父类Animal的属性\n       c.call()  # 输出 喵喵 会叫 ，Cat继承了父类Animal的方法\n</code></pre>\n<blockquote>\n<p><strong>注意：</strong>一定要用 super(Cat, self).<strong>init</strong>(name,age) 去初始化父类，否则，继承自 Animal 的 Cat 子类将没有 name 和 age 两个属性。<br>函数 super(Cat, self)将返回当前类继承的父类，即 Animal，然后调用<strong>init</strong>()方法，注意 self 参数已在 super()中传入，在<strong>init</strong>()中将隐式传递，不能再写出 self。</p>\n</blockquote>\n<h2 id=\"Python-对子类方法的重构\"><a href=\"#Python-对子类方法的重构\" class=\"headerlink\" title=\"Python 对子类方法的重构\"></a>Python 对子类方法的重构</h2><p>上面例子中 Animal 的子类 Cat 继承了父类的属性和方法，但是我们猫类 Cat 有自己的叫声 ‘喵喵’ ，这时我们可以对父类的 Call() 方法进行重构。如下：</p>\n<pre><code class=\"python\">class Cat(Animal):\n       def __init__(self, name, age, sex):\n           super(Cat, self).__init__(name,age)\n           self.sex = sex\n\n      def call(self):\n          print(self.name,&#39;会“喵喵”叫&#39;)\n\nif __name__ == &#39;__main__&#39;:\n       c = Cat(&#39;喵喵&#39;, 2, &#39;男&#39;)\n       c.call()  # 输出：喵喵 会“喵喵”叫\n</code></pre>\n<blockquote>\n<p>类方法的调用顺序，当我们在子类中重构父类的方法后，Cat 子类的实例先会在自己的类 Cat 中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法。</p>\n</blockquote>\n<h2 id=\"Python-中子类与父类的关系\"><a href=\"#Python-中子类与父类的关系\" class=\"headerlink\" title=\"Python 中子类与父类的关系\"></a>Python 中子类与父类的关系</h2><pre><code class=\"python\">class Animal(object):\n       pass\n\nclass Cat(Animal):\n       pass\n\nA= Animal()\nC = Cat()\n</code></pre>\n<p>子类与父类的关系是 “is” 的关系，如上 Cat 继承于 Animal 类，我们可以说：</p>\n<p><strong>“A”是 Animal 类的实例，但，“A”不是 Cat 类的实例。</strong></p>\n<p><strong>“C”是 Animal 类的实例，“C”也是 Cat 类的实例。</strong></p>\n<p>判断对象之间的关系，我们可以通过 <strong>isinstance</strong> (变量,类型) 来进行判断：</p>\n<pre><code class=\"python3\">print(&#39;&quot;A&quot; IS Animal?&#39;, isinstance(A, Animal))\nprint(&#39;&quot;A&quot; IS Cat?&#39;, isinstance(A, Cat))\nprint(&#39;&quot;C&quot; IS Animal?&#39;, isinstance(C, Animal))\nprint(&#39;&quot;C&quot; IS Cat?&#39;, isinstance(C, Cat))\n</code></pre>\n<p>输出结果：</p>\n<pre><code>&quot;A&quot; IS Animal? True\n&quot;A&quot; IS Cat? False\n&quot;C&quot; IS Animal? True\n&quot;C&quot; IS Cat? True\n</code></pre>\n<p><strong>拓展：</strong>isinstance() 判断变量类型</p>\n<p>函数 isinstance() 不止可以用在我们自定义的类，也可以判断一个变量的类型，如判断数据类型是否为 int、str、list、dict 等。</p>\n<pre><code class=\"python3\">print(isinstance(100, int))\nprint(isinstance(&#39;100&#39;, int))\nprint(isinstance(100, str))\nprint(isinstance(&#39;100&#39;, str))\n</code></pre>\n<p>输出：</p>\n<pre><code>True\nFalse\nFalse\nTrue\n</code></pre>\n<h2 id=\"python-中多态\"><a href=\"#python-中多态\" class=\"headerlink\" title=\"python 中多态\"></a>python 中多态</h2><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Animal 派生出 Cat 和 Dog，并都写了一个 call() 方法，如下示例：</p>\n<pre><code class=\"python3\">class Animal(object):\n   def __init__(self, name, age):\n       self.name = name\n       self.age = age\n   def call(self):\n       print(self.name, &#39;会叫&#39;)\n\nclass Cat(Animal):\n   def __init__(self, name, age, sex):\n       super(Cat, self).__init__(name, age)\n       self.sex = sex\n\n   def call(self):\n       print(self.name, &#39;会“喵喵”叫&#39;)\n\nclass Dog(Animal):\n   def __init__(self, name, age, sex):\n       super(Dog, self).__init__(name, age)\n       self.sex = sex\n   def call(self):\n       print(self.name, &#39;会“汪汪”叫&#39;)\n</code></pre>\n<p>我们定义一个 do 函数，接收一个变量 ‘all’,如下：</p>\n<pre><code class=\"python3\">def do(all):\n   all.call()\n\nA = Animal(&#39;小黑&#39;,4)\nC = Cat(&#39;喵喵&#39;, 2, &#39;男&#39;)\nD = Dog(&#39;旺财&#39;, 5, &#39;女&#39;)\n\nfor x in (A,C,D):\n   do(x)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>小黑 会叫\n喵喵 会“喵喵”叫\n旺财 会“汪汪”叫\n</code></pre>\n<p><strong>小知识：多态</strong></p>\n<p>这种行为称为多态。也就是说，方法调用将作用在 all 的实际类型上。C 是 Cat 类型，它实际上拥有自己的 call() 方法以及从 Animal 继承的 call 方法，但调用 C .call() 总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。</p>\n<p>传递给函数 do(all) 的参数 all 不一定是 Animal 或 Animal 的子类型。任何数据类型的实例都可以，只要它有一个 call() 的方法即可。其他类不继承于 Animal，具备 call 方法也可以使用 do 函数。这就是动态语言，动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。</p>\n<h2 id=\"Python-类继承的注意事项\"><a href=\"#Python-类继承的注意事项\" class=\"headerlink\" title=\"Python 类继承的注意事项\"></a>Python 类继承的注意事项</h2><ul>\n<li>在继承中基类的构造方法（<strong>init</strong>()方法）不会被自动调用，它需要在其派生类的构造方法中亲自专门调用。</li>\n<li>在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。而在类中调用普通函数时并不需要带上 self 参数</li>\n<li>Python 总是首先查找对应类的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）</li>\n</ul>\n<h2 id=\"类的继承思维导图\"><a href=\"#类的继承思维导图\" class=\"headerlink\" title=\"类的继承思维导图\"></a>类的继承思维导图</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/518310/1605688490310-75bf1b3a-8514-46f9-857c-903ce2122fc8.jpeg#crop=0&crop=0&crop=1&crop=1&height=888&id=R7B4Z&originHeight=888&originWidth=720&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=720\"></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<hr>\n<p>2020-11-18<br>原文链接： Python入门 class类的继承 - 木头人的文章 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/30239694\">https://zhuanlan.zhihu.com/p/30239694</a></p>\n<hr>\n<p>类是面向对象编程的核心， 它扮演相关数据及逻辑的容器角色。它们提供了创建“真实”对象(也就是实例)的蓝图。</p>\n<pre><code class=\"python\"># 如何定义类\n# 使用 class 关键字定义类。 可以提供一个可选的父类或者说基类; 如果没有合适的基类，\n# 那就使用 object 作为基类。class 行之后是可选的文档字符串， 静态成员定义及方法定义。\nclass FooClass(object):\n    # my very first class: FooClass\n    version = 0.1\n    def __init__(self, nm=&#39;John Doe&#39;):\n        &quot;&quot;&quot;constructor&quot;&quot;&quot;\n        self.name = nm # class instance (data) attribute\n        print &#39;Created a class instance for&#39;, nm\n    def showname(self):\n        &quot;&quot;&quot;display instance attribute and class name&quot;&quot;&quot;\n        print &#39;Your name is&#39;, self.name\n        print &#39;My name is&#39;, self.__class__.__name__\n    def showver(self):\n        &quot;&quot;&quot;display class(static) attribute&quot;&quot;&quot;\n        print self.version # references FooClass.version\n    def addMe2Me(self, x):\n        &quot;&quot;&quot;apply + operation to argument&quot;&quot;&quot;\n        return x + x\n</code></pre>\n<h2 id=\"Python-实例\"><a href=\"#Python-实例\" class=\"headerlink\" title=\"Python 实例\"></a>Python 实例</h2><pre><code class=\"python\">    foo1 = FooClass() # Created a class instance for John Doe\n\n&quot;&quot;&quot;\n    屏幕上显示的字符串正是自动调用 __init__() 方法的结果。当一个实例被创建，__init__()就会被自动调用。不管这个__int__()是自定义的还是默认的。创建一个类实例就像调用一个函数， 它们确实拥有一样的语法。它们都是可调用对象。类实例使用同样的函数运算符调用一个函数或方法。既然我们成功创建了第一个类实例， 那现在来进行一些方法调用\n\n&quot;&quot;&quot;\n    foo1.showname() Your name is John Doe\n        # My name is __main__.FooClass\n\n     foo1.showver() # 0.1\n    print foo1.addMe2Me(5) # 10\n</code></pre>\n<blockquote>\n<p>在上面这个类中， 我们定义了一个静态变量 version, 它将被所有实例及四个方法共享，<strong>init</strong>()， showname(), showver(), 及熟悉的 addMe2Me(). 这些 show*() 方法并没有做什么有用的事情， 仅仅输出对应的信息。 <strong>init</strong>() 方法有一个特殊名字， 所有名字开始和结束都有两个下划线的方法都是特殊方法。<br>当一个类实例被创建时， <strong>init</strong>() 方法会自动执行， 在类实例创建完毕后执行， 类似构建函数。<strong>init</strong>() 可以被当成构建函数， 不过不象其它语言中的构建函数， 它并不创建实例–它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的 <strong>init</strong>() 方法， 你可以覆盖默认的 <strong>init</strong>()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。在这个例子里， 我们初始化了一个名为 name 的类实例属性（或者说成员）。这个变量仅在类实例中存在， 它并不是实际类本身的一部分。<br><strong>init</strong>()需要一个默认的参数， 前一节中曾经介绍过。毫无疑问，你也注意到每个方法都有的一个参数， self. 什么是 self ? 它是类实例自身的引用。其他语言通常使用一个名为 this 的标识符</p>\n</blockquote>\n<h2 id=\"Python-类的继承\"><a href=\"#Python-类的继承\" class=\"headerlink\" title=\"Python 类的继承\"></a>Python 类的继承</h2><p>如下定义一个动物类 Animal 为基类/父类，它基本两个实例属性 name 和 age 、一个方法 call。</p>\n<pre><code class=\"python\">class Animal(object):  #  python3中所有类都可以继承于object 基类\n    def __init__(self, name, age):\n           self.name = name\n           self.age = age\n\n       def call(self):\n           print(self.name, &#39;会叫&#39;)\n\n######\n# 现在我们需要定义一个 Cat 猫类继承于 Animal，猫类比动物类多一个 sex 属性。\n######\nclass Cat(Animal):\n       def __init__(self,name,age,sex):\n           super(Cat, self).__init__(name,age)  # 不要忘记从 Animal 类引入属性\n           self.sex=sex\n\nif __name__ == &#39;__main__&#39;:  # 单模块被引用时下面代码不会受影响，用于调试\n       c = Cat(&#39;喵喵&#39;, 2, &#39;男&#39;)  #  Cat继承了父类Animal的属性\n       c.call()  # 输出 喵喵 会叫 ，Cat继承了父类Animal的方法\n</code></pre>\n<blockquote>\n<p><strong>注意：</strong>一定要用 super(Cat, self).<strong>init</strong>(name,age) 去初始化父类，否则，继承自 Animal 的 Cat 子类将没有 name 和 age 两个属性。<br>函数 super(Cat, self)将返回当前类继承的父类，即 Animal，然后调用<strong>init</strong>()方法，注意 self 参数已在 super()中传入，在<strong>init</strong>()中将隐式传递，不能再写出 self。</p>\n</blockquote>\n<h2 id=\"Python-对子类方法的重构\"><a href=\"#Python-对子类方法的重构\" class=\"headerlink\" title=\"Python 对子类方法的重构\"></a>Python 对子类方法的重构</h2><p>上面例子中 Animal 的子类 Cat 继承了父类的属性和方法，但是我们猫类 Cat 有自己的叫声 ‘喵喵’ ，这时我们可以对父类的 Call() 方法进行重构。如下：</p>\n<pre><code class=\"python\">class Cat(Animal):\n       def __init__(self, name, age, sex):\n           super(Cat, self).__init__(name,age)\n           self.sex = sex\n\n      def call(self):\n          print(self.name,&#39;会“喵喵”叫&#39;)\n\nif __name__ == &#39;__main__&#39;:\n       c = Cat(&#39;喵喵&#39;, 2, &#39;男&#39;)\n       c.call()  # 输出：喵喵 会“喵喵”叫\n</code></pre>\n<blockquote>\n<p>类方法的调用顺序，当我们在子类中重构父类的方法后，Cat 子类的实例先会在自己的类 Cat 中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法。</p>\n</blockquote>\n<h2 id=\"Python-中子类与父类的关系\"><a href=\"#Python-中子类与父类的关系\" class=\"headerlink\" title=\"Python 中子类与父类的关系\"></a>Python 中子类与父类的关系</h2><pre><code class=\"python\">class Animal(object):\n       pass\n\nclass Cat(Animal):\n       pass\n\nA= Animal()\nC = Cat()\n</code></pre>\n<p>子类与父类的关系是 “is” 的关系，如上 Cat 继承于 Animal 类，我们可以说：</p>\n<p><strong>“A”是 Animal 类的实例，但，“A”不是 Cat 类的实例。</strong></p>\n<p><strong>“C”是 Animal 类的实例，“C”也是 Cat 类的实例。</strong></p>\n<p>判断对象之间的关系，我们可以通过 <strong>isinstance</strong> (变量,类型) 来进行判断：</p>\n<pre><code class=\"python3\">print(&#39;&quot;A&quot; IS Animal?&#39;, isinstance(A, Animal))\nprint(&#39;&quot;A&quot; IS Cat?&#39;, isinstance(A, Cat))\nprint(&#39;&quot;C&quot; IS Animal?&#39;, isinstance(C, Animal))\nprint(&#39;&quot;C&quot; IS Cat?&#39;, isinstance(C, Cat))\n</code></pre>\n<p>输出结果：</p>\n<pre><code>&quot;A&quot; IS Animal? True\n&quot;A&quot; IS Cat? False\n&quot;C&quot; IS Animal? True\n&quot;C&quot; IS Cat? True\n</code></pre>\n<p><strong>拓展：</strong>isinstance() 判断变量类型</p>\n<p>函数 isinstance() 不止可以用在我们自定义的类，也可以判断一个变量的类型，如判断数据类型是否为 int、str、list、dict 等。</p>\n<pre><code class=\"python3\">print(isinstance(100, int))\nprint(isinstance(&#39;100&#39;, int))\nprint(isinstance(100, str))\nprint(isinstance(&#39;100&#39;, str))\n</code></pre>\n<p>输出：</p>\n<pre><code>True\nFalse\nFalse\nTrue\n</code></pre>\n<h2 id=\"python-中多态\"><a href=\"#python-中多态\" class=\"headerlink\" title=\"python 中多态\"></a>python 中多态</h2><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Animal 派生出 Cat 和 Dog，并都写了一个 call() 方法，如下示例：</p>\n<pre><code class=\"python3\">class Animal(object):\n   def __init__(self, name, age):\n       self.name = name\n       self.age = age\n   def call(self):\n       print(self.name, &#39;会叫&#39;)\n\nclass Cat(Animal):\n   def __init__(self, name, age, sex):\n       super(Cat, self).__init__(name, age)\n       self.sex = sex\n\n   def call(self):\n       print(self.name, &#39;会“喵喵”叫&#39;)\n\nclass Dog(Animal):\n   def __init__(self, name, age, sex):\n       super(Dog, self).__init__(name, age)\n       self.sex = sex\n   def call(self):\n       print(self.name, &#39;会“汪汪”叫&#39;)\n</code></pre>\n<p>我们定义一个 do 函数，接收一个变量 ‘all’,如下：</p>\n<pre><code class=\"python3\">def do(all):\n   all.call()\n\nA = Animal(&#39;小黑&#39;,4)\nC = Cat(&#39;喵喵&#39;, 2, &#39;男&#39;)\nD = Dog(&#39;旺财&#39;, 5, &#39;女&#39;)\n\nfor x in (A,C,D):\n   do(x)\n</code></pre>\n<p>输出结果：</p>\n<pre><code>小黑 会叫\n喵喵 会“喵喵”叫\n旺财 会“汪汪”叫\n</code></pre>\n<p><strong>小知识：多态</strong></p>\n<p>这种行为称为多态。也就是说，方法调用将作用在 all 的实际类型上。C 是 Cat 类型，它实际上拥有自己的 call() 方法以及从 Animal 继承的 call 方法，但调用 C .call() 总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。</p>\n<p>传递给函数 do(all) 的参数 all 不一定是 Animal 或 Animal 的子类型。任何数据类型的实例都可以，只要它有一个 call() 的方法即可。其他类不继承于 Animal，具备 call 方法也可以使用 do 函数。这就是动态语言，动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。</p>\n<h2 id=\"Python-类继承的注意事项\"><a href=\"#Python-类继承的注意事项\" class=\"headerlink\" title=\"Python 类继承的注意事项\"></a>Python 类继承的注意事项</h2><ul>\n<li>在继承中基类的构造方法（<strong>init</strong>()方法）不会被自动调用，它需要在其派生类的构造方法中亲自专门调用。</li>\n<li>在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。而在类中调用普通函数时并不需要带上 self 参数</li>\n<li>Python 总是首先查找对应类的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）</li>\n</ul>\n<h2 id=\"类的继承思维导图\"><a href=\"#类的继承思维导图\" class=\"headerlink\" title=\"类的继承思维导图\"></a>类的继承思维导图</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/518310/1605688490310-75bf1b3a-8514-46f9-857c-903ce2122fc8.jpeg#crop=0&crop=0&crop=1&crop=1&height=888&id=R7B4Z&originHeight=888&originWidth=720&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=720\"></p>\n"},{"title":"前端面试题总结：HTML + CSS","urlname":"thnyp2","date":"2020-01-02T02:23:19.000Z","abbrlink":2359691599,"_content":"\n## 双飞翼、圣杯布局\n\n**双飞翼：**\n**![1.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461348681-6867f7c9-5629-4e0b-81ad-e358382eefbe.png#align=left&display=inline&height=197&margin=%5Bobject%20Object%5D&name=1.png&originHeight=197&originWidth=594&size=9849&status=done&style=none&width=594)**\n\\*\\*\n**布局：**\n**![2.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461415998-683c814a-97a8-411c-a4d2-a5bf58919e8e.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&name=2.png&originHeight=259&originWidth=379&size=8244&status=done&style=none&width=379)**\n\n**圣杯：**\n**![3.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461463131-0808ee33-23b0-4327-a5bc-fbdbf7dac65e.png#align=left&display=inline&height=114&margin=%5Bobject%20Object%5D&name=3.png&originHeight=114&originWidth=599&size=5994&status=done&style=none&width=599)**\n\\*\\*\n**![4.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461472325-2916d7e2-53ba-4335-8fd1-ca9f37b36a93.png#align=left&display=inline&height=158&margin=%5Bobject%20Object%5D&name=4.png&originHeight=158&originWidth=514&size=10503&status=done&style=none&width=514)**\n\n**布局：**\n**![5.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461485727-53e4b567-11b9-4977-8bc6-26df7f45c673.png#align=left&display=inline&height=97&margin=%5Bobject%20Object%5D&name=5.png&originHeight=97&originWidth=279&size=2599&status=done&style=none&width=279)**\n\n## 响应式布局\n\n**概念：**同一个网页（html 文件）根据视口不同显示不同的样式（css）\n**原理：**同一个 html 根据视口不同加载不同的 css 文件\n**优点：**对于不同视口都可以显示非常饱满的网页结构，没有横向滚动条。\n**缺点：**制作复杂，同时对于移动端而言，需要加载非常多的 pc 端的样式和图片等资源，影响加载速度，同时费流量。\n\n## Flex 布局\n\n**flex-direction（主轴）：**\nrow（默认值）：主轴为水平方向，起点在左端。\nrow-reverse：主轴为水平方向，起点在右端。\ncolumn：主轴为垂直方向，起点在上沿。\ncolumn-reverse：主轴为垂直方向，起点在下沿。\n代码\n.box{\nflex-direction: row | row-reverse | column | column-reverse;\n}\n**flex-wrap 属性**\n默认情况下，项目都排列在一条线（又称“轴线”）上\nnowrap（默认值）：不换行。\nwrap：换行，第一行在下方\nwrap-reverse：换行，第一行在上方。\n代码：\n.box{ flex-wrap: nowarp | wrap | wrap-reverse; }\n\n## DTD（文档类型定义）\n\n作用：规定我们书写的 html 使用的是哪一种规范。\nHtml：strict(严格版), transitional(通用版)，frameset(框架集版)\nXHtml：strict, transitional, frameset\nHtml5：\n通过设置 DTD 来让 IE 浏览器根据标准盒模型渲染\n\n## 盒模型\n\n在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4 个部分一起构成了 css 中元素的盒模型。\n\n## 样式的继承性 display、line-height\n\n**display 不能继承**\n**line-height 可以继承，设置在容器的最外层和内层都是可以的**\n不可继承的：\n                 display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before 和 unicode-bidi。\n能够继承的：\n所有元素可继承：visibility 和 cursor。\n内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。\n块状元素可继承：text-indent 和 text-align。\n列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。\n表格元素可继承：border-collapse\n\n## 标准文档流\n\n遵循于从上向下，从左向右的一个顺序\n**BFC（块级元素）**\n独占一行       可以设置宽高         内部可以包含块级或者行内\n**IFC（行内元素）**\n并排显示       不能设置宽高           高矮不同\n\n### 脱离标准文档流方式\n\n浮动   绝对定位     固定定位\n\n### 定位与浮动区别\n\n**position: absolute **\n会导致元素脱离文档流，被定位的元素等于在文档中不占据任何位置，在另一个层呈现，可以设置 z-index。PS 的图层效果就是 position: absolute。　\n**float：**\n也会导致元素脱离文档流，但还在文档或容器中占据位置，把文档流和其它 float 元素向左或向右挤，并可能导致换行。图片的文字环绕布局效果就是 float。\n\n## 浏览器 hack\n\n让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果\n简单的说 hack 的目的就是使你的 CSS 代码兼容不同的浏览器\n\n### Opacity 和 rgba 设置透明度的区别\n\nOpacity 作用于元素及元素内所有的内容（可继承）（0 - 1）\nRgba 设置透明度作用于元素的颜色或背景色 （0 - 1）\n\n---\n\n1. 如何让页面内容居中对齐\n1. 让一个元素在父级元素内水平垂直居中\n1. 如何实现多列布局\n1. 自适应 css 布局 ，这对手机和电脑\n1. 清除浮动的方式\n1. 有哪些隐藏内容的方式\n1. 用 canvas 画一个图\n1. document load 和 document ready 之间的区别\n1. Px 和 em 区别\n\n---\n\n以上更新于 2020 年 3 月 25 日\n\n---\n","source":"_posts/语雀/thnyp2.md","raw":"---\ntitle: 前端面试题总结：HTML + CSS\nurlname: thnyp2\ndate: '2020-01-02 10:23:19 +0800'\ntags: []\ncategories: []\nabbrlink: 2359691599\n---\n\n## 双飞翼、圣杯布局\n\n**双飞翼：**\n**![1.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461348681-6867f7c9-5629-4e0b-81ad-e358382eefbe.png#align=left&display=inline&height=197&margin=%5Bobject%20Object%5D&name=1.png&originHeight=197&originWidth=594&size=9849&status=done&style=none&width=594)**\n\\*\\*\n**布局：**\n**![2.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461415998-683c814a-97a8-411c-a4d2-a5bf58919e8e.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&name=2.png&originHeight=259&originWidth=379&size=8244&status=done&style=none&width=379)**\n\n**圣杯：**\n**![3.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461463131-0808ee33-23b0-4327-a5bc-fbdbf7dac65e.png#align=left&display=inline&height=114&margin=%5Bobject%20Object%5D&name=3.png&originHeight=114&originWidth=599&size=5994&status=done&style=none&width=599)**\n\\*\\*\n**![4.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461472325-2916d7e2-53ba-4335-8fd1-ca9f37b36a93.png#align=left&display=inline&height=158&margin=%5Bobject%20Object%5D&name=4.png&originHeight=158&originWidth=514&size=10503&status=done&style=none&width=514)**\n\n**布局：**\n**![5.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585461485727-53e4b567-11b9-4977-8bc6-26df7f45c673.png#align=left&display=inline&height=97&margin=%5Bobject%20Object%5D&name=5.png&originHeight=97&originWidth=279&size=2599&status=done&style=none&width=279)**\n\n## 响应式布局\n\n**概念：**同一个网页（html 文件）根据视口不同显示不同的样式（css）\n**原理：**同一个 html 根据视口不同加载不同的 css 文件\n**优点：**对于不同视口都可以显示非常饱满的网页结构，没有横向滚动条。\n**缺点：**制作复杂，同时对于移动端而言，需要加载非常多的 pc 端的样式和图片等资源，影响加载速度，同时费流量。\n\n## Flex 布局\n\n**flex-direction（主轴）：**\nrow（默认值）：主轴为水平方向，起点在左端。\nrow-reverse：主轴为水平方向，起点在右端。\ncolumn：主轴为垂直方向，起点在上沿。\ncolumn-reverse：主轴为垂直方向，起点在下沿。\n代码\n.box{\nflex-direction: row | row-reverse | column | column-reverse;\n}\n**flex-wrap 属性**\n默认情况下，项目都排列在一条线（又称“轴线”）上\nnowrap（默认值）：不换行。\nwrap：换行，第一行在下方\nwrap-reverse：换行，第一行在上方。\n代码：\n.box{ flex-wrap: nowarp | wrap | wrap-reverse; }\n\n## DTD（文档类型定义）\n\n作用：规定我们书写的 html 使用的是哪一种规范。\nHtml：strict(严格版), transitional(通用版)，frameset(框架集版)\nXHtml：strict, transitional, frameset\nHtml5：\n通过设置 DTD 来让 IE 浏览器根据标准盒模型渲染\n\n## 盒模型\n\n在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4 个部分一起构成了 css 中元素的盒模型。\n\n## 样式的继承性 display、line-height\n\n**display 不能继承**\n**line-height 可以继承，设置在容器的最外层和内层都是可以的**\n不可继承的：\n                 display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before 和 unicode-bidi。\n能够继承的：\n所有元素可继承：visibility 和 cursor。\n内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。\n块状元素可继承：text-indent 和 text-align。\n列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。\n表格元素可继承：border-collapse\n\n## 标准文档流\n\n遵循于从上向下，从左向右的一个顺序\n**BFC（块级元素）**\n独占一行       可以设置宽高         内部可以包含块级或者行内\n**IFC（行内元素）**\n并排显示       不能设置宽高           高矮不同\n\n### 脱离标准文档流方式\n\n浮动   绝对定位     固定定位\n\n### 定位与浮动区别\n\n**position: absolute **\n会导致元素脱离文档流，被定位的元素等于在文档中不占据任何位置，在另一个层呈现，可以设置 z-index。PS 的图层效果就是 position: absolute。　\n**float：**\n也会导致元素脱离文档流，但还在文档或容器中占据位置，把文档流和其它 float 元素向左或向右挤，并可能导致换行。图片的文字环绕布局效果就是 float。\n\n## 浏览器 hack\n\n让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果\n简单的说 hack 的目的就是使你的 CSS 代码兼容不同的浏览器\n\n### Opacity 和 rgba 设置透明度的区别\n\nOpacity 作用于元素及元素内所有的内容（可继承）（0 - 1）\nRgba 设置透明度作用于元素的颜色或背景色 （0 - 1）\n\n---\n\n1. 如何让页面内容居中对齐\n1. 让一个元素在父级元素内水平垂直居中\n1. 如何实现多列布局\n1. 自适应 css 布局 ，这对手机和电脑\n1. 清除浮动的方式\n1. 有哪些隐藏内容的方式\n1. 用 canvas 画一个图\n1. document load 和 document ready 之间的区别\n1. Px 和 em 区别\n\n---\n\n以上更新于 2020 年 3 月 25 日\n\n---\n","slug":"语雀/thnyp2","published":1,"updated":"2022-03-03T11:26:07.587Z","_id":"cl0awjjpi0012081b7uck2r8h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"双飞翼、圣杯布局\"><a href=\"#双飞翼、圣杯布局\" class=\"headerlink\" title=\"双飞翼、圣杯布局\"></a>双飞翼、圣杯布局</h2><p><strong>双飞翼：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461348681-6867f7c9-5629-4e0b-81ad-e358382eefbe.png#align=left&display=inline&height=197&margin=%5Bobject%20Object%5D&name=1.png&originHeight=197&originWidth=594&size=9849&status=done&style=none&width=594\" alt=\"1.png\"></strong><br>**<br><strong>布局：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461415998-683c814a-97a8-411c-a4d2-a5bf58919e8e.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&name=2.png&originHeight=259&originWidth=379&size=8244&status=done&style=none&width=379\" alt=\"2.png\"></strong></p>\n<p><strong>圣杯：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461463131-0808ee33-23b0-4327-a5bc-fbdbf7dac65e.png#align=left&display=inline&height=114&margin=%5Bobject%20Object%5D&name=3.png&originHeight=114&originWidth=599&size=5994&status=done&style=none&width=599\" alt=\"3.png\"></strong><br>**<br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461472325-2916d7e2-53ba-4335-8fd1-ca9f37b36a93.png#align=left&display=inline&height=158&margin=%5Bobject%20Object%5D&name=4.png&originHeight=158&originWidth=514&size=10503&status=done&style=none&width=514\" alt=\"4.png\"></strong></p>\n<p><strong>布局：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461485727-53e4b567-11b9-4977-8bc6-26df7f45c673.png#align=left&display=inline&height=97&margin=%5Bobject%20Object%5D&name=5.png&originHeight=97&originWidth=279&size=2599&status=done&style=none&width=279\" alt=\"5.png\"></strong></p>\n<h2 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h2><p><strong>概念：</strong>同一个网页（html 文件）根据视口不同显示不同的样式（css）<br><strong>原理：</strong>同一个 html 根据视口不同加载不同的 css 文件<br><strong>优点：</strong>对于不同视口都可以显示非常饱满的网页结构，没有横向滚动条。<br><strong>缺点：</strong>制作复杂，同时对于移动端而言，需要加载非常多的 pc 端的样式和图片等资源，影响加载速度，同时费流量。</p>\n<h2 id=\"Flex-布局\"><a href=\"#Flex-布局\" class=\"headerlink\" title=\"Flex 布局\"></a>Flex 布局</h2><p><strong>flex-direction（主轴）：</strong><br>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。<br>代码<br>.box{<br>flex-direction: row | row-reverse | column | column-reverse;<br>}<br><strong>flex-wrap 属性</strong><br>默认情况下，项目都排列在一条线（又称“轴线”）上<br>nowrap（默认值）：不换行。<br>wrap：换行，第一行在下方<br>wrap-reverse：换行，第一行在上方。<br>代码：<br>.box{ flex-wrap: nowarp | wrap | wrap-reverse; }</p>\n<h2 id=\"DTD（文档类型定义）\"><a href=\"#DTD（文档类型定义）\" class=\"headerlink\" title=\"DTD（文档类型定义）\"></a>DTD（文档类型定义）</h2><p>作用：规定我们书写的 html 使用的是哪一种规范。<br>Html：strict(严格版), transitional(通用版)，frameset(框架集版)<br>XHtml：strict, transitional, frameset<br>Html5：<br>通过设置 DTD 来让 IE 浏览器根据标准盒模型渲染</p>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><p>在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4 个部分一起构成了 css 中元素的盒模型。</p>\n<h2 id=\"样式的继承性-display、line-height\"><a href=\"#样式的继承性-display、line-height\" class=\"headerlink\" title=\"样式的继承性 display、line-height\"></a>样式的继承性 display、line-height</h2><p><strong>display 不能继承</strong><br><strong>line-height 可以继承，设置在容器的最外层和内层都是可以的</strong><br>不可继承的：<br>                 display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before 和 unicode-bidi。<br>能够继承的：<br>所有元素可继承：visibility 和 cursor。<br>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。<br>块状元素可继承：text-indent 和 text-align。<br>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。<br>表格元素可继承：border-collapse</p>\n<h2 id=\"标准文档流\"><a href=\"#标准文档流\" class=\"headerlink\" title=\"标准文档流\"></a>标准文档流</h2><p>遵循于从上向下，从左向右的一个顺序<br><strong>BFC（块级元素）</strong><br>独占一行       可以设置宽高         内部可以包含块级或者行内<br><strong>IFC（行内元素）</strong><br>并排显示       不能设置宽高           高矮不同</p>\n<h3 id=\"脱离标准文档流方式\"><a href=\"#脱离标准文档流方式\" class=\"headerlink\" title=\"脱离标准文档流方式\"></a>脱离标准文档流方式</h3><p>浮动   绝对定位     固定定位</p>\n<h3 id=\"定位与浮动区别\"><a href=\"#定位与浮动区别\" class=\"headerlink\" title=\"定位与浮动区别\"></a>定位与浮动区别</h3><p>**position: absolute **<br>会导致元素脱离文档流，被定位的元素等于在文档中不占据任何位置，在另一个层呈现，可以设置 z-index。PS 的图层效果就是 position: absolute。　<br><strong>float：</strong><br>也会导致元素脱离文档流，但还在文档或容器中占据位置，把文档流和其它 float 元素向左或向右挤，并可能导致换行。图片的文字环绕布局效果就是 float。</p>\n<h2 id=\"浏览器-hack\"><a href=\"#浏览器-hack\" class=\"headerlink\" title=\"浏览器 hack\"></a>浏览器 hack</h2><p>让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果<br>简单的说 hack 的目的就是使你的 CSS 代码兼容不同的浏览器</p>\n<h3 id=\"Opacity-和-rgba-设置透明度的区别\"><a href=\"#Opacity-和-rgba-设置透明度的区别\" class=\"headerlink\" title=\"Opacity 和 rgba 设置透明度的区别\"></a>Opacity 和 rgba 设置透明度的区别</h3><p>Opacity 作用于元素及元素内所有的内容（可继承）（0 - 1）<br>Rgba 设置透明度作用于元素的颜色或背景色 （0 - 1）</p>\n<hr>\n<ol>\n<li>如何让页面内容居中对齐</li>\n<li>让一个元素在父级元素内水平垂直居中</li>\n<li>如何实现多列布局</li>\n<li>自适应 css 布局 ，这对手机和电脑</li>\n<li>清除浮动的方式</li>\n<li>有哪些隐藏内容的方式</li>\n<li>用 canvas 画一个图</li>\n<li>document load 和 document ready 之间的区别</li>\n<li>Px 和 em 区别</li>\n</ol>\n<hr>\n<p>以上更新于 2020 年 3 月 25 日</p>\n<hr>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"双飞翼、圣杯布局\"><a href=\"#双飞翼、圣杯布局\" class=\"headerlink\" title=\"双飞翼、圣杯布局\"></a>双飞翼、圣杯布局</h2><p><strong>双飞翼：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461348681-6867f7c9-5629-4e0b-81ad-e358382eefbe.png#align=left&display=inline&height=197&margin=%5Bobject%20Object%5D&name=1.png&originHeight=197&originWidth=594&size=9849&status=done&style=none&width=594\" alt=\"1.png\"></strong><br>**<br><strong>布局：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461415998-683c814a-97a8-411c-a4d2-a5bf58919e8e.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&name=2.png&originHeight=259&originWidth=379&size=8244&status=done&style=none&width=379\" alt=\"2.png\"></strong></p>\n<p><strong>圣杯：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461463131-0808ee33-23b0-4327-a5bc-fbdbf7dac65e.png#align=left&display=inline&height=114&margin=%5Bobject%20Object%5D&name=3.png&originHeight=114&originWidth=599&size=5994&status=done&style=none&width=599\" alt=\"3.png\"></strong><br>**<br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461472325-2916d7e2-53ba-4335-8fd1-ca9f37b36a93.png#align=left&display=inline&height=158&margin=%5Bobject%20Object%5D&name=4.png&originHeight=158&originWidth=514&size=10503&status=done&style=none&width=514\" alt=\"4.png\"></strong></p>\n<p><strong>布局：</strong><br><strong><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585461485727-53e4b567-11b9-4977-8bc6-26df7f45c673.png#align=left&display=inline&height=97&margin=%5Bobject%20Object%5D&name=5.png&originHeight=97&originWidth=279&size=2599&status=done&style=none&width=279\" alt=\"5.png\"></strong></p>\n<h2 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h2><p><strong>概念：</strong>同一个网页（html 文件）根据视口不同显示不同的样式（css）<br><strong>原理：</strong>同一个 html 根据视口不同加载不同的 css 文件<br><strong>优点：</strong>对于不同视口都可以显示非常饱满的网页结构，没有横向滚动条。<br><strong>缺点：</strong>制作复杂，同时对于移动端而言，需要加载非常多的 pc 端的样式和图片等资源，影响加载速度，同时费流量。</p>\n<h2 id=\"Flex-布局\"><a href=\"#Flex-布局\" class=\"headerlink\" title=\"Flex 布局\"></a>Flex 布局</h2><p><strong>flex-direction（主轴）：</strong><br>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。<br>代码<br>.box{<br>flex-direction: row | row-reverse | column | column-reverse;<br>}<br><strong>flex-wrap 属性</strong><br>默认情况下，项目都排列在一条线（又称“轴线”）上<br>nowrap（默认值）：不换行。<br>wrap：换行，第一行在下方<br>wrap-reverse：换行，第一行在上方。<br>代码：<br>.box{ flex-wrap: nowarp | wrap | wrap-reverse; }</p>\n<h2 id=\"DTD（文档类型定义）\"><a href=\"#DTD（文档类型定义）\" class=\"headerlink\" title=\"DTD（文档类型定义）\"></a>DTD（文档类型定义）</h2><p>作用：规定我们书写的 html 使用的是哪一种规范。<br>Html：strict(严格版), transitional(通用版)，frameset(框架集版)<br>XHtml：strict, transitional, frameset<br>Html5：<br>通过设置 DTD 来让 IE 浏览器根据标准盒模型渲染</p>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><p>在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4 个部分一起构成了 css 中元素的盒模型。</p>\n<h2 id=\"样式的继承性-display、line-height\"><a href=\"#样式的继承性-display、line-height\" class=\"headerlink\" title=\"样式的继承性 display、line-height\"></a>样式的继承性 display、line-height</h2><p><strong>display 不能继承</strong><br><strong>line-height 可以继承，设置在容器的最外层和内层都是可以的</strong><br>不可继承的：<br>                 display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before 和 unicode-bidi。<br>能够继承的：<br>所有元素可继承：visibility 和 cursor。<br>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction。<br>块状元素可继承：text-indent 和 text-align。<br>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。<br>表格元素可继承：border-collapse</p>\n<h2 id=\"标准文档流\"><a href=\"#标准文档流\" class=\"headerlink\" title=\"标准文档流\"></a>标准文档流</h2><p>遵循于从上向下，从左向右的一个顺序<br><strong>BFC（块级元素）</strong><br>独占一行       可以设置宽高         内部可以包含块级或者行内<br><strong>IFC（行内元素）</strong><br>并排显示       不能设置宽高           高矮不同</p>\n<h3 id=\"脱离标准文档流方式\"><a href=\"#脱离标准文档流方式\" class=\"headerlink\" title=\"脱离标准文档流方式\"></a>脱离标准文档流方式</h3><p>浮动   绝对定位     固定定位</p>\n<h3 id=\"定位与浮动区别\"><a href=\"#定位与浮动区别\" class=\"headerlink\" title=\"定位与浮动区别\"></a>定位与浮动区别</h3><p>**position: absolute **<br>会导致元素脱离文档流，被定位的元素等于在文档中不占据任何位置，在另一个层呈现，可以设置 z-index。PS 的图层效果就是 position: absolute。　<br><strong>float：</strong><br>也会导致元素脱离文档流，但还在文档或容器中占据位置，把文档流和其它 float 元素向左或向右挤，并可能导致换行。图片的文字环绕布局效果就是 float。</p>\n<h2 id=\"浏览器-hack\"><a href=\"#浏览器-hack\" class=\"headerlink\" title=\"浏览器 hack\"></a>浏览器 hack</h2><p>让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果<br>简单的说 hack 的目的就是使你的 CSS 代码兼容不同的浏览器</p>\n<h3 id=\"Opacity-和-rgba-设置透明度的区别\"><a href=\"#Opacity-和-rgba-设置透明度的区别\" class=\"headerlink\" title=\"Opacity 和 rgba 设置透明度的区别\"></a>Opacity 和 rgba 设置透明度的区别</h3><p>Opacity 作用于元素及元素内所有的内容（可继承）（0 - 1）<br>Rgba 设置透明度作用于元素的颜色或背景色 （0 - 1）</p>\n<hr>\n<ol>\n<li>如何让页面内容居中对齐</li>\n<li>让一个元素在父级元素内水平垂直居中</li>\n<li>如何实现多列布局</li>\n<li>自适应 css 布局 ，这对手机和电脑</li>\n<li>清除浮动的方式</li>\n<li>有哪些隐藏内容的方式</li>\n<li>用 canvas 画一个图</li>\n<li>document load 和 document ready 之间的区别</li>\n<li>Px 和 em 区别</li>\n</ol>\n<hr>\n<p>以上更新于 2020 年 3 月 25 日</p>\n<hr>\n"},{"title":"MySQL 基础语法","urlname":"srtl9u","date":"2020-06-02T16:44:25.000Z","abbrlink":3285629319,"_content":"\n## 数据库基本操作\n\n> 关系型数据库： 以二维表存储数据\n\n### 数据表操作\n\n- 数据表的创建\n\n```sql\n-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n```\n\n- 数据表的删除\n\n```sql\n\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n```\n\n### 数据操作\n\n- 增\n\n```sql\n-- 单条添加\ninsert into demo values(null, \"鲁班\", 20);\n\n-- 多条添加\ninsert into demo(name, age) values(\"鲁班大师\", 50),(\"凯\", 32),(\"安琪拉\", 20), ... ...\n```\n\n- 删\n\n```sql\n-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =\"鲁班大师\";  ==> 删除 name 是 鲁班大师的整条数据\n```\n\n- 改\n\n```sql\nupdate demo set name = \"小乔\", age = 20 where id = 10;\n```\n\n- 查\n\n```sql\n\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, >, <, >=, <=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==> %, _\n     + where name like '孙%'\n     + where name like '孙_'\n     + where name like '%孙%'\n     + where name like '_ _'\n   - 范围查询 in('男', 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n```\n\n- 去掉字段中重复的数据\n\n```sql\nselect distinct sex from student;\n\n-- 去掉多个字段中重复的数据\nselect distinct sex, class from student;\n```\n\n- 排序\n\n```sql\nselect * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n```\n\n### 聚合函数\n\n- count 统计\n\n```sql\nselect count(*) from student;  ==> 只要有值就统计\n       count(name)\n```\n\n- max 最大值\n\n```sql\nselect max(age) from student;\n```\n\n- min 最小值\n\n```sql\nselect min(age) from student;\n```\n\n- sum 求和\n\n```sql\nselect sum(age) from student;\n```\n\n- avg 平均值\n\n```sql\nselect avg(age) from student;\n```\n\n### 分组\n\n- group by 根据某一字段排序，可以去重\n\n```sql\n-- 每个班级的平均，最大年龄\nselect class, avg(age), max(age) from student group by class;\n```\n\n### 连接查询\n\n- 等值查询\n\n```sql\nselect * from student as stu, score as sc where stu.sid = sc.sid;\n```\n\n- 内查询\n\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n```\n\n- 多表连接(两两之间产生条件)\n\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n```\n\n- 自关联（同一个表查询多次，自己产生关联，表必须起别名）\n\n```sql\nselect * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n```\n\n- 左连接（jion 前边的表）\n\n```sql\nselect * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n```\n\n- 右连接\n\n```sql\nselect * from student as stu\nright join score as sc on stu.sid = sc.sid;\n```\n\n- 子查询\n\n```sql\n-- 查询大于平均年龄的学生\nselect * from student whrer age > (select avg(age) from student);\n```\n\n- 数据分表\n\n```sql\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n-- 查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）\ninsert into newStudent(id, name, age )  select id,name,age from student;\n\n-- 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    Sname varchar(10)\n) select name as Sname  from student;\n```\n\n### 索引（作用于某个字段）\n\n> **加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。**\n\n- 查看索引\n\n```sql\n    show index from 表名;\n```\n\n- 创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）\n\n```sql\n-- 建表时创建索引 key (age)、primary key、unique\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10) unique\n    age int unsigned,\n    key (age)\n)\n\n-- 已经存在的表创建索引\ncreate index 索引名称 on 表名(字段名(长度))\ncreate index i_index on newStudent(name(10))\n```\n","source":"_posts/语雀/srtl9u.md","raw":"---\ntitle: MySQL 基础语法\nurlname: srtl9u\ndate: '2020-06-03 00:44:25 +0800'\ntags: []\ncategories: []\nabbrlink: 3285629319\n---\n\n## 数据库基本操作\n\n> 关系型数据库： 以二维表存储数据\n\n### 数据表操作\n\n- 数据表的创建\n\n```sql\n-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n```\n\n- 数据表的删除\n\n```sql\n\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n```\n\n### 数据操作\n\n- 增\n\n```sql\n-- 单条添加\ninsert into demo values(null, \"鲁班\", 20);\n\n-- 多条添加\ninsert into demo(name, age) values(\"鲁班大师\", 50),(\"凯\", 32),(\"安琪拉\", 20), ... ...\n```\n\n- 删\n\n```sql\n-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =\"鲁班大师\";  ==> 删除 name 是 鲁班大师的整条数据\n```\n\n- 改\n\n```sql\nupdate demo set name = \"小乔\", age = 20 where id = 10;\n```\n\n- 查\n\n```sql\n\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, >, <, >=, <=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==> %, _\n     + where name like '孙%'\n     + where name like '孙_'\n     + where name like '%孙%'\n     + where name like '_ _'\n   - 范围查询 in('男', 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n```\n\n- 去掉字段中重复的数据\n\n```sql\nselect distinct sex from student;\n\n-- 去掉多个字段中重复的数据\nselect distinct sex, class from student;\n```\n\n- 排序\n\n```sql\nselect * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n```\n\n### 聚合函数\n\n- count 统计\n\n```sql\nselect count(*) from student;  ==> 只要有值就统计\n       count(name)\n```\n\n- max 最大值\n\n```sql\nselect max(age) from student;\n```\n\n- min 最小值\n\n```sql\nselect min(age) from student;\n```\n\n- sum 求和\n\n```sql\nselect sum(age) from student;\n```\n\n- avg 平均值\n\n```sql\nselect avg(age) from student;\n```\n\n### 分组\n\n- group by 根据某一字段排序，可以去重\n\n```sql\n-- 每个班级的平均，最大年龄\nselect class, avg(age), max(age) from student group by class;\n```\n\n### 连接查询\n\n- 等值查询\n\n```sql\nselect * from student as stu, score as sc where stu.sid = sc.sid;\n```\n\n- 内查询\n\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n```\n\n- 多表连接(两两之间产生条件)\n\n```sql\nselect * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n```\n\n- 自关联（同一个表查询多次，自己产生关联，表必须起别名）\n\n```sql\nselect * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n```\n\n- 左连接（jion 前边的表）\n\n```sql\nselect * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n```\n\n- 右连接\n\n```sql\nselect * from student as stu\nright join score as sc on stu.sid = sc.sid;\n```\n\n- 子查询\n\n```sql\n-- 查询大于平均年龄的学生\nselect * from student whrer age > (select avg(age) from student);\n```\n\n- 数据分表\n\n```sql\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n-- 查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）\ninsert into newStudent(id, name, age )  select id,name,age from student;\n\n-- 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    Sname varchar(10)\n) select name as Sname  from student;\n```\n\n### 索引（作用于某个字段）\n\n> **加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。**\n\n- 查看索引\n\n```sql\n    show index from 表名;\n```\n\n- 创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）\n\n```sql\n-- 建表时创建索引 key (age)、primary key、unique\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10) unique\n    age int unsigned,\n    key (age)\n)\n\n-- 已经存在的表创建索引\ncreate index 索引名称 on 表名(字段名(长度))\ncreate index i_index on newStudent(name(10))\n```\n","slug":"语雀/srtl9u","published":1,"updated":"2022-03-03T11:26:07.587Z","_id":"cl0awjjpj0013081b0ho05zxt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h2><blockquote>\n<p>关系型数据库： 以二维表存储数据</p>\n</blockquote>\n<h3 id=\"数据表操作\"><a href=\"#数据表操作\" class=\"headerlink\" title=\"数据表操作\"></a>数据表操作</h3><ul>\n<li>数据表的创建</li>\n</ul>\n<pre><code class=\"sql\">-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<ul>\n<li>数据表的删除</li>\n</ul>\n<pre><code class=\"sql\">\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><ul>\n<li>增</li>\n</ul>\n<pre><code class=\"sql\">-- 单条添加\ninsert into demo values(null, &quot;鲁班&quot;, 20);\n\n-- 多条添加\ninsert into demo(name, age) values(&quot;鲁班大师&quot;, 50),(&quot;凯&quot;, 32),(&quot;安琪拉&quot;, 20), ... ...\n</code></pre>\n<ul>\n<li>删</li>\n</ul>\n<pre><code class=\"sql\">-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =&quot;鲁班大师&quot;;  ==&gt; 删除 name 是 鲁班大师的整条数据\n</code></pre>\n<ul>\n<li>改</li>\n</ul>\n<pre><code class=\"sql\">update demo set name = &quot;小乔&quot;, age = 20 where id = 10;\n</code></pre>\n<ul>\n<li>查</li>\n</ul>\n<pre><code class=\"sql\">\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, &gt;, &lt;, &gt;=, &lt;=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==&gt; %, _\n     + where name like &#39;孙%&#39;\n     + where name like &#39;孙_&#39;\n     + where name like &#39;%孙%&#39;\n     + where name like &#39;_ _&#39;\n   - 范围查询 in(&#39;男&#39;, 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n</code></pre>\n<ul>\n<li>去掉字段中重复的数据</li>\n</ul>\n<pre><code class=\"sql\">select distinct sex from student;\n\n-- 去掉多个字段中重复的数据\nselect distinct sex, class from student;\n</code></pre>\n<ul>\n<li>排序</li>\n</ul>\n<pre><code class=\"sql\">select * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n</code></pre>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><ul>\n<li>count 统计</li>\n</ul>\n<pre><code class=\"sql\">select count(*) from student;  ==&gt; 只要有值就统计\n       count(name)\n</code></pre>\n<ul>\n<li>max 最大值</li>\n</ul>\n<pre><code class=\"sql\">select max(age) from student;\n</code></pre>\n<ul>\n<li>min 最小值</li>\n</ul>\n<pre><code class=\"sql\">select min(age) from student;\n</code></pre>\n<ul>\n<li>sum 求和</li>\n</ul>\n<pre><code class=\"sql\">select sum(age) from student;\n</code></pre>\n<ul>\n<li>avg 平均值</li>\n</ul>\n<pre><code class=\"sql\">select avg(age) from student;\n</code></pre>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><ul>\n<li>group by 根据某一字段排序，可以去重</li>\n</ul>\n<pre><code class=\"sql\">-- 每个班级的平均，最大年龄\nselect class, avg(age), max(age) from student group by class;\n</code></pre>\n<h3 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h3><ul>\n<li>等值查询</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu, score as sc where stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>内查询</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>多表连接(两两之间产生条件)</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n</code></pre>\n<ul>\n<li>自关联（同一个表查询多次，自己产生关联，表必须起别名）</li>\n</ul>\n<pre><code class=\"sql\">select * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n</code></pre>\n<ul>\n<li>左连接（jion 前边的表）</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>右连接</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\nright join score as sc on stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>子查询</li>\n</ul>\n<pre><code class=\"sql\">-- 查询大于平均年龄的学生\nselect * from student whrer age &gt; (select avg(age) from student);\n</code></pre>\n<ul>\n<li>数据分表</li>\n</ul>\n<pre><code class=\"sql\">create table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n-- 查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）\ninsert into newStudent(id, name, age )  select id,name,age from student;\n\n-- 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    Sname varchar(10)\n) select name as Sname  from student;\n</code></pre>\n<h3 id=\"索引（作用于某个字段）\"><a href=\"#索引（作用于某个字段）\" class=\"headerlink\" title=\"索引（作用于某个字段）\"></a>索引（作用于某个字段）</h3><blockquote>\n<p><strong>加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。</strong></p>\n</blockquote>\n<ul>\n<li>查看索引</li>\n</ul>\n<pre><code class=\"sql\">    show index from 表名;\n</code></pre>\n<ul>\n<li>创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）</li>\n</ul>\n<pre><code class=\"sql\">-- 建表时创建索引 key (age)、primary key、unique\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10) unique\n    age int unsigned,\n    key (age)\n)\n\n-- 已经存在的表创建索引\ncreate index 索引名称 on 表名(字段名(长度))\ncreate index i_index on newStudent(name(10))\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h2><blockquote>\n<p>关系型数据库： 以二维表存储数据</p>\n</blockquote>\n<h3 id=\"数据表操作\"><a href=\"#数据表操作\" class=\"headerlink\" title=\"数据表操作\"></a>数据表操作</h3><ul>\n<li>数据表的创建</li>\n</ul>\n<pre><code class=\"sql\">-- unsigned: 无符号\n-- primary key： 主键\n-- auto_increment： 自动递增\n\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<ul>\n<li>数据表的删除</li>\n</ul>\n<pre><code class=\"sql\">\n-- 删除掉 demo 表\ndrop table demo;\n\n-- 如果数据库中存在demo表，就把它从数据库中drop掉。\ndrop table if exists demo;\n\n-- 使用场景\ndrop table if exists demo;\ncreate table demo (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n</code></pre>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><ul>\n<li>增</li>\n</ul>\n<pre><code class=\"sql\">-- 单条添加\ninsert into demo values(null, &quot;鲁班&quot;, 20);\n\n-- 多条添加\ninsert into demo(name, age) values(&quot;鲁班大师&quot;, 50),(&quot;凯&quot;, 32),(&quot;安琪拉&quot;, 20), ... ...\n</code></pre>\n<ul>\n<li>删</li>\n</ul>\n<pre><code class=\"sql\">-- 删除表中所有数据\ndelete from demo;\n\n-- 按条件删除数据\ndelete from demo where name =&quot;鲁班大师&quot;;  ==&gt; 删除 name 是 鲁班大师的整条数据\n</code></pre>\n<ul>\n<li>改</li>\n</ul>\n<pre><code class=\"sql\">update demo set name = &quot;小乔&quot;, age = 20 where id = 10;\n</code></pre>\n<ul>\n<li>查</li>\n</ul>\n<pre><code class=\"sql\">\nselect * from demo;\nselect name, age from demo;\n\n-- 条件查询\nselect name from demo where id = 1;\n\n-- where 支持多种运算符\n   - 比较运算符： =, &gt;, &lt;, &gt;=, &lt;=, !=\n   - 逻辑运算符： and(且), or(或), not(非)\n   - 模糊查询： like ==&gt; %, _\n     + where name like &#39;孙%&#39;\n     + where name like &#39;孙_&#39;\n     + where name like &#39;%孙%&#39;\n     + where name like &#39;_ _&#39;\n   - 范围查询 in(&#39;男&#39;, 女), between 18 and 20\n   - 空判断： null , isnull\n\n\n-- 设置别名\nselect name as 姓名, age as 年龄 from demo;\n\n-- 数据表设置别名\nselect D.name, D.age from demo as D;\n</code></pre>\n<ul>\n<li>去掉字段中重复的数据</li>\n</ul>\n<pre><code class=\"sql\">select distinct sex from student;\n\n-- 去掉多个字段中重复的数据\nselect distinct sex, class from student;\n</code></pre>\n<ul>\n<li>排序</li>\n</ul>\n<pre><code class=\"sql\">select * from student order by age;\n-- 升序： order by age asc (默认)\n-- 降序： order by age desc\n\n-- 多次排序\nselect * from student order by age,id desc 先年龄正序，id降序\n\n-- 中文排序\nselect * from student order by convert(name using gbk)\n</code></pre>\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><ul>\n<li>count 统计</li>\n</ul>\n<pre><code class=\"sql\">select count(*) from student;  ==&gt; 只要有值就统计\n       count(name)\n</code></pre>\n<ul>\n<li>max 最大值</li>\n</ul>\n<pre><code class=\"sql\">select max(age) from student;\n</code></pre>\n<ul>\n<li>min 最小值</li>\n</ul>\n<pre><code class=\"sql\">select min(age) from student;\n</code></pre>\n<ul>\n<li>sum 求和</li>\n</ul>\n<pre><code class=\"sql\">select sum(age) from student;\n</code></pre>\n<ul>\n<li>avg 平均值</li>\n</ul>\n<pre><code class=\"sql\">select avg(age) from student;\n</code></pre>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><ul>\n<li>group by 根据某一字段排序，可以去重</li>\n</ul>\n<pre><code class=\"sql\">-- 每个班级的平均，最大年龄\nselect class, avg(age), max(age) from student group by class;\n</code></pre>\n<h3 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h3><ul>\n<li>等值查询</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu, score as sc where stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>内查询</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>多表连接(两两之间产生条件)</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\ninner join score as sc on stu.sid = sc.sid\ninner join course as co on sc.cid = co.cid;\n</code></pre>\n<ul>\n<li>自关联（同一个表查询多次，自己产生关联，表必须起别名）</li>\n</ul>\n<pre><code class=\"sql\">select * from areas as sheng\ninner join areas as shi on sheng.pid = shi.pid\n</code></pre>\n<ul>\n<li>左连接（jion 前边的表）</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\nleft join score as sc on stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>右连接</li>\n</ul>\n<pre><code class=\"sql\">select * from student as stu\nright join score as sc on stu.sid = sc.sid;\n</code></pre>\n<ul>\n<li>子查询</li>\n</ul>\n<pre><code class=\"sql\">-- 查询大于平均年龄的学生\nselect * from student whrer age &gt; (select avg(age) from student);\n</code></pre>\n<ul>\n<li>数据分表</li>\n</ul>\n<pre><code class=\"sql\">create table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10),\n    age int unsigned\n)\n-- 查询的数据插入到另一个表中（查询出来的列必须对应表中的字段名，否则会新建）\ninsert into newStudent(id, name, age )  select id,name,age from student;\n\n-- 创建并直接插入（查询出来的列必须对应表中的字段名，否则会新建）\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    Sname varchar(10)\n) select name as Sname  from student;\n</code></pre>\n<h3 id=\"索引（作用于某个字段）\"><a href=\"#索引（作用于某个字段）\" class=\"headerlink\" title=\"索引（作用于某个字段）\"></a>索引（作用于某个字段）</h3><blockquote>\n<p><strong>加索引后会使写入、修改、删除变慢，每一次增加数据平衡树都会重新排列，也会增加表的体积，占用磁盘存储空间。</strong></p>\n</blockquote>\n<ul>\n<li>查看索引</li>\n</ul>\n<pre><code class=\"sql\">    show index from 表名;\n</code></pre>\n<ul>\n<li>创建索引（创建索引后，表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是「平衡树」结构）</li>\n</ul>\n<pre><code class=\"sql\">-- 建表时创建索引 key (age)、primary key、unique\ncreate table newStudent (\n    id int unsigned primary key auto_increment,\n    name varchar(10) unique\n    age int unsigned,\n    key (age)\n)\n\n-- 已经存在的表创建索引\ncreate index 索引名称 on 表名(字段名(长度))\ncreate index i_index on newStudent(name(10))\n</code></pre>\n"},{"title":"正则-特殊单字符和空白符","urlname":"uauyy8","date":"2022-03-01T08:37:59.000Z","abbrlink":526984142,"_content":"\n","source":"_posts/语雀/uauyy8.md","raw":"---\ntitle: 正则-特殊单字符和空白符\nurlname: uauyy8\ndate: '2022-03-01 16:37:59 +0800'\ntags: []\ncategories: []\nabbrlink: 526984142\n---\n\n","slug":"语雀/uauyy8","published":1,"updated":"2022-03-03T11:26:07.588Z","_id":"cl0awjjpk0014081b8cpz9wjc","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"Windows","urlname":"ugpswt","date":"2022-01-11T13:33:39.000Z","abbrlink":744143879,"_content":"\n","source":"_posts/语雀/ugpswt.md","raw":"---\ntitle: Windows\nurlname: ugpswt\ndate: '2022-01-11 21:33:39 +0800'\ntags: []\ncategories: []\nabbrlink: 744143879\n---\n\n","slug":"语雀/ugpswt","published":1,"updated":"2022-03-03T11:26:07.591Z","_id":"cl0awjjpk0015081b1hi96tto","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""},{"title":"Vue Rouer","urlname":"ucu8ug","date":"2020-01-04T14:12:25.000Z","abbrlink":150899557,"_content":"\n[ Vue-cli 安装 ]\n\n> - 项目开发: npm install -g @vue/cli\n> - 快速原型开发（对单个 \\*.vue 文件开发）: npm install -g @vue/cli-service-global\n\n[ 创建项目 ]\n\n> - vue create Router-demo\n\n[ 运行 ]\n\n> - npm run serve\n\n[ 目录 ]\n\n```\n- public         => 静态资源文件  html icon\n- src            => 入口文件 组件 路由 自己配置的静态资源文件\n  + assets       => 自己配置的静态资源文件\n  + components   => 公共组件\n  + router       => 设置路由\n  + views        => 视图组件\n  + App.vue      => 所有组件的入口文件\n  + main.js      => 默认入口文件\n- .browserslistrc   => 目标浏览器配置\n- .babel.config.js  => babel 配置文件\n- .package.json     => 构建脚本和依赖关系\n```\n\n## Vue-router 配置\n\n### 引入组件并全局使用路由\n\n```javascript\n/**\n *  router/index.js\n */\nimport Vue from \"vue\";\nimport Router from \"vue-router\";\n//  1. 引入组件\nimport Home from \"@/views/Home.vue\";\nimport Profile from \"@/views/Profile.vue\";\nimport User from \"@/views/User.vue\";\n\nVue.use(Router); // 全局使用 Router路由可以在所有的组件中使用\n```\n\n### 定义路由\n\n```javascript\n/**\n *  router/index.js\n */\n\n//  2. 设置路由映射表 将路由和组件关系映射起来\nconst routes = [\n  {\n    path: \"/\", //\n    name: \"home\", // 命名路由\n    component: Home,\n  },\n  {\n    path: \"/profile\",\n    name: \"profile\",\n    component: Profile,\n  },\n  {\n    path: \"/user\",\n    name: \"user\",\n    component: User,\n  },\n  // 如果 path 都不匹配 ,指定跳转路径\n  {\n    path: \"*\",\n    // redirect: '/', 或者\n    redirect: {\n      path: \"/\",\n    },\n  },\n];\n```\n\n#### 定义子路由\n\n```javascript\n{\n        path: '/user',\n        name: 'user',\n        component: User,\n        // 子级路由\n        children: [\n            {\n                path: 'useradd',\n                // 动态路由\n                component: () => import('@/views/UserAdd.vue'),\n            },\n            {\n                path: 'userlist',\n                component: () => import('@/views/UserList.vue'),\n            },\n            {\n                path: 'detail/:id',\n                component: () => import('@/views/Detail.vue'),\n            },\n        ],\n    },\n\n    //  子路由 router 入口 to=\"/user/userlist\"\n    <router-link to=\"/user/userlist\">用户列表</router-link>\n```\n\n### 创建 router 实例\n\n```javascript\n/**\n *  router/index.js\n */\n\n//  3. 将 routes 放入 router 中进行渲染\nconst router = new Router({\n  mode: \"history\", // 模式  其他值: \"hash\" | \"history\" | \"abstract\"\n  base: process.env.BASE_URL,\n  routes,\n});\n\nexport default router;\n```\n\n### router 实例 注入到根实例进行渲染\n\n```javascript\n/**\n *  src/main.js\n */\n\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router, // $royter(所有的方法) $route(所有的属性)\n  render: (h) => h(App),\n}).$mount(\"#app\");\n```\n\n### router-link\n\n```html\n<!-- App.vue -->\n\n<template>\n  <div id=\"app\">\n    <div id=\"nav\">\n      <!-- Router 入口 -->\n      <!-- <router-link to=\"/\">Home</router-link> | -->\n      <!-- <router-link to=\"/profile\">Profile</router-link> -->\n      <!-- <router-link to=\"/user\">User</router-link> -->\n      <!-- Router 入口 动态写法 -->\n      <router-link :to=\"{path: '/'}\">Home</router-link> |\n      <router-link :to=\"{name: 'profile'}\">Profile</router-link>\n      <router-link to=\"/user\">User</router-link>\n    </div>\n    <!-- Router 出口 -->\n    <router-view />\n  </div>\n</template>\n```\n","source":"_posts/语雀/ucu8ug.md","raw":"---\ntitle: Vue Rouer\nurlname: ucu8ug\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 150899557\n---\n\n[ Vue-cli 安装 ]\n\n> - 项目开发: npm install -g @vue/cli\n> - 快速原型开发（对单个 \\*.vue 文件开发）: npm install -g @vue/cli-service-global\n\n[ 创建项目 ]\n\n> - vue create Router-demo\n\n[ 运行 ]\n\n> - npm run serve\n\n[ 目录 ]\n\n```\n- public         => 静态资源文件  html icon\n- src            => 入口文件 组件 路由 自己配置的静态资源文件\n  + assets       => 自己配置的静态资源文件\n  + components   => 公共组件\n  + router       => 设置路由\n  + views        => 视图组件\n  + App.vue      => 所有组件的入口文件\n  + main.js      => 默认入口文件\n- .browserslistrc   => 目标浏览器配置\n- .babel.config.js  => babel 配置文件\n- .package.json     => 构建脚本和依赖关系\n```\n\n## Vue-router 配置\n\n### 引入组件并全局使用路由\n\n```javascript\n/**\n *  router/index.js\n */\nimport Vue from \"vue\";\nimport Router from \"vue-router\";\n//  1. 引入组件\nimport Home from \"@/views/Home.vue\";\nimport Profile from \"@/views/Profile.vue\";\nimport User from \"@/views/User.vue\";\n\nVue.use(Router); // 全局使用 Router路由可以在所有的组件中使用\n```\n\n### 定义路由\n\n```javascript\n/**\n *  router/index.js\n */\n\n//  2. 设置路由映射表 将路由和组件关系映射起来\nconst routes = [\n  {\n    path: \"/\", //\n    name: \"home\", // 命名路由\n    component: Home,\n  },\n  {\n    path: \"/profile\",\n    name: \"profile\",\n    component: Profile,\n  },\n  {\n    path: \"/user\",\n    name: \"user\",\n    component: User,\n  },\n  // 如果 path 都不匹配 ,指定跳转路径\n  {\n    path: \"*\",\n    // redirect: '/', 或者\n    redirect: {\n      path: \"/\",\n    },\n  },\n];\n```\n\n#### 定义子路由\n\n```javascript\n{\n        path: '/user',\n        name: 'user',\n        component: User,\n        // 子级路由\n        children: [\n            {\n                path: 'useradd',\n                // 动态路由\n                component: () => import('@/views/UserAdd.vue'),\n            },\n            {\n                path: 'userlist',\n                component: () => import('@/views/UserList.vue'),\n            },\n            {\n                path: 'detail/:id',\n                component: () => import('@/views/Detail.vue'),\n            },\n        ],\n    },\n\n    //  子路由 router 入口 to=\"/user/userlist\"\n    <router-link to=\"/user/userlist\">用户列表</router-link>\n```\n\n### 创建 router 实例\n\n```javascript\n/**\n *  router/index.js\n */\n\n//  3. 将 routes 放入 router 中进行渲染\nconst router = new Router({\n  mode: \"history\", // 模式  其他值: \"hash\" | \"history\" | \"abstract\"\n  base: process.env.BASE_URL,\n  routes,\n});\n\nexport default router;\n```\n\n### router 实例 注入到根实例进行渲染\n\n```javascript\n/**\n *  src/main.js\n */\n\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router, // $royter(所有的方法) $route(所有的属性)\n  render: (h) => h(App),\n}).$mount(\"#app\");\n```\n\n### router-link\n\n```html\n<!-- App.vue -->\n\n<template>\n  <div id=\"app\">\n    <div id=\"nav\">\n      <!-- Router 入口 -->\n      <!-- <router-link to=\"/\">Home</router-link> | -->\n      <!-- <router-link to=\"/profile\">Profile</router-link> -->\n      <!-- <router-link to=\"/user\">User</router-link> -->\n      <!-- Router 入口 动态写法 -->\n      <router-link :to=\"{path: '/'}\">Home</router-link> |\n      <router-link :to=\"{name: 'profile'}\">Profile</router-link>\n      <router-link to=\"/user\">User</router-link>\n    </div>\n    <!-- Router 出口 -->\n    <router-view />\n  </div>\n</template>\n```\n","slug":"语雀/ucu8ug","published":1,"updated":"2022-03-03T11:26:07.593Z","_id":"cl0awjjpl0016081bf8s8cshv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[ Vue-cli 安装 ]</p>\n<blockquote>\n<ul>\n<li>项目开发: npm install -g @vue/cli</li>\n<li>快速原型开发（对单个 *.vue 文件开发）: npm install -g @vue/cli-service-global</li>\n</ul>\n</blockquote>\n<p>[ 创建项目 ]</p>\n<blockquote>\n<ul>\n<li>vue create Router-demo</li>\n</ul>\n</blockquote>\n<p>[ 运行 ]</p>\n<blockquote>\n<ul>\n<li>npm run serve</li>\n</ul>\n</blockquote>\n<p>[ 目录 ]</p>\n<pre><code>- public         =&gt; 静态资源文件  html icon\n- src            =&gt; 入口文件 组件 路由 自己配置的静态资源文件\n  + assets       =&gt; 自己配置的静态资源文件\n  + components   =&gt; 公共组件\n  + router       =&gt; 设置路由\n  + views        =&gt; 视图组件\n  + App.vue      =&gt; 所有组件的入口文件\n  + main.js      =&gt; 默认入口文件\n- .browserslistrc   =&gt; 目标浏览器配置\n- .babel.config.js  =&gt; babel 配置文件\n- .package.json     =&gt; 构建脚本和依赖关系\n</code></pre>\n<h2 id=\"Vue-router-配置\"><a href=\"#Vue-router-配置\" class=\"headerlink\" title=\"Vue-router 配置\"></a>Vue-router 配置</h2><h3 id=\"引入组件并全局使用路由\"><a href=\"#引入组件并全局使用路由\" class=\"headerlink\" title=\"引入组件并全局使用路由\"></a>引入组件并全局使用路由</h3><pre><code class=\"javascript\">/**\n *  router/index.js\n */\nimport Vue from &quot;vue&quot;;\nimport Router from &quot;vue-router&quot;;\n//  1. 引入组件\nimport Home from &quot;@/views/Home.vue&quot;;\nimport Profile from &quot;@/views/Profile.vue&quot;;\nimport User from &quot;@/views/User.vue&quot;;\n\nVue.use(Router); // 全局使用 Router路由可以在所有的组件中使用\n</code></pre>\n<h3 id=\"定义路由\"><a href=\"#定义路由\" class=\"headerlink\" title=\"定义路由\"></a>定义路由</h3><pre><code class=\"javascript\">/**\n *  router/index.js\n */\n\n//  2. 设置路由映射表 将路由和组件关系映射起来\nconst routes = [\n  &#123;\n    path: &quot;/&quot;, //\n    name: &quot;home&quot;, // 命名路由\n    component: Home,\n  &#125;,\n  &#123;\n    path: &quot;/profile&quot;,\n    name: &quot;profile&quot;,\n    component: Profile,\n  &#125;,\n  &#123;\n    path: &quot;/user&quot;,\n    name: &quot;user&quot;,\n    component: User,\n  &#125;,\n  // 如果 path 都不匹配 ,指定跳转路径\n  &#123;\n    path: &quot;*&quot;,\n    // redirect: &#39;/&#39;, 或者\n    redirect: &#123;\n      path: &quot;/&quot;,\n    &#125;,\n  &#125;,\n];\n</code></pre>\n<h4 id=\"定义子路由\"><a href=\"#定义子路由\" class=\"headerlink\" title=\"定义子路由\"></a>定义子路由</h4><pre><code class=\"javascript\">&#123;\n        path: &#39;/user&#39;,\n        name: &#39;user&#39;,\n        component: User,\n        // 子级路由\n        children: [\n            &#123;\n                path: &#39;useradd&#39;,\n                // 动态路由\n                component: () =&gt; import(&#39;@/views/UserAdd.vue&#39;),\n            &#125;,\n            &#123;\n                path: &#39;userlist&#39;,\n                component: () =&gt; import(&#39;@/views/UserList.vue&#39;),\n            &#125;,\n            &#123;\n                path: &#39;detail/:id&#39;,\n                component: () =&gt; import(&#39;@/views/Detail.vue&#39;),\n            &#125;,\n        ],\n    &#125;,\n\n    //  子路由 router 入口 to=&quot;/user/userlist&quot;\n    &lt;router-link to=&quot;/user/userlist&quot;&gt;用户列表&lt;/router-link&gt;\n</code></pre>\n<h3 id=\"创建-router-实例\"><a href=\"#创建-router-实例\" class=\"headerlink\" title=\"创建 router 实例\"></a>创建 router 实例</h3><pre><code class=\"javascript\">/**\n *  router/index.js\n */\n\n//  3. 将 routes 放入 router 中进行渲染\nconst router = new Router(&#123;\n  mode: &quot;history&quot;, // 模式  其他值: &quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;\n  base: process.env.BASE_URL,\n  routes,\n&#125;);\n\nexport default router;\n</code></pre>\n<h3 id=\"router-实例-注入到根实例进行渲染\"><a href=\"#router-实例-注入到根实例进行渲染\" class=\"headerlink\" title=\"router 实例 注入到根实例进行渲染\"></a>router 实例 注入到根实例进行渲染</h3><pre><code class=\"javascript\">/**\n *  src/main.js\n */\n\nimport Vue from &quot;vue&quot;;\nimport App from &quot;./App.vue&quot;;\nimport router from &quot;./router&quot;;\n\nVue.config.productionTip = false;\n\nnew Vue(&#123;\n  router, // $royter(所有的方法) $route(所有的属性)\n  render: (h) =&gt; h(App),\n&#125;).$mount(&quot;#app&quot;);\n</code></pre>\n<h3 id=\"router-link\"><a href=\"#router-link\" class=\"headerlink\" title=\"router-link\"></a>router-link</h3><pre><code class=\"html\">&lt;!-- App.vue --&gt;\n\n&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;div id=&quot;nav&quot;&gt;\n      &lt;!-- Router 入口 --&gt;\n      &lt;!-- &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | --&gt;\n      &lt;!-- &lt;router-link to=&quot;/profile&quot;&gt;Profile&lt;/router-link&gt; --&gt;\n      &lt;!-- &lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link&gt; --&gt;\n      &lt;!-- Router 入口 动态写法 --&gt;\n      &lt;router-link :to=&quot;&#123;path: &#39;/&#39;&#125;&quot;&gt;Home&lt;/router-link&gt; |\n      &lt;router-link :to=&quot;&#123;name: &#39;profile&#39;&#125;&quot;&gt;Profile&lt;/router-link&gt;\n      &lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link&gt;\n    &lt;/div&gt;\n    &lt;!-- Router 出口 --&gt;\n    &lt;router-view /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p>[ Vue-cli 安装 ]</p>\n<blockquote>\n<ul>\n<li>项目开发: npm install -g @vue/cli</li>\n<li>快速原型开发（对单个 *.vue 文件开发）: npm install -g @vue/cli-service-global</li>\n</ul>\n</blockquote>\n<p>[ 创建项目 ]</p>\n<blockquote>\n<ul>\n<li>vue create Router-demo</li>\n</ul>\n</blockquote>\n<p>[ 运行 ]</p>\n<blockquote>\n<ul>\n<li>npm run serve</li>\n</ul>\n</blockquote>\n<p>[ 目录 ]</p>\n<pre><code>- public         =&gt; 静态资源文件  html icon\n- src            =&gt; 入口文件 组件 路由 自己配置的静态资源文件\n  + assets       =&gt; 自己配置的静态资源文件\n  + components   =&gt; 公共组件\n  + router       =&gt; 设置路由\n  + views        =&gt; 视图组件\n  + App.vue      =&gt; 所有组件的入口文件\n  + main.js      =&gt; 默认入口文件\n- .browserslistrc   =&gt; 目标浏览器配置\n- .babel.config.js  =&gt; babel 配置文件\n- .package.json     =&gt; 构建脚本和依赖关系\n</code></pre>\n<h2 id=\"Vue-router-配置\"><a href=\"#Vue-router-配置\" class=\"headerlink\" title=\"Vue-router 配置\"></a>Vue-router 配置</h2><h3 id=\"引入组件并全局使用路由\"><a href=\"#引入组件并全局使用路由\" class=\"headerlink\" title=\"引入组件并全局使用路由\"></a>引入组件并全局使用路由</h3><pre><code class=\"javascript\">/**\n *  router/index.js\n */\nimport Vue from &quot;vue&quot;;\nimport Router from &quot;vue-router&quot;;\n//  1. 引入组件\nimport Home from &quot;@/views/Home.vue&quot;;\nimport Profile from &quot;@/views/Profile.vue&quot;;\nimport User from &quot;@/views/User.vue&quot;;\n\nVue.use(Router); // 全局使用 Router路由可以在所有的组件中使用\n</code></pre>\n<h3 id=\"定义路由\"><a href=\"#定义路由\" class=\"headerlink\" title=\"定义路由\"></a>定义路由</h3><pre><code class=\"javascript\">/**\n *  router/index.js\n */\n\n//  2. 设置路由映射表 将路由和组件关系映射起来\nconst routes = [\n  &#123;\n    path: &quot;/&quot;, //\n    name: &quot;home&quot;, // 命名路由\n    component: Home,\n  &#125;,\n  &#123;\n    path: &quot;/profile&quot;,\n    name: &quot;profile&quot;,\n    component: Profile,\n  &#125;,\n  &#123;\n    path: &quot;/user&quot;,\n    name: &quot;user&quot;,\n    component: User,\n  &#125;,\n  // 如果 path 都不匹配 ,指定跳转路径\n  &#123;\n    path: &quot;*&quot;,\n    // redirect: &#39;/&#39;, 或者\n    redirect: &#123;\n      path: &quot;/&quot;,\n    &#125;,\n  &#125;,\n];\n</code></pre>\n<h4 id=\"定义子路由\"><a href=\"#定义子路由\" class=\"headerlink\" title=\"定义子路由\"></a>定义子路由</h4><pre><code class=\"javascript\">&#123;\n        path: &#39;/user&#39;,\n        name: &#39;user&#39;,\n        component: User,\n        // 子级路由\n        children: [\n            &#123;\n                path: &#39;useradd&#39;,\n                // 动态路由\n                component: () =&gt; import(&#39;@/views/UserAdd.vue&#39;),\n            &#125;,\n            &#123;\n                path: &#39;userlist&#39;,\n                component: () =&gt; import(&#39;@/views/UserList.vue&#39;),\n            &#125;,\n            &#123;\n                path: &#39;detail/:id&#39;,\n                component: () =&gt; import(&#39;@/views/Detail.vue&#39;),\n            &#125;,\n        ],\n    &#125;,\n\n    //  子路由 router 入口 to=&quot;/user/userlist&quot;\n    &lt;router-link to=&quot;/user/userlist&quot;&gt;用户列表&lt;/router-link&gt;\n</code></pre>\n<h3 id=\"创建-router-实例\"><a href=\"#创建-router-实例\" class=\"headerlink\" title=\"创建 router 实例\"></a>创建 router 实例</h3><pre><code class=\"javascript\">/**\n *  router/index.js\n */\n\n//  3. 将 routes 放入 router 中进行渲染\nconst router = new Router(&#123;\n  mode: &quot;history&quot;, // 模式  其他值: &quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;\n  base: process.env.BASE_URL,\n  routes,\n&#125;);\n\nexport default router;\n</code></pre>\n<h3 id=\"router-实例-注入到根实例进行渲染\"><a href=\"#router-实例-注入到根实例进行渲染\" class=\"headerlink\" title=\"router 实例 注入到根实例进行渲染\"></a>router 实例 注入到根实例进行渲染</h3><pre><code class=\"javascript\">/**\n *  src/main.js\n */\n\nimport Vue from &quot;vue&quot;;\nimport App from &quot;./App.vue&quot;;\nimport router from &quot;./router&quot;;\n\nVue.config.productionTip = false;\n\nnew Vue(&#123;\n  router, // $royter(所有的方法) $route(所有的属性)\n  render: (h) =&gt; h(App),\n&#125;).$mount(&quot;#app&quot;);\n</code></pre>\n<h3 id=\"router-link\"><a href=\"#router-link\" class=\"headerlink\" title=\"router-link\"></a>router-link</h3><pre><code class=\"html\">&lt;!-- App.vue --&gt;\n\n&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;div id=&quot;nav&quot;&gt;\n      &lt;!-- Router 入口 --&gt;\n      &lt;!-- &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | --&gt;\n      &lt;!-- &lt;router-link to=&quot;/profile&quot;&gt;Profile&lt;/router-link&gt; --&gt;\n      &lt;!-- &lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link&gt; --&gt;\n      &lt;!-- Router 入口 动态写法 --&gt;\n      &lt;router-link :to=&quot;&#123;path: &#39;/&#39;&#125;&quot;&gt;Home&lt;/router-link&gt; |\n      &lt;router-link :to=&quot;&#123;name: &#39;profile&#39;&#125;&quot;&gt;Profile&lt;/router-link&gt;\n      &lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link&gt;\n    &lt;/div&gt;\n    &lt;!-- Router 出口 --&gt;\n    &lt;router-view /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n"},{"title":"Vue 动画","urlname":"uvkzfv","date":"2020-01-04T14:12:25.000Z","abbrlink":1781628791,"_content":"\n## 过渡 & 动画\n\n> - v-enter:定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。\n> - v-enter-active:定义进入过渡生效时的状态。可以被用来定义进入过渡的过程时间，延迟和曲线函数。\n> - v-enter-to: 定义进入过渡的结束状态。\n> - v-leave: 定义离开过渡的开始状态。\n> - v-leave-active:定义离开过渡生效时的状态。\n> - v-leave-to:定义离开过渡的结束状态。\n\n```html\n<style>\n  .section {\n    width: 200px;\n    height: 200px;\n    background: #00ffff;\n  }\n  .v-enter {\n    width: 0px;\n    background: #00ff00;\n  }\n  .v-enter-active {\n    background: #ff0000;\n    transition: all 5s linear;\n  }\n  .v-enter-to {\n    background: orange;\n  }\n  /* 进入状态结束 变成默认颜色 */\n  .v-leave {\n    background: #00ff00;\n  }\n  .v-leave-active {\n    width: 0;\n    background: rgb(238, 88, 200);\n    transition: all 5s linear;\n  }\n  .v-leave-to {\n    background: #29013b;\n  }\n  /* 离开状态结束 是消失 */\n</style>\n```\n\n## JS 钩子动画\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      ul {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n      }\n      li {\n        display: flex;\n        align-items: center;\n        margin: 20px;\n      }\n      li img {\n        display: block;\n        width: 150px;\n        height: 80px;\n        margin-right: 20px;\n      }\n      span {\n        position: absolute;\n        width: 150px;\n        height: 80px;\n        /* background: #00ffff; */\n        transition: all 2s linear;\n      }\n      .cart {\n        width: 150px;\n        height: 50px;\n        background: #00ff66;\n        position: fixed;\n        right: 50px;\n        bottom: 50px;\n        line-height: 50px;\n        text-align: center;\n        font-size: 25px;\n        color: #ffffff;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <ul>\n        <!-- ref= \"listArray\" 专门用来获取 dom 元素 -->\n        <li v-for=\"(item,index) in lists\" :key=\"`${index}_a`\" ref=\"listArray\">\n          <img :src=\"item.cover\" alt=\"\" />\n          <button @click=\"addCart(index)\">加入购物车</button>\n        </li>\n      </ul>\n      <transition @enter=\"enter\" @after-enter=\"after\">\n        <span v-if=\"isShow\"></span>\n      </transition>\n      <div class=\"cart\" ref=\"cart\">购物车</div>\n    </div>\n  </body>\n</html>\n<script src=\"vue.min.js\"></script>\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      currentIndex: -1, // 加入购物车的默认索引\n      isShow: false,\n\n      lists: [\n        {\n          id: 1,\n          cover: \"http://www.javascript.cn/203853de0f7a753037.png\",\n        },\n        {\n          id: 2,\n          cover: \"http://www.javascript.cn/202711f70eea987000.jpg\",\n        },\n        {\n          id: 3,\n          cover: \"http://www.javascript.cn/211735f96b30549920.jpg\",\n        },\n      ],\n    },\n    methods: {\n      addCart(index) {\n        // console.log('加入购物车',index);\n        this.currentIndex = index;\n        this.isShow = true;\n        // console.log(this.currentIndex);\n      },\n      enter(el, done) {\n        // el 表示当前的动画元素 done 表示动画执行完成后的回调函数\n\n        //  确定点击元素 li 的位置 ref= \"listArray\" 专门用来获取 dom 元素\n        // console.log(this.$refs.listArray,111);\n        let oLi = this.$refs.listArray[this.currentIndex];\n        // console.log(oLi,222);\n        let { x, y } = oLi.getBoundingClientRect(); //\n        //  设置 span 动画元素的位置 与点击元素 li 位置一样\n        // console.log(x,y);\n        el.style.left = x + \"px\";\n        el.style.top = y + \"px\";\n        el.style.background = `url(${this.lists[this.currentIndex].cover})`;\n        el.style.backgroundSize = \"100% 100%\";\n        //  求出购物车的位置\n        let Cart = this.$refs.cart;\n        let { x: a, y: b } = Cart.getBoundingClientRect(); // x, y 重新命名 a,b\n        //  动画元素到购物车移动的距离\n        el.style.transform = `translate3d(${a - x}px,${b - y}px,0) scale(0)`;\n\n        el.addEventListener(\"transitionend\", done, false);\n      },\n      after() {\n        this.isShow = false;\n      },\n    },\n  });\n</script>\n```\n","source":"_posts/语雀/uvkzfv.md","raw":"---\ntitle: Vue 动画\nurlname: uvkzfv\ndate: '2020-01-04 22:12:25 +0800'\ntags: []\ncategories: []\nabbrlink: 1781628791\n---\n\n## 过渡 & 动画\n\n> - v-enter:定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。\n> - v-enter-active:定义进入过渡生效时的状态。可以被用来定义进入过渡的过程时间，延迟和曲线函数。\n> - v-enter-to: 定义进入过渡的结束状态。\n> - v-leave: 定义离开过渡的开始状态。\n> - v-leave-active:定义离开过渡生效时的状态。\n> - v-leave-to:定义离开过渡的结束状态。\n\n```html\n<style>\n  .section {\n    width: 200px;\n    height: 200px;\n    background: #00ffff;\n  }\n  .v-enter {\n    width: 0px;\n    background: #00ff00;\n  }\n  .v-enter-active {\n    background: #ff0000;\n    transition: all 5s linear;\n  }\n  .v-enter-to {\n    background: orange;\n  }\n  /* 进入状态结束 变成默认颜色 */\n  .v-leave {\n    background: #00ff00;\n  }\n  .v-leave-active {\n    width: 0;\n    background: rgb(238, 88, 200);\n    transition: all 5s linear;\n  }\n  .v-leave-to {\n    background: #29013b;\n  }\n  /* 离开状态结束 是消失 */\n</style>\n```\n\n## JS 钩子动画\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      ul {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n      }\n      li {\n        display: flex;\n        align-items: center;\n        margin: 20px;\n      }\n      li img {\n        display: block;\n        width: 150px;\n        height: 80px;\n        margin-right: 20px;\n      }\n      span {\n        position: absolute;\n        width: 150px;\n        height: 80px;\n        /* background: #00ffff; */\n        transition: all 2s linear;\n      }\n      .cart {\n        width: 150px;\n        height: 50px;\n        background: #00ff66;\n        position: fixed;\n        right: 50px;\n        bottom: 50px;\n        line-height: 50px;\n        text-align: center;\n        font-size: 25px;\n        color: #ffffff;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <ul>\n        <!-- ref= \"listArray\" 专门用来获取 dom 元素 -->\n        <li v-for=\"(item,index) in lists\" :key=\"`${index}_a`\" ref=\"listArray\">\n          <img :src=\"item.cover\" alt=\"\" />\n          <button @click=\"addCart(index)\">加入购物车</button>\n        </li>\n      </ul>\n      <transition @enter=\"enter\" @after-enter=\"after\">\n        <span v-if=\"isShow\"></span>\n      </transition>\n      <div class=\"cart\" ref=\"cart\">购物车</div>\n    </div>\n  </body>\n</html>\n<script src=\"vue.min.js\"></script>\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      currentIndex: -1, // 加入购物车的默认索引\n      isShow: false,\n\n      lists: [\n        {\n          id: 1,\n          cover: \"http://www.javascript.cn/203853de0f7a753037.png\",\n        },\n        {\n          id: 2,\n          cover: \"http://www.javascript.cn/202711f70eea987000.jpg\",\n        },\n        {\n          id: 3,\n          cover: \"http://www.javascript.cn/211735f96b30549920.jpg\",\n        },\n      ],\n    },\n    methods: {\n      addCart(index) {\n        // console.log('加入购物车',index);\n        this.currentIndex = index;\n        this.isShow = true;\n        // console.log(this.currentIndex);\n      },\n      enter(el, done) {\n        // el 表示当前的动画元素 done 表示动画执行完成后的回调函数\n\n        //  确定点击元素 li 的位置 ref= \"listArray\" 专门用来获取 dom 元素\n        // console.log(this.$refs.listArray,111);\n        let oLi = this.$refs.listArray[this.currentIndex];\n        // console.log(oLi,222);\n        let { x, y } = oLi.getBoundingClientRect(); //\n        //  设置 span 动画元素的位置 与点击元素 li 位置一样\n        // console.log(x,y);\n        el.style.left = x + \"px\";\n        el.style.top = y + \"px\";\n        el.style.background = `url(${this.lists[this.currentIndex].cover})`;\n        el.style.backgroundSize = \"100% 100%\";\n        //  求出购物车的位置\n        let Cart = this.$refs.cart;\n        let { x: a, y: b } = Cart.getBoundingClientRect(); // x, y 重新命名 a,b\n        //  动画元素到购物车移动的距离\n        el.style.transform = `translate3d(${a - x}px,${b - y}px,0) scale(0)`;\n\n        el.addEventListener(\"transitionend\", done, false);\n      },\n      after() {\n        this.isShow = false;\n      },\n    },\n  });\n</script>\n```\n","slug":"语雀/uvkzfv","published":1,"updated":"2022-03-03T11:26:07.594Z","_id":"cl0awjjpl0017081bd5y6318z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"过渡-amp-动画\"><a href=\"#过渡-amp-动画\" class=\"headerlink\" title=\"过渡 &amp; 动画\"></a>过渡 &amp; 动画</h2><blockquote>\n<ul>\n<li>v-enter:定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>\n<li>v-enter-active:定义进入过渡生效时的状态。可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>\n<li>v-enter-to: 定义进入过渡的结束状态。</li>\n<li>v-leave: 定义离开过渡的开始状态。</li>\n<li>v-leave-active:定义离开过渡生效时的状态。</li>\n<li>v-leave-to:定义离开过渡的结束状态。</li>\n</ul>\n</blockquote>\n<pre><code class=\"html\">&lt;style&gt;\n  .section &#123;\n    width: 200px;\n    height: 200px;\n    background: #00ffff;\n  &#125;\n  .v-enter &#123;\n    width: 0px;\n    background: #00ff00;\n  &#125;\n  .v-enter-active &#123;\n    background: #ff0000;\n    transition: all 5s linear;\n  &#125;\n  .v-enter-to &#123;\n    background: orange;\n  &#125;\n  /* 进入状态结束 变成默认颜色 */\n  .v-leave &#123;\n    background: #00ff00;\n  &#125;\n  .v-leave-active &#123;\n    width: 0;\n    background: rgb(238, 88, 200);\n    transition: all 5s linear;\n  &#125;\n  .v-leave-to &#123;\n    background: #29013b;\n  &#125;\n  /* 离开状态结束 是消失 */\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"JS-钩子动画\"><a href=\"#JS-钩子动画\" class=\"headerlink\" title=\"JS 钩子动画\"></a>JS 钩子动画</h2><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n      ul &#123;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n      &#125;\n      li &#123;\n        display: flex;\n        align-items: center;\n        margin: 20px;\n      &#125;\n      li img &#123;\n        display: block;\n        width: 150px;\n        height: 80px;\n        margin-right: 20px;\n      &#125;\n      span &#123;\n        position: absolute;\n        width: 150px;\n        height: 80px;\n        /* background: #00ffff; */\n        transition: all 2s linear;\n      &#125;\n      .cart &#123;\n        width: 150px;\n        height: 50px;\n        background: #00ff66;\n        position: fixed;\n        right: 50px;\n        bottom: 50px;\n        line-height: 50px;\n        text-align: center;\n        font-size: 25px;\n        color: #ffffff;\n      &#125;\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n      &lt;ul&gt;\n        &lt;!-- ref= &quot;listArray&quot; 专门用来获取 dom 元素 --&gt;\n        &lt;li v-for=&quot;(item,index) in lists&quot; :key=&quot;`$&#123;index&#125;_a`&quot; ref=&quot;listArray&quot;&gt;\n          &lt;img :src=&quot;item.cover&quot; alt=&quot;&quot; /&gt;\n          &lt;button @click=&quot;addCart(index)&quot;&gt;加入购物车&lt;/button&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;transition @enter=&quot;enter&quot; @after-enter=&quot;after&quot;&gt;\n        &lt;span v-if=&quot;isShow&quot;&gt;&lt;/span&gt;\n      &lt;/transition&gt;\n      &lt;div class=&quot;cart&quot; ref=&quot;cart&quot;&gt;购物车&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      currentIndex: -1, // 加入购物车的默认索引\n      isShow: false,\n\n      lists: [\n        &#123;\n          id: 1,\n          cover: &quot;http://www.javascript.cn/203853de0f7a753037.png&quot;,\n        &#125;,\n        &#123;\n          id: 2,\n          cover: &quot;http://www.javascript.cn/202711f70eea987000.jpg&quot;,\n        &#125;,\n        &#123;\n          id: 3,\n          cover: &quot;http://www.javascript.cn/211735f96b30549920.jpg&quot;,\n        &#125;,\n      ],\n    &#125;,\n    methods: &#123;\n      addCart(index) &#123;\n        // console.log(&#39;加入购物车&#39;,index);\n        this.currentIndex = index;\n        this.isShow = true;\n        // console.log(this.currentIndex);\n      &#125;,\n      enter(el, done) &#123;\n        // el 表示当前的动画元素 done 表示动画执行完成后的回调函数\n\n        //  确定点击元素 li 的位置 ref= &quot;listArray&quot; 专门用来获取 dom 元素\n        // console.log(this.$refs.listArray,111);\n        let oLi = this.$refs.listArray[this.currentIndex];\n        // console.log(oLi,222);\n        let &#123; x, y &#125; = oLi.getBoundingClientRect(); //\n        //  设置 span 动画元素的位置 与点击元素 li 位置一样\n        // console.log(x,y);\n        el.style.left = x + &quot;px&quot;;\n        el.style.top = y + &quot;px&quot;;\n        el.style.background = `url($&#123;this.lists[this.currentIndex].cover&#125;)`;\n        el.style.backgroundSize = &quot;100% 100%&quot;;\n        //  求出购物车的位置\n        let Cart = this.$refs.cart;\n        let &#123; x: a, y: b &#125; = Cart.getBoundingClientRect(); // x, y 重新命名 a,b\n        //  动画元素到购物车移动的距离\n        el.style.transform = `translate3d($&#123;a - x&#125;px,$&#123;b - y&#125;px,0) scale(0)`;\n\n        el.addEventListener(&quot;transitionend&quot;, done, false);\n      &#125;,\n      after() &#123;\n        this.isShow = false;\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"过渡-amp-动画\"><a href=\"#过渡-amp-动画\" class=\"headerlink\" title=\"过渡 &amp; 动画\"></a>过渡 &amp; 动画</h2><blockquote>\n<ul>\n<li>v-enter:定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>\n<li>v-enter-active:定义进入过渡生效时的状态。可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>\n<li>v-enter-to: 定义进入过渡的结束状态。</li>\n<li>v-leave: 定义离开过渡的开始状态。</li>\n<li>v-leave-active:定义离开过渡生效时的状态。</li>\n<li>v-leave-to:定义离开过渡的结束状态。</li>\n</ul>\n</blockquote>\n<pre><code class=\"html\">&lt;style&gt;\n  .section &#123;\n    width: 200px;\n    height: 200px;\n    background: #00ffff;\n  &#125;\n  .v-enter &#123;\n    width: 0px;\n    background: #00ff00;\n  &#125;\n  .v-enter-active &#123;\n    background: #ff0000;\n    transition: all 5s linear;\n  &#125;\n  .v-enter-to &#123;\n    background: orange;\n  &#125;\n  /* 进入状态结束 变成默认颜色 */\n  .v-leave &#123;\n    background: #00ff00;\n  &#125;\n  .v-leave-active &#123;\n    width: 0;\n    background: rgb(238, 88, 200);\n    transition: all 5s linear;\n  &#125;\n  .v-leave-to &#123;\n    background: #29013b;\n  &#125;\n  /* 离开状态结束 是消失 */\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"JS-钩子动画\"><a href=\"#JS-钩子动画\" class=\"headerlink\" title=\"JS 钩子动画\"></a>JS 钩子动画</h2><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n      ul &#123;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n      &#125;\n      li &#123;\n        display: flex;\n        align-items: center;\n        margin: 20px;\n      &#125;\n      li img &#123;\n        display: block;\n        width: 150px;\n        height: 80px;\n        margin-right: 20px;\n      &#125;\n      span &#123;\n        position: absolute;\n        width: 150px;\n        height: 80px;\n        /* background: #00ffff; */\n        transition: all 2s linear;\n      &#125;\n      .cart &#123;\n        width: 150px;\n        height: 50px;\n        background: #00ff66;\n        position: fixed;\n        right: 50px;\n        bottom: 50px;\n        line-height: 50px;\n        text-align: center;\n        font-size: 25px;\n        color: #ffffff;\n      &#125;\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n      &lt;ul&gt;\n        &lt;!-- ref= &quot;listArray&quot; 专门用来获取 dom 元素 --&gt;\n        &lt;li v-for=&quot;(item,index) in lists&quot; :key=&quot;`$&#123;index&#125;_a`&quot; ref=&quot;listArray&quot;&gt;\n          &lt;img :src=&quot;item.cover&quot; alt=&quot;&quot; /&gt;\n          &lt;button @click=&quot;addCart(index)&quot;&gt;加入购物车&lt;/button&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;transition @enter=&quot;enter&quot; @after-enter=&quot;after&quot;&gt;\n        &lt;span v-if=&quot;isShow&quot;&gt;&lt;/span&gt;\n      &lt;/transition&gt;\n      &lt;div class=&quot;cart&quot; ref=&quot;cart&quot;&gt;购物车&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  let vm = new Vue(&#123;\n    el: &quot;#app&quot;,\n    data: &#123;\n      currentIndex: -1, // 加入购物车的默认索引\n      isShow: false,\n\n      lists: [\n        &#123;\n          id: 1,\n          cover: &quot;http://www.javascript.cn/203853de0f7a753037.png&quot;,\n        &#125;,\n        &#123;\n          id: 2,\n          cover: &quot;http://www.javascript.cn/202711f70eea987000.jpg&quot;,\n        &#125;,\n        &#123;\n          id: 3,\n          cover: &quot;http://www.javascript.cn/211735f96b30549920.jpg&quot;,\n        &#125;,\n      ],\n    &#125;,\n    methods: &#123;\n      addCart(index) &#123;\n        // console.log(&#39;加入购物车&#39;,index);\n        this.currentIndex = index;\n        this.isShow = true;\n        // console.log(this.currentIndex);\n      &#125;,\n      enter(el, done) &#123;\n        // el 表示当前的动画元素 done 表示动画执行完成后的回调函数\n\n        //  确定点击元素 li 的位置 ref= &quot;listArray&quot; 专门用来获取 dom 元素\n        // console.log(this.$refs.listArray,111);\n        let oLi = this.$refs.listArray[this.currentIndex];\n        // console.log(oLi,222);\n        let &#123; x, y &#125; = oLi.getBoundingClientRect(); //\n        //  设置 span 动画元素的位置 与点击元素 li 位置一样\n        // console.log(x,y);\n        el.style.left = x + &quot;px&quot;;\n        el.style.top = y + &quot;px&quot;;\n        el.style.background = `url($&#123;this.lists[this.currentIndex].cover&#125;)`;\n        el.style.backgroundSize = &quot;100% 100%&quot;;\n        //  求出购物车的位置\n        let Cart = this.$refs.cart;\n        let &#123; x: a, y: b &#125; = Cart.getBoundingClientRect(); // x, y 重新命名 a,b\n        //  动画元素到购物车移动的距离\n        el.style.transform = `translate3d($&#123;a - x&#125;px,$&#123;b - y&#125;px,0) scale(0)`;\n\n        el.addEventListener(&quot;transitionend&quot;, done, false);\n      &#125;,\n      after() &#123;\n        this.isShow = false;\n      &#125;,\n    &#125;,\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n"},{"title":"前端面试题总结：Vue 框架","urlname":"vrkyau","date":"2020-01-02T02:25:29.000Z","abbrlink":1672364730,"_content":"\n## 1. Vue  生命周期\n\n### 1.1 什么是  Vue  生命周期？\n\nVue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载  DOM → 渲染、更新 → 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期\n\n### 1.2 Vue  生命周期的作用是什么？\n\n它的生命周期中有多个事件钩子，让我们在控制整个  Vue  实例的过程时更容易形成好的逻辑\n\n### 1.3 Vue 生命周期总共有几个阶段？\n\n它可以总共分为  8  个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后\n\n- beforeCreate  阶段：Vue  实例的挂载元素  el  和数据对象  data  都是  undefined，还没有初始化。\n- created  阶段：Vue  实例的数据对象  data  有了，可以访问里面的数据和方法，未挂载到  DOM，el  还没有\n- beforeMount  阶段：Vue  实例的  el  和  data  都初始化了，但是挂载之前为虚拟的 DOM 节点\n- mounted 阶段：Vue  实例挂载到真实  DOM  上，就可以通过  DOM  获取  DOM  节点\n- beforeUpdate  阶段：响应式数据更新时调用，发生在虚拟  DOM  打补丁之前，适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器\n- updated 阶段：虚拟  DOM  重新渲染和打补丁之后调用，组成新的  DOM  已经更新，避免在这个钩子函数中操作数据，防止死循环\n- beforeDestroy  阶段：实例销毁前调用，实例还可以用，this  能获取到实例，常用于销毁定时器，解绑事件\n- destroyed  阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁\n\n### 1.4 第一次页面加载会触发哪几个钩子？\n\n第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子\n\n### 1.5 DOM  渲染在哪个周期中就已经完成？\n\nDOM 渲染在 mounted 中就已经完成了\n\n### 1.6 每个生命周期适合哪些场景？\n\n生命周期钩子的一些使用方法：\n\n- **beforecreate :** 可以在这加个  loading  事件，在加载实例时触发\n- **created : **初始化完成时的事件写在这里，如在这结束  loading  事件，异步请求也适宜在这里调用\n- **mounted :** 挂载元素，获取到  DOM  节点\n- **updated : **如果对数据统一处理，在这里写上相应函数\n- **beforeDestroy : **可以做一个确认停止事件的确认框\n- **nextTick :** 更新数据后立即操作 DOM\n\n## 2. v-show  与  v-if  区别\n\nv-show  是  css  切换，\nv-if  是完整的销毁和重新创建\n**使用:**\n频繁切换时用  v-show，运行时较少改变时用  v-if\nv-if=‘false’ v-if  是条件渲染，当  false  的时候不会渲染\n\n## 3. MVVM  相关\n\nVue  采用数据劫持结合发布者-订阅者模式的方式，通过  Object.defineProperty  劫持  data  属性的  setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\n\n### 3.1 MVVM\n\nM - Model，Model 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑\nV - View，View 代表 UI 组件，它负责将数据模型转化为 UI 展现出来\nVM - ViewModel，ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接\nModel 和 View\n\n![1.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585485983201-91f30a05-d168-4b9a-babf-23158d13a382.png#align=left&display=inline&height=252&name=1.png&originHeight=252&originWidth=690&size=94469&status=done&style=none&width=690)\no  \nView 接收用户交互请求\no  \nView 将请求转交给  ViewModel\no  \nViewModel 操作 Model 数据更新\no  \nModel 更新完数据，通知  ViewModel 数据发生变化\no  \nViewModel 更新  View  数据\n\n### 3.2 MVC\n\n![2.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486053450-068a90d3-e640-4c68-a27e-7f21a13c1dec.png#align=left&display=inline&height=422&name=2.png&originHeight=422&originWidth=706&size=70216&status=done&style=none&width=706)\no  \nView 接受用户交互请求\no  \nView 将请求转交给  Controller  处理\no  \nController 操作  Model  进行数据更新保存\no  \n数据更新保存之后，Model  会通知  View  更新\no  \nView 更新变化数据使用户得到反馈\n\n### 3.3 MVVM  模式和  MVC  有些类似，但有以下不同\n\n- ViewModel 替换了\n  Controller，在  UI  层之下\n- ViewModel 向\n  View 暴露它所需要的数据和指令对象\n- ViewModel 接收来自 Model 的数据\n\n概括起来，MVVM  是由  MVC  发展而来，通过在  Model  之上而在  View  之下增加一个非视觉的组件将来自 Model  的数据映射到  View  中。\n\n![3.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486142944-76d802f5-330c-4265-880d-0583cb453e57.png#align=left&display=inline&height=390&name=3.png&originHeight=390&originWidth=730&size=184431&status=done&style=none&width=730)\n![4.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486154956-a19f7210-b87a-4829-9522-3386fdaa30ff.png#align=left&display=inline&height=543&name=4.png&originHeight=543&originWidth=922&size=64203&status=done&style=none&width=922)\n\n---\n\n## 4.说说你对 SPA 单页面的理解，它的优缺点分别是什么？\n\n**SPA**（ single-page application ）仅在 Web\n页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。\n**优点：**\no  \n用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；\no  \n基于上面一点，SPA 相对对服务器压力小；\no  \n前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；\n**缺点：**\no  \n初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；\no  \n前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；\no  \nSEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。\n\n## 5、computed 和 watch 的区别和运用的场景？\n\n**computed\\*\\***：** 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；\n**watch\\***\\*：** 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；\n\n### 5.1 运用场景\n\n- 当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；\n- 当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用  watch  选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n### 5.2 computed  的原理？\n\ncomputed 本质是一个惰性求值的观察者。\ncomputed 内部实现了一个惰性的 watcher,也就是 computed watcher,computed watcher 不会立刻求值,同时持有一个 dep 实例。\n其内部通过 this.dirty 属性标记计算属性是否需要重新求值。\n当 computed 的依赖状态发生改变时,就会通知这个惰性的 watcher,\ncomputed watcher 通过\nthis.dep.subs.length 判断有没有订阅者,\n有的话,会重新计算,然后对比新旧值,如果变化了,会重新渲染。 (**Vue\n\\*\\***想确保不仅仅是计算属性依赖的值发生变化，而是当计算属性最终计算的值发生变化时才会触发渲染 watcher 重新渲染，本质上是一种优化。**)\n没有的话,仅仅把 this.dirty = true。 (**当计算属性依赖于其他数据时，属性并不会立即重新计算，只有之后其它地方需要读取属性的时候，它才会真正计算，即具备\nlazy（懒计算）特性。\\*\\*)\n\n## 6. v-model 的原理\n\n我们在 Vue 项目中主要使用 v-model 指令在表单 input、textarea、select\n等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：\n\n- text 和\n  textarea 元素使用 value 属性和 input 事件；\n- checkbox 和\n  radio 使用 checked 属性和 change 事件；\n- select 字段将\n  value 作为 prop 并将 change 作为事件。\n\n<input v-model='something'>\n   相当于\n<input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n**![5.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486406267-20ad462a-967b-4c51-9c95-a2703e75197e.png#align=left&display=inline&height=215&name=5.png&originHeight=215&originWidth=1088&size=260441&status=done&style=none&width=1088)**\n\n##\n\n## 7. Vue  和  React  的区别？\n\nReact  整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在  react  中，是单向数据流；\nVue  的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立  Watcher  来监听，当属性变化的时候，响应式的更新对应的虚拟 DOM。\n**具体参照：**[    https://juejin.im/post/5e153e096fb9a048297390c1](https://juejin.im/post/5e153e096fb9a048297390c1)\n\n## 8. 为什么在 Vue3.0 采用了 Proxy,  抛弃了 Object.defineProperty？\n\nObject.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。Vue 2.x 里,是通过 递归 + 遍历 data 对象来实现对数据的监控的,如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象是才是更好的选择。\nProxy 可以劫持整个对象,并返回一个新的对象。Proxy 不仅可以代理对象,还可以代理数组。还可以代理动态增加的属性。\n\n### 8.1 Proxy 的优势\n\n- Proxy 可以直接监听对象而非属性；\n- Proxy 可以直接监听数组的变化；\n- Proxy 有多达\n  13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；\n- Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而\n  Object.defineProperty 只能遍历对象属性直接修改；\n- Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；\n\n### 8.2 Object.defineProperty 的优势\n\n- 兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。\n\n![6.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486755956-d420d1eb-6c20-49b0-8979-5e4c3a7457a3.png#align=left&display=inline&height=820&name=6.png&originHeight=820&originWidth=1030&size=114005&status=done&style=none&width=1030)\n\n## 9. Vue 组件 data 为什么必须是函数 ?\n\n因为组件是可以复用的,JS 里对象是引用关系,如果组件 data 是一个对象,那么子组件中的\ndata 属性值会互相污染,产生副作用。\n所以一个组件的 data 选项必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝。new Vue 的实例是不会被复用的,因此不存在以上问题。\n\n## 10.  谈谈你对 keep-alive 的了解？\n\nkeep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染\n，\n其有以下特性：\n\n- 一般结合路由和动态组件一起使用，用于缓存组件；\n- 提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存\n  ，其中 exclude 的优先级比 include 高；\n- 对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。\n\n## 11. Vue 组件间通信有哪几种方式？\n\n**（1）\\*\\***props / $emit**** ****适用 父子组件通信**\n这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。\n**（2）****ref**** ****与 ****$parent / $children**** ****适用 父子组件通信**\no  \nref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\no  \n$parent / $children：访问父 / 子实例\n**（3）****EventBus ****（****$emit / $on****）**** ****适用于 父子、隔代、兄弟组件通信**\n这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件\n**（4）****$attrs\\***\\*/\\*\\***$listeners**** ****适用于 隔代组件通信**\no  \n$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class\n和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过  v-bind=\"$attrs\" 传入内部组件。通常配合 inheritAttrs 选项一起使用。\no  \n$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过  v-on=\"$listeners\" 传入内部组件\n**（5）\\*\\***provide / inject\\***\\* \\*\\***适用于 隔代组件通信**\n祖先组件中通过 provider 来提供变量，然后在子孙组件中通过\ninject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。\n**（6）Vuex 适用于 父子、隔代、兄弟组件通信\\*\\*\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个\nVuex 应用的核心就是 store（仓库）。“store”\n基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\no  \nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\no  \n改变 store 中的状态的唯一途径就是显式地提交\n(commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。\n\n## 12.请介绍一下你对  Vuex  的理解？\n\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个\nVuex 应用的核心就是 store（仓库）。“store”\n基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\n（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。\n主要包括以下几个模块：\no  \nState：定义了应用状态的数据结构，可以在这里设置默认的初始状态。\no  \nGetter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。\no  \nMutation：是唯一更改 store 中状态的方法，且必须是同步函数。\no  \nAction：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。\no  \nModule：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。\n\n### 12.1 Vuex  实现原理？ \n\n\\*\\*\n\\*\\*\n\n---\n\n## 13.  请介绍一下你对  Vue-router  的理解？\n\n### 13.1 Vue-router  实现原理？ \n\n\\*\\*\n\\*\\*\n**Vue-router 有 3\n种路由模式：hash、history、abstract，**\n\n- hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持\n  HTML5 History Api 的浏览器；\n- history : 依赖 HTML5 History API\n  和服务器配置。具体可以查看 HTML5 History 模式；\n- abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.\n\n**1\\*\\***）hash\n模式的实现原理\\*\\*\n早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：\nhash 路由模式的实现主要是基于下面几个特性：\n·      URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；\n·      hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；\n·      可以通过  a  标签，并设置  href  属性，当用户点击这个标签后，URL  的 hash 值会发生改变；或者使用  JavaScript 来对  loaction.hash  进行赋值，改变 URL 的 hash 值；\n·      我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。\n\n**2）history 模式的实现原理**\nHTML5 提供了\nHistory API 来实现 URL 的变化。其中做最主要的\nAPI 有以下两个：history.pushState() 和\nhistory.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：\nwindow.history.pushState(null, null, path);\nwindow.history.replaceState(null, null, path);\nhistory 路由模式的实现主要基于存在下面几个特性：\n\n- pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；\n- 我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；\n- history.pushState() 或\n  history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。\n\n### 13.2 导航钩子函数（导航守卫）？\n\n** [  全局守卫 ]**\n\\*\\*\n1.   router.beforeEach 全局前置守卫 进入路由之前\n2.   router.beforeResolve 全局解析守卫(2.5.0+) 在  beforeRouteEnter  调用之后调用\n3.   router.afterEach 全局后置钩子 进入路由之后\n\n```javascript\n// main.js 入口文件\nimport router from \"./router\"; // 引入路由\nrouter.beforeEach((to, from, next) => {\n  next();\n});\nrouter.beforeResolve((to, from, next) => {\n  next();\n});\nrouter.afterEach((to, from) => {\n  console.log(\"afterEach 全局后置钩子\");\n});\n```\n\n\n\n**[ 路由独享的守卫 ]**\n\\*\\*\n你可以在路由配置上直接定义 beforeEnter 守卫\n\n```javascript\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/foo\",\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      },\n    },\n  ],\n});\n```\n\n**[ 组件内的守卫 ]**\n\\*\\*\n你可以在路由组件内直接定义以下路由导航守卫\n\n```javascript\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径\n/foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave (to, from, next) {\n    // 导航离开该组件的对应路由时调用，我们用它来禁止用户离开\n    // 可以访问组件实例 `this`\n    // 比如还未保存草稿，或者在用户离开前，\n    将setInterval销毁，防止离开之后，定时器还在调用。\n  }\n}\n```\n\n## 14、Vue 中的 key 有什么作用？\n\nVue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速\n**更准确**：因为带 key 就不是就地复用了，在 sameNode 函数  a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。\n**更快速**：利用\nkey 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，\n\n## 15.ref  的作用\n\n- 获取  dom  元素  this.$refs.box\n- 获取子组件中的  datathis.$refs.box.msg\n- 调用子组件中的方法  this.$refs.box.open()\n\n[**30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）**](https://juejin.im/post/5d59f2a451882549be53b170#heading-3)\n[**面试完 50 个人后我写下这篇总结**](https://juejin.im/post/5df1e312f265da33d039d06d#heading-72)\n[**公司要求会使用框架 vue，面试题会被问及哪些？**](https://juejin.im/post/5cf495e96fb9a07ef5622025#heading-19)\n[**Vue 项目性能优化 — 实践指南**](https://juejin.im/post/5d548b83f265da03ab42471d#heading-15)\n\n\n\n---\n\n以上更新于 2020 年 3 月 29 日\n\n---\n","source":"_posts/语雀/vrkyau.md","raw":"---\ntitle: 前端面试题总结：Vue 框架\nurlname: vrkyau\ndate: '2020-01-02 10:25:29 +0800'\ntags: []\ncategories: []\nabbrlink: 1672364730\n---\n\n## 1. Vue  生命周期\n\n### 1.1 什么是  Vue  生命周期？\n\nVue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载  DOM → 渲染、更新 → 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期\n\n### 1.2 Vue  生命周期的作用是什么？\n\n它的生命周期中有多个事件钩子，让我们在控制整个  Vue  实例的过程时更容易形成好的逻辑\n\n### 1.3 Vue 生命周期总共有几个阶段？\n\n它可以总共分为  8  个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后\n\n- beforeCreate  阶段：Vue  实例的挂载元素  el  和数据对象  data  都是  undefined，还没有初始化。\n- created  阶段：Vue  实例的数据对象  data  有了，可以访问里面的数据和方法，未挂载到  DOM，el  还没有\n- beforeMount  阶段：Vue  实例的  el  和  data  都初始化了，但是挂载之前为虚拟的 DOM 节点\n- mounted 阶段：Vue  实例挂载到真实  DOM  上，就可以通过  DOM  获取  DOM  节点\n- beforeUpdate  阶段：响应式数据更新时调用，发生在虚拟  DOM  打补丁之前，适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器\n- updated 阶段：虚拟  DOM  重新渲染和打补丁之后调用，组成新的  DOM  已经更新，避免在这个钩子函数中操作数据，防止死循环\n- beforeDestroy  阶段：实例销毁前调用，实例还可以用，this  能获取到实例，常用于销毁定时器，解绑事件\n- destroyed  阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁\n\n### 1.4 第一次页面加载会触发哪几个钩子？\n\n第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子\n\n### 1.5 DOM  渲染在哪个周期中就已经完成？\n\nDOM 渲染在 mounted 中就已经完成了\n\n### 1.6 每个生命周期适合哪些场景？\n\n生命周期钩子的一些使用方法：\n\n- **beforecreate :** 可以在这加个  loading  事件，在加载实例时触发\n- **created : **初始化完成时的事件写在这里，如在这结束  loading  事件，异步请求也适宜在这里调用\n- **mounted :** 挂载元素，获取到  DOM  节点\n- **updated : **如果对数据统一处理，在这里写上相应函数\n- **beforeDestroy : **可以做一个确认停止事件的确认框\n- **nextTick :** 更新数据后立即操作 DOM\n\n## 2. v-show  与  v-if  区别\n\nv-show  是  css  切换，\nv-if  是完整的销毁和重新创建\n**使用:**\n频繁切换时用  v-show，运行时较少改变时用  v-if\nv-if=‘false’ v-if  是条件渲染，当  false  的时候不会渲染\n\n## 3. MVVM  相关\n\nVue  采用数据劫持结合发布者-订阅者模式的方式，通过  Object.defineProperty  劫持  data  属性的  setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\n\n### 3.1 MVVM\n\nM - Model，Model 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑\nV - View，View 代表 UI 组件，它负责将数据模型转化为 UI 展现出来\nVM - ViewModel，ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接\nModel 和 View\n\n![1.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585485983201-91f30a05-d168-4b9a-babf-23158d13a382.png#align=left&display=inline&height=252&name=1.png&originHeight=252&originWidth=690&size=94469&status=done&style=none&width=690)\no  \nView 接收用户交互请求\no  \nView 将请求转交给  ViewModel\no  \nViewModel 操作 Model 数据更新\no  \nModel 更新完数据，通知  ViewModel 数据发生变化\no  \nViewModel 更新  View  数据\n\n### 3.2 MVC\n\n![2.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486053450-068a90d3-e640-4c68-a27e-7f21a13c1dec.png#align=left&display=inline&height=422&name=2.png&originHeight=422&originWidth=706&size=70216&status=done&style=none&width=706)\no  \nView 接受用户交互请求\no  \nView 将请求转交给  Controller  处理\no  \nController 操作  Model  进行数据更新保存\no  \n数据更新保存之后，Model  会通知  View  更新\no  \nView 更新变化数据使用户得到反馈\n\n### 3.3 MVVM  模式和  MVC  有些类似，但有以下不同\n\n- ViewModel 替换了\n  Controller，在  UI  层之下\n- ViewModel 向\n  View 暴露它所需要的数据和指令对象\n- ViewModel 接收来自 Model 的数据\n\n概括起来，MVVM  是由  MVC  发展而来，通过在  Model  之上而在  View  之下增加一个非视觉的组件将来自 Model  的数据映射到  View  中。\n\n![3.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486142944-76d802f5-330c-4265-880d-0583cb453e57.png#align=left&display=inline&height=390&name=3.png&originHeight=390&originWidth=730&size=184431&status=done&style=none&width=730)\n![4.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486154956-a19f7210-b87a-4829-9522-3386fdaa30ff.png#align=left&display=inline&height=543&name=4.png&originHeight=543&originWidth=922&size=64203&status=done&style=none&width=922)\n\n---\n\n## 4.说说你对 SPA 单页面的理解，它的优缺点分别是什么？\n\n**SPA**（ single-page application ）仅在 Web\n页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。\n**优点：**\no  \n用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；\no  \n基于上面一点，SPA 相对对服务器压力小；\no  \n前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；\n**缺点：**\no  \n初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；\no  \n前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；\no  \nSEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。\n\n## 5、computed 和 watch 的区别和运用的场景？\n\n**computed\\*\\***：** 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；\n**watch\\***\\*：** 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；\n\n### 5.1 运用场景\n\n- 当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；\n- 当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用  watch  选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n### 5.2 computed  的原理？\n\ncomputed 本质是一个惰性求值的观察者。\ncomputed 内部实现了一个惰性的 watcher,也就是 computed watcher,computed watcher 不会立刻求值,同时持有一个 dep 实例。\n其内部通过 this.dirty 属性标记计算属性是否需要重新求值。\n当 computed 的依赖状态发生改变时,就会通知这个惰性的 watcher,\ncomputed watcher 通过\nthis.dep.subs.length 判断有没有订阅者,\n有的话,会重新计算,然后对比新旧值,如果变化了,会重新渲染。 (**Vue\n\\*\\***想确保不仅仅是计算属性依赖的值发生变化，而是当计算属性最终计算的值发生变化时才会触发渲染 watcher 重新渲染，本质上是一种优化。**)\n没有的话,仅仅把 this.dirty = true。 (**当计算属性依赖于其他数据时，属性并不会立即重新计算，只有之后其它地方需要读取属性的时候，它才会真正计算，即具备\nlazy（懒计算）特性。\\*\\*)\n\n## 6. v-model 的原理\n\n我们在 Vue 项目中主要使用 v-model 指令在表单 input、textarea、select\n等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：\n\n- text 和\n  textarea 元素使用 value 属性和 input 事件；\n- checkbox 和\n  radio 使用 checked 属性和 change 事件；\n- select 字段将\n  value 作为 prop 并将 change 作为事件。\n\n<input v-model='something'>\n   相当于\n<input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n**![5.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486406267-20ad462a-967b-4c51-9c95-a2703e75197e.png#align=left&display=inline&height=215&name=5.png&originHeight=215&originWidth=1088&size=260441&status=done&style=none&width=1088)**\n\n##\n\n## 7. Vue  和  React  的区别？\n\nReact  整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在  react  中，是单向数据流；\nVue  的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立  Watcher  来监听，当属性变化的时候，响应式的更新对应的虚拟 DOM。\n**具体参照：**[    https://juejin.im/post/5e153e096fb9a048297390c1](https://juejin.im/post/5e153e096fb9a048297390c1)\n\n## 8. 为什么在 Vue3.0 采用了 Proxy,  抛弃了 Object.defineProperty？\n\nObject.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。Vue 2.x 里,是通过 递归 + 遍历 data 对象来实现对数据的监控的,如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象是才是更好的选择。\nProxy 可以劫持整个对象,并返回一个新的对象。Proxy 不仅可以代理对象,还可以代理数组。还可以代理动态增加的属性。\n\n### 8.1 Proxy 的优势\n\n- Proxy 可以直接监听对象而非属性；\n- Proxy 可以直接监听数组的变化；\n- Proxy 有多达\n  13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；\n- Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而\n  Object.defineProperty 只能遍历对象属性直接修改；\n- Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；\n\n### 8.2 Object.defineProperty 的优势\n\n- 兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。\n\n![6.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486755956-d420d1eb-6c20-49b0-8979-5e4c3a7457a3.png#align=left&display=inline&height=820&name=6.png&originHeight=820&originWidth=1030&size=114005&status=done&style=none&width=1030)\n\n## 9. Vue 组件 data 为什么必须是函数 ?\n\n因为组件是可以复用的,JS 里对象是引用关系,如果组件 data 是一个对象,那么子组件中的\ndata 属性值会互相污染,产生副作用。\n所以一个组件的 data 选项必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝。new Vue 的实例是不会被复用的,因此不存在以上问题。\n\n## 10.  谈谈你对 keep-alive 的了解？\n\nkeep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染\n，\n其有以下特性：\n\n- 一般结合路由和动态组件一起使用，用于缓存组件；\n- 提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存\n  ，其中 exclude 的优先级比 include 高；\n- 对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。\n\n## 11. Vue 组件间通信有哪几种方式？\n\n**（1）\\*\\***props / $emit**** ****适用 父子组件通信**\n这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。\n**（2）****ref**** ****与 ****$parent / $children**** ****适用 父子组件通信**\no  \nref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\no  \n$parent / $children：访问父 / 子实例\n**（3）****EventBus ****（****$emit / $on****）**** ****适用于 父子、隔代、兄弟组件通信**\n这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件\n**（4）****$attrs\\***\\*/\\*\\***$listeners**** ****适用于 隔代组件通信**\no  \n$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class\n和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过  v-bind=\"$attrs\" 传入内部组件。通常配合 inheritAttrs 选项一起使用。\no  \n$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过  v-on=\"$listeners\" 传入内部组件\n**（5）\\*\\***provide / inject\\***\\* \\*\\***适用于 隔代组件通信**\n祖先组件中通过 provider 来提供变量，然后在子孙组件中通过\ninject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。\n**（6）Vuex 适用于 父子、隔代、兄弟组件通信\\*\\*\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个\nVuex 应用的核心就是 store（仓库）。“store”\n基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\no  \nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\no  \n改变 store 中的状态的唯一途径就是显式地提交\n(commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。\n\n## 12.请介绍一下你对  Vuex  的理解？\n\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个\nVuex 应用的核心就是 store（仓库）。“store”\n基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\n（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。\n主要包括以下几个模块：\no  \nState：定义了应用状态的数据结构，可以在这里设置默认的初始状态。\no  \nGetter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。\no  \nMutation：是唯一更改 store 中状态的方法，且必须是同步函数。\no  \nAction：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。\no  \nModule：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。\n\n### 12.1 Vuex  实现原理？ \n\n\\*\\*\n\\*\\*\n\n---\n\n## 13.  请介绍一下你对  Vue-router  的理解？\n\n### 13.1 Vue-router  实现原理？ \n\n\\*\\*\n\\*\\*\n**Vue-router 有 3\n种路由模式：hash、history、abstract，**\n\n- hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持\n  HTML5 History Api 的浏览器；\n- history : 依赖 HTML5 History API\n  和服务器配置。具体可以查看 HTML5 History 模式；\n- abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.\n\n**1\\*\\***）hash\n模式的实现原理\\*\\*\n早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：\nhash 路由模式的实现主要是基于下面几个特性：\n·      URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；\n·      hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；\n·      可以通过  a  标签，并设置  href  属性，当用户点击这个标签后，URL  的 hash 值会发生改变；或者使用  JavaScript 来对  loaction.hash  进行赋值，改变 URL 的 hash 值；\n·      我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。\n\n**2）history 模式的实现原理**\nHTML5 提供了\nHistory API 来实现 URL 的变化。其中做最主要的\nAPI 有以下两个：history.pushState() 和\nhistory.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：\nwindow.history.pushState(null, null, path);\nwindow.history.replaceState(null, null, path);\nhistory 路由模式的实现主要基于存在下面几个特性：\n\n- pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；\n- 我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；\n- history.pushState() 或\n  history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。\n\n### 13.2 导航钩子函数（导航守卫）？\n\n** [  全局守卫 ]**\n\\*\\*\n1.   router.beforeEach 全局前置守卫 进入路由之前\n2.   router.beforeResolve 全局解析守卫(2.5.0+) 在  beforeRouteEnter  调用之后调用\n3.   router.afterEach 全局后置钩子 进入路由之后\n\n```javascript\n// main.js 入口文件\nimport router from \"./router\"; // 引入路由\nrouter.beforeEach((to, from, next) => {\n  next();\n});\nrouter.beforeResolve((to, from, next) => {\n  next();\n});\nrouter.afterEach((to, from) => {\n  console.log(\"afterEach 全局后置钩子\");\n});\n```\n\n\n\n**[ 路由独享的守卫 ]**\n\\*\\*\n你可以在路由配置上直接定义 beforeEnter 守卫\n\n```javascript\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/foo\",\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      },\n    },\n  ],\n});\n```\n\n**[ 组件内的守卫 ]**\n\\*\\*\n你可以在路由组件内直接定义以下路由导航守卫\n\n```javascript\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径\n/foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave (to, from, next) {\n    // 导航离开该组件的对应路由时调用，我们用它来禁止用户离开\n    // 可以访问组件实例 `this`\n    // 比如还未保存草稿，或者在用户离开前，\n    将setInterval销毁，防止离开之后，定时器还在调用。\n  }\n}\n```\n\n## 14、Vue 中的 key 有什么作用？\n\nVue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速\n**更准确**：因为带 key 就不是就地复用了，在 sameNode 函数  a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。\n**更快速**：利用\nkey 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，\n\n## 15.ref  的作用\n\n- 获取  dom  元素  this.$refs.box\n- 获取子组件中的  datathis.$refs.box.msg\n- 调用子组件中的方法  this.$refs.box.open()\n\n[**30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）**](https://juejin.im/post/5d59f2a451882549be53b170#heading-3)\n[**面试完 50 个人后我写下这篇总结**](https://juejin.im/post/5df1e312f265da33d039d06d#heading-72)\n[**公司要求会使用框架 vue，面试题会被问及哪些？**](https://juejin.im/post/5cf495e96fb9a07ef5622025#heading-19)\n[**Vue 项目性能优化 — 实践指南**](https://juejin.im/post/5d548b83f265da03ab42471d#heading-15)\n\n\n\n---\n\n以上更新于 2020 年 3 月 29 日\n\n---\n","slug":"语雀/vrkyau","published":1,"updated":"2022-03-03T11:26:07.595Z","_id":"cl0awjjpm0018081b8o1yahh4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Vue-生命周期\"><a href=\"#1-Vue-生命周期\" class=\"headerlink\" title=\"1. Vue  生命周期\"></a>1. Vue  生命周期</h2><h3 id=\"1-1-什么是-Vue-生命周期？\"><a href=\"#1-1-什么是-Vue-生命周期？\" class=\"headerlink\" title=\"1.1 什么是  Vue  生命周期？\"></a>1.1 什么是  Vue  生命周期？</h3><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载  DOM → 渲染、更新 → 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期</p>\n<h3 id=\"1-2-Vue-生命周期的作用是什么？\"><a href=\"#1-2-Vue-生命周期的作用是什么？\" class=\"headerlink\" title=\"1.2 Vue  生命周期的作用是什么？\"></a>1.2 Vue  生命周期的作用是什么？</h3><p>它的生命周期中有多个事件钩子，让我们在控制整个  Vue  实例的过程时更容易形成好的逻辑</p>\n<h3 id=\"1-3-Vue-生命周期总共有几个阶段？\"><a href=\"#1-3-Vue-生命周期总共有几个阶段？\" class=\"headerlink\" title=\"1.3 Vue 生命周期总共有几个阶段？\"></a>1.3 Vue 生命周期总共有几个阶段？</h3><p>它可以总共分为  8  个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后</p>\n<ul>\n<li>beforeCreate  阶段：Vue  实例的挂载元素  el  和数据对象  data  都是  undefined，还没有初始化。</li>\n<li>created  阶段：Vue  实例的数据对象  data  有了，可以访问里面的数据和方法，未挂载到  DOM，el  还没有</li>\n<li>beforeMount  阶段：Vue  实例的  el  和  data  都初始化了，但是挂载之前为虚拟的 DOM 节点</li>\n<li>mounted 阶段：Vue  实例挂载到真实  DOM  上，就可以通过  DOM  获取  DOM  节点</li>\n<li>beforeUpdate  阶段：响应式数据更新时调用，发生在虚拟  DOM  打补丁之前，适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器</li>\n<li>updated 阶段：虚拟  DOM  重新渲染和打补丁之后调用，组成新的  DOM  已经更新，避免在这个钩子函数中操作数据，防止死循环</li>\n<li>beforeDestroy  阶段：实例销毁前调用，实例还可以用，this  能获取到实例，常用于销毁定时器，解绑事件</li>\n<li>destroyed  阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁</li>\n</ul>\n<h3 id=\"1-4-第一次页面加载会触发哪几个钩子？\"><a href=\"#1-4-第一次页面加载会触发哪几个钩子？\" class=\"headerlink\" title=\"1.4 第一次页面加载会触发哪几个钩子？\"></a>1.4 第一次页面加载会触发哪几个钩子？</h3><p>第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子</p>\n<h3 id=\"1-5-DOM-渲染在哪个周期中就已经完成？\"><a href=\"#1-5-DOM-渲染在哪个周期中就已经完成？\" class=\"headerlink\" title=\"1.5 DOM  渲染在哪个周期中就已经完成？\"></a>1.5 DOM  渲染在哪个周期中就已经完成？</h3><p>DOM 渲染在 mounted 中就已经完成了</p>\n<h3 id=\"1-6-每个生命周期适合哪些场景？\"><a href=\"#1-6-每个生命周期适合哪些场景？\" class=\"headerlink\" title=\"1.6 每个生命周期适合哪些场景？\"></a>1.6 每个生命周期适合哪些场景？</h3><p>生命周期钩子的一些使用方法：</p>\n<ul>\n<li><strong>beforecreate :</strong> 可以在这加个  loading  事件，在加载实例时触发</li>\n<li>**created : **初始化完成时的事件写在这里，如在这结束  loading  事件，异步请求也适宜在这里调用</li>\n<li><strong>mounted :</strong> 挂载元素，获取到  DOM  节点</li>\n<li>**updated : **如果对数据统一处理，在这里写上相应函数</li>\n<li>**beforeDestroy : **可以做一个确认停止事件的确认框</li>\n<li><strong>nextTick :</strong> 更新数据后立即操作 DOM</li>\n</ul>\n<h2 id=\"2-v-show-与-v-if-区别\"><a href=\"#2-v-show-与-v-if-区别\" class=\"headerlink\" title=\"2. v-show  与  v-if  区别\"></a>2. v-show  与  v-if  区别</h2><p>v-show  是  css  切换，<br>v-if  是完整的销毁和重新创建<br><strong>使用:</strong><br>频繁切换时用  v-show，运行时较少改变时用  v-if<br>v-if=‘false’ v-if  是条件渲染，当  false  的时候不会渲染</p>\n<h2 id=\"3-MVVM-相关\"><a href=\"#3-MVVM-相关\" class=\"headerlink\" title=\"3. MVVM  相关\"></a>3. MVVM  相关</h2><p>Vue  采用数据劫持结合发布者-订阅者模式的方式，通过  Object.defineProperty  劫持  data  属性的  setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<h3 id=\"3-1-MVVM\"><a href=\"#3-1-MVVM\" class=\"headerlink\" title=\"3.1 MVVM\"></a>3.1 MVVM</h3><p>M - Model，Model 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑<br>V - View，View 代表 UI 组件，它负责将数据模型转化为 UI 展现出来<br>VM - ViewModel，ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接<br>Model 和 View</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585485983201-91f30a05-d168-4b9a-babf-23158d13a382.png#align=left&display=inline&height=252&name=1.png&originHeight=252&originWidth=690&size=94469&status=done&style=none&width=690\" alt=\"1.png\"><br>o  <br>View 接收用户交互请求<br>o  <br>View 将请求转交给  ViewModel<br>o  <br>ViewModel 操作 Model 数据更新<br>o  <br>Model 更新完数据，通知  ViewModel 数据发生变化<br>o  <br>ViewModel 更新  View  数据</p>\n<h3 id=\"3-2-MVC\"><a href=\"#3-2-MVC\" class=\"headerlink\" title=\"3.2 MVC\"></a>3.2 MVC</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486053450-068a90d3-e640-4c68-a27e-7f21a13c1dec.png#align=left&display=inline&height=422&name=2.png&originHeight=422&originWidth=706&size=70216&status=done&style=none&width=706\" alt=\"2.png\"><br>o  <br>View 接受用户交互请求<br>o  <br>View 将请求转交给  Controller  处理<br>o  <br>Controller 操作  Model  进行数据更新保存<br>o  <br>数据更新保存之后，Model  会通知  View  更新<br>o  <br>View 更新变化数据使用户得到反馈</p>\n<h3 id=\"3-3-MVVM-模式和-MVC-有些类似，但有以下不同\"><a href=\"#3-3-MVVM-模式和-MVC-有些类似，但有以下不同\" class=\"headerlink\" title=\"3.3 MVVM  模式和  MVC  有些类似，但有以下不同\"></a>3.3 MVVM  模式和  MVC  有些类似，但有以下不同</h3><ul>\n<li>ViewModel 替换了<br>Controller，在  UI  层之下</li>\n<li>ViewModel 向<br>View 暴露它所需要的数据和指令对象</li>\n<li>ViewModel 接收来自 Model 的数据</li>\n</ul>\n<p>概括起来，MVVM  是由  MVC  发展而来，通过在  Model  之上而在  View  之下增加一个非视觉的组件将来自 Model  的数据映射到  View  中。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486142944-76d802f5-330c-4265-880d-0583cb453e57.png#align=left&display=inline&height=390&name=3.png&originHeight=390&originWidth=730&size=184431&status=done&style=none&width=730\" alt=\"3.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486154956-a19f7210-b87a-4829-9522-3386fdaa30ff.png#align=left&display=inline&height=543&name=4.png&originHeight=543&originWidth=922&size=64203&status=done&style=none&width=922\" alt=\"4.png\"></p>\n<hr>\n<h2 id=\"4-说说你对-SPA-单页面的理解，它的优缺点分别是什么？\"><a href=\"#4-说说你对-SPA-单页面的理解，它的优缺点分别是什么？\" class=\"headerlink\" title=\"4.说说你对 SPA 单页面的理解，它的优缺点分别是什么？\"></a>4.说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2><p><strong>SPA</strong>（ single-page application ）仅在 Web<br>页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。<br><strong>优点：</strong><br>o  <br>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；<br>o  <br>基于上面一点，SPA 相对对服务器压力小；<br>o  <br>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；<br><strong>缺点：</strong><br>o  <br>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；<br>o  <br>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；<br>o  <br>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</p>\n<h2 id=\"5、computed-和-watch-的区别和运用的场景？\"><a href=\"#5、computed-和-watch-的区别和运用的场景？\" class=\"headerlink\" title=\"5、computed 和 watch 的区别和运用的场景？\"></a>5、computed 和 watch 的区别和运用的场景？</h2><p><strong>computed**<strong>：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；<br><strong>watch*</strong>*：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>\n<h3 id=\"5-1-运用场景\"><a href=\"#5-1-运用场景\" class=\"headerlink\" title=\"5.1 运用场景\"></a>5.1 运用场景</h3><ul>\n<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>\n<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用  watch  选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n<h3 id=\"5-2-computed-的原理？\"><a href=\"#5-2-computed-的原理？\" class=\"headerlink\" title=\"5.2 computed  的原理？\"></a>5.2 computed  的原理？</h3><p>computed 本质是一个惰性求值的观察者。<br>computed 内部实现了一个惰性的 watcher,也就是 computed watcher,computed watcher 不会立刻求值,同时持有一个 dep 实例。<br>其内部通过 this.dirty 属性标记计算属性是否需要重新求值。<br>当 computed 的依赖状态发生改变时,就会通知这个惰性的 watcher,<br>computed watcher 通过<br>this.dep.subs.length 判断有没有订阅者,<br>有的话,会重新计算,然后对比新旧值,如果变化了,会重新渲染。 (**Vue<br>**<strong>想确保不仅仅是计算属性依赖的值发生变化，而是当计算属性最终计算的值发生变化时才会触发渲染 watcher 重新渲染，本质上是一种优化。</strong>)<br>没有的话,仅仅把 this.dirty = true。 (**当计算属性依赖于其他数据时，属性并不会立即重新计算，只有之后其它地方需要读取属性的时候，它才会真正计算，即具备<br>lazy（懒计算）特性。**)</p>\n<h2 id=\"6-v-model-的原理\"><a href=\"#6-v-model-的原理\" class=\"headerlink\" title=\"6. v-model 的原理\"></a>6. v-model 的原理</h2><p>我们在 Vue 项目中主要使用 v-model 指令在表单 input、textarea、select<br>等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>text 和<br>textarea 元素使用 value 属性和 input 事件；</li>\n<li>checkbox 和<br>radio 使用 checked 属性和 change 事件；</li>\n<li>select 字段将<br>value 作为 prop 并将 change 作为事件。</li>\n</ul>\n<input v-model='something'>\n   相当于\n<input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n**![5.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486406267-20ad462a-967b-4c51-9c95-a2703e75197e.png#align=left&display=inline&height=215&name=5.png&originHeight=215&originWidth=1088&size=260441&status=done&style=none&width=1088)**\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"7-Vue-和-React-的区别？\"><a href=\"#7-Vue-和-React-的区别？\" class=\"headerlink\" title=\"7. Vue  和  React  的区别？\"></a>7. Vue  和  React  的区别？</h2><p>React  整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在  react  中，是单向数据流；<br>Vue  的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立  Watcher  来监听，当属性变化的时候，响应式的更新对应的虚拟 DOM。<br><strong>具体参照：</strong><a href=\"https://juejin.im/post/5e153e096fb9a048297390c1\" rel=\"external nofollow noreferrer\">    https://juejin.im/post/5e153e096fb9a048297390c1</a></p>\n<h2 id=\"8-为什么在-Vue3-0-采用了-Proxy-抛弃了-Object-defineProperty？\"><a href=\"#8-为什么在-Vue3-0-采用了-Proxy-抛弃了-Object-defineProperty？\" class=\"headerlink\" title=\"8. 为什么在 Vue3.0 采用了 Proxy,  抛弃了 Object.defineProperty？\"></a>8. 为什么在 Vue3.0 采用了 Proxy,  抛弃了 Object.defineProperty？</h2><p>Object.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。Vue 2.x 里,是通过 递归 + 遍历 data 对象来实现对数据的监控的,如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象是才是更好的选择。<br>Proxy 可以劫持整个对象,并返回一个新的对象。Proxy 不仅可以代理对象,还可以代理数组。还可以代理动态增加的属性。</p>\n<h3 id=\"8-1-Proxy-的优势\"><a href=\"#8-1-Proxy-的优势\" class=\"headerlink\" title=\"8.1 Proxy 的优势\"></a>8.1 Proxy 的优势</h3><ul>\n<li>Proxy 可以直接监听对象而非属性；</li>\n<li>Proxy 可以直接监听数组的变化；</li>\n<li>Proxy 有多达<br>13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>\n<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而<br>Object.defineProperty 只能遍历对象属性直接修改；</li>\n<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>\n</ul>\n<h3 id=\"8-2-Object-defineProperty-的优势\"><a href=\"#8-2-Object-defineProperty-的优势\" class=\"headerlink\" title=\"8.2 Object.defineProperty 的优势\"></a>8.2 Object.defineProperty 的优势</h3><ul>\n<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486755956-d420d1eb-6c20-49b0-8979-5e4c3a7457a3.png#align=left&display=inline&height=820&name=6.png&originHeight=820&originWidth=1030&size=114005&status=done&style=none&width=1030\" alt=\"6.png\"></p>\n<h2 id=\"9-Vue-组件-data-为什么必须是函数\"><a href=\"#9-Vue-组件-data-为什么必须是函数\" class=\"headerlink\" title=\"9. Vue 组件 data 为什么必须是函数 ?\"></a>9. Vue 组件 data 为什么必须是函数 ?</h2><p>因为组件是可以复用的,JS 里对象是引用关系,如果组件 data 是一个对象,那么子组件中的<br>data 属性值会互相污染,产生副作用。<br>所以一个组件的 data 选项必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝。new Vue 的实例是不会被复用的,因此不存在以上问题。</p>\n<h2 id=\"10-谈谈你对-keep-alive-的了解？\"><a href=\"#10-谈谈你对-keep-alive-的了解？\" class=\"headerlink\" title=\"10.  谈谈你对 keep-alive 的了解？\"></a>10.  谈谈你对 keep-alive 的了解？</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染<br>，<br>其有以下特性：</p>\n<ul>\n<li>一般结合路由和动态组件一起使用，用于缓存组件；</li>\n<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存<br>，其中 exclude 的优先级比 include 高；</li>\n<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li>\n</ul>\n<h2 id=\"11-Vue-组件间通信有哪几种方式？\"><a href=\"#11-Vue-组件间通信有哪几种方式？\" class=\"headerlink\" title=\"11. Vue 组件间通信有哪几种方式？\"></a>11. Vue 组件间通信有哪几种方式？</h2><p><strong>（1）**<strong>props / $emit</strong></strong> <strong><strong>适用 父子组件通信</strong><br>这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。<br><strong>（2）</strong></strong>ref**** <strong>*<em>与 <strong><strong>$parent / $children</strong></strong> <strong><strong>适用 父子组件通信</strong><br>o  <br>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例<br>o  <br>$parent / $children：访问父 / 子实例<br><strong>（3）</strong></strong>EventBus <strong><strong>（</strong></strong>$emit / $on</em>*</strong>）**** <strong><strong>适用于 父子、隔代、兄弟组件通信</strong><br>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件<br><strong>（4）</strong></strong>$attrs*<strong>*/**</strong>$listeners**** **<strong>适用于 隔代组件通信</strong><br>o  <br>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class<br>和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过  v-bind=”$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。<br>o  <br>$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过  v-on=”$listeners” 传入内部组件<br>**（5）**<strong>provide / inject*</strong>* **<strong>适用于 隔代组件通信</strong><br>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过<br>inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。<br>**（6）Vuex 适用于 父子、隔代、兄弟组件通信**<br>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个<br>Vuex 应用的核心就是 store（仓库）。“store”<br>基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。<br>o  <br>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br>o  <br>改变 store 中的状态的唯一途径就是显式地提交<br>(commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>\n<h2 id=\"12-请介绍一下你对-Vuex-的理解？\"><a href=\"#12-请介绍一下你对-Vuex-的理解？\" class=\"headerlink\" title=\"12.请介绍一下你对  Vuex  的理解？\"></a>12.请介绍一下你对  Vuex  的理解？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个<br>Vuex 应用的核心就是 store（仓库）。“store”<br>基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。<br>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。<br>主要包括以下几个模块：<br>o  <br>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。<br>o  <br>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。<br>o  <br>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。<br>o  <br>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。<br>o  <br>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</p>\n<h3 id=\"12-1-Vuex-实现原理？\"><a href=\"#12-1-Vuex-实现原理？\" class=\"headerlink\" title=\"12.1 Vuex  实现原理？\"></a>12.1 Vuex  实现原理？</h3><p>**<br>**</p>\n<hr>\n<h2 id=\"13-请介绍一下你对-Vue-router-的理解？\"><a href=\"#13-请介绍一下你对-Vue-router-的理解？\" class=\"headerlink\" title=\"13.  请介绍一下你对  Vue-router  的理解？\"></a>13.  请介绍一下你对  Vue-router  的理解？</h2><h3 id=\"13-1-Vue-router-实现原理？\"><a href=\"#13-1-Vue-router-实现原理？\" class=\"headerlink\" title=\"13.1 Vue-router  实现原理？\"></a>13.1 Vue-router  实现原理？</h3><p>**<br>**<br><strong>Vue-router 有 3<br>种路由模式：hash、history、abstract，</strong></p>\n<ul>\n<li>hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持<br>HTML5 History Api 的浏览器；</li>\n<li>history : 依赖 HTML5 History API<br>和服务器配置。具体可以查看 HTML5 History 模式；</li>\n<li>abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>\n</ul>\n<p>**1****）hash<br>模式的实现原理**<br>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：<br>hash 路由模式的实现主要是基于下面几个特性：<br>·      URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；<br>·      hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；<br>·      可以通过  a  标签，并设置  href  属性，当用户点击这个标签后，URL  的 hash 值会发生改变；或者使用  JavaScript 来对  loaction.hash  进行赋值，改变 URL 的 hash 值；<br>·      我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</p>\n<p><strong>2）history 模式的实现原理</strong><br>HTML5 提供了<br>History API 来实现 URL 的变化。其中做最主要的<br>API 有以下两个：history.pushState() 和<br>history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：<br>window.history.pushState(null, null, path);<br>window.history.replaceState(null, null, path);<br>history 路由模式的实现主要基于存在下面几个特性：</p>\n<ul>\n<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>\n<li>我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>\n<li>history.pushState() 或<br>history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>\n</ul>\n<h3 id=\"13-2-导航钩子函数（导航守卫）？\"><a href=\"#13-2-导航钩子函数（导航守卫）？\" class=\"headerlink\" title=\"13.2 导航钩子函数（导航守卫）？\"></a>13.2 导航钩子函数（导航守卫）？</h3><p>** [  全局守卫 ]**<br>**<br>1.   router.beforeEach 全局前置守卫 进入路由之前<br>2.   router.beforeResolve 全局解析守卫(2.5.0+) 在  beforeRouteEnter  调用之后调用<br>3.   router.afterEach 全局后置钩子 进入路由之后</p>\n<pre><code class=\"javascript\">// main.js 入口文件\nimport router from &quot;./router&quot;; // 引入路由\nrouter.beforeEach((to, from, next) =&gt; &#123;\n  next();\n&#125;);\nrouter.beforeResolve((to, from, next) =&gt; &#123;\n  next();\n&#125;);\nrouter.afterEach((to, from) =&gt; &#123;\n  console.log(&quot;afterEach 全局后置钩子&quot;);\n&#125;);\n</code></pre>\n<p><strong>[ 路由独享的守卫 ]</strong><br>**<br>你可以在路由配置上直接定义 beforeEnter 守卫</p>\n<pre><code class=\"javascript\">const router = new VueRouter(&#123;\n  routes: [\n    &#123;\n      path: &quot;/foo&quot;,\n      component: Foo,\n      beforeEnter: (to, from, next) =&gt; &#123;\n        // ...\n      &#125;,\n    &#125;,\n  ],\n&#125;);\n</code></pre>\n<p><strong>[ 组件内的守卫 ]</strong><br>**<br>你可以在路由组件内直接定义以下路由导航守卫</p>\n<pre><code class=\"javascript\">const Foo = &#123;\n  template: `...`,\n  beforeRouteEnter (to, from, next) &#123;\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  &#125;,\n  beforeRouteUpdate (to, from, next) &#123;\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径\n/foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  &#125;,\n  beforeRouteLeave (to, from, next) &#123;\n    // 导航离开该组件的对应路由时调用，我们用它来禁止用户离开\n    // 可以访问组件实例 `this`\n    // 比如还未保存草稿，或者在用户离开前，\n    将setInterval销毁，防止离开之后，定时器还在调用。\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"14、Vue-中的-key-有什么作用？\"><a href=\"#14、Vue-中的-key-有什么作用？\" class=\"headerlink\" title=\"14、Vue 中的 key 有什么作用？\"></a>14、Vue 中的 key 有什么作用？</h2><p>Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速<br><strong>更准确</strong>：因为带 key 就不是就地复用了，在 sameNode 函数  a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。<br><strong>更快速</strong>：利用<br>key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，</p>\n<h2 id=\"15-ref-的作用\"><a href=\"#15-ref-的作用\" class=\"headerlink\" title=\"15.ref  的作用\"></a>15.ref  的作用</h2><ul>\n<li>获取  dom  元素  this.$refs.box</li>\n<li>获取子组件中的  datathis.$refs.box.msg</li>\n<li>调用子组件中的方法  this.$refs.box.open()</li>\n</ul>\n<p><a href=\"https://juejin.im/post/5d59f2a451882549be53b170#heading-3\" rel=\"external nofollow noreferrer\"><strong>30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）</strong></a><br><a href=\"https://juejin.im/post/5df1e312f265da33d039d06d#heading-72\" rel=\"external nofollow noreferrer\"><strong>面试完 50 个人后我写下这篇总结</strong></a><br><a href=\"https://juejin.im/post/5cf495e96fb9a07ef5622025#heading-19\" rel=\"external nofollow noreferrer\"><strong>公司要求会使用框架 vue，面试题会被问及哪些？</strong></a><br><a href=\"https://juejin.im/post/5d548b83f265da03ab42471d#heading-15\" rel=\"external nofollow noreferrer\"><strong>Vue 项目性能优化 — 实践指南</strong></a></p>\n<hr>\n<p>以上更新于 2020 年 3 月 29 日</p>\n<hr>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"1-Vue-生命周期\"><a href=\"#1-Vue-生命周期\" class=\"headerlink\" title=\"1. Vue  生命周期\"></a>1. Vue  生命周期</h2><h3 id=\"1-1-什么是-Vue-生命周期？\"><a href=\"#1-1-什么是-Vue-生命周期？\" class=\"headerlink\" title=\"1.1 什么是  Vue  生命周期？\"></a>1.1 什么是  Vue  生命周期？</h3><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载  DOM → 渲染、更新 → 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期</p>\n<h3 id=\"1-2-Vue-生命周期的作用是什么？\"><a href=\"#1-2-Vue-生命周期的作用是什么？\" class=\"headerlink\" title=\"1.2 Vue  生命周期的作用是什么？\"></a>1.2 Vue  生命周期的作用是什么？</h3><p>它的生命周期中有多个事件钩子，让我们在控制整个  Vue  实例的过程时更容易形成好的逻辑</p>\n<h3 id=\"1-3-Vue-生命周期总共有几个阶段？\"><a href=\"#1-3-Vue-生命周期总共有几个阶段？\" class=\"headerlink\" title=\"1.3 Vue 生命周期总共有几个阶段？\"></a>1.3 Vue 生命周期总共有几个阶段？</h3><p>它可以总共分为  8  个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后</p>\n<ul>\n<li>beforeCreate  阶段：Vue  实例的挂载元素  el  和数据对象  data  都是  undefined，还没有初始化。</li>\n<li>created  阶段：Vue  实例的数据对象  data  有了，可以访问里面的数据和方法，未挂载到  DOM，el  还没有</li>\n<li>beforeMount  阶段：Vue  实例的  el  和  data  都初始化了，但是挂载之前为虚拟的 DOM 节点</li>\n<li>mounted 阶段：Vue  实例挂载到真实  DOM  上，就可以通过  DOM  获取  DOM  节点</li>\n<li>beforeUpdate  阶段：响应式数据更新时调用，发生在虚拟  DOM  打补丁之前，适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器</li>\n<li>updated 阶段：虚拟  DOM  重新渲染和打补丁之后调用，组成新的  DOM  已经更新，避免在这个钩子函数中操作数据，防止死循环</li>\n<li>beforeDestroy  阶段：实例销毁前调用，实例还可以用，this  能获取到实例，常用于销毁定时器，解绑事件</li>\n<li>destroyed  阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁</li>\n</ul>\n<h3 id=\"1-4-第一次页面加载会触发哪几个钩子？\"><a href=\"#1-4-第一次页面加载会触发哪几个钩子？\" class=\"headerlink\" title=\"1.4 第一次页面加载会触发哪几个钩子？\"></a>1.4 第一次页面加载会触发哪几个钩子？</h3><p>第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子</p>\n<h3 id=\"1-5-DOM-渲染在哪个周期中就已经完成？\"><a href=\"#1-5-DOM-渲染在哪个周期中就已经完成？\" class=\"headerlink\" title=\"1.5 DOM  渲染在哪个周期中就已经完成？\"></a>1.5 DOM  渲染在哪个周期中就已经完成？</h3><p>DOM 渲染在 mounted 中就已经完成了</p>\n<h3 id=\"1-6-每个生命周期适合哪些场景？\"><a href=\"#1-6-每个生命周期适合哪些场景？\" class=\"headerlink\" title=\"1.6 每个生命周期适合哪些场景？\"></a>1.6 每个生命周期适合哪些场景？</h3><p>生命周期钩子的一些使用方法：</p>\n<ul>\n<li><strong>beforecreate :</strong> 可以在这加个  loading  事件，在加载实例时触发</li>\n<li>**created : **初始化完成时的事件写在这里，如在这结束  loading  事件，异步请求也适宜在这里调用</li>\n<li><strong>mounted :</strong> 挂载元素，获取到  DOM  节点</li>\n<li>**updated : **如果对数据统一处理，在这里写上相应函数</li>\n<li>**beforeDestroy : **可以做一个确认停止事件的确认框</li>\n<li><strong>nextTick :</strong> 更新数据后立即操作 DOM</li>\n</ul>\n<h2 id=\"2-v-show-与-v-if-区别\"><a href=\"#2-v-show-与-v-if-区别\" class=\"headerlink\" title=\"2. v-show  与  v-if  区别\"></a>2. v-show  与  v-if  区别</h2><p>v-show  是  css  切换，<br>v-if  是完整的销毁和重新创建<br><strong>使用:</strong><br>频繁切换时用  v-show，运行时较少改变时用  v-if<br>v-if=‘false’ v-if  是条件渲染，当  false  的时候不会渲染</p>\n<h2 id=\"3-MVVM-相关\"><a href=\"#3-MVVM-相关\" class=\"headerlink\" title=\"3. MVVM  相关\"></a>3. MVVM  相关</h2><p>Vue  采用数据劫持结合发布者-订阅者模式的方式，通过  Object.defineProperty  劫持  data  属性的  setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<h3 id=\"3-1-MVVM\"><a href=\"#3-1-MVVM\" class=\"headerlink\" title=\"3.1 MVVM\"></a>3.1 MVVM</h3><p>M - Model，Model 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑<br>V - View，View 代表 UI 组件，它负责将数据模型转化为 UI 展现出来<br>VM - ViewModel，ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接<br>Model 和 View</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585485983201-91f30a05-d168-4b9a-babf-23158d13a382.png#align=left&display=inline&height=252&name=1.png&originHeight=252&originWidth=690&size=94469&status=done&style=none&width=690\" alt=\"1.png\"><br>o  <br>View 接收用户交互请求<br>o  <br>View 将请求转交给  ViewModel<br>o  <br>ViewModel 操作 Model 数据更新<br>o  <br>Model 更新完数据，通知  ViewModel 数据发生变化<br>o  <br>ViewModel 更新  View  数据</p>\n<h3 id=\"3-2-MVC\"><a href=\"#3-2-MVC\" class=\"headerlink\" title=\"3.2 MVC\"></a>3.2 MVC</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486053450-068a90d3-e640-4c68-a27e-7f21a13c1dec.png#align=left&display=inline&height=422&name=2.png&originHeight=422&originWidth=706&size=70216&status=done&style=none&width=706\" alt=\"2.png\"><br>o  <br>View 接受用户交互请求<br>o  <br>View 将请求转交给  Controller  处理<br>o  <br>Controller 操作  Model  进行数据更新保存<br>o  <br>数据更新保存之后，Model  会通知  View  更新<br>o  <br>View 更新变化数据使用户得到反馈</p>\n<h3 id=\"3-3-MVVM-模式和-MVC-有些类似，但有以下不同\"><a href=\"#3-3-MVVM-模式和-MVC-有些类似，但有以下不同\" class=\"headerlink\" title=\"3.3 MVVM  模式和  MVC  有些类似，但有以下不同\"></a>3.3 MVVM  模式和  MVC  有些类似，但有以下不同</h3><ul>\n<li>ViewModel 替换了<br>Controller，在  UI  层之下</li>\n<li>ViewModel 向<br>View 暴露它所需要的数据和指令对象</li>\n<li>ViewModel 接收来自 Model 的数据</li>\n</ul>\n<p>概括起来，MVVM  是由  MVC  发展而来，通过在  Model  之上而在  View  之下增加一个非视觉的组件将来自 Model  的数据映射到  View  中。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486142944-76d802f5-330c-4265-880d-0583cb453e57.png#align=left&display=inline&height=390&name=3.png&originHeight=390&originWidth=730&size=184431&status=done&style=none&width=730\" alt=\"3.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486154956-a19f7210-b87a-4829-9522-3386fdaa30ff.png#align=left&display=inline&height=543&name=4.png&originHeight=543&originWidth=922&size=64203&status=done&style=none&width=922\" alt=\"4.png\"></p>\n<hr>\n<h2 id=\"4-说说你对-SPA-单页面的理解，它的优缺点分别是什么？\"><a href=\"#4-说说你对-SPA-单页面的理解，它的优缺点分别是什么？\" class=\"headerlink\" title=\"4.说说你对 SPA 单页面的理解，它的优缺点分别是什么？\"></a>4.说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2><p><strong>SPA</strong>（ single-page application ）仅在 Web<br>页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。<br><strong>优点：</strong><br>o  <br>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；<br>o  <br>基于上面一点，SPA 相对对服务器压力小；<br>o  <br>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；<br><strong>缺点：</strong><br>o  <br>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；<br>o  <br>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；<br>o  <br>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</p>\n<h2 id=\"5、computed-和-watch-的区别和运用的场景？\"><a href=\"#5、computed-和-watch-的区别和运用的场景？\" class=\"headerlink\" title=\"5、computed 和 watch 的区别和运用的场景？\"></a>5、computed 和 watch 的区别和运用的场景？</h2><p><strong>computed**<strong>：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；<br><strong>watch*</strong>*：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>\n<h3 id=\"5-1-运用场景\"><a href=\"#5-1-运用场景\" class=\"headerlink\" title=\"5.1 运用场景\"></a>5.1 运用场景</h3><ul>\n<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>\n<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用  watch  选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n<h3 id=\"5-2-computed-的原理？\"><a href=\"#5-2-computed-的原理？\" class=\"headerlink\" title=\"5.2 computed  的原理？\"></a>5.2 computed  的原理？</h3><p>computed 本质是一个惰性求值的观察者。<br>computed 内部实现了一个惰性的 watcher,也就是 computed watcher,computed watcher 不会立刻求值,同时持有一个 dep 实例。<br>其内部通过 this.dirty 属性标记计算属性是否需要重新求值。<br>当 computed 的依赖状态发生改变时,就会通知这个惰性的 watcher,<br>computed watcher 通过<br>this.dep.subs.length 判断有没有订阅者,<br>有的话,会重新计算,然后对比新旧值,如果变化了,会重新渲染。 (**Vue<br>**<strong>想确保不仅仅是计算属性依赖的值发生变化，而是当计算属性最终计算的值发生变化时才会触发渲染 watcher 重新渲染，本质上是一种优化。</strong>)<br>没有的话,仅仅把 this.dirty = true。 (**当计算属性依赖于其他数据时，属性并不会立即重新计算，只有之后其它地方需要读取属性的时候，它才会真正计算，即具备<br>lazy（懒计算）特性。**)</p>\n<h2 id=\"6-v-model-的原理\"><a href=\"#6-v-model-的原理\" class=\"headerlink\" title=\"6. v-model 的原理\"></a>6. v-model 的原理</h2><p>我们在 Vue 项目中主要使用 v-model 指令在表单 input、textarea、select<br>等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>text 和<br>textarea 元素使用 value 属性和 input 事件；</li>\n<li>checkbox 和<br>radio 使用 checked 属性和 change 事件；</li>\n<li>select 字段将<br>value 作为 prop 并将 change 作为事件。</li>\n</ul>\n<input v-model='something'>\n   相当于\n<input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n**![5.png](https://cdn.nlark.com/yuque/0/2020/png/518310/1585486406267-20ad462a-967b-4c51-9c95-a2703e75197e.png#align=left&display=inline&height=215&name=5.png&originHeight=215&originWidth=1088&size=260441&status=done&style=none&width=1088)**\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"7-Vue-和-React-的区别？\"><a href=\"#7-Vue-和-React-的区别？\" class=\"headerlink\" title=\"7. Vue  和  React  的区别？\"></a>7. Vue  和  React  的区别？</h2><p>React  整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在  react  中，是单向数据流；<br>Vue  的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立  Watcher  来监听，当属性变化的时候，响应式的更新对应的虚拟 DOM。<br><strong>具体参照：</strong><a href=\"https://juejin.im/post/5e153e096fb9a048297390c1\">    https://juejin.im/post/5e153e096fb9a048297390c1</a></p>\n<h2 id=\"8-为什么在-Vue3-0-采用了-Proxy-抛弃了-Object-defineProperty？\"><a href=\"#8-为什么在-Vue3-0-采用了-Proxy-抛弃了-Object-defineProperty？\" class=\"headerlink\" title=\"8. 为什么在 Vue3.0 采用了 Proxy,  抛弃了 Object.defineProperty？\"></a>8. 为什么在 Vue3.0 采用了 Proxy,  抛弃了 Object.defineProperty？</h2><p>Object.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。Vue 2.x 里,是通过 递归 + 遍历 data 对象来实现对数据的监控的,如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象是才是更好的选择。<br>Proxy 可以劫持整个对象,并返回一个新的对象。Proxy 不仅可以代理对象,还可以代理数组。还可以代理动态增加的属性。</p>\n<h3 id=\"8-1-Proxy-的优势\"><a href=\"#8-1-Proxy-的优势\" class=\"headerlink\" title=\"8.1 Proxy 的优势\"></a>8.1 Proxy 的优势</h3><ul>\n<li>Proxy 可以直接监听对象而非属性；</li>\n<li>Proxy 可以直接监听数组的变化；</li>\n<li>Proxy 有多达<br>13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>\n<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而<br>Object.defineProperty 只能遍历对象属性直接修改；</li>\n<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>\n</ul>\n<h3 id=\"8-2-Object-defineProperty-的优势\"><a href=\"#8-2-Object-defineProperty-的优势\" class=\"headerlink\" title=\"8.2 Object.defineProperty 的优势\"></a>8.2 Object.defineProperty 的优势</h3><ul>\n<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/518310/1585486755956-d420d1eb-6c20-49b0-8979-5e4c3a7457a3.png#align=left&display=inline&height=820&name=6.png&originHeight=820&originWidth=1030&size=114005&status=done&style=none&width=1030\" alt=\"6.png\"></p>\n<h2 id=\"9-Vue-组件-data-为什么必须是函数\"><a href=\"#9-Vue-组件-data-为什么必须是函数\" class=\"headerlink\" title=\"9. Vue 组件 data 为什么必须是函数 ?\"></a>9. Vue 组件 data 为什么必须是函数 ?</h2><p>因为组件是可以复用的,JS 里对象是引用关系,如果组件 data 是一个对象,那么子组件中的<br>data 属性值会互相污染,产生副作用。<br>所以一个组件的 data 选项必须是一个函数,因此每个实例可以维护一份被返回对象的独立的拷贝。new Vue 的实例是不会被复用的,因此不存在以上问题。</p>\n<h2 id=\"10-谈谈你对-keep-alive-的了解？\"><a href=\"#10-谈谈你对-keep-alive-的了解？\" class=\"headerlink\" title=\"10.  谈谈你对 keep-alive 的了解？\"></a>10.  谈谈你对 keep-alive 的了解？</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染<br>，<br>其有以下特性：</p>\n<ul>\n<li>一般结合路由和动态组件一起使用，用于缓存组件；</li>\n<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存<br>，其中 exclude 的优先级比 include 高；</li>\n<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li>\n</ul>\n<h2 id=\"11-Vue-组件间通信有哪几种方式？\"><a href=\"#11-Vue-组件间通信有哪几种方式？\" class=\"headerlink\" title=\"11. Vue 组件间通信有哪几种方式？\"></a>11. Vue 组件间通信有哪几种方式？</h2><p><strong>（1）**<strong>props / $emit</strong></strong> <strong><strong>适用 父子组件通信</strong><br>这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。<br><strong>（2）</strong></strong>ref**** <strong>*<em>与 <strong><strong>$parent / $children</strong></strong> <strong><strong>适用 父子组件通信</strong><br>o  <br>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例<br>o  <br>$parent / $children：访问父 / 子实例<br><strong>（3）</strong></strong>EventBus <strong><strong>（</strong></strong>$emit / $on</em>*</strong>）**** <strong><strong>适用于 父子、隔代、兄弟组件通信</strong><br>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件<br><strong>（4）</strong></strong>$attrs*<strong>*/**</strong>$listeners**** **<strong>适用于 隔代组件通信</strong><br>o  <br>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class<br>和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过  v-bind=”$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。<br>o  <br>$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过  v-on=”$listeners” 传入内部组件<br>**（5）**<strong>provide / inject*</strong>* **<strong>适用于 隔代组件通信</strong><br>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过<br>inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。<br>**（6）Vuex 适用于 父子、隔代、兄弟组件通信**<br>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个<br>Vuex 应用的核心就是 store（仓库）。“store”<br>基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。<br>o  <br>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br>o  <br>改变 store 中的状态的唯一途径就是显式地提交<br>(commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>\n<h2 id=\"12-请介绍一下你对-Vuex-的理解？\"><a href=\"#12-请介绍一下你对-Vuex-的理解？\" class=\"headerlink\" title=\"12.请介绍一下你对  Vuex  的理解？\"></a>12.请介绍一下你对  Vuex  的理解？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个<br>Vuex 应用的核心就是 store（仓库）。“store”<br>基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。<br>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。<br>主要包括以下几个模块：<br>o  <br>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。<br>o  <br>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。<br>o  <br>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。<br>o  <br>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。<br>o  <br>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</p>\n<h3 id=\"12-1-Vuex-实现原理？\"><a href=\"#12-1-Vuex-实现原理？\" class=\"headerlink\" title=\"12.1 Vuex  实现原理？\"></a>12.1 Vuex  实现原理？</h3><p>**<br>**</p>\n<hr>\n<h2 id=\"13-请介绍一下你对-Vue-router-的理解？\"><a href=\"#13-请介绍一下你对-Vue-router-的理解？\" class=\"headerlink\" title=\"13.  请介绍一下你对  Vue-router  的理解？\"></a>13.  请介绍一下你对  Vue-router  的理解？</h2><h3 id=\"13-1-Vue-router-实现原理？\"><a href=\"#13-1-Vue-router-实现原理？\" class=\"headerlink\" title=\"13.1 Vue-router  实现原理？\"></a>13.1 Vue-router  实现原理？</h3><p>**<br>**<br><strong>Vue-router 有 3<br>种路由模式：hash、history、abstract，</strong></p>\n<ul>\n<li>hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持<br>HTML5 History Api 的浏览器；</li>\n<li>history : 依赖 HTML5 History API<br>和服务器配置。具体可以查看 HTML5 History 模式；</li>\n<li>abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>\n</ul>\n<p>**1****）hash<br>模式的实现原理**<br>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：<br>hash 路由模式的实现主要是基于下面几个特性：<br>·      URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；<br>·      hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；<br>·      可以通过  a  标签，并设置  href  属性，当用户点击这个标签后，URL  的 hash 值会发生改变；或者使用  JavaScript 来对  loaction.hash  进行赋值，改变 URL 的 hash 值；<br>·      我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</p>\n<p><strong>2）history 模式的实现原理</strong><br>HTML5 提供了<br>History API 来实现 URL 的变化。其中做最主要的<br>API 有以下两个：history.pushState() 和<br>history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：<br>window.history.pushState(null, null, path);<br>window.history.replaceState(null, null, path);<br>history 路由模式的实现主要基于存在下面几个特性：</p>\n<ul>\n<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>\n<li>我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>\n<li>history.pushState() 或<br>history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>\n</ul>\n<h3 id=\"13-2-导航钩子函数（导航守卫）？\"><a href=\"#13-2-导航钩子函数（导航守卫）？\" class=\"headerlink\" title=\"13.2 导航钩子函数（导航守卫）？\"></a>13.2 导航钩子函数（导航守卫）？</h3><p>** [  全局守卫 ]**<br>**<br>1.   router.beforeEach 全局前置守卫 进入路由之前<br>2.   router.beforeResolve 全局解析守卫(2.5.0+) 在  beforeRouteEnter  调用之后调用<br>3.   router.afterEach 全局后置钩子 进入路由之后</p>\n<pre><code class=\"javascript\">// main.js 入口文件\nimport router from &quot;./router&quot;; // 引入路由\nrouter.beforeEach((to, from, next) =&gt; &#123;\n  next();\n&#125;);\nrouter.beforeResolve((to, from, next) =&gt; &#123;\n  next();\n&#125;);\nrouter.afterEach((to, from) =&gt; &#123;\n  console.log(&quot;afterEach 全局后置钩子&quot;);\n&#125;);\n</code></pre>\n<p><strong>[ 路由独享的守卫 ]</strong><br>**<br>你可以在路由配置上直接定义 beforeEnter 守卫</p>\n<pre><code class=\"javascript\">const router = new VueRouter(&#123;\n  routes: [\n    &#123;\n      path: &quot;/foo&quot;,\n      component: Foo,\n      beforeEnter: (to, from, next) =&gt; &#123;\n        // ...\n      &#125;,\n    &#125;,\n  ],\n&#125;);\n</code></pre>\n<p><strong>[ 组件内的守卫 ]</strong><br>**<br>你可以在路由组件内直接定义以下路由导航守卫</p>\n<pre><code class=\"javascript\">const Foo = &#123;\n  template: `...`,\n  beforeRouteEnter (to, from, next) &#123;\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  &#125;,\n  beforeRouteUpdate (to, from, next) &#123;\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径\n/foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  &#125;,\n  beforeRouteLeave (to, from, next) &#123;\n    // 导航离开该组件的对应路由时调用，我们用它来禁止用户离开\n    // 可以访问组件实例 `this`\n    // 比如还未保存草稿，或者在用户离开前，\n    将setInterval销毁，防止离开之后，定时器还在调用。\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"14、Vue-中的-key-有什么作用？\"><a href=\"#14、Vue-中的-key-有什么作用？\" class=\"headerlink\" title=\"14、Vue 中的 key 有什么作用？\"></a>14、Vue 中的 key 有什么作用？</h2><p>Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速<br><strong>更准确</strong>：因为带 key 就不是就地复用了，在 sameNode 函数  a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。<br><strong>更快速</strong>：利用<br>key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，</p>\n<h2 id=\"15-ref-的作用\"><a href=\"#15-ref-的作用\" class=\"headerlink\" title=\"15.ref  的作用\"></a>15.ref  的作用</h2><ul>\n<li>获取  dom  元素  this.$refs.box</li>\n<li>获取子组件中的  datathis.$refs.box.msg</li>\n<li>调用子组件中的方法  this.$refs.box.open()</li>\n</ul>\n<p><a href=\"https://juejin.im/post/5d59f2a451882549be53b170#heading-3\"><strong>30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）</strong></a><br><a href=\"https://juejin.im/post/5df1e312f265da33d039d06d#heading-72\"><strong>面试完 50 个人后我写下这篇总结</strong></a><br><a href=\"https://juejin.im/post/5cf495e96fb9a07ef5622025#heading-19\"><strong>公司要求会使用框架 vue，面试题会被问及哪些？</strong></a><br><a href=\"https://juejin.im/post/5d548b83f265da03ab42471d#heading-15\"><strong>Vue 项目性能优化 — 实践指南</strong></a></p>\n<hr>\n<p>以上更新于 2020 年 3 月 29 日</p>\n<hr>\n"},{"title":"前端面试题总结：React 框架","urlname":"wkyy7o","date":"2020-01-03T11:38:35.000Z","abbrlink":286740215,"_content":"\n## React 基础问题\n\n\\*\\*\n**1.React  中  keys  的作用是什么？**\n**2.调用 setState 之后发生了什么？**\n**3.react 生命周期函数-**\n\n- 初始化阶段：\n- 运行中状态：\n- 销毁阶段：\n\n**4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）**\n**5.为什么虚拟 dom 会提高性能?(必考)**\n**6.react diff 原理（常考，大厂必考）**\n**7.React 中 refs 的作用是什么？**\n**8.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？**\n**9.展示组件(Presentational component)和容器组件(Container component)之间有何不同**\n**10.容器组件则更关心组件是如何运作的。**\n**11.类组件(Class component)和函数式组件(Functional component)之间有何不同**\n**12. (组件的)状态(state)和属性(props)之间有何不同**\n**13.何为受控组件(controlled component)**\n**14.何为高阶组件(higher order component)**\n**15.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象**\n**16.除了在构造函数中绑定 this，还有其它方式吗**\n**17.应该在  React  组件的何处发起  Ajax  请求**\n**18.描述事件在  React  中的处理方式。**\n**19.createElement  和  cloneElement  有什么区别？**\n**20.React  中有三种构建组件的方式**\n**21.React.createClass()、ES6 class  和无状态函数。**\n**22.react  组件的划分业务组件技术组件？**\n**23.简述  flux  思想**\n**24.Flux  的最大特点，就是数据的\"单向流动\"。**\n**25.React  项目用过什么脚手架（本题是开放性题目）**\n**26.了解 redux 么，说一下\nredux 的作用和运用流程，redux 有什么缺点**\n\n\n\n---\n\n\n\n## [35 道必须要清楚的 React 面试题](https://juejin.im/post/5dc20a4ff265da4d4e30040b)\n\n### 问题 1：什么是虚拟 DOM？\n\n\\*\\*\n**虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和**。\n\n### 问题 2：类组件和函数组件之间的区别是啥？\n\n·      **类组件**可以使用其他特性，如状态  state 和生命周期钩子。\n·      当组件只是接收  props 渲染到页面时，就是无状态组件，就属于函数组件，也被称为哑组件或展示组件。\n函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。\n\n| 区别              | 函数组件 | 类组件 |\n| ----------------- | -------- | ------ |\n| 是否有  this      | 没有     | 有     |\n| 是否有生命周期    | 没有     | 有     |\n| 是否有状态  state | 没有     | 有     |\n\n\n\n### 问题 3：React 中 refs 干嘛用的？\n\nRefs 提供了一种访问在 render 方法中创建的 DOM 节点或者 React 元素的方法。在典型的数据流中，props 是父子组件交互的唯一方式，想要修改子组件，需要使用新的 pros 重新渲染它。凡事有例外，某些情况下咱们需要在典型数据流外，强制修改子代，这个时候可以使用  Refs。\n咱们可以在组件添加一个  ref 属性来使用，该属性的值是一个回调函数，接收作为其第一个参数的底层 DOM 元素或组件的挂载实例。\nclass UnControlledForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value: \", this.input.value)\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type='text'\n          ref={(input)\n=> this.input = input} />\n        <button\ntype='submit'>Submit</button>\n      </form>\n    )\n  }\n}\n请注意，input 元素有一个 ref 属性，它的值是一个函数。该函数接收输入的实际 DOM 元素，然后将其放在实例上，这样就可以在  handleSubmit 函数内部访问它。\n经常被误解的只有在类组件中才能使用  refs，但是 refs 也可以通过利用 JS 中的闭包与函数组件一起使用。\nfunction CustomForm ({handleSubmit}) {\n  let inputElement\n  return (\n    <form onSubmit={() => handleSubmit(inputElement.value)}>\n      <input\n        type='text'\n        ref={(input)\n=> inputElement = input} />\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n\n\n\n### 问题 4：在 React 中如何处理事件\n\n为了解决跨浏览器的兼容性问题，SyntheticEvent 实例将被传递给你的事件处理函数，SyntheticEvent 是 React 跨浏览器的浏览器原生事件包装器，它还拥有和浏览器原生事件相同的接口，包括  stopPropagation() 和  preventDefault()。\n比较有趣的是，React 实际上并不将事件附加到子节点本身。React 使用单个事件侦听器侦听顶层的所有事件。这对性能有好处，也意味着 React 在更新 DOM 时不需要跟踪事件监听器。\n\n\n\n### 问题 5：state 和 props 区别是啥？\n\nprops 和 state 是普通的 JS 对象。虽然它们都包含影响渲染输出的信息，但是它们在组件方面的功能是不同的。即\n·      state 是组件自己管理数据，控制自己的状态，可变；\n·      props 是外部传入的数据参数，不可变；\n·      没有 state 的叫做无状态组件，有 state 的叫做有状态组件；\n·      多用  props，少用  state，也就是多写无状态组件。\n\n\n\n### 问题 6：如何创建 refs\n\nRefs 是使用  React.createRef() 创建的，并通过  ref 属性附加到 React 元素。在构造组件时，通常将  Refs 分配给实例属性，以便可以在整个组件中引用它们。\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() {\n    return <div ref={this.myRef} />;\n  }\n}\n或者这样用：\nclass UserForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value is: \", this.input.value)\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type='text'\n          ref={(input)\n=> this.input = input} /> // Access DOM input in handle submit\n        <button\ntype='submit'>Submit</button>\n      </form>\n    )\n  }\n}\n\n\n\n### 问题 7：什么是高阶组件？\n\n**高阶组件(HOC)是接受一个组件并返回一个新组件的函数。基本上，这是一个模式，是从 React 的组合特性中衍生出来的，称其为纯组件**，因为它们可以接受任何动态提供的子组件，但不会修改或复制输入组件中的任何行为。\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\nHOC 可以用于以下许多用例\n·      代码重用、逻辑和引导抽象\n·      渲染劫持\n·      state 抽象和操作\n·      props 处理\n\n\n\n### 问题 8：在构造函数调用  super  并将  props  作为参数传入的作用是啥？\n\n在调用  super() 方法之前，子类构造函数无法使用 this 引用，ES6 子类也是如此。将  props 参数传递给  super() 调用的主要原因是在子构造函数中能够通过 this.props 来获取传入的  props。\n**传递 props**\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);  // { name: 'sudheer',age: 30 }\n  }\n}\n**没传递 props**\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super();\n    console.log(this.props); // undefined\n    // 但是 Props 参数仍然可用\n    console.log(props); //\nPrints { name: 'sudheer',age: 30 }\n  }\n  render() {\n    // 构造函数外部不受影响\n    console.log(this.props) // { name: 'sudheer',age: 30 }\n  }\n}\n上面示例揭示了一点。props 的行为只有在构造函数中是不同的，在构造函数之外也是一样的。\n\n\n\n### 问题 9：什么是控制组件？\n\n在 HTML 中，表单元素如  <input>、<textarea>和<select>通常维护自己的状态，并根据用户输入进行更新。当用户提交表单时，来自上述元素的值将随表单一起发送。\n而 React 的工作方式则不同。包含表单的组件将跟踪其状态中的输入值，并在每次回调函数(例如 onChange)触发时重新渲染组件，因为状态被更新。以这种方式由 React 控制其值的输入表单元素称为**受控组件**。\n\n\n\n### 问题 10：如何\n\nReact.createElement ？\n**问题：**\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n)\n上述代码如何使用  React.createElement 来实现:\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n\n\n\n### 问题 11：讲讲什么是 JSX ？\n\n当 **Facebook** 第一次发布 React 时，他们还引入了一种新的 JS 方言  JSX，将原始 HTML 模板嵌入到 JS 代码中。JSX 代码本身不能被浏览器读取，必须使用 Babel 和 webpack 等工具将其转换为传统的 JS。很多开发人员就能无意识使用 JSX，因为它已经与 React 结合在一直了。\nclass MyComponent extends React.Component {\n  render() {\n    let props = this.props; \n    return (\n      <div className=\"my-component\">\n      <a href={props.url}>{props.name}</a>\n      </div>\n    );\n  }\n}\n\n\n\n### 问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？\n\n请看下面的代码：\n答案： 1.在构造函数没有将  props 传递给  super，它应该包括以下行\nconstructor(props)\n{\n  super(props);\n  // ...\n} 2.事件监听器(通过 addEventListener()分配时)的作用域不正确，因为 ES6 不提供自动绑定。因此，开发人员可以在构造函数中重新分配 clickHandler 来包含正确的绑定:\nconstructor(props)\n{\n  super(props);\n  this.clickHandler = this.clickHandler.bind(this);\n  // ...\n}\n\n\n\n### 问题 13：为什么不直接更新  state  呢 ?\n\n如果试图直接更新  state ，则不会重新渲染组件。\n// 错误\n This.state.message = 'Hello world';\n需要使用 setState()方法来更新  state。它调度对组件 state 对象的更新。当 state 改变时，组件通过重新渲染来响应：\n// 正确做法\nThis.setState({message: ‘Hello World’});\n\n\n\n### 问题 14：React 组件生命周期有哪些不同阶段？\n\n在组件生命周期中有四个不同的阶段：\n1.  \n**Initialization**：在这个阶段，组件准备设置初始化状态和默认属性。\n2.  \n**Mounting**：react\n组件已经准备好挂载到浏览器 DOM 中。这个阶段包括 componentWillMount 和 componentDidMount 生命周期方法。\n3.  \n**Updating**：在这个阶段，组件以两种方式更新，发送新的 props 和 state 状态。此阶段包括 shouldComponentUpdate、componentWillUpdate 和 componentDidUpdate 生命周期方法。\n4.  \n**Unmounting**：在这个阶段，组件已经不再被需要了，它从浏览器 DOM 中卸载下来。这个阶段包含  componentWillUnmount 生命周期方法。\n除以上四个常用生命周期外，还有一个错误处理的阶段：\n**Error Handling**：在这个阶段，不论在渲染的过程中，还是在生命周期方法中或是在任何子组件的构造函数中发生错误，该组件都会被调用。这个阶段包含了  componentDidCatch 生命周期方法。\n\n\n\n### 问题 15：React 的生命周期方法有哪些？\n\n·      componentWillMount:在渲染之前执行，用于根组件中的 App 级配置。\n·      componentDidMount：在第一次渲染之后执行，可以在这里做 AJAX 请求，DOM 的操作或状态更新以及设置事件监听器。\n·      componentWillReceiveProps：在初始化 render 的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染\n·      shouldComponentUpdate：确定是否更新组件。默认情况下，它返回 true。如果确定在  state 或  props 更新后组件不需要在重新渲染，则可以返回 false，这是一个提高性能的方法。\n·      componentWillUpdate：在 shouldComponentUpdate 返回  true 确定要更新组件之前件之前执行。\n·      componentDidUpdate：它主要用于更新 DOM 以响应 props 或 state 更改。\n·      componentWillUnmount：它用于取消任何的网络请求，或删除与组件关联的所有事件监听器。\n\n\n\n### 问题 16：这三个点(...)在 React 干嘛用的？\n\n... 在 React（使用 JSX）代码中做什么？它叫什么？\n<Modal {...this.props} title='Modal heading'  animation={false}/>\n这个叫扩展操作符号或者展开操作符，例如，如果 this.props 包含 a：1 和 b：2，则\n<Modal {...this.props} title='Modal heading' animation={false}>\n等价于下面内容：\n<Modal a={this.props.a} b={this.props.b} title='Modal heading' animation={false}>\n扩展符号不仅适用于该用例，而且对于创建具有现有对象的大多数（或全部）属性的新对象非常方便，在更新 state 咱们就经常这么做：\nthis.setState(prevState => {\n    return {foo: {...prevState.foo, a: \"updated\"}};\n});\n\n\n\n### 问题 17：使用 React\n\nHooks 好处是啥？\n首先，Hooks 通常支持提取和重用跨多个组件通用的有状态逻辑，而无需承担高阶组件或渲染  props 的负担。Hooks 可以轻松地操作函数组件的状态，而不需要将它们转换为类组件。\nHooks 在类中不起作用，通过使用它们，咱们可以完全避免使用生命周期方法，例如  componentDidMount、componentDidUpdate、componentWillUnmount。相反，使用像 useEffect 这样的内置钩子。\n\n\n\n### 问题 18：什么是 ReactHooks？\n\n**Hooks**是\nReact 16.8 中的新添加内容。它们允许在不编写类的情况下使用 state 和其他\nReact 特性。使用 Hooks，可以从组件中提取有状态逻辑，这样就可以独立地测试和重用它。Hooks 允许咱们在不改变组件层次结构的情况下重用有状态逻辑，这样在许多组件之间或与社区共享 Hooks 变得很容易。\n\n\n\n### 问题 19：React 中的  useState()  是什么？\n\n下面说明 useState(0)的用途：\n...\nconst [count, setCounter] = useState(0);\nconst [moreStuff, setMoreStuff] = useState(...);\n...\nconst setCount = () => {\n    setCounter(count + 1);\n    setMoreStuff(...);\n    ...\n};\nuseState 是一个内置的 React Hook。useState(0) 返回一个元组，其中第一个参数 count 是计数器的当前状态，setCounter 提供更新计数器状态的方法。\n咱们可以在任何地方使用 setCounter 方法更新计数状态-在这种情况下，咱们在 setCount 函数内部使用它可以做更多的事情，使用 Hooks，能够使咱们的代码保持更多功能，还可以避免过多使用基于类的组件。\n\n\n\n### 问题 20：React 中的 StrictMode(严格模式)是什么？？\n\nReact 的 StrictMode 是一种辅助组件，可以帮助咱们编写更好的\nreact 组件，可以使用<StrictMode />包装一组组件，并且可以帮咱们以下检查：\n·      验证内部组件是否遵循某些推荐做法，如果没有，会在控制台给出警告。\n·      验证是否使用的已经废弃的方法，如果有，会在控制台给出警告。\n·      通过识别潜在的风险预防一些副作用。\n\n\n\n### 问题 21：为什么类方法需要绑定到类实例？\n\n在 JS 中，this 值会根据当前上下文变化。在 React 类组件方法中，开发人员通常希望  this 引用组件的当前实例，因此有必要将这些方法绑定到实例。通常这是在构造函数中完成的:\nclass SubmitButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFormSubmitted: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit() {\n    this.setState({\n      isFormSubmitted: true\n    });\n  }\n  render() {\n    return (\n      <button onClick={this.handleSubmit}>Submit</button>\n    )\n  }\n}\n\n\n\n### 问题 22：什么是 prop\n\ndrilling，如何避免？\n在构建 React 应用程序时，在多层嵌套组件来使用另一个嵌套组件提供的数据。最简单的方法是将一个  prop 从每个组件一层层的传递下去，从源组件传递到深层嵌套组件，这叫做**prop drilling**。\nprop drilling 的主要缺点是原本不需要数据的组件变得不必要地复杂，并且难以维护。\n为了避免 prop drilling，一种常用的方法是使用**React\nContext**。通过定义提供数据的 Provider 组件，并允许嵌套的组件通过 Consumer 组件或 useContext Hook 使用上下文数据。\n\n\n\n### 问题 23：描述 Flux 与 MVC？\n\n传统的 MVC 模式在分离数据(Model)、UI(View 和逻辑(Controller)方面工作得很好，但是 MVC 架构经常遇到两个主要问题:\n**数据流不够清晰**:跨视图发生的级联更新常常会导致混乱的事件网络，难于调试。\n**缺乏数据完整性**:模型数据可以在任何地方发生突变，从而在整个 UI 中产生不可预测的结果。\n使用 Flux 模式的复杂用户界面不再遭受级联更新，任何给定的 React 组件都能够根据  store 提供的数据重建其状态。Flux 模式还通过限制对共享数据的直接访问来加强数据完整性。\n\n\n\n### 问题 24：受控组件和非受控组件区别是啥？\n\n·      **受控组件**是\nReact 控制中的组件，并且是表单数据真实的唯一来源。\n·      非受控组件是由 DOM 处理表单数据的地方，而不是在 React 组件中。\n尽管非受控组件通常更易于实现，因为只需使用 refs 即可从\nDOM 中获取值，但通常建议优先选择受控制的组件，而不是非受控制的组件。\n这样做的主要原因是受控组件支持即时字段验证，允许有条件地禁用/启用按钮，强制输入格式。\n\n\n\n### 问题 25：这段代码有什么问题吗？\n\n这段代码有什么问题:\nthis.setState((prevState, props) => {\n  return {\n    streak: prevState.streak + props.count\n  }\n})\n**答案：**\n没有什么问题。这种方式很少被使用，咱们可以将一个函数传递给 setState，该函数接收上一个  state 的值和当前的 props，并返回一个新的状态，如果咱们需要根据以前的状态重新设置状态，推荐使用这种方式。\n\n\n\n### 问题 26：什么是 React\n\nContext?\nContext 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递  props 属性。\n\n\n\n### 问题 27：什么是 React\n\nFiber?\n**Fiber** 是\nReact 16 中新的协调引擎或重新实现核心算法。它的主要目标是支持虚拟 DOM 的增量渲染。**React Fiber** 的目标是提高其在动画、布局、手势、暂停、中止或重用等方面的适用性，并为不同类型的更新分配优先级，以及新的并发原语。\nReact Fiber 的目标是增强其在动画、布局和手势等领域的适用性。它的主要特性是增量渲染:能够将渲染工作分割成块，并将其分散到多个帧中。\n\n\n\n### 问题 28：如何在\n\nReactJS 的 Props 上应用验证？\n当应用程序在开发模式下运行时，React 将自动检查咱们在组件上设置的所有  props，以确保它们具有正确的数据类型。对于不正确的类型，开发模式下会在控制台中生成警告消息，而在生产模式中由于性能影响而禁用它。强制的  props 用  isRequired 定义的。\n下面是一组预定义的 prop 类型:\n·      React.PropTypes.string\n·      React.PropTypes.number\n·      React.PropTypes.func\n·      React.PropTypes.node\n·      React.PropTypes.bool\n例如，咱们为用户组件定义了如下的 propTypes\nimport PropTypes from 'prop-types';\nclass User extends React.Component {\n  render() {\n    return (\n      <h1>Welcome, {this.props.name}</h1>\n      <h2>Age, {this.props.age}\n    );\n  }\n}\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired\n};\n\n\n\n### 问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？\n\n构造函数和 getInitialState 之间的区别就是 ES6 和 ES5 本身的区别。在使用 ES6 类时，应该在构造函数中初始化 state，并在使用 React.createClass 时定义 getInitialState 方法。\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { /_ initial state _/ };\n  }\n}\n等价于：\nvar MyComponent = React.createClass({\n  getInitialState() {\n    return { /_ initial state _/ };\n  },\n});\n\n\n\n### 问题 30：如何有条件地向\n\nReact 组件添加属性？\n对于某些属性，React 非常聪明，如果传递给它的值是虚值，可以省略该属性。例如：\nvar InputComponent = React.createClass({\n    render: function() {\n      var required = true;\n      var disabled = false;\n      return (\n        <input\ntype=\"text\" disabled={disabled} required={required} />\n      );\n    }\n});\n渲染结果：\n<input type=\"text\" required>\n另一种可能的方法是：\nvar condition = true;\nvar component = (\n  <div\n    value=\"foo\"\n    { ...( condition && { disabled: true } ) } />\n);\n\n\n\n### 问题 31：Hooks 会取代  render props  和高阶组件吗？\n\n通常，render props 和高阶组件仅渲染一个子组件。React 团队认为，Hooks 是服务此用例的更简单方法。\n这两种模式仍然有一席之地(例如，一个虚拟的  scroller 组件可能有一个  renderItem prop，或者一个可视化的容器组件可能有它自己的 DOM 结构)。但在大多数情况下，Hooks\n就足够了，可以帮助减少树中的嵌套。\n\n\n\n### 问题 32：如何避免组件的重新渲染？\n\nReact 中最常见的问题之一是组件不必要地重新渲染。React 提供了两个方法，在这些情况下非常有用：\n·      React.memo():这可以防止不必要地重新渲染函数组件\n·      PureComponent:这可以防止不必要地重新渲染类组件\n这两种方法都依赖于对传递给组件的 props 的浅比较，如果  props 没有改变，那么组件将不会重新渲染。虽然这两种工具都非常有用，但是浅比较会带来额外的性能损失，因此如果使用不当，这两种方法都会对性能产生负面影响。\n通过使用 **React Profiler**，可以在使用这些方法前后对性能进行测量，从而确保通过进行给定的更改来实际改进性能。\n\n\n\n### 问题 33：什么是纯函数？\n\n纯函数是不依赖并且不会在其作用域之外修改变量状态的函数。本质上，纯函数始终在给定相同参数的情况下返回相同结果。\n\n\n\n### 问题 34：当调用 setState 时，React render  是如何工作的？\n\n咱们可以将\"render\"分为两个步骤：\n1.  \n虚拟 DOM 渲染:当 render 方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用 setState()时，render 会被再次调用，因为默认情况下 shouldComponentUpdate 总是返回 true，所以默认情况下 React 是没有优化的。\n2.  \n原生 DOM 渲染:React\n只会在虚拟 DOM 中修改真实 DOM 节点，而且修改的次数非常少——这是很棒的 React 特性，它优化了真实 DOM 的变化，使 React 变得更快。\n\n\n\n### 问题 35：如何避免在 React 重新绑定实例？\n\n有几种常用方法可以避免在 React 中绑定方法： 1.将事件处理程序定义为内联箭头函数\nclass SubmitButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFormSubmitted: false\n    };\n  }\n  render() {\n    return (\n      <button onClick={() => {\n        this.setState({ isFormSubmitted: true });\n      }}>Submit</button>\n    )\n  }\n} 2.使用箭头函数来定义方法：\nclass SubmitButton extends React.Component {\n  state = {\n    isFormSubmitted: false\n  }\n  handleSubmit = () => {\n    this.setState({\n      isFormSubmitted: true\n    });\n  }\n  render() {\n    return (\n      <button onClick={this.handleSubmit}>Submit</button>\n    )\n  }\n} 3.使用带有 Hooks 的函数组件\nconst SubmitButton = () => {\n  const [isFormSubmitted, setIsFormSubmitted] = useState(false);\n  return (\n    <button onClick={() => {\n        setIsFormSubmitted(true);\n    }}>Submit</button>\n  )\n};\n\n\n","source":"_posts/语雀/wkyy7o.md","raw":"---\ntitle: 前端面试题总结：React 框架\nurlname: wkyy7o\ndate: '2020-01-03 19:38:35 +0800'\ntags: []\ncategories: []\nabbrlink: 286740215\n---\n\n## React 基础问题\n\n\\*\\*\n**1.React  中  keys  的作用是什么？**\n**2.调用 setState 之后发生了什么？**\n**3.react 生命周期函数-**\n\n- 初始化阶段：\n- 运行中状态：\n- 销毁阶段：\n\n**4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）**\n**5.为什么虚拟 dom 会提高性能?(必考)**\n**6.react diff 原理（常考，大厂必考）**\n**7.React 中 refs 的作用是什么？**\n**8.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？**\n**9.展示组件(Presentational component)和容器组件(Container component)之间有何不同**\n**10.容器组件则更关心组件是如何运作的。**\n**11.类组件(Class component)和函数式组件(Functional component)之间有何不同**\n**12. (组件的)状态(state)和属性(props)之间有何不同**\n**13.何为受控组件(controlled component)**\n**14.何为高阶组件(higher order component)**\n**15.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象**\n**16.除了在构造函数中绑定 this，还有其它方式吗**\n**17.应该在  React  组件的何处发起  Ajax  请求**\n**18.描述事件在  React  中的处理方式。**\n**19.createElement  和  cloneElement  有什么区别？**\n**20.React  中有三种构建组件的方式**\n**21.React.createClass()、ES6 class  和无状态函数。**\n**22.react  组件的划分业务组件技术组件？**\n**23.简述  flux  思想**\n**24.Flux  的最大特点，就是数据的\"单向流动\"。**\n**25.React  项目用过什么脚手架（本题是开放性题目）**\n**26.了解 redux 么，说一下\nredux 的作用和运用流程，redux 有什么缺点**\n\n\n\n---\n\n\n\n## [35 道必须要清楚的 React 面试题](https://juejin.im/post/5dc20a4ff265da4d4e30040b)\n\n### 问题 1：什么是虚拟 DOM？\n\n\\*\\*\n**虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和**。\n\n### 问题 2：类组件和函数组件之间的区别是啥？\n\n·      **类组件**可以使用其他特性，如状态  state 和生命周期钩子。\n·      当组件只是接收  props 渲染到页面时，就是无状态组件，就属于函数组件，也被称为哑组件或展示组件。\n函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。\n\n| 区别              | 函数组件 | 类组件 |\n| ----------------- | -------- | ------ |\n| 是否有  this      | 没有     | 有     |\n| 是否有生命周期    | 没有     | 有     |\n| 是否有状态  state | 没有     | 有     |\n\n\n\n### 问题 3：React 中 refs 干嘛用的？\n\nRefs 提供了一种访问在 render 方法中创建的 DOM 节点或者 React 元素的方法。在典型的数据流中，props 是父子组件交互的唯一方式，想要修改子组件，需要使用新的 pros 重新渲染它。凡事有例外，某些情况下咱们需要在典型数据流外，强制修改子代，这个时候可以使用  Refs。\n咱们可以在组件添加一个  ref 属性来使用，该属性的值是一个回调函数，接收作为其第一个参数的底层 DOM 元素或组件的挂载实例。\nclass UnControlledForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value: \", this.input.value)\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type='text'\n          ref={(input)\n=> this.input = input} />\n        <button\ntype='submit'>Submit</button>\n      </form>\n    )\n  }\n}\n请注意，input 元素有一个 ref 属性，它的值是一个函数。该函数接收输入的实际 DOM 元素，然后将其放在实例上，这样就可以在  handleSubmit 函数内部访问它。\n经常被误解的只有在类组件中才能使用  refs，但是 refs 也可以通过利用 JS 中的闭包与函数组件一起使用。\nfunction CustomForm ({handleSubmit}) {\n  let inputElement\n  return (\n    <form onSubmit={() => handleSubmit(inputElement.value)}>\n      <input\n        type='text'\n        ref={(input)\n=> inputElement = input} />\n      <button type='submit'>Submit</button>\n    </form>\n  )\n}\n\n\n\n### 问题 4：在 React 中如何处理事件\n\n为了解决跨浏览器的兼容性问题，SyntheticEvent 实例将被传递给你的事件处理函数，SyntheticEvent 是 React 跨浏览器的浏览器原生事件包装器，它还拥有和浏览器原生事件相同的接口，包括  stopPropagation() 和  preventDefault()。\n比较有趣的是，React 实际上并不将事件附加到子节点本身。React 使用单个事件侦听器侦听顶层的所有事件。这对性能有好处，也意味着 React 在更新 DOM 时不需要跟踪事件监听器。\n\n\n\n### 问题 5：state 和 props 区别是啥？\n\nprops 和 state 是普通的 JS 对象。虽然它们都包含影响渲染输出的信息，但是它们在组件方面的功能是不同的。即\n·      state 是组件自己管理数据，控制自己的状态，可变；\n·      props 是外部传入的数据参数，不可变；\n·      没有 state 的叫做无状态组件，有 state 的叫做有状态组件；\n·      多用  props，少用  state，也就是多写无状态组件。\n\n\n\n### 问题 6：如何创建 refs\n\nRefs 是使用  React.createRef() 创建的，并通过  ref 属性附加到 React 元素。在构造组件时，通常将  Refs 分配给实例属性，以便可以在整个组件中引用它们。\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() {\n    return <div ref={this.myRef} />;\n  }\n}\n或者这样用：\nclass UserForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value is: \", this.input.value)\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type='text'\n          ref={(input)\n=> this.input = input} /> // Access DOM input in handle submit\n        <button\ntype='submit'>Submit</button>\n      </form>\n    )\n  }\n}\n\n\n\n### 问题 7：什么是高阶组件？\n\n**高阶组件(HOC)是接受一个组件并返回一个新组件的函数。基本上，这是一个模式，是从 React 的组合特性中衍生出来的，称其为纯组件**，因为它们可以接受任何动态提供的子组件，但不会修改或复制输入组件中的任何行为。\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\nHOC 可以用于以下许多用例\n·      代码重用、逻辑和引导抽象\n·      渲染劫持\n·      state 抽象和操作\n·      props 处理\n\n\n\n### 问题 8：在构造函数调用  super  并将  props  作为参数传入的作用是啥？\n\n在调用  super() 方法之前，子类构造函数无法使用 this 引用，ES6 子类也是如此。将  props 参数传递给  super() 调用的主要原因是在子构造函数中能够通过 this.props 来获取传入的  props。\n**传递 props**\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);  // { name: 'sudheer',age: 30 }\n  }\n}\n**没传递 props**\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super();\n    console.log(this.props); // undefined\n    // 但是 Props 参数仍然可用\n    console.log(props); //\nPrints { name: 'sudheer',age: 30 }\n  }\n  render() {\n    // 构造函数外部不受影响\n    console.log(this.props) // { name: 'sudheer',age: 30 }\n  }\n}\n上面示例揭示了一点。props 的行为只有在构造函数中是不同的，在构造函数之外也是一样的。\n\n\n\n### 问题 9：什么是控制组件？\n\n在 HTML 中，表单元素如  <input>、<textarea>和<select>通常维护自己的状态，并根据用户输入进行更新。当用户提交表单时，来自上述元素的值将随表单一起发送。\n而 React 的工作方式则不同。包含表单的组件将跟踪其状态中的输入值，并在每次回调函数(例如 onChange)触发时重新渲染组件，因为状态被更新。以这种方式由 React 控制其值的输入表单元素称为**受控组件**。\n\n\n\n### 问题 10：如何\n\nReact.createElement ？\n**问题：**\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n)\n上述代码如何使用  React.createElement 来实现:\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n\n\n\n### 问题 11：讲讲什么是 JSX ？\n\n当 **Facebook** 第一次发布 React 时，他们还引入了一种新的 JS 方言  JSX，将原始 HTML 模板嵌入到 JS 代码中。JSX 代码本身不能被浏览器读取，必须使用 Babel 和 webpack 等工具将其转换为传统的 JS。很多开发人员就能无意识使用 JSX，因为它已经与 React 结合在一直了。\nclass MyComponent extends React.Component {\n  render() {\n    let props = this.props; \n    return (\n      <div className=\"my-component\">\n      <a href={props.url}>{props.name}</a>\n      </div>\n    );\n  }\n}\n\n\n\n### 问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？\n\n请看下面的代码：\n答案： 1.在构造函数没有将  props 传递给  super，它应该包括以下行\nconstructor(props)\n{\n  super(props);\n  // ...\n} 2.事件监听器(通过 addEventListener()分配时)的作用域不正确，因为 ES6 不提供自动绑定。因此，开发人员可以在构造函数中重新分配 clickHandler 来包含正确的绑定:\nconstructor(props)\n{\n  super(props);\n  this.clickHandler = this.clickHandler.bind(this);\n  // ...\n}\n\n\n\n### 问题 13：为什么不直接更新  state  呢 ?\n\n如果试图直接更新  state ，则不会重新渲染组件。\n// 错误\n This.state.message = 'Hello world';\n需要使用 setState()方法来更新  state。它调度对组件 state 对象的更新。当 state 改变时，组件通过重新渲染来响应：\n// 正确做法\nThis.setState({message: ‘Hello World’});\n\n\n\n### 问题 14：React 组件生命周期有哪些不同阶段？\n\n在组件生命周期中有四个不同的阶段：\n1.  \n**Initialization**：在这个阶段，组件准备设置初始化状态和默认属性。\n2.  \n**Mounting**：react\n组件已经准备好挂载到浏览器 DOM 中。这个阶段包括 componentWillMount 和 componentDidMount 生命周期方法。\n3.  \n**Updating**：在这个阶段，组件以两种方式更新，发送新的 props 和 state 状态。此阶段包括 shouldComponentUpdate、componentWillUpdate 和 componentDidUpdate 生命周期方法。\n4.  \n**Unmounting**：在这个阶段，组件已经不再被需要了，它从浏览器 DOM 中卸载下来。这个阶段包含  componentWillUnmount 生命周期方法。\n除以上四个常用生命周期外，还有一个错误处理的阶段：\n**Error Handling**：在这个阶段，不论在渲染的过程中，还是在生命周期方法中或是在任何子组件的构造函数中发生错误，该组件都会被调用。这个阶段包含了  componentDidCatch 生命周期方法。\n\n\n\n### 问题 15：React 的生命周期方法有哪些？\n\n·      componentWillMount:在渲染之前执行，用于根组件中的 App 级配置。\n·      componentDidMount：在第一次渲染之后执行，可以在这里做 AJAX 请求，DOM 的操作或状态更新以及设置事件监听器。\n·      componentWillReceiveProps：在初始化 render 的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染\n·      shouldComponentUpdate：确定是否更新组件。默认情况下，它返回 true。如果确定在  state 或  props 更新后组件不需要在重新渲染，则可以返回 false，这是一个提高性能的方法。\n·      componentWillUpdate：在 shouldComponentUpdate 返回  true 确定要更新组件之前件之前执行。\n·      componentDidUpdate：它主要用于更新 DOM 以响应 props 或 state 更改。\n·      componentWillUnmount：它用于取消任何的网络请求，或删除与组件关联的所有事件监听器。\n\n\n\n### 问题 16：这三个点(...)在 React 干嘛用的？\n\n... 在 React（使用 JSX）代码中做什么？它叫什么？\n<Modal {...this.props} title='Modal heading'  animation={false}/>\n这个叫扩展操作符号或者展开操作符，例如，如果 this.props 包含 a：1 和 b：2，则\n<Modal {...this.props} title='Modal heading' animation={false}>\n等价于下面内容：\n<Modal a={this.props.a} b={this.props.b} title='Modal heading' animation={false}>\n扩展符号不仅适用于该用例，而且对于创建具有现有对象的大多数（或全部）属性的新对象非常方便，在更新 state 咱们就经常这么做：\nthis.setState(prevState => {\n    return {foo: {...prevState.foo, a: \"updated\"}};\n});\n\n\n\n### 问题 17：使用 React\n\nHooks 好处是啥？\n首先，Hooks 通常支持提取和重用跨多个组件通用的有状态逻辑，而无需承担高阶组件或渲染  props 的负担。Hooks 可以轻松地操作函数组件的状态，而不需要将它们转换为类组件。\nHooks 在类中不起作用，通过使用它们，咱们可以完全避免使用生命周期方法，例如  componentDidMount、componentDidUpdate、componentWillUnmount。相反，使用像 useEffect 这样的内置钩子。\n\n\n\n### 问题 18：什么是 ReactHooks？\n\n**Hooks**是\nReact 16.8 中的新添加内容。它们允许在不编写类的情况下使用 state 和其他\nReact 特性。使用 Hooks，可以从组件中提取有状态逻辑，这样就可以独立地测试和重用它。Hooks 允许咱们在不改变组件层次结构的情况下重用有状态逻辑，这样在许多组件之间或与社区共享 Hooks 变得很容易。\n\n\n\n### 问题 19：React 中的  useState()  是什么？\n\n下面说明 useState(0)的用途：\n...\nconst [count, setCounter] = useState(0);\nconst [moreStuff, setMoreStuff] = useState(...);\n...\nconst setCount = () => {\n    setCounter(count + 1);\n    setMoreStuff(...);\n    ...\n};\nuseState 是一个内置的 React Hook。useState(0) 返回一个元组，其中第一个参数 count 是计数器的当前状态，setCounter 提供更新计数器状态的方法。\n咱们可以在任何地方使用 setCounter 方法更新计数状态-在这种情况下，咱们在 setCount 函数内部使用它可以做更多的事情，使用 Hooks，能够使咱们的代码保持更多功能，还可以避免过多使用基于类的组件。\n\n\n\n### 问题 20：React 中的 StrictMode(严格模式)是什么？？\n\nReact 的 StrictMode 是一种辅助组件，可以帮助咱们编写更好的\nreact 组件，可以使用<StrictMode />包装一组组件，并且可以帮咱们以下检查：\n·      验证内部组件是否遵循某些推荐做法，如果没有，会在控制台给出警告。\n·      验证是否使用的已经废弃的方法，如果有，会在控制台给出警告。\n·      通过识别潜在的风险预防一些副作用。\n\n\n\n### 问题 21：为什么类方法需要绑定到类实例？\n\n在 JS 中，this 值会根据当前上下文变化。在 React 类组件方法中，开发人员通常希望  this 引用组件的当前实例，因此有必要将这些方法绑定到实例。通常这是在构造函数中完成的:\nclass SubmitButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFormSubmitted: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit() {\n    this.setState({\n      isFormSubmitted: true\n    });\n  }\n  render() {\n    return (\n      <button onClick={this.handleSubmit}>Submit</button>\n    )\n  }\n}\n\n\n\n### 问题 22：什么是 prop\n\ndrilling，如何避免？\n在构建 React 应用程序时，在多层嵌套组件来使用另一个嵌套组件提供的数据。最简单的方法是将一个  prop 从每个组件一层层的传递下去，从源组件传递到深层嵌套组件，这叫做**prop drilling**。\nprop drilling 的主要缺点是原本不需要数据的组件变得不必要地复杂，并且难以维护。\n为了避免 prop drilling，一种常用的方法是使用**React\nContext**。通过定义提供数据的 Provider 组件，并允许嵌套的组件通过 Consumer 组件或 useContext Hook 使用上下文数据。\n\n\n\n### 问题 23：描述 Flux 与 MVC？\n\n传统的 MVC 模式在分离数据(Model)、UI(View 和逻辑(Controller)方面工作得很好，但是 MVC 架构经常遇到两个主要问题:\n**数据流不够清晰**:跨视图发生的级联更新常常会导致混乱的事件网络，难于调试。\n**缺乏数据完整性**:模型数据可以在任何地方发生突变，从而在整个 UI 中产生不可预测的结果。\n使用 Flux 模式的复杂用户界面不再遭受级联更新，任何给定的 React 组件都能够根据  store 提供的数据重建其状态。Flux 模式还通过限制对共享数据的直接访问来加强数据完整性。\n\n\n\n### 问题 24：受控组件和非受控组件区别是啥？\n\n·      **受控组件**是\nReact 控制中的组件，并且是表单数据真实的唯一来源。\n·      非受控组件是由 DOM 处理表单数据的地方，而不是在 React 组件中。\n尽管非受控组件通常更易于实现，因为只需使用 refs 即可从\nDOM 中获取值，但通常建议优先选择受控制的组件，而不是非受控制的组件。\n这样做的主要原因是受控组件支持即时字段验证，允许有条件地禁用/启用按钮，强制输入格式。\n\n\n\n### 问题 25：这段代码有什么问题吗？\n\n这段代码有什么问题:\nthis.setState((prevState, props) => {\n  return {\n    streak: prevState.streak + props.count\n  }\n})\n**答案：**\n没有什么问题。这种方式很少被使用，咱们可以将一个函数传递给 setState，该函数接收上一个  state 的值和当前的 props，并返回一个新的状态，如果咱们需要根据以前的状态重新设置状态，推荐使用这种方式。\n\n\n\n### 问题 26：什么是 React\n\nContext?\nContext 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递  props 属性。\n\n\n\n### 问题 27：什么是 React\n\nFiber?\n**Fiber** 是\nReact 16 中新的协调引擎或重新实现核心算法。它的主要目标是支持虚拟 DOM 的增量渲染。**React Fiber** 的目标是提高其在动画、布局、手势、暂停、中止或重用等方面的适用性，并为不同类型的更新分配优先级，以及新的并发原语。\nReact Fiber 的目标是增强其在动画、布局和手势等领域的适用性。它的主要特性是增量渲染:能够将渲染工作分割成块，并将其分散到多个帧中。\n\n\n\n### 问题 28：如何在\n\nReactJS 的 Props 上应用验证？\n当应用程序在开发模式下运行时，React 将自动检查咱们在组件上设置的所有  props，以确保它们具有正确的数据类型。对于不正确的类型，开发模式下会在控制台中生成警告消息，而在生产模式中由于性能影响而禁用它。强制的  props 用  isRequired 定义的。\n下面是一组预定义的 prop 类型:\n·      React.PropTypes.string\n·      React.PropTypes.number\n·      React.PropTypes.func\n·      React.PropTypes.node\n·      React.PropTypes.bool\n例如，咱们为用户组件定义了如下的 propTypes\nimport PropTypes from 'prop-types';\nclass User extends React.Component {\n  render() {\n    return (\n      <h1>Welcome, {this.props.name}</h1>\n      <h2>Age, {this.props.age}\n    );\n  }\n}\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired\n};\n\n\n\n### 问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？\n\n构造函数和 getInitialState 之间的区别就是 ES6 和 ES5 本身的区别。在使用 ES6 类时，应该在构造函数中初始化 state，并在使用 React.createClass 时定义 getInitialState 方法。\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { /_ initial state _/ };\n  }\n}\n等价于：\nvar MyComponent = React.createClass({\n  getInitialState() {\n    return { /_ initial state _/ };\n  },\n});\n\n\n\n### 问题 30：如何有条件地向\n\nReact 组件添加属性？\n对于某些属性，React 非常聪明，如果传递给它的值是虚值，可以省略该属性。例如：\nvar InputComponent = React.createClass({\n    render: function() {\n      var required = true;\n      var disabled = false;\n      return (\n        <input\ntype=\"text\" disabled={disabled} required={required} />\n      );\n    }\n});\n渲染结果：\n<input type=\"text\" required>\n另一种可能的方法是：\nvar condition = true;\nvar component = (\n  <div\n    value=\"foo\"\n    { ...( condition && { disabled: true } ) } />\n);\n\n\n\n### 问题 31：Hooks 会取代  render props  和高阶组件吗？\n\n通常，render props 和高阶组件仅渲染一个子组件。React 团队认为，Hooks 是服务此用例的更简单方法。\n这两种模式仍然有一席之地(例如，一个虚拟的  scroller 组件可能有一个  renderItem prop，或者一个可视化的容器组件可能有它自己的 DOM 结构)。但在大多数情况下，Hooks\n就足够了，可以帮助减少树中的嵌套。\n\n\n\n### 问题 32：如何避免组件的重新渲染？\n\nReact 中最常见的问题之一是组件不必要地重新渲染。React 提供了两个方法，在这些情况下非常有用：\n·      React.memo():这可以防止不必要地重新渲染函数组件\n·      PureComponent:这可以防止不必要地重新渲染类组件\n这两种方法都依赖于对传递给组件的 props 的浅比较，如果  props 没有改变，那么组件将不会重新渲染。虽然这两种工具都非常有用，但是浅比较会带来额外的性能损失，因此如果使用不当，这两种方法都会对性能产生负面影响。\n通过使用 **React Profiler**，可以在使用这些方法前后对性能进行测量，从而确保通过进行给定的更改来实际改进性能。\n\n\n\n### 问题 33：什么是纯函数？\n\n纯函数是不依赖并且不会在其作用域之外修改变量状态的函数。本质上，纯函数始终在给定相同参数的情况下返回相同结果。\n\n\n\n### 问题 34：当调用 setState 时，React render  是如何工作的？\n\n咱们可以将\"render\"分为两个步骤：\n1.  \n虚拟 DOM 渲染:当 render 方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用 setState()时，render 会被再次调用，因为默认情况下 shouldComponentUpdate 总是返回 true，所以默认情况下 React 是没有优化的。\n2.  \n原生 DOM 渲染:React\n只会在虚拟 DOM 中修改真实 DOM 节点，而且修改的次数非常少——这是很棒的 React 特性，它优化了真实 DOM 的变化，使 React 变得更快。\n\n\n\n### 问题 35：如何避免在 React 重新绑定实例？\n\n有几种常用方法可以避免在 React 中绑定方法： 1.将事件处理程序定义为内联箭头函数\nclass SubmitButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFormSubmitted: false\n    };\n  }\n  render() {\n    return (\n      <button onClick={() => {\n        this.setState({ isFormSubmitted: true });\n      }}>Submit</button>\n    )\n  }\n} 2.使用箭头函数来定义方法：\nclass SubmitButton extends React.Component {\n  state = {\n    isFormSubmitted: false\n  }\n  handleSubmit = () => {\n    this.setState({\n      isFormSubmitted: true\n    });\n  }\n  render() {\n    return (\n      <button onClick={this.handleSubmit}>Submit</button>\n    )\n  }\n} 3.使用带有 Hooks 的函数组件\nconst SubmitButton = () => {\n  const [isFormSubmitted, setIsFormSubmitted] = useState(false);\n  return (\n    <button onClick={() => {\n        setIsFormSubmitted(true);\n    }}>Submit</button>\n  )\n};\n\n\n","slug":"语雀/wkyy7o","published":1,"updated":"2022-03-03T11:26:07.596Z","_id":"cl0awjjpm0019081bf5qq1c7l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"React-基础问题\"><a href=\"#React-基础问题\" class=\"headerlink\" title=\"React 基础问题\"></a>React 基础问题</h2><p>**<br><strong>1.React  中  keys  的作用是什么？</strong><br><strong>2.调用 setState 之后发生了什么？</strong><br><strong>3.react 生命周期函数-</strong></p>\n<ul>\n<li>初始化阶段：</li>\n<li>运行中状态：</li>\n<li>销毁阶段：</li>\n</ul>\n<p><strong>4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）</strong><br><strong>5.为什么虚拟 dom 会提高性能?(必考)</strong><br><strong>6.react diff 原理（常考，大厂必考）</strong><br><strong>7.React 中 refs 的作用是什么？</strong><br><strong>8.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？</strong><br><strong>9.展示组件(Presentational component)和容器组件(Container component)之间有何不同</strong><br><strong>10.容器组件则更关心组件是如何运作的。</strong><br><strong>11.类组件(Class component)和函数式组件(Functional component)之间有何不同</strong><br><strong>12. (组件的)状态(state)和属性(props)之间有何不同</strong><br><strong>13.何为受控组件(controlled component)</strong><br><strong>14.何为高阶组件(higher order component)</strong><br><strong>15.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象</strong><br><strong>16.除了在构造函数中绑定 this，还有其它方式吗</strong><br><strong>17.应该在  React  组件的何处发起  Ajax  请求</strong><br><strong>18.描述事件在  React  中的处理方式。</strong><br><strong>19.createElement  和  cloneElement  有什么区别？</strong><br><strong>20.React  中有三种构建组件的方式</strong><br><strong>21.React.createClass()、ES6 class  和无状态函数。</strong><br><strong>22.react  组件的划分业务组件技术组件？</strong><br><strong>23.简述  flux  思想</strong><br><strong>24.Flux  的最大特点，就是数据的”单向流动”。</strong><br><strong>25.React  项目用过什么脚手架（本题是开放性题目）</strong><br><strong>26.了解 redux 么，说一下<br>redux 的作用和运用流程，redux 有什么缺点</strong></p>\n<hr>\n<h2 id=\"35-道必须要清楚的-React-面试题\"><a href=\"#35-道必须要清楚的-React-面试题\" class=\"headerlink\" title=\"35 道必须要清楚的 React 面试题\"></a><a href=\"https://juejin.im/post/5dc20a4ff265da4d4e30040b\" rel=\"external nofollow noreferrer\">35 道必须要清楚的 React 面试题</a></h2><h3 id=\"问题-1：什么是虚拟-DOM？\"><a href=\"#问题-1：什么是虚拟-DOM？\" class=\"headerlink\" title=\"问题 1：什么是虚拟 DOM？\"></a>问题 1：什么是虚拟 DOM？</h3><p>**<br><strong>虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和</strong>。</p>\n<h3 id=\"问题-2：类组件和函数组件之间的区别是啥？\"><a href=\"#问题-2：类组件和函数组件之间的区别是啥？\" class=\"headerlink\" title=\"问题 2：类组件和函数组件之间的区别是啥？\"></a>问题 2：类组件和函数组件之间的区别是啥？</h3><p>·      <strong>类组件</strong>可以使用其他特性，如状态  state 和生命周期钩子。<br>·      当组件只是接收  props 渲染到页面时，就是无状态组件，就属于函数组件，也被称为哑组件或展示组件。<br>函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>函数组件</th>\n<th>类组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否有  this</td>\n<td>没有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>是否有生命周期</td>\n<td>没有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>是否有状态  state</td>\n<td>没有</td>\n<td>有</td>\n</tr>\n</tbody></table>\n<h3 id=\"问题-3：React-中-refs-干嘛用的？\"><a href=\"#问题-3：React-中-refs-干嘛用的？\" class=\"headerlink\" title=\"问题 3：React 中 refs 干嘛用的？\"></a>问题 3：React 中 refs 干嘛用的？</h3><p>Refs 提供了一种访问在 render 方法中创建的 DOM 节点或者 React 元素的方法。在典型的数据流中，props 是父子组件交互的唯一方式，想要修改子组件，需要使用新的 pros 重新渲染它。凡事有例外，某些情况下咱们需要在典型数据流外，强制修改子代，这个时候可以使用  Refs。<br>咱们可以在组件添加一个  ref 属性来使用，该属性的值是一个回调函数，接收作为其第一个参数的底层 DOM 元素或组件的挂载实例。<br>class UnControlledForm extends Component {<br>  handleSubmit = () =&gt; {<br>    console.log(“Input Value: “, this.input.value)<br>  }<br>  render () {<br>    return (<br>      <form onSubmit={this.handleSubmit}><br>        &lt;input<br>          type=’text’<br>          ref={(input)<br>=&gt; this.input = input} /&gt;<br>        <button\ntype='submit'>Submit</button><br>      </form><br>    )<br>  }<br>}<br>请注意，input 元素有一个 ref 属性，它的值是一个函数。该函数接收输入的实际 DOM 元素，然后将其放在实例上，这样就可以在  handleSubmit 函数内部访问它。<br>经常被误解的只有在类组件中才能使用  refs，但是 refs 也可以通过利用 JS 中的闭包与函数组件一起使用。<br>function CustomForm ({handleSubmit}) {<br>  let inputElement<br>  return (<br>    &lt;form onSubmit={() =&gt; handleSubmit(inputElement.value)}&gt;<br>      &lt;input<br>        type=’text’<br>        ref={(input)<br>=&gt; inputElement = input} /&gt;<br>      <button type='submit'>Submit</button><br>    </form><br>  )<br>}</p>\n<h3 id=\"问题-4：在-React-中如何处理事件\"><a href=\"#问题-4：在-React-中如何处理事件\" class=\"headerlink\" title=\"问题 4：在 React 中如何处理事件\"></a>问题 4：在 React 中如何处理事件</h3><p>为了解决跨浏览器的兼容性问题，SyntheticEvent 实例将被传递给你的事件处理函数，SyntheticEvent 是 React 跨浏览器的浏览器原生事件包装器，它还拥有和浏览器原生事件相同的接口，包括  stopPropagation() 和  preventDefault()。<br>比较有趣的是，React 实际上并不将事件附加到子节点本身。React 使用单个事件侦听器侦听顶层的所有事件。这对性能有好处，也意味着 React 在更新 DOM 时不需要跟踪事件监听器。</p>\n<h3 id=\"问题-5：state-和-props-区别是啥？\"><a href=\"#问题-5：state-和-props-区别是啥？\" class=\"headerlink\" title=\"问题 5：state 和 props 区别是啥？\"></a>问题 5：state 和 props 区别是啥？</h3><p>props 和 state 是普通的 JS 对象。虽然它们都包含影响渲染输出的信息，但是它们在组件方面的功能是不同的。即<br>·      state 是组件自己管理数据，控制自己的状态，可变；<br>·      props 是外部传入的数据参数，不可变；<br>·      没有 state 的叫做无状态组件，有 state 的叫做有状态组件；<br>·      多用  props，少用  state，也就是多写无状态组件。</p>\n<h3 id=\"问题-6：如何创建-refs\"><a href=\"#问题-6：如何创建-refs\" class=\"headerlink\" title=\"问题 6：如何创建 refs\"></a>问题 6：如何创建 refs</h3><p>Refs 是使用  React.createRef() 创建的，并通过  ref 属性附加到 React 元素。在构造组件时，通常将  Refs 分配给实例属性，以便可以在整个组件中引用它们。<br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.myRef = React.createRef();<br>  }<br>  render() {<br>    return <div ref={this.myRef} />;<br>  }<br>}<br>或者这样用：<br>class UserForm extends Component {<br>  handleSubmit = () =&gt; {<br>    console.log(“Input Value is: “, this.input.value)<br>  }<br>  render () {<br>    return (<br>      <form onSubmit={this.handleSubmit}><br>        &lt;input<br>          type=’text’<br>          ref={(input)<br>=&gt; this.input = input} /&gt; // Access DOM input in handle submit<br>        <button\ntype='submit'>Submit</button><br>      </form><br>    )<br>  }<br>}</p>\n<h3 id=\"问题-7：什么是高阶组件？\"><a href=\"#问题-7：什么是高阶组件？\" class=\"headerlink\" title=\"问题 7：什么是高阶组件？\"></a>问题 7：什么是高阶组件？</h3><p><strong>高阶组件(HOC)是接受一个组件并返回一个新组件的函数。基本上，这是一个模式，是从 React 的组合特性中衍生出来的，称其为纯组件</strong>，因为它们可以接受任何动态提供的子组件，但不会修改或复制输入组件中的任何行为。<br>const EnhancedComponent = higherOrderComponent(WrappedComponent);<br>HOC 可以用于以下许多用例<br>·      代码重用、逻辑和引导抽象<br>·      渲染劫持<br>·      state 抽象和操作<br>·      props 处理</p>\n<h3 id=\"问题-8：在构造函数调用-super-并将-props-作为参数传入的作用是啥？\"><a href=\"#问题-8：在构造函数调用-super-并将-props-作为参数传入的作用是啥？\" class=\"headerlink\" title=\"问题 8：在构造函数调用  super  并将  props  作为参数传入的作用是啥？\"></a>问题 8：在构造函数调用  super  并将  props  作为参数传入的作用是啥？</h3><p>在调用  super() 方法之前，子类构造函数无法使用 this 引用，ES6 子类也是如此。将  props 参数传递给  super() 调用的主要原因是在子构造函数中能够通过 this.props 来获取传入的  props。<br><strong>传递 props</strong><br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    console.log(this.props);  // { name: ‘sudheer’,age: 30 }<br>  }<br>}<br><strong>没传递 props</strong><br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super();<br>    console.log(this.props); // undefined<br>    // 但是 Props 参数仍然可用<br>    console.log(props); //<br>Prints { name: ‘sudheer’,age: 30 }<br>  }<br>  render() {<br>    // 构造函数外部不受影响<br>    console.log(this.props) // { name: ‘sudheer’,age: 30 }<br>  }<br>}<br>上面示例揭示了一点。props 的行为只有在构造函数中是不同的，在构造函数之外也是一样的。</p>\n<h3 id=\"问题-9：什么是控制组件？\"><a href=\"#问题-9：什么是控制组件？\" class=\"headerlink\" title=\"问题 9：什么是控制组件？\"></a>问题 9：什么是控制组件？</h3><p>在 HTML 中，表单元素如  <input>、<textarea>和<select>通常维护自己的状态，并根据用户输入进行更新。当用户提交表单时，来自上述元素的值将随表单一起发送。<br>而 React 的工作方式则不同。包含表单的组件将跟踪其状态中的输入值，并在每次回调函数(例如 onChange)触发时重新渲染组件，因为状态被更新。以这种方式由 React 控制其值的输入表单元素称为<strong>受控组件</strong>。</p>\n<h3 id=\"问题-10：如何\"><a href=\"#问题-10：如何\" class=\"headerlink\" title=\"问题 10：如何\"></a>问题 10：如何</h3><p>React.createElement ？<br><strong>问题：</strong><br>const element = (<br>  <h1 className=\"greeting\"><br>    Hello, world!<br>  </h1><br>)<br>上述代码如何使用  React.createElement 来实现:<br>const element = React.createElement(<br>  ‘h1’,<br>  {className: ‘greeting’},<br>  ‘Hello, world!’<br>);</p>\n<h3 id=\"问题-11：讲讲什么是-JSX-？\"><a href=\"#问题-11：讲讲什么是-JSX-？\" class=\"headerlink\" title=\"问题 11：讲讲什么是 JSX ？\"></a>问题 11：讲讲什么是 JSX ？</h3><p>当 <strong>Facebook</strong> 第一次发布 React 时，他们还引入了一种新的 JS 方言  JSX，将原始 HTML 模板嵌入到 JS 代码中。JSX 代码本身不能被浏览器读取，必须使用 Babel 和 webpack 等工具将其转换为传统的 JS。很多开发人员就能无意识使用 JSX，因为它已经与 React 结合在一直了。<br>class MyComponent extends React.Component {<br>  render() {<br>    let props = this.props; <br>    return (<br>      <div className=\"my-component\"><br>      <a href={props.url}>{props.name}</a><br>      </div><br>    );<br>  }<br>}</p>\n<h3 id=\"问题-12：根据下面定义的代码，可以找出存在的两个问题吗-？\"><a href=\"#问题-12：根据下面定义的代码，可以找出存在的两个问题吗-？\" class=\"headerlink\" title=\"问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？\"></a>问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？</h3><p>请看下面的代码：<br>答案： 1.在构造函数没有将  props 传递给  super，它应该包括以下行<br>constructor(props)<br>{<br>  super(props);<br>  // …<br>} 2.事件监听器(通过 addEventListener()分配时)的作用域不正确，因为 ES6 不提供自动绑定。因此，开发人员可以在构造函数中重新分配 clickHandler 来包含正确的绑定:<br>constructor(props)<br>{<br>  super(props);<br>  this.clickHandler = this.clickHandler.bind(this);<br>  // …<br>}</p>\n<h3 id=\"问题-13：为什么不直接更新-state-呢\"><a href=\"#问题-13：为什么不直接更新-state-呢\" class=\"headerlink\" title=\"问题 13：为什么不直接更新  state  呢 ?\"></a>问题 13：为什么不直接更新  state  呢 ?</h3><p>如果试图直接更新  state ，则不会重新渲染组件。<br>// 错误<br> This.state.message = ‘Hello world’;<br>需要使用 setState()方法来更新  state。它调度对组件 state 对象的更新。当 state 改变时，组件通过重新渲染来响应：<br>// 正确做法<br>This.setState({message: ‘Hello World’});</p>\n<h3 id=\"问题-14：React-组件生命周期有哪些不同阶段？\"><a href=\"#问题-14：React-组件生命周期有哪些不同阶段？\" class=\"headerlink\" title=\"问题 14：React 组件生命周期有哪些不同阶段？\"></a>问题 14：React 组件生命周期有哪些不同阶段？</h3><p>在组件生命周期中有四个不同的阶段：<br>1.  <br><strong>Initialization</strong>：在这个阶段，组件准备设置初始化状态和默认属性。<br>2.  <br><strong>Mounting</strong>：react<br>组件已经准备好挂载到浏览器 DOM 中。这个阶段包括 componentWillMount 和 componentDidMount 生命周期方法。<br>3.  <br><strong>Updating</strong>：在这个阶段，组件以两种方式更新，发送新的 props 和 state 状态。此阶段包括 shouldComponentUpdate、componentWillUpdate 和 componentDidUpdate 生命周期方法。<br>4.  <br><strong>Unmounting</strong>：在这个阶段，组件已经不再被需要了，它从浏览器 DOM 中卸载下来。这个阶段包含  componentWillUnmount 生命周期方法。<br>除以上四个常用生命周期外，还有一个错误处理的阶段：<br><strong>Error Handling</strong>：在这个阶段，不论在渲染的过程中，还是在生命周期方法中或是在任何子组件的构造函数中发生错误，该组件都会被调用。这个阶段包含了  componentDidCatch 生命周期方法。</p>\n<h3 id=\"问题-15：React-的生命周期方法有哪些？\"><a href=\"#问题-15：React-的生命周期方法有哪些？\" class=\"headerlink\" title=\"问题 15：React 的生命周期方法有哪些？\"></a>问题 15：React 的生命周期方法有哪些？</h3><p>·      componentWillMount:在渲染之前执行，用于根组件中的 App 级配置。<br>·      componentDidMount：在第一次渲染之后执行，可以在这里做 AJAX 请求，DOM 的操作或状态更新以及设置事件监听器。<br>·      componentWillReceiveProps：在初始化 render 的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染<br>·      shouldComponentUpdate：确定是否更新组件。默认情况下，它返回 true。如果确定在  state 或  props 更新后组件不需要在重新渲染，则可以返回 false，这是一个提高性能的方法。<br>·      componentWillUpdate：在 shouldComponentUpdate 返回  true 确定要更新组件之前件之前执行。<br>·      componentDidUpdate：它主要用于更新 DOM 以响应 props 或 state 更改。<br>·      componentWillUnmount：它用于取消任何的网络请求，或删除与组件关联的所有事件监听器。</p>\n<h3 id=\"问题-16：这三个点-…-在-React-干嘛用的？\"><a href=\"#问题-16：这三个点-…-在-React-干嘛用的？\" class=\"headerlink\" title=\"问题 16：这三个点(…)在 React 干嘛用的？\"></a>问题 16：这三个点(…)在 React 干嘛用的？</h3><p>… 在 React（使用 JSX）代码中做什么？它叫什么？<br>&lt;Modal {…this.props} title=’Modal heading’  animation={false}/&gt;<br>这个叫扩展操作符号或者展开操作符，例如，如果 this.props 包含 a：1 和 b：2，则<br>&lt;Modal {…this.props} title=’Modal heading’ animation={false}&gt;<br>等价于下面内容：<br><Modal a={this.props.a} b={this.props.b} title='Modal heading' animation={false}><br>扩展符号不仅适用于该用例，而且对于创建具有现有对象的大多数（或全部）属性的新对象非常方便，在更新 state 咱们就经常这么做：<br>this.setState(prevState =&gt; {<br>    return {foo: {…prevState.foo, a: “updated”}};<br>});</p>\n<h3 id=\"问题-17：使用-React\"><a href=\"#问题-17：使用-React\" class=\"headerlink\" title=\"问题 17：使用 React\"></a>问题 17：使用 React</h3><p>Hooks 好处是啥？<br>首先，Hooks 通常支持提取和重用跨多个组件通用的有状态逻辑，而无需承担高阶组件或渲染  props 的负担。Hooks 可以轻松地操作函数组件的状态，而不需要将它们转换为类组件。<br>Hooks 在类中不起作用，通过使用它们，咱们可以完全避免使用生命周期方法，例如  componentDidMount、componentDidUpdate、componentWillUnmount。相反，使用像 useEffect 这样的内置钩子。</p>\n<h3 id=\"问题-18：什么是-ReactHooks？\"><a href=\"#问题-18：什么是-ReactHooks？\" class=\"headerlink\" title=\"问题 18：什么是 ReactHooks？\"></a>问题 18：什么是 ReactHooks？</h3><p><strong>Hooks</strong>是<br>React 16.8 中的新添加内容。它们允许在不编写类的情况下使用 state 和其他<br>React 特性。使用 Hooks，可以从组件中提取有状态逻辑，这样就可以独立地测试和重用它。Hooks 允许咱们在不改变组件层次结构的情况下重用有状态逻辑，这样在许多组件之间或与社区共享 Hooks 变得很容易。</p>\n<h3 id=\"问题-19：React-中的-useState-是什么？\"><a href=\"#问题-19：React-中的-useState-是什么？\" class=\"headerlink\" title=\"问题 19：React 中的  useState()  是什么？\"></a>问题 19：React 中的  useState()  是什么？</h3><p>下面说明 useState(0)的用途：<br>…<br>const [count, setCounter] = useState(0);<br>const [moreStuff, setMoreStuff] = useState(…);<br>…<br>const setCount = () =&gt; {<br>    setCounter(count + 1);<br>    setMoreStuff(…);<br>    …<br>};<br>useState 是一个内置的 React Hook。useState(0) 返回一个元组，其中第一个参数 count 是计数器的当前状态，setCounter 提供更新计数器状态的方法。<br>咱们可以在任何地方使用 setCounter 方法更新计数状态-在这种情况下，咱们在 setCount 函数内部使用它可以做更多的事情，使用 Hooks，能够使咱们的代码保持更多功能，还可以避免过多使用基于类的组件。</p>\n<h3 id=\"问题-20：React-中的-StrictMode-严格模式-是什么？？\"><a href=\"#问题-20：React-中的-StrictMode-严格模式-是什么？？\" class=\"headerlink\" title=\"问题 20：React 中的 StrictMode(严格模式)是什么？？\"></a>问题 20：React 中的 StrictMode(严格模式)是什么？？</h3><p>React 的 StrictMode 是一种辅助组件，可以帮助咱们编写更好的<br>react 组件，可以使用<StrictMode />包装一组组件，并且可以帮咱们以下检查：<br>·      验证内部组件是否遵循某些推荐做法，如果没有，会在控制台给出警告。<br>·      验证是否使用的已经废弃的方法，如果有，会在控制台给出警告。<br>·      通过识别潜在的风险预防一些副作用。</p>\n<h3 id=\"问题-21：为什么类方法需要绑定到类实例？\"><a href=\"#问题-21：为什么类方法需要绑定到类实例？\" class=\"headerlink\" title=\"问题 21：为什么类方法需要绑定到类实例？\"></a>问题 21：为什么类方法需要绑定到类实例？</h3><p>在 JS 中，this 值会根据当前上下文变化。在 React 类组件方法中，开发人员通常希望  this 引用组件的当前实例，因此有必要将这些方法绑定到实例。通常这是在构造函数中完成的:<br>class SubmitButton extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      isFormSubmitted: false<br>    };<br>    this.handleSubmit = this.handleSubmit.bind(this);<br>  }<br>  handleSubmit() {<br>    this.setState({<br>      isFormSubmitted: true<br>    });<br>  }<br>  render() {<br>    return (<br>      <button onClick={this.handleSubmit}>Submit</button><br>    )<br>  }<br>}</p>\n<h3 id=\"问题-22：什么是-prop\"><a href=\"#问题-22：什么是-prop\" class=\"headerlink\" title=\"问题 22：什么是 prop\"></a>问题 22：什么是 prop</h3><p>drilling，如何避免？<br>在构建 React 应用程序时，在多层嵌套组件来使用另一个嵌套组件提供的数据。最简单的方法是将一个  prop 从每个组件一层层的传递下去，从源组件传递到深层嵌套组件，这叫做<strong>prop drilling</strong>。<br>prop drilling 的主要缺点是原本不需要数据的组件变得不必要地复杂，并且难以维护。<br>为了避免 prop drilling，一种常用的方法是使用<strong>React<br>Context</strong>。通过定义提供数据的 Provider 组件，并允许嵌套的组件通过 Consumer 组件或 useContext Hook 使用上下文数据。</p>\n<h3 id=\"问题-23：描述-Flux-与-MVC？\"><a href=\"#问题-23：描述-Flux-与-MVC？\" class=\"headerlink\" title=\"问题 23：描述 Flux 与 MVC？\"></a>问题 23：描述 Flux 与 MVC？</h3><p>传统的 MVC 模式在分离数据(Model)、UI(View 和逻辑(Controller)方面工作得很好，但是 MVC 架构经常遇到两个主要问题:<br><strong>数据流不够清晰</strong>:跨视图发生的级联更新常常会导致混乱的事件网络，难于调试。<br><strong>缺乏数据完整性</strong>:模型数据可以在任何地方发生突变，从而在整个 UI 中产生不可预测的结果。<br>使用 Flux 模式的复杂用户界面不再遭受级联更新，任何给定的 React 组件都能够根据  store 提供的数据重建其状态。Flux 模式还通过限制对共享数据的直接访问来加强数据完整性。</p>\n<h3 id=\"问题-24：受控组件和非受控组件区别是啥？\"><a href=\"#问题-24：受控组件和非受控组件区别是啥？\" class=\"headerlink\" title=\"问题 24：受控组件和非受控组件区别是啥？\"></a>问题 24：受控组件和非受控组件区别是啥？</h3><p>·      <strong>受控组件</strong>是<br>React 控制中的组件，并且是表单数据真实的唯一来源。<br>·      非受控组件是由 DOM 处理表单数据的地方，而不是在 React 组件中。<br>尽管非受控组件通常更易于实现，因为只需使用 refs 即可从<br>DOM 中获取值，但通常建议优先选择受控制的组件，而不是非受控制的组件。<br>这样做的主要原因是受控组件支持即时字段验证，允许有条件地禁用/启用按钮，强制输入格式。</p>\n<h3 id=\"问题-25：这段代码有什么问题吗？\"><a href=\"#问题-25：这段代码有什么问题吗？\" class=\"headerlink\" title=\"问题 25：这段代码有什么问题吗？\"></a>问题 25：这段代码有什么问题吗？</h3><p>这段代码有什么问题:<br>this.setState((prevState, props) =&gt; {<br>  return {<br>    streak: prevState.streak + props.count<br>  }<br>})<br><strong>答案：</strong><br>没有什么问题。这种方式很少被使用，咱们可以将一个函数传递给 setState，该函数接收上一个  state 的值和当前的 props，并返回一个新的状态，如果咱们需要根据以前的状态重新设置状态，推荐使用这种方式。</p>\n<h3 id=\"问题-26：什么是-React\"><a href=\"#问题-26：什么是-React\" class=\"headerlink\" title=\"问题 26：什么是 React\"></a>问题 26：什么是 React</h3><p>Context?<br>Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递  props 属性。</p>\n<h3 id=\"问题-27：什么是-React\"><a href=\"#问题-27：什么是-React\" class=\"headerlink\" title=\"问题 27：什么是 React\"></a>问题 27：什么是 React</h3><p>Fiber?<br><strong>Fiber</strong> 是<br>React 16 中新的协调引擎或重新实现核心算法。它的主要目标是支持虚拟 DOM 的增量渲染。<strong>React Fiber</strong> 的目标是提高其在动画、布局、手势、暂停、中止或重用等方面的适用性，并为不同类型的更新分配优先级，以及新的并发原语。<br>React Fiber 的目标是增强其在动画、布局和手势等领域的适用性。它的主要特性是增量渲染:能够将渲染工作分割成块，并将其分散到多个帧中。</p>\n<h3 id=\"问题-28：如何在\"><a href=\"#问题-28：如何在\" class=\"headerlink\" title=\"问题 28：如何在\"></a>问题 28：如何在</h3><p>ReactJS 的 Props 上应用验证？<br>当应用程序在开发模式下运行时，React 将自动检查咱们在组件上设置的所有  props，以确保它们具有正确的数据类型。对于不正确的类型，开发模式下会在控制台中生成警告消息，而在生产模式中由于性能影响而禁用它。强制的  props 用  isRequired 定义的。<br>下面是一组预定义的 prop 类型:<br>·      React.PropTypes.string<br>·      React.PropTypes.number<br>·      React.PropTypes.func<br>·      React.PropTypes.node<br>·      React.PropTypes.bool<br>例如，咱们为用户组件定义了如下的 propTypes<br>import PropTypes from ‘prop-types’;<br>class User extends React.Component {<br>  render() {<br>    return (<br>      <h1>Welcome, {this.props.name}</h1><br>      <h2>Age, {this.props.age}<br>    );<br>  }<br>}<br>User.propTypes = {<br>  name: PropTypes.string.isRequired,<br>  age: PropTypes.number.isRequired<br>};</p>\n<h3 id=\"问题-29：在-React-中使用构造函数和-getInitialState-有什么区别？\"><a href=\"#问题-29：在-React-中使用构造函数和-getInitialState-有什么区别？\" class=\"headerlink\" title=\"问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？\"></a>问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？</h3><p>构造函数和 getInitialState 之间的区别就是 ES6 和 ES5 本身的区别。在使用 ES6 类时，应该在构造函数中初始化 state，并在使用 React.createClass 时定义 getInitialState 方法。<br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = { /_ initial state <em>/ };<br>  }<br>}<br>等价于：<br>var MyComponent = React.createClass({<br>  getInitialState() {<br>    return { /</em> initial state _/ };<br>  },<br>});</p>\n<h3 id=\"问题-30：如何有条件地向\"><a href=\"#问题-30：如何有条件地向\" class=\"headerlink\" title=\"问题 30：如何有条件地向\"></a>问题 30：如何有条件地向</h3><p>React 组件添加属性？<br>对于某些属性，React 非常聪明，如果传递给它的值是虚值，可以省略该属性。例如：<br>var InputComponent = React.createClass({<br>    render: function() {<br>      var required = true;<br>      var disabled = false;<br>      return (<br>        <input\ntype=\"text\" disabled={disabled} required={required} /><br>      );<br>    }<br>});<br>渲染结果：<br><input type=\"text\" required><br>另一种可能的方法是：<br>var condition = true;<br>var component = (<br>  &lt;div<br>    value=”foo”<br>    { …( condition &amp;&amp; { disabled: true } ) } /&gt;<br>);</p>\n<h3 id=\"问题-31：Hooks-会取代-render-props-和高阶组件吗？\"><a href=\"#问题-31：Hooks-会取代-render-props-和高阶组件吗？\" class=\"headerlink\" title=\"问题 31：Hooks 会取代  render props  和高阶组件吗？\"></a>问题 31：Hooks 会取代  render props  和高阶组件吗？</h3><p>通常，render props 和高阶组件仅渲染一个子组件。React 团队认为，Hooks 是服务此用例的更简单方法。<br>这两种模式仍然有一席之地(例如，一个虚拟的  scroller 组件可能有一个  renderItem prop，或者一个可视化的容器组件可能有它自己的 DOM 结构)。但在大多数情况下，Hooks<br>就足够了，可以帮助减少树中的嵌套。</p>\n<h3 id=\"问题-32：如何避免组件的重新渲染？\"><a href=\"#问题-32：如何避免组件的重新渲染？\" class=\"headerlink\" title=\"问题 32：如何避免组件的重新渲染？\"></a>问题 32：如何避免组件的重新渲染？</h3><p>React 中最常见的问题之一是组件不必要地重新渲染。React 提供了两个方法，在这些情况下非常有用：<br>·      React.memo():这可以防止不必要地重新渲染函数组件<br>·      PureComponent:这可以防止不必要地重新渲染类组件<br>这两种方法都依赖于对传递给组件的 props 的浅比较，如果  props 没有改变，那么组件将不会重新渲染。虽然这两种工具都非常有用，但是浅比较会带来额外的性能损失，因此如果使用不当，这两种方法都会对性能产生负面影响。<br>通过使用 <strong>React Profiler</strong>，可以在使用这些方法前后对性能进行测量，从而确保通过进行给定的更改来实际改进性能。</p>\n<h3 id=\"问题-33：什么是纯函数？\"><a href=\"#问题-33：什么是纯函数？\" class=\"headerlink\" title=\"问题 33：什么是纯函数？\"></a>问题 33：什么是纯函数？</h3><p>纯函数是不依赖并且不会在其作用域之外修改变量状态的函数。本质上，纯函数始终在给定相同参数的情况下返回相同结果。</p>\n<h3 id=\"问题-34：当调用-setState-时，React-render-是如何工作的？\"><a href=\"#问题-34：当调用-setState-时，React-render-是如何工作的？\" class=\"headerlink\" title=\"问题 34：当调用 setState 时，React render  是如何工作的？\"></a>问题 34：当调用 setState 时，React render  是如何工作的？</h3><p>咱们可以将”render”分为两个步骤：<br>1.  <br>虚拟 DOM 渲染:当 render 方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用 setState()时，render 会被再次调用，因为默认情况下 shouldComponentUpdate 总是返回 true，所以默认情况下 React 是没有优化的。<br>2.  <br>原生 DOM 渲染:React<br>只会在虚拟 DOM 中修改真实 DOM 节点，而且修改的次数非常少——这是很棒的 React 特性，它优化了真实 DOM 的变化，使 React 变得更快。</p>\n<h3 id=\"问题-35：如何避免在-React-重新绑定实例？\"><a href=\"#问题-35：如何避免在-React-重新绑定实例？\" class=\"headerlink\" title=\"问题 35：如何避免在 React 重新绑定实例？\"></a>问题 35：如何避免在 React 重新绑定实例？</h3><p>有几种常用方法可以避免在 React 中绑定方法： 1.将事件处理程序定义为内联箭头函数<br>class SubmitButton extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      isFormSubmitted: false<br>    };<br>  }<br>  render() {<br>    return (<br>      &lt;button onClick={() =&gt; {<br>        this.setState({ isFormSubmitted: true });<br>      }}&gt;Submit</button><br>    )<br>  }<br>} 2.使用箭头函数来定义方法：<br>class SubmitButton extends React.Component {<br>  state = {<br>    isFormSubmitted: false<br>  }<br>  handleSubmit = () =&gt; {<br>    this.setState({<br>      isFormSubmitted: true<br>    });<br>  }<br>  render() {<br>    return (<br>      <button onClick={this.handleSubmit}>Submit</button><br>    )<br>  }<br>} 3.使用带有 Hooks 的函数组件<br>const SubmitButton = () =&gt; {<br>  const [isFormSubmitted, setIsFormSubmitted] = useState(false);<br>  return (<br>    &lt;button onClick={() =&gt; {<br>        setIsFormSubmitted(true);<br>    }}&gt;Submit</button><br>  )<br>};</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"React-基础问题\"><a href=\"#React-基础问题\" class=\"headerlink\" title=\"React 基础问题\"></a>React 基础问题</h2><p>**<br><strong>1.React  中  keys  的作用是什么？</strong><br><strong>2.调用 setState 之后发生了什么？</strong><br><strong>3.react 生命周期函数-</strong></p>\n<ul>\n<li>初始化阶段：</li>\n<li>运行中状态：</li>\n<li>销毁阶段：</li>\n</ul>\n<p><strong>4.shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）</strong><br><strong>5.为什么虚拟 dom 会提高性能?(必考)</strong><br><strong>6.react diff 原理（常考，大厂必考）</strong><br><strong>7.React 中 refs 的作用是什么？</strong><br><strong>8.如果你创建了类似于下面的 Twitter 元素，那么它相关的类定义是啥样子的？</strong><br><strong>9.展示组件(Presentational component)和容器组件(Container component)之间有何不同</strong><br><strong>10.容器组件则更关心组件是如何运作的。</strong><br><strong>11.类组件(Class component)和函数式组件(Functional component)之间有何不同</strong><br><strong>12. (组件的)状态(state)和属性(props)之间有何不同</strong><br><strong>13.何为受控组件(controlled component)</strong><br><strong>14.何为高阶组件(higher order component)</strong><br><strong>15.为什么建议传递给 setState 的参数是一个 callback 而不是一个对象</strong><br><strong>16.除了在构造函数中绑定 this，还有其它方式吗</strong><br><strong>17.应该在  React  组件的何处发起  Ajax  请求</strong><br><strong>18.描述事件在  React  中的处理方式。</strong><br><strong>19.createElement  和  cloneElement  有什么区别？</strong><br><strong>20.React  中有三种构建组件的方式</strong><br><strong>21.React.createClass()、ES6 class  和无状态函数。</strong><br><strong>22.react  组件的划分业务组件技术组件？</strong><br><strong>23.简述  flux  思想</strong><br><strong>24.Flux  的最大特点，就是数据的”单向流动”。</strong><br><strong>25.React  项目用过什么脚手架（本题是开放性题目）</strong><br><strong>26.了解 redux 么，说一下<br>redux 的作用和运用流程，redux 有什么缺点</strong></p>\n<hr>\n<h2 id=\"35-道必须要清楚的-React-面试题\"><a href=\"#35-道必须要清楚的-React-面试题\" class=\"headerlink\" title=\"35 道必须要清楚的 React 面试题\"></a><a href=\"https://juejin.im/post/5dc20a4ff265da4d4e30040b\">35 道必须要清楚的 React 面试题</a></h2><h3 id=\"问题-1：什么是虚拟-DOM？\"><a href=\"#问题-1：什么是虚拟-DOM？\" class=\"headerlink\" title=\"问题 1：什么是虚拟 DOM？\"></a>问题 1：什么是虚拟 DOM？</h3><p>**<br><strong>虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和</strong>。</p>\n<h3 id=\"问题-2：类组件和函数组件之间的区别是啥？\"><a href=\"#问题-2：类组件和函数组件之间的区别是啥？\" class=\"headerlink\" title=\"问题 2：类组件和函数组件之间的区别是啥？\"></a>问题 2：类组件和函数组件之间的区别是啥？</h3><p>·      <strong>类组件</strong>可以使用其他特性，如状态  state 和生命周期钩子。<br>·      当组件只是接收  props 渲染到页面时，就是无状态组件，就属于函数组件，也被称为哑组件或展示组件。<br>函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>函数组件</th>\n<th>类组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否有  this</td>\n<td>没有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>是否有生命周期</td>\n<td>没有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>是否有状态  state</td>\n<td>没有</td>\n<td>有</td>\n</tr>\n</tbody></table>\n<h3 id=\"问题-3：React-中-refs-干嘛用的？\"><a href=\"#问题-3：React-中-refs-干嘛用的？\" class=\"headerlink\" title=\"问题 3：React 中 refs 干嘛用的？\"></a>问题 3：React 中 refs 干嘛用的？</h3><p>Refs 提供了一种访问在 render 方法中创建的 DOM 节点或者 React 元素的方法。在典型的数据流中，props 是父子组件交互的唯一方式，想要修改子组件，需要使用新的 pros 重新渲染它。凡事有例外，某些情况下咱们需要在典型数据流外，强制修改子代，这个时候可以使用  Refs。<br>咱们可以在组件添加一个  ref 属性来使用，该属性的值是一个回调函数，接收作为其第一个参数的底层 DOM 元素或组件的挂载实例。<br>class UnControlledForm extends Component {<br>  handleSubmit = () =&gt; {<br>    console.log(“Input Value: “, this.input.value)<br>  }<br>  render () {<br>    return (<br>      <form onSubmit={this.handleSubmit}><br>        &lt;input<br>          type=’text’<br>          ref={(input)<br>=&gt; this.input = input} /&gt;<br>        <button\ntype='submit'>Submit</button><br>      </form><br>    )<br>  }<br>}<br>请注意，input 元素有一个 ref 属性，它的值是一个函数。该函数接收输入的实际 DOM 元素，然后将其放在实例上，这样就可以在  handleSubmit 函数内部访问它。<br>经常被误解的只有在类组件中才能使用  refs，但是 refs 也可以通过利用 JS 中的闭包与函数组件一起使用。<br>function CustomForm ({handleSubmit}) {<br>  let inputElement<br>  return (<br>    &lt;form onSubmit={() =&gt; handleSubmit(inputElement.value)}&gt;<br>      &lt;input<br>        type=’text’<br>        ref={(input)<br>=&gt; inputElement = input} /&gt;<br>      <button type='submit'>Submit</button><br>    </form><br>  )<br>}</p>\n<h3 id=\"问题-4：在-React-中如何处理事件\"><a href=\"#问题-4：在-React-中如何处理事件\" class=\"headerlink\" title=\"问题 4：在 React 中如何处理事件\"></a>问题 4：在 React 中如何处理事件</h3><p>为了解决跨浏览器的兼容性问题，SyntheticEvent 实例将被传递给你的事件处理函数，SyntheticEvent 是 React 跨浏览器的浏览器原生事件包装器，它还拥有和浏览器原生事件相同的接口，包括  stopPropagation() 和  preventDefault()。<br>比较有趣的是，React 实际上并不将事件附加到子节点本身。React 使用单个事件侦听器侦听顶层的所有事件。这对性能有好处，也意味着 React 在更新 DOM 时不需要跟踪事件监听器。</p>\n<h3 id=\"问题-5：state-和-props-区别是啥？\"><a href=\"#问题-5：state-和-props-区别是啥？\" class=\"headerlink\" title=\"问题 5：state 和 props 区别是啥？\"></a>问题 5：state 和 props 区别是啥？</h3><p>props 和 state 是普通的 JS 对象。虽然它们都包含影响渲染输出的信息，但是它们在组件方面的功能是不同的。即<br>·      state 是组件自己管理数据，控制自己的状态，可变；<br>·      props 是外部传入的数据参数，不可变；<br>·      没有 state 的叫做无状态组件，有 state 的叫做有状态组件；<br>·      多用  props，少用  state，也就是多写无状态组件。</p>\n<h3 id=\"问题-6：如何创建-refs\"><a href=\"#问题-6：如何创建-refs\" class=\"headerlink\" title=\"问题 6：如何创建 refs\"></a>问题 6：如何创建 refs</h3><p>Refs 是使用  React.createRef() 创建的，并通过  ref 属性附加到 React 元素。在构造组件时，通常将  Refs 分配给实例属性，以便可以在整个组件中引用它们。<br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.myRef = React.createRef();<br>  }<br>  render() {<br>    return <div ref={this.myRef} />;<br>  }<br>}<br>或者这样用：<br>class UserForm extends Component {<br>  handleSubmit = () =&gt; {<br>    console.log(“Input Value is: “, this.input.value)<br>  }<br>  render () {<br>    return (<br>      <form onSubmit={this.handleSubmit}><br>        &lt;input<br>          type=’text’<br>          ref={(input)<br>=&gt; this.input = input} /&gt; // Access DOM input in handle submit<br>        <button\ntype='submit'>Submit</button><br>      </form><br>    )<br>  }<br>}</p>\n<h3 id=\"问题-7：什么是高阶组件？\"><a href=\"#问题-7：什么是高阶组件？\" class=\"headerlink\" title=\"问题 7：什么是高阶组件？\"></a>问题 7：什么是高阶组件？</h3><p><strong>高阶组件(HOC)是接受一个组件并返回一个新组件的函数。基本上，这是一个模式，是从 React 的组合特性中衍生出来的，称其为纯组件</strong>，因为它们可以接受任何动态提供的子组件，但不会修改或复制输入组件中的任何行为。<br>const EnhancedComponent = higherOrderComponent(WrappedComponent);<br>HOC 可以用于以下许多用例<br>·      代码重用、逻辑和引导抽象<br>·      渲染劫持<br>·      state 抽象和操作<br>·      props 处理</p>\n<h3 id=\"问题-8：在构造函数调用-super-并将-props-作为参数传入的作用是啥？\"><a href=\"#问题-8：在构造函数调用-super-并将-props-作为参数传入的作用是啥？\" class=\"headerlink\" title=\"问题 8：在构造函数调用  super  并将  props  作为参数传入的作用是啥？\"></a>问题 8：在构造函数调用  super  并将  props  作为参数传入的作用是啥？</h3><p>在调用  super() 方法之前，子类构造函数无法使用 this 引用，ES6 子类也是如此。将  props 参数传递给  super() 调用的主要原因是在子构造函数中能够通过 this.props 来获取传入的  props。<br><strong>传递 props</strong><br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    console.log(this.props);  // { name: ‘sudheer’,age: 30 }<br>  }<br>}<br><strong>没传递 props</strong><br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super();<br>    console.log(this.props); // undefined<br>    // 但是 Props 参数仍然可用<br>    console.log(props); //<br>Prints { name: ‘sudheer’,age: 30 }<br>  }<br>  render() {<br>    // 构造函数外部不受影响<br>    console.log(this.props) // { name: ‘sudheer’,age: 30 }<br>  }<br>}<br>上面示例揭示了一点。props 的行为只有在构造函数中是不同的，在构造函数之外也是一样的。</p>\n<h3 id=\"问题-9：什么是控制组件？\"><a href=\"#问题-9：什么是控制组件？\" class=\"headerlink\" title=\"问题 9：什么是控制组件？\"></a>问题 9：什么是控制组件？</h3><p>在 HTML 中，表单元素如  <input>、<textarea>和<select>通常维护自己的状态，并根据用户输入进行更新。当用户提交表单时，来自上述元素的值将随表单一起发送。<br>而 React 的工作方式则不同。包含表单的组件将跟踪其状态中的输入值，并在每次回调函数(例如 onChange)触发时重新渲染组件，因为状态被更新。以这种方式由 React 控制其值的输入表单元素称为<strong>受控组件</strong>。</p>\n<h3 id=\"问题-10：如何\"><a href=\"#问题-10：如何\" class=\"headerlink\" title=\"问题 10：如何\"></a>问题 10：如何</h3><p>React.createElement ？<br><strong>问题：</strong><br>const element = (<br>  <h1 className=\"greeting\"><br>    Hello, world!<br>  </h1><br>)<br>上述代码如何使用  React.createElement 来实现:<br>const element = React.createElement(<br>  ‘h1’,<br>  {className: ‘greeting’},<br>  ‘Hello, world!’<br>);</p>\n<h3 id=\"问题-11：讲讲什么是-JSX-？\"><a href=\"#问题-11：讲讲什么是-JSX-？\" class=\"headerlink\" title=\"问题 11：讲讲什么是 JSX ？\"></a>问题 11：讲讲什么是 JSX ？</h3><p>当 <strong>Facebook</strong> 第一次发布 React 时，他们还引入了一种新的 JS 方言  JSX，将原始 HTML 模板嵌入到 JS 代码中。JSX 代码本身不能被浏览器读取，必须使用 Babel 和 webpack 等工具将其转换为传统的 JS。很多开发人员就能无意识使用 JSX，因为它已经与 React 结合在一直了。<br>class MyComponent extends React.Component {<br>  render() {<br>    let props = this.props; <br>    return (<br>      <div className=\"my-component\"><br>      <a href={props.url}>{props.name}</a><br>      </div><br>    );<br>  }<br>}</p>\n<h3 id=\"问题-12：根据下面定义的代码，可以找出存在的两个问题吗-？\"><a href=\"#问题-12：根据下面定义的代码，可以找出存在的两个问题吗-？\" class=\"headerlink\" title=\"问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？\"></a>问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？</h3><p>请看下面的代码：<br>答案： 1.在构造函数没有将  props 传递给  super，它应该包括以下行<br>constructor(props)<br>{<br>  super(props);<br>  // …<br>} 2.事件监听器(通过 addEventListener()分配时)的作用域不正确，因为 ES6 不提供自动绑定。因此，开发人员可以在构造函数中重新分配 clickHandler 来包含正确的绑定:<br>constructor(props)<br>{<br>  super(props);<br>  this.clickHandler = this.clickHandler.bind(this);<br>  // …<br>}</p>\n<h3 id=\"问题-13：为什么不直接更新-state-呢\"><a href=\"#问题-13：为什么不直接更新-state-呢\" class=\"headerlink\" title=\"问题 13：为什么不直接更新  state  呢 ?\"></a>问题 13：为什么不直接更新  state  呢 ?</h3><p>如果试图直接更新  state ，则不会重新渲染组件。<br>// 错误<br> This.state.message = ‘Hello world’;<br>需要使用 setState()方法来更新  state。它调度对组件 state 对象的更新。当 state 改变时，组件通过重新渲染来响应：<br>// 正确做法<br>This.setState({message: ‘Hello World’});</p>\n<h3 id=\"问题-14：React-组件生命周期有哪些不同阶段？\"><a href=\"#问题-14：React-组件生命周期有哪些不同阶段？\" class=\"headerlink\" title=\"问题 14：React 组件生命周期有哪些不同阶段？\"></a>问题 14：React 组件生命周期有哪些不同阶段？</h3><p>在组件生命周期中有四个不同的阶段：<br>1.  <br><strong>Initialization</strong>：在这个阶段，组件准备设置初始化状态和默认属性。<br>2.  <br><strong>Mounting</strong>：react<br>组件已经准备好挂载到浏览器 DOM 中。这个阶段包括 componentWillMount 和 componentDidMount 生命周期方法。<br>3.  <br><strong>Updating</strong>：在这个阶段，组件以两种方式更新，发送新的 props 和 state 状态。此阶段包括 shouldComponentUpdate、componentWillUpdate 和 componentDidUpdate 生命周期方法。<br>4.  <br><strong>Unmounting</strong>：在这个阶段，组件已经不再被需要了，它从浏览器 DOM 中卸载下来。这个阶段包含  componentWillUnmount 生命周期方法。<br>除以上四个常用生命周期外，还有一个错误处理的阶段：<br><strong>Error Handling</strong>：在这个阶段，不论在渲染的过程中，还是在生命周期方法中或是在任何子组件的构造函数中发生错误，该组件都会被调用。这个阶段包含了  componentDidCatch 生命周期方法。</p>\n<h3 id=\"问题-15：React-的生命周期方法有哪些？\"><a href=\"#问题-15：React-的生命周期方法有哪些？\" class=\"headerlink\" title=\"问题 15：React 的生命周期方法有哪些？\"></a>问题 15：React 的生命周期方法有哪些？</h3><p>·      componentWillMount:在渲染之前执行，用于根组件中的 App 级配置。<br>·      componentDidMount：在第一次渲染之后执行，可以在这里做 AJAX 请求，DOM 的操作或状态更新以及设置事件监听器。<br>·      componentWillReceiveProps：在初始化 render 的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染<br>·      shouldComponentUpdate：确定是否更新组件。默认情况下，它返回 true。如果确定在  state 或  props 更新后组件不需要在重新渲染，则可以返回 false，这是一个提高性能的方法。<br>·      componentWillUpdate：在 shouldComponentUpdate 返回  true 确定要更新组件之前件之前执行。<br>·      componentDidUpdate：它主要用于更新 DOM 以响应 props 或 state 更改。<br>·      componentWillUnmount：它用于取消任何的网络请求，或删除与组件关联的所有事件监听器。</p>\n<h3 id=\"问题-16：这三个点-…-在-React-干嘛用的？\"><a href=\"#问题-16：这三个点-…-在-React-干嘛用的？\" class=\"headerlink\" title=\"问题 16：这三个点(…)在 React 干嘛用的？\"></a>问题 16：这三个点(…)在 React 干嘛用的？</h3><p>… 在 React（使用 JSX）代码中做什么？它叫什么？<br>&lt;Modal {…this.props} title=’Modal heading’  animation={false}/&gt;<br>这个叫扩展操作符号或者展开操作符，例如，如果 this.props 包含 a：1 和 b：2，则<br>&lt;Modal {…this.props} title=’Modal heading’ animation={false}&gt;<br>等价于下面内容：<br><Modal a={this.props.a} b={this.props.b} title='Modal heading' animation={false}><br>扩展符号不仅适用于该用例，而且对于创建具有现有对象的大多数（或全部）属性的新对象非常方便，在更新 state 咱们就经常这么做：<br>this.setState(prevState =&gt; {<br>    return {foo: {…prevState.foo, a: “updated”}};<br>});</p>\n<h3 id=\"问题-17：使用-React\"><a href=\"#问题-17：使用-React\" class=\"headerlink\" title=\"问题 17：使用 React\"></a>问题 17：使用 React</h3><p>Hooks 好处是啥？<br>首先，Hooks 通常支持提取和重用跨多个组件通用的有状态逻辑，而无需承担高阶组件或渲染  props 的负担。Hooks 可以轻松地操作函数组件的状态，而不需要将它们转换为类组件。<br>Hooks 在类中不起作用，通过使用它们，咱们可以完全避免使用生命周期方法，例如  componentDidMount、componentDidUpdate、componentWillUnmount。相反，使用像 useEffect 这样的内置钩子。</p>\n<h3 id=\"问题-18：什么是-ReactHooks？\"><a href=\"#问题-18：什么是-ReactHooks？\" class=\"headerlink\" title=\"问题 18：什么是 ReactHooks？\"></a>问题 18：什么是 ReactHooks？</h3><p><strong>Hooks</strong>是<br>React 16.8 中的新添加内容。它们允许在不编写类的情况下使用 state 和其他<br>React 特性。使用 Hooks，可以从组件中提取有状态逻辑，这样就可以独立地测试和重用它。Hooks 允许咱们在不改变组件层次结构的情况下重用有状态逻辑，这样在许多组件之间或与社区共享 Hooks 变得很容易。</p>\n<h3 id=\"问题-19：React-中的-useState-是什么？\"><a href=\"#问题-19：React-中的-useState-是什么？\" class=\"headerlink\" title=\"问题 19：React 中的  useState()  是什么？\"></a>问题 19：React 中的  useState()  是什么？</h3><p>下面说明 useState(0)的用途：<br>…<br>const [count, setCounter] = useState(0);<br>const [moreStuff, setMoreStuff] = useState(…);<br>…<br>const setCount = () =&gt; {<br>    setCounter(count + 1);<br>    setMoreStuff(…);<br>    …<br>};<br>useState 是一个内置的 React Hook。useState(0) 返回一个元组，其中第一个参数 count 是计数器的当前状态，setCounter 提供更新计数器状态的方法。<br>咱们可以在任何地方使用 setCounter 方法更新计数状态-在这种情况下，咱们在 setCount 函数内部使用它可以做更多的事情，使用 Hooks，能够使咱们的代码保持更多功能，还可以避免过多使用基于类的组件。</p>\n<h3 id=\"问题-20：React-中的-StrictMode-严格模式-是什么？？\"><a href=\"#问题-20：React-中的-StrictMode-严格模式-是什么？？\" class=\"headerlink\" title=\"问题 20：React 中的 StrictMode(严格模式)是什么？？\"></a>问题 20：React 中的 StrictMode(严格模式)是什么？？</h3><p>React 的 StrictMode 是一种辅助组件，可以帮助咱们编写更好的<br>react 组件，可以使用<StrictMode />包装一组组件，并且可以帮咱们以下检查：<br>·      验证内部组件是否遵循某些推荐做法，如果没有，会在控制台给出警告。<br>·      验证是否使用的已经废弃的方法，如果有，会在控制台给出警告。<br>·      通过识别潜在的风险预防一些副作用。</p>\n<h3 id=\"问题-21：为什么类方法需要绑定到类实例？\"><a href=\"#问题-21：为什么类方法需要绑定到类实例？\" class=\"headerlink\" title=\"问题 21：为什么类方法需要绑定到类实例？\"></a>问题 21：为什么类方法需要绑定到类实例？</h3><p>在 JS 中，this 值会根据当前上下文变化。在 React 类组件方法中，开发人员通常希望  this 引用组件的当前实例，因此有必要将这些方法绑定到实例。通常这是在构造函数中完成的:<br>class SubmitButton extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      isFormSubmitted: false<br>    };<br>    this.handleSubmit = this.handleSubmit.bind(this);<br>  }<br>  handleSubmit() {<br>    this.setState({<br>      isFormSubmitted: true<br>    });<br>  }<br>  render() {<br>    return (<br>      <button onClick={this.handleSubmit}>Submit</button><br>    )<br>  }<br>}</p>\n<h3 id=\"问题-22：什么是-prop\"><a href=\"#问题-22：什么是-prop\" class=\"headerlink\" title=\"问题 22：什么是 prop\"></a>问题 22：什么是 prop</h3><p>drilling，如何避免？<br>在构建 React 应用程序时，在多层嵌套组件来使用另一个嵌套组件提供的数据。最简单的方法是将一个  prop 从每个组件一层层的传递下去，从源组件传递到深层嵌套组件，这叫做<strong>prop drilling</strong>。<br>prop drilling 的主要缺点是原本不需要数据的组件变得不必要地复杂，并且难以维护。<br>为了避免 prop drilling，一种常用的方法是使用<strong>React<br>Context</strong>。通过定义提供数据的 Provider 组件，并允许嵌套的组件通过 Consumer 组件或 useContext Hook 使用上下文数据。</p>\n<h3 id=\"问题-23：描述-Flux-与-MVC？\"><a href=\"#问题-23：描述-Flux-与-MVC？\" class=\"headerlink\" title=\"问题 23：描述 Flux 与 MVC？\"></a>问题 23：描述 Flux 与 MVC？</h3><p>传统的 MVC 模式在分离数据(Model)、UI(View 和逻辑(Controller)方面工作得很好，但是 MVC 架构经常遇到两个主要问题:<br><strong>数据流不够清晰</strong>:跨视图发生的级联更新常常会导致混乱的事件网络，难于调试。<br><strong>缺乏数据完整性</strong>:模型数据可以在任何地方发生突变，从而在整个 UI 中产生不可预测的结果。<br>使用 Flux 模式的复杂用户界面不再遭受级联更新，任何给定的 React 组件都能够根据  store 提供的数据重建其状态。Flux 模式还通过限制对共享数据的直接访问来加强数据完整性。</p>\n<h3 id=\"问题-24：受控组件和非受控组件区别是啥？\"><a href=\"#问题-24：受控组件和非受控组件区别是啥？\" class=\"headerlink\" title=\"问题 24：受控组件和非受控组件区别是啥？\"></a>问题 24：受控组件和非受控组件区别是啥？</h3><p>·      <strong>受控组件</strong>是<br>React 控制中的组件，并且是表单数据真实的唯一来源。<br>·      非受控组件是由 DOM 处理表单数据的地方，而不是在 React 组件中。<br>尽管非受控组件通常更易于实现，因为只需使用 refs 即可从<br>DOM 中获取值，但通常建议优先选择受控制的组件，而不是非受控制的组件。<br>这样做的主要原因是受控组件支持即时字段验证，允许有条件地禁用/启用按钮，强制输入格式。</p>\n<h3 id=\"问题-25：这段代码有什么问题吗？\"><a href=\"#问题-25：这段代码有什么问题吗？\" class=\"headerlink\" title=\"问题 25：这段代码有什么问题吗？\"></a>问题 25：这段代码有什么问题吗？</h3><p>这段代码有什么问题:<br>this.setState((prevState, props) =&gt; {<br>  return {<br>    streak: prevState.streak + props.count<br>  }<br>})<br><strong>答案：</strong><br>没有什么问题。这种方式很少被使用，咱们可以将一个函数传递给 setState，该函数接收上一个  state 的值和当前的 props，并返回一个新的状态，如果咱们需要根据以前的状态重新设置状态，推荐使用这种方式。</p>\n<h3 id=\"问题-26：什么是-React\"><a href=\"#问题-26：什么是-React\" class=\"headerlink\" title=\"问题 26：什么是 React\"></a>问题 26：什么是 React</h3><p>Context?<br>Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递  props 属性。</p>\n<h3 id=\"问题-27：什么是-React\"><a href=\"#问题-27：什么是-React\" class=\"headerlink\" title=\"问题 27：什么是 React\"></a>问题 27：什么是 React</h3><p>Fiber?<br><strong>Fiber</strong> 是<br>React 16 中新的协调引擎或重新实现核心算法。它的主要目标是支持虚拟 DOM 的增量渲染。<strong>React Fiber</strong> 的目标是提高其在动画、布局、手势、暂停、中止或重用等方面的适用性，并为不同类型的更新分配优先级，以及新的并发原语。<br>React Fiber 的目标是增强其在动画、布局和手势等领域的适用性。它的主要特性是增量渲染:能够将渲染工作分割成块，并将其分散到多个帧中。</p>\n<h3 id=\"问题-28：如何在\"><a href=\"#问题-28：如何在\" class=\"headerlink\" title=\"问题 28：如何在\"></a>问题 28：如何在</h3><p>ReactJS 的 Props 上应用验证？<br>当应用程序在开发模式下运行时，React 将自动检查咱们在组件上设置的所有  props，以确保它们具有正确的数据类型。对于不正确的类型，开发模式下会在控制台中生成警告消息，而在生产模式中由于性能影响而禁用它。强制的  props 用  isRequired 定义的。<br>下面是一组预定义的 prop 类型:<br>·      React.PropTypes.string<br>·      React.PropTypes.number<br>·      React.PropTypes.func<br>·      React.PropTypes.node<br>·      React.PropTypes.bool<br>例如，咱们为用户组件定义了如下的 propTypes<br>import PropTypes from ‘prop-types’;<br>class User extends React.Component {<br>  render() {<br>    return (<br>      <h1>Welcome, {this.props.name}</h1><br>      <h2>Age, {this.props.age}<br>    );<br>  }<br>}<br>User.propTypes = {<br>  name: PropTypes.string.isRequired,<br>  age: PropTypes.number.isRequired<br>};</p>\n<h3 id=\"问题-29：在-React-中使用构造函数和-getInitialState-有什么区别？\"><a href=\"#问题-29：在-React-中使用构造函数和-getInitialState-有什么区别？\" class=\"headerlink\" title=\"问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？\"></a>问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？</h3><p>构造函数和 getInitialState 之间的区别就是 ES6 和 ES5 本身的区别。在使用 ES6 类时，应该在构造函数中初始化 state，并在使用 React.createClass 时定义 getInitialState 方法。<br>class MyComponent extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = { /_ initial state <em>/ };<br>  }<br>}<br>等价于：<br>var MyComponent = React.createClass({<br>  getInitialState() {<br>    return { /</em> initial state _/ };<br>  },<br>});</p>\n<h3 id=\"问题-30：如何有条件地向\"><a href=\"#问题-30：如何有条件地向\" class=\"headerlink\" title=\"问题 30：如何有条件地向\"></a>问题 30：如何有条件地向</h3><p>React 组件添加属性？<br>对于某些属性，React 非常聪明，如果传递给它的值是虚值，可以省略该属性。例如：<br>var InputComponent = React.createClass({<br>    render: function() {<br>      var required = true;<br>      var disabled = false;<br>      return (<br>        <input\ntype=\"text\" disabled={disabled} required={required} /><br>      );<br>    }<br>});<br>渲染结果：<br><input type=\"text\" required><br>另一种可能的方法是：<br>var condition = true;<br>var component = (<br>  &lt;div<br>    value=”foo”<br>    { …( condition &amp;&amp; { disabled: true } ) } /&gt;<br>);</p>\n<h3 id=\"问题-31：Hooks-会取代-render-props-和高阶组件吗？\"><a href=\"#问题-31：Hooks-会取代-render-props-和高阶组件吗？\" class=\"headerlink\" title=\"问题 31：Hooks 会取代  render props  和高阶组件吗？\"></a>问题 31：Hooks 会取代  render props  和高阶组件吗？</h3><p>通常，render props 和高阶组件仅渲染一个子组件。React 团队认为，Hooks 是服务此用例的更简单方法。<br>这两种模式仍然有一席之地(例如，一个虚拟的  scroller 组件可能有一个  renderItem prop，或者一个可视化的容器组件可能有它自己的 DOM 结构)。但在大多数情况下，Hooks<br>就足够了，可以帮助减少树中的嵌套。</p>\n<h3 id=\"问题-32：如何避免组件的重新渲染？\"><a href=\"#问题-32：如何避免组件的重新渲染？\" class=\"headerlink\" title=\"问题 32：如何避免组件的重新渲染？\"></a>问题 32：如何避免组件的重新渲染？</h3><p>React 中最常见的问题之一是组件不必要地重新渲染。React 提供了两个方法，在这些情况下非常有用：<br>·      React.memo():这可以防止不必要地重新渲染函数组件<br>·      PureComponent:这可以防止不必要地重新渲染类组件<br>这两种方法都依赖于对传递给组件的 props 的浅比较，如果  props 没有改变，那么组件将不会重新渲染。虽然这两种工具都非常有用，但是浅比较会带来额外的性能损失，因此如果使用不当，这两种方法都会对性能产生负面影响。<br>通过使用 <strong>React Profiler</strong>，可以在使用这些方法前后对性能进行测量，从而确保通过进行给定的更改来实际改进性能。</p>\n<h3 id=\"问题-33：什么是纯函数？\"><a href=\"#问题-33：什么是纯函数？\" class=\"headerlink\" title=\"问题 33：什么是纯函数？\"></a>问题 33：什么是纯函数？</h3><p>纯函数是不依赖并且不会在其作用域之外修改变量状态的函数。本质上，纯函数始终在给定相同参数的情况下返回相同结果。</p>\n<h3 id=\"问题-34：当调用-setState-时，React-render-是如何工作的？\"><a href=\"#问题-34：当调用-setState-时，React-render-是如何工作的？\" class=\"headerlink\" title=\"问题 34：当调用 setState 时，React render  是如何工作的？\"></a>问题 34：当调用 setState 时，React render  是如何工作的？</h3><p>咱们可以将”render”分为两个步骤：<br>1.  <br>虚拟 DOM 渲染:当 render 方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用 setState()时，render 会被再次调用，因为默认情况下 shouldComponentUpdate 总是返回 true，所以默认情况下 React 是没有优化的。<br>2.  <br>原生 DOM 渲染:React<br>只会在虚拟 DOM 中修改真实 DOM 节点，而且修改的次数非常少——这是很棒的 React 特性，它优化了真实 DOM 的变化，使 React 变得更快。</p>\n<h3 id=\"问题-35：如何避免在-React-重新绑定实例？\"><a href=\"#问题-35：如何避免在-React-重新绑定实例？\" class=\"headerlink\" title=\"问题 35：如何避免在 React 重新绑定实例？\"></a>问题 35：如何避免在 React 重新绑定实例？</h3><p>有几种常用方法可以避免在 React 中绑定方法： 1.将事件处理程序定义为内联箭头函数<br>class SubmitButton extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      isFormSubmitted: false<br>    };<br>  }<br>  render() {<br>    return (<br>      &lt;button onClick={() =&gt; {<br>        this.setState({ isFormSubmitted: true });<br>      }}&gt;Submit</button><br>    )<br>  }<br>} 2.使用箭头函数来定义方法：<br>class SubmitButton extends React.Component {<br>  state = {<br>    isFormSubmitted: false<br>  }<br>  handleSubmit = () =&gt; {<br>    this.setState({<br>      isFormSubmitted: true<br>    });<br>  }<br>  render() {<br>    return (<br>      <button onClick={this.handleSubmit}>Submit</button><br>    )<br>  }<br>} 3.使用带有 Hooks 的函数组件<br>const SubmitButton = () =&gt; {<br>  const [isFormSubmitted, setIsFormSubmitted] = useState(false);<br>  return (<br>    &lt;button onClick={() =&gt; {<br>        setIsFormSubmitted(true);<br>    }}&gt;Submit</button><br>  )<br>};</p>\n"},{"title":"2022 年度计划","urlname":"xl0on9","date":"2022-01-09T15:21:46.000Z","abbrlink":2860160904,"_content":"\n{\"format\":\"laketable\",\"type\":\"Table\",\"version\":\"1.2\",\"larkJson\":true,\"sheet\":\"xµXÛnÛV\\u0016ý\\u0017öÕ\\u000f¨«ßt¡(¬\\u000b%E\\nôÀËÑ!!JÈÃ\\u0002?¤¦Nt2h1c \\u001d´\\rÐ¤EÑ\\u001a\\u0003\\u00183Ìü%;Oý!e\\f\\r§¤;SèE´×^{s6×:ÚwïaªbRíßÅDÇ­23p\\u000e²­OÌ$//\\u0014MLà,H\\u001b&¶MXÄk\\\\¤\\rYYÂyÊÆ3JJWA\\u001açÅÜ\\f9\\u0010ÖHX©\\tÔ'\\u001c¿4L.qº\\u000eÍ)©4Ë¥\\u001cÍ¹\\u0004LX²ÈOÍÅTäq.\\u000f\\ry5[i¶\\u000e\\rÕÉ\\u001aÙé\\u0019J½Ó(Ø\\u0003+¥É¶e$\\f¦Wa8\\u0007¢f3\\u001cÄí\\u0015W*âd=Ý[¨\\u0000tS#*S \\u0001=!\\u001cË\\u000e¥\\fì´í:Ý\\u001b\\u0012}6¡Y\\u0006àÔ<Íd\\u000b³¨t§T^vå^3\\u000fd½\\u0005ê\\\"RB69Èµ\\u0011Oº\\u0015c\\u0003Ê\\u000e¨\\u00019Ýn³F\\f\\u000e~1»¤æLÛr!\\u0004[ìµ*\\tI>Ëi\\u001d(a\\u0016ó~³ÏKîÖÉFGL\\u0006j<Ù\\u0004<Pøt¿#s\\u0002`³4Z9yË¥ö*ÇèE-\\u0005³«MgQQïèí%¢yÂ\\u0014E®¡Q¹6Ù+\\u001bCºÉP\\u0016(TT!\\u0005\\u001b@L]\\u0016s¥5dÛ&LZ\\u001c\\nEº_iÉr«b\\f\\f£W§sEÚ(LmbeÚË\\u0016=JÃ¥Ñf®9R8®ïö);ï&b\\u0019«³T\\n³Ù¼»T\\u0014¢·d¾V.\\u0017V=&QjqØxÏm²¢Ï\\u0011¶Ìîa¼\\\"ë³¹ÛI÷°9;\\u0003Ø>vþË«·Ï\\u001d6d/Ügi¾ÐÝ\\u001eæ\\u0002°°ýóMpþ Si¦ÊçUº4j¢uÑÕÕ:KV\\u0015\\u001dîùë£\\u0007\\u0017ÿx\\u0015Pj@\\u0006¼Ëé¤WTl\\u001f©:ð\\u0013$¥.¤xU\\u0019¬¬»1\\u001f½YúåæÏO×O>Á¼\\u001a\\n{«\\u0007û ZªàÄ6·\\u001fxrÿüåóõ§ßlî\\u0002!sÐaëï\\u0006\\u0012ùJ¦\\\\\\n\\u0005®*®Ï¿=þøòäÕ.PN\\u0001«IE\\u0004^ýxþæóõýïÖgÿÚ\\u00056óÓ\\nÌJÍ\\u0011R9\\u0014xñðËÓï/O­O\\u001eï\\u00026mNñw\\u0003Ëi\\\"]ÍKýùë³.¾øzsêZÑ\\u0007x¯\\u0014.Õý`c\\u000f!pF.\\u000f\\u0010L0D½ÖT([¯\\u000fgÙ\\n°6J}*t??vöoó·ï6_}\\u001d\\u001c¤À\\\"\\u0010´FÊãÍ.ÈTì\\r\\u000bp*(´Íµ\\t¶T\\u0015ÉÚ²\\u000bNéð\\u0006Þ¯|\\u001bðò\\\"à§b\\u0005Ü¸ÇiTr\\u0016%ò¢©Ô^n\\u0002ib\\u0004á ¿q(ßÝ-÷\\u0016©\\u0016Ý¢\\u0006ô0¡\\u0017¡£d\\u0007¦\\u0005\\u000e\\u0006`0\\u0012\\r½h÷\\u0003îôÞ®Ëç\\u0017¯\\u001e\\\\n?\\u000bªAÀB¬\\nØ»1Ó%hâDmZ¦tq8§ÐðÊhR!8É\\u0005Ü\\u0019ûªÎ*\\u001f¯?>º8{qÃÛpSÛ¿ýñxw íÚYt\\\"ºýüvx=!VÔE¨\\u0001ÒÕ\\\\%\\u0015Æ¿ùl\\u00172ÆDÍÝÔ¢ãÐê=z*â\\u0000&¬.£¾\\u0004L·ï*$¢¤Æ*Tw((É:}ZXÒiWVY\\u001eI\\u0006ßgÄ\\u0003è'eÀê8^!ÁPdæ,-µ;\\u0010èÐ=OÃat¶ï^4ç¾w1;yu$WUDÙ ß#\\u001atj)úÈH'ñ.ê##mÐGFºaÀ\\u0019eÐ\\u00012Ê§\\u0003dÔíÂGF©4o\\u001f\\u0019é¾Á\\u0019E°¼»ùÈÈ+÷Nú^\\u001eÏ¢÷0MZ9\\*§Ó·¶« d>\\u0011t[øAÙT|ö±\\f%¦=8\\u001b5Q\\u0015\\u0015ùê6ãßkv&ðí÷o^*¾x°þòß¿¾>ºøðåæè/ë£O6Oýúú¡«Û,'\\u0003\\*¦&M$\\u0019\\u0001Õ\\u0015@ÞÇ®Ö\\u0003E[eç³\\u0000LST\\u0014Å?\\u0011ÏIXw\\u0016xè?\\u001dªân=bÑV\\u0016#wg\\u001fsÊâÁ\\u001c]\\u0003\\u0006\\u0013\\u001c¹÷.8·\\u0000\\rU®î\\u0002Mç¸ûÖ92¡ªè`¡1º(´P ÜüÎú\\u000e·b]\\u0003\\u0012\\u0014·;éeÅñÝívëwûáÙC'&q01ËUègÈé\\u0001Í\\u000f\\u0018-\\fd¶XoÍùJõÍ\\\"\\u0012xÝ,þ/øím%¾UÅÖøVu\\u000b\\u0003ú#Ìâ\\u000f0µøf\\u0011ß¦ã[U´\\u0001ýN\\u000b\\u0010%A\\u0000slÂÊ\\u001a¸¢ï\\u0002·wÂ[ÜºoN\\u0018©3ïI\\u0018©iïK\\u0018CVÃã\\u001b¼ââ«G¿ÿÇ÷Í\\u0017'Ç÷×OÿtñâÉæÑ_7Þ\\\\w÷9o\\u0000s]}£ÍR±Ý^)}qtTý­ßÑ`ÅQÄ\\u0018Ä\\u0018©Ä\\u0019ÌDwb\\fbbÌ´\\\"åv·Ñ%;¦IH\\u0006ý«Ã¸»`c`±;¡\\u0018#¢\\u0018³¨H©ÿßÖã\\rV¶ë\\tÿÇ÷Þ7_Ù­3RèÂ\\u0015µszCq@\\u001eéÈ!òkó0¹7y<ÒÄCä×f6arox\\u0013B¯Á1ì\\u001d\\u0013¢Y,ìË\\u0011\\u0019@ÛÌöJèÎØ<iÙO\\u001e\\u001eÿ\\u000bíe±ù\"}\n","source":"_posts/语雀/xl0on9.md","raw":"---\ntitle: 2022 年度计划\nurlname: xl0on9\ndate: '2022-01-09 23:21:46 +0800'\ntags: []\ncategories: []\nabbrlink: 2860160904\n---\n\n{\"format\":\"laketable\",\"type\":\"Table\",\"version\":\"1.2\",\"larkJson\":true,\"sheet\":\"xµXÛnÛV\\u0016ý\\u0017öÕ\\u000f¨«ßt¡(¬\\u000b%E\\nôÀËÑ!!JÈÃ\\u0002?¤¦Nt2h1c \\u001d´\\rÐ¤EÑ\\u001a\\u0003\\u00183Ìü%;Oý!e\\f\\r§¤;SèE´×^{s6×:ÚwïaªbRíßÅDÇ­23p\\u000e²­OÌ$//\\u0014MLà,H\\u001b&¶MXÄk\\\\¤\\rYYÂyÊÆ3JJWA\\u001açÅÜ\\f9\\u0010ÖHX©\\tÔ'\\u001c¿4L.qº\\u000eÍ)©4Ë¥\\u001cÍ¹\\u0004LX²ÈOÍÅTäq.\\u000f\\ry5[i¶\\u000e\\rÕÉ\\u001aÙé\\u0019J½Ó(Ø\\u0003+¥É¶e$\\f¦Wa8\\u0007¢f3\\u001cÄí\\u0015W*âd=Ý[¨\\u0000tS#*S \\u0001=!\\u001cË\\u000e¥\\fì´í:Ý\\u001b\\u0012}6¡Y\\u0006àÔ<Íd\\u000b³¨t§T^vå^3\\u000fd½\\u0005ê\\\"RB69Èµ\\u0011Oº\\u0015c\\u0003Ê\\u000e¨\\u00019Ýn³F\\f\\u000e~1»¤æLÛr!\\u0004[ìµ*\\tI>Ëi\\u001d(a\\u0016ó~³ÏKîÖÉFGL\\u0006j<Ù\\u0004<Pøt¿#s\\u0002`³4Z9yË¥ö*ÇèE-\\u0005³«MgQQïèí%¢yÂ\\u0014E®¡Q¹6Ù+\\u001bCºÉP\\u0016(TT!\\u0005\\u001b@L]\\u0016s¥5dÛ&LZ\\u001c\\nEº_iÉr«b\\f\\f£W§sEÚ(LmbeÚË\\u0016=JÃ¥Ñf®9R8®ïö);ï&b\\u0019«³T\\n³Ù¼»T\\u0014¢·d¾V.\\u0017V=&QjqØxÏm²¢Ï\\u0011¶Ìîa¼\\\"ë³¹ÛI÷°9;\\u0003Ø>vþË«·Ï\\u001d6d/Ügi¾ÐÝ\\u001eæ\\u0002°°ýóMpþ Si¦ÊçUº4j¢uÑÕÕ:KV\\u0015\\u001dîùë£\\u0007\\u0017ÿx\\u0015Pj@\\u0006¼Ëé¤WTl\\u001f©:ð\\u0013$¥.¤xU\\u0019¬¬»1\\u001f½YúåæÏO×O>Á¼\\u001a\\n{«\\u0007û ZªàÄ6·\\u001fxrÿüåóõ§ßlî\\u0002!sÐaëï\\u0006\\u0012ùJ¦\\\\\\n\\u0005®*®Ï¿=þøòäÕ.PN\\u0001«IE\\u0004^ýxþæóõýïÖgÿÚ\\u00056óÓ\\nÌJÍ\\u0011R9\\u0014xñðËÓï/O­O\\u001eï\\u00026mNñw\\u0003Ëi\\\"]ÍKýùë³.¾øzsêZÑ\\u0007x¯\\u0014.Õý`c\\u000f!pF.\\u000f\\u0010L0D½ÖT([¯\\u000fgÙ\\n°6J}*t??vöoó·ï6_}\\u001d\\u001c¤À\\\"\\u0010´FÊãÍ.ÈTì\\r\\u000bp*(´Íµ\\t¶T\\u0015ÉÚ²\\u000bNéð\\u0006Þ¯|\\u001bðò\\\"à§b\\u0005Ü¸ÇiTr\\u0016%ò¢©Ô^n\\u0002ib\\u0004á ¿q(ßÝ-÷\\u0016©\\u0016Ý¢\\u0006ô0¡\\u0017¡£d\\u0007¦\\u0005\\u000e\\u0006`0\\u0012\\r½h÷\\u0003îôÞ®Ëç\\u0017¯\\u001e\\\\n?\\u000bªAÀB¬\\nØ»1Ó%hâDmZ¦tq8§ÐðÊhR!8É\\u0005Ü\\u0019ûªÎ*\\u001f¯?>º8{qÃÛpSÛ¿ýñxw íÚYt\\\"ºýüvx=!VÔE¨\\u0001ÒÕ\\\\%\\u0015Æ¿ùl\\u00172ÆDÍÝÔ¢ãÐê=z*â\\u0000&¬.£¾\\u0004L·ï*$¢¤Æ*Tw((É:}ZXÒiWVY\\u001eI\\u0006ßgÄ\\u0003è'eÀê8^!ÁPdæ,-µ;\\u0010èÐ=OÃat¶ï^4ç¾w1;yu$WUDÙ ß#\\u001atj)úÈH'ñ.ê##mÐGFºaÀ\\u0019eÐ\\u00012Ê§\\u0003dÔíÂGF©4o\\u001f\\u0019é¾Á\\u0019E°¼»ùÈÈ+÷Nú^\\u001eÏ¢÷0MZ9\\*§Ó·¶« d>\\u0011t[øAÙT|ö±\\f%¦=8\\u001b5Q\\u0015\\u0015ùê6ãßkv&ðí÷o^*¾x°þòß¿¾>ºøðåæè/ë£O6Oýúú¡«Û,'\\u0003\\*¦&M$\\u0019\\u0001Õ\\u0015@ÞÇ®Ö\\u0003E[eç³\\u0000LST\\u0014Å?\\u0011ÏIXw\\u0016xè?\\u001dªân=bÑV\\u0016#wg\\u001fsÊâÁ\\u001c]\\u0003\\u0006\\u0013\\u001c¹÷.8·\\u0000\\rU®î\\u0002Mç¸ûÖ92¡ªè`¡1º(´P ÜüÎú\\u000e·b]\\u0003\\u0012\\u0014·;éeÅñÝívëwûáÙC'&q01ËUègÈé\\u0001Í\\u000f\\u0018-\\fd¶XoÍùJõÍ\\\"\\u0012xÝ,þ/øím%¾UÅÖøVu\\u000b\\u0003ú#Ìâ\\u000f0µøf\\u0011ß¦ã[U´\\u0001ýN\\u000b\\u0010%A\\u0000slÂÊ\\u001a¸¢ï\\u0002·wÂ[ÜºoN\\u0018©3ïI\\u0018©iïK\\u0018CVÃã\\u001b¼ââ«G¿ÿÇ÷Í\\u0017'Ç÷×OÿtñâÉæÑ_7Þ\\\\w÷9o\\u0000s]}£ÍR±Ý^)}qtTý­ßÑ`ÅQÄ\\u0018Ä\\u0018©Ä\\u0019ÌDwb\\fbbÌ´\\\"åv·Ñ%;¦IH\\u0006ý«Ã¸»`c`±;¡\\u0018#¢\\u0018³¨H©ÿßÖã\\rV¶ë\\tÿÇ÷Þ7_Ù­3RèÂ\\u0015µszCq@\\u001eéÈ!òkó0¹7y<ÒÄCä×f6arox\\u0013B¯Á1ì\\u001d\\u0013¢Y,ìË\\u0011\\u0019@ÛÌöJèÎØ<iÙO\\u001e\\u001eÿ\\u000bíe±ù\"}\n","slug":"语雀/xl0on9","published":1,"updated":"2022-03-03T11:26:07.597Z","_id":"cl0awjjpn001a081bap2c7u51","comments":1,"layout":"post","photos":[],"link":"","content":"<p>{“format”:”laketable”,”type”:”Table”,”version”:”1.2”,”larkJson”:true,”sheet”:”xµXÛnÛV\\u0016ý\\u0017öÕ\\u000f¨«ßt¡(¬\\u000b%E\\nôÀËÑ!!JÈÃ\\u0002?¤¦Nt2h1c \\u001d´\\rÐ¤EÑ\\u001a\\u0003\\u00183Ìü%;Oý!e\\f\\r§¤;SèE´×^{s6×:ÚwïaªbRíßÅDÇ­23p\\u000e²­OÌ$//\\u0014MLà,H\\u001b&amp;¶MXÄk\\¤\\rYYÂyÊÆ3JJWA\\u001açÅÜ\\f9\\u0010ÖHX©\\tÔ’\\u001c¿4L.qº\\u000eÍ)©4Ë¥\\u001cÍ¹\\u0004LX²ÈOÍÅTäq.\\u000f\\ry5[i¶\\u000e\\rÕÉ\\u001aÙé\\u0019J½Ó(Ø\\u0003+¥É¶e$\\f¦Wa8\\u0007¢f3\\u001cÄí\\u0015W<em>âd=Ý[¨\\u0000tS#<em>S \\u0001=!\\u001cË\\u000e¥\\fì´í:Ý\\u001b\\u0012}6¡Y\\u0006àÔ&lt;Íd\\u000b³¨t§T^vå^3\\u000fd½\\u0005ê&quot;RB69Èµ\\u0011Oº\\u0015c\\u0003Ê\\u000e¨\\u00019Ýn³F\\f\\u000e<del>1»¤æLÛr!\\u0004[ìµ*\\tI&gt;Ëi\\u001d(a\\u0016ó</del>³ÏKîÖÉFGL\\u0006j&lt;Ù\\u0004&lt;Pøt¿#s\\u0002`³4Z9yË¥ö*ÇèE-\\u0005³«MgQQïèí%¢yÂ\\u0014E®¡Q¹6Ù+\\u001bCºÉP\\u0016(TT!\\u0005\\u001b@L]\\u0016s¥5dÛ&amp;LZ\\u001c\\nEº_iÉr«b\\f\\f£W§sEÚ(LmbeÚË\\u0016=JÃ¥Ñf®9R8®ïö);ï&amp;b\\u0019«³T\\n³Ù¼»T\\u0014¢·d¾V.\\u0017V=&amp;QjqØxÏm²¢Ï\\u0011¶Ìîa¼&quot;ë³¹ÛI÷°9;\\u0003Ø&gt;vþË«·Ï\\u001d6d/Ügi¾ÐÝ\\u001eæ\\u0002°°ýóMpþ Si¦ÊçUº4j¢uÑÕÕ:KV\\u0015\\u001dîùë£\\u0007\\u0017ÿx\\u0015Pj@\\u0006¼Ëé¤WTl\\u001f©:ð\\u0013$¥.¤xU\\u0019¬¬»1\\u001f½YúåæÏO×O&gt;Á¼\\u001a\\n{«\\u0007û ZªàÄ6·\\u001fxrÿüåóõ§ßlî\\u0002!sÐaëï\\u0006\\u0012ùJ¦\\\\n\\u0005®</em>®Ï¿=þøòäÕ.PN\\u0001«IE\\u0004^ýxþæóõýïÖgÿÚ\\u00056óÓ\\nÌJÍ\\u0011R9\\u0014xñðËÓï/O­O\\u001eï\\u00026mNñw\\u0003Ëi&quot;]ÍKýùë³.¾øzsêZÑ\\u0007x¯\\u0014.Õý<code>c\\u000f!pF.\\u000f\\u0010L0D½ÖT([¯\\u000fgÙ\\n°6J&#125;*t??vöoó·ï6_&#125;\\u001d\\u001c¤À\\&quot;\\u0010´FÊãÍ.ÈTì\\r\\u000bp*(´Íµ\\t¶T\\u0015ÉÚ²\\u000bNéð\\u0006Þ¯|\\u001bðò\\&quot;à§b\\u0005Ü¸ÇiTr\\u0016%ò¢©Ô^n\\u0002ib\\u0004á ¿q(ßÝ-÷\\u0016©\\u0016Ý¢\\u0006ô0¡\\u0017¡£d\\u0007¦\\u0005\\u000e\\u0006</code>0\\u0012\\r½h÷\\u0003îôÞ®Ëç\\u0017¯\\u001e\\n?\\u000bªAÀB¬\\nØ»1Ó%hâDmZ¦tq8§ÐðÊhR!8É\\u0005Ü\\u0019ûªÎ</em>\\u001f¯?&gt;º8{qÃÛpSÛ¿ýñxw íÚYt&quot;ºýüvx=!VÔE¨\\u0001ÒÕ\\%\\u0015Æ¿ùl\\u00172ÆDÍÝÔ¢ãÐê=z<em>â\\u0000&amp;¬.£¾\\u0004L·ï</em>$¢¤Æ<em>Tw((É:}ZXÒiWVY\\u001eI\\u0006ßgÄ\\u0003è’eÀê8^!ÁPdæ,-µ;\\u0010èÐ=OÃat¶ï^4ç¾w1;yu$WUDÙ ß#\\u001atj)úÈH’ñ.ê##mÐGFºaÀ\\u0019eÐ\\u00012Ê§\\u0003dÔíÂGF©4o\\u001f\\u0019é¾Á\\u0019E°¼»ùÈÈ+÷Nú^\\u001eÏ¢÷0MZ9*§Ó·¶« d&gt;\\u0011t[øAÙT|ö±\\f%¦=8\\u001b5Q\\u0015\\u0015ùê6ãßkv&amp;ðí÷o^</em>¾x°þòß¿¾&gt;ºøðåæè/ë£O6Oýúú¡«Û,’\\u0003*¦&amp;M$\\u0019\\u0001Õ\\u0015@ÞÇ®Ö\\u0003E[eç³\\u0000LST\\u0014Å?\\u0011ÏIXw\\u0016xè?\\u001dªân=bÑV\\u0016#wg\\u001fsÊâÁ\\u001c]\\u0003\\u0006\\u0013\\u001c¹÷.8·\\u0000\\rU®î\\u0002Mç¸ûÖ92¡ªè<code>¡1º(´P ÜüÎú\\u000e·b]\\u0003\\u0012\\u0014·;éeÅñÝívëwûáÙC&#39;&amp;q01ËUègÈé\\u0001Í\\u000f\\u0018-\\fd¶XoÍùJõÍ\\&quot;\\u0012xÝ,þ/øím%¾UÅÖøVu\\u000b\\u0003ú#Ìâ\\u000f0µøf\\u0011ß¦ã[U´\\u0001ýN\\u000b\\u0010%A\\u0000slÂÊ\\u001a¸¢ï\\u0002·wÂ[ÜºoN\\u0018©3ïI\\u0018©iïK\\u0018CVÃã\\u001b¼ââ«G¿ÿÇ÷Í\\u0017&#39;Ç÷×OÿtñâÉæÑ_7Þ\\\\w÷9o\\u0000s]&#125;£ÍR±Ý^)&#125;qtTý­ßÑ</code>ÅQÄ\\u0018Ä\\u0018©Ä\\u0019ÌDwb\\fbbÌ´&quot;åv·Ñ%;¦IH\\u0006ý«Ã¸»<code>c</code>±;¡\\u0018#¢\\u0018³¨H©ÿßÖã\\rV¶ë\\tÿÇ÷Þ7_Ù­3RèÂ\\u0015µszCq@\\u001eéÈ!òkó0¹7y&lt;ÒÄCä×f6arox\\u0013B¯Á1ì\\u001d\\u0013¢Y,ìË\\u0011\\u0019@ÛÌöJèÎØ&lt;iÙO\\u001e\\u001eÿ\\u000bíe±ù”}</p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p>{“format”:”laketable”,”type”:”Table”,”version”:”1.2”,”larkJson”:true,”sheet”:”xµXÛnÛV\\u0016ý\\u0017öÕ\\u000f¨«ßt¡(¬\\u000b%E\\nôÀËÑ!!JÈÃ\\u0002?¤¦Nt2h1c \\u001d´\\rÐ¤EÑ\\u001a\\u0003\\u00183Ìü%;Oý!e\\f\\r§¤;SèE´×^{s6×:ÚwïaªbRíßÅDÇ­23p\\u000e²­OÌ$//\\u0014MLà,H\\u001b&amp;¶MXÄk\\¤\\rYYÂyÊÆ3JJWA\\u001açÅÜ\\f9\\u0010ÖHX©\\tÔ’\\u001c¿4L.qº\\u000eÍ)©4Ë¥\\u001cÍ¹\\u0004LX²ÈOÍÅTäq.\\u000f\\ry5[i¶\\u000e\\rÕÉ\\u001aÙé\\u0019J½Ó(Ø\\u0003+¥É¶e$\\f¦Wa8\\u0007¢f3\\u001cÄí\\u0015W<em>âd=Ý[¨\\u0000tS#<em>S \\u0001=!\\u001cË\\u000e¥\\fì´í:Ý\\u001b\\u0012}6¡Y\\u0006àÔ&lt;Íd\\u000b³¨t§T^vå^3\\u000fd½\\u0005ê&quot;RB69Èµ\\u0011Oº\\u0015c\\u0003Ê\\u000e¨\\u00019Ýn³F\\f\\u000e<del>1»¤æLÛr!\\u0004[ìµ*\\tI&gt;Ëi\\u001d(a\\u0016ó</del>³ÏKîÖÉFGL\\u0006j&lt;Ù\\u0004&lt;Pøt¿#s\\u0002`³4Z9yË¥ö*ÇèE-\\u0005³«MgQQïèí%¢yÂ\\u0014E®¡Q¹6Ù+\\u001bCºÉP\\u0016(TT!\\u0005\\u001b@L]\\u0016s¥5dÛ&amp;LZ\\u001c\\nEº_iÉr«b\\f\\f£W§sEÚ(LmbeÚË\\u0016=JÃ¥Ñf®9R8®ïö);ï&amp;b\\u0019«³T\\n³Ù¼»T\\u0014¢·d¾V.\\u0017V=&amp;QjqØxÏm²¢Ï\\u0011¶Ìîa¼&quot;ë³¹ÛI÷°9;\\u0003Ø&gt;vþË«·Ï\\u001d6d/Ügi¾ÐÝ\\u001eæ\\u0002°°ýóMpþ Si¦ÊçUº4j¢uÑÕÕ:KV\\u0015\\u001dîùë£\\u0007\\u0017ÿx\\u0015Pj@\\u0006¼Ëé¤WTl\\u001f©:ð\\u0013$¥.¤xU\\u0019¬¬»1\\u001f½YúåæÏO×O&gt;Á¼\\u001a\\n{«\\u0007û ZªàÄ6·\\u001fxrÿüåóõ§ßlî\\u0002!sÐaëï\\u0006\\u0012ùJ¦\\\\n\\u0005®</em>®Ï¿=þøòäÕ.PN\\u0001«IE\\u0004^ýxþæóõýïÖgÿÚ\\u00056óÓ\\nÌJÍ\\u0011R9\\u0014xñðËÓï/O­O\\u001eï\\u00026mNñw\\u0003Ëi&quot;]ÍKýùë³.¾øzsêZÑ\\u0007x¯\\u0014.Õý<code>c\\u000f!pF.\\u000f\\u0010L0D½ÖT([¯\\u000fgÙ\\n°6J&#125;*t??vöoó·ï6_&#125;\\u001d\\u001c¤À\\&quot;\\u0010´FÊãÍ.ÈTì\\r\\u000bp*(´Íµ\\t¶T\\u0015ÉÚ²\\u000bNéð\\u0006Þ¯|\\u001bðò\\&quot;à§b\\u0005Ü¸ÇiTr\\u0016%ò¢©Ô^n\\u0002ib\\u0004á ¿q(ßÝ-÷\\u0016©\\u0016Ý¢\\u0006ô0¡\\u0017¡£d\\u0007¦\\u0005\\u000e\\u0006</code>0\\u0012\\r½h÷\\u0003îôÞ®Ëç\\u0017¯\\u001e\\n?\\u000bªAÀB¬\\nØ»1Ó%hâDmZ¦tq8§ÐðÊhR!8É\\u0005Ü\\u0019ûªÎ</em>\\u001f¯?&gt;º8{qÃÛpSÛ¿ýñxw íÚYt&quot;ºýüvx=!VÔE¨\\u0001ÒÕ\\%\\u0015Æ¿ùl\\u00172ÆDÍÝÔ¢ãÐê=z<em>â\\u0000&amp;¬.£¾\\u0004L·ï</em>$¢¤Æ<em>Tw((É:}ZXÒiWVY\\u001eI\\u0006ßgÄ\\u0003è’eÀê8^!ÁPdæ,-µ;\\u0010èÐ=OÃat¶ï^4ç¾w1;yu$WUDÙ ß#\\u001atj)úÈH’ñ.ê##mÐGFºaÀ\\u0019eÐ\\u00012Ê§\\u0003dÔíÂGF©4o\\u001f\\u0019é¾Á\\u0019E°¼»ùÈÈ+÷Nú^\\u001eÏ¢÷0MZ9*§Ó·¶« d&gt;\\u0011t[øAÙT|ö±\\f%¦=8\\u001b5Q\\u0015\\u0015ùê6ãßkv&amp;ðí÷o^</em>¾x°þòß¿¾&gt;ºøðåæè/ë£O6Oýúú¡«Û,’\\u0003*¦&amp;M$\\u0019\\u0001Õ\\u0015@ÞÇ®Ö\\u0003E[eç³\\u0000LST\\u0014Å?\\u0011ÏIXw\\u0016xè?\\u001dªân=bÑV\\u0016#wg\\u001fsÊâÁ\\u001c]\\u0003\\u0006\\u0013\\u001c¹÷.8·\\u0000\\rU®î\\u0002Mç¸ûÖ92¡ªè<code>¡1º(´P ÜüÎú\\u000e·b]\\u0003\\u0012\\u0014·;éeÅñÝívëwûáÙC&#39;&amp;q01ËUègÈé\\u0001Í\\u000f\\u0018-\\fd¶XoÍùJõÍ\\&quot;\\u0012xÝ,þ/øím%¾UÅÖøVu\\u000b\\u0003ú#Ìâ\\u000f0µøf\\u0011ß¦ã[U´\\u0001ýN\\u000b\\u0010%A\\u0000slÂÊ\\u001a¸¢ï\\u0002·wÂ[ÜºoN\\u0018©3ïI\\u0018©iïK\\u0018CVÃã\\u001b¼ââ«G¿ÿÇ÷Í\\u0017&#39;Ç÷×OÿtñâÉæÑ_7Þ\\\\w÷9o\\u0000s]&#125;£ÍR±Ý^)&#125;qtTý­ßÑ</code>ÅQÄ\\u0018Ä\\u0018©Ä\\u0019ÌDwb\\fbbÌ´&quot;åv·Ñ%;¦IH\\u0006ý«Ã¸»<code>c</code>±;¡\\u0018#¢\\u0018³¨H©ÿßÖã\\rV¶ë\\tÿÇ÷Þ7_Ù­3RèÂ\\u0015µszCq@\\u001eéÈ!òkó0¹7y&lt;ÒÄCä×f6arox\\u0013B¯Á1ì\\u001d\\u0013¢Y,ìË\\u0011\\u0019@ÛÌöJèÎØ&lt;iÙO\\u001e\\u001eÿ\\u000bíe±ù”}</p>\n"},{"title":"Python3 in one pic","urlname":"xu5sbv","date":"2021-10-17T12:23:54.000Z","abbrlink":1896924112,"_content":"\n![mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png](https://cdn.nlark.com/yuque/0/2021/png/518310/1634473935023-fdf8e02e-851a-488e-b194-ee9c3f387d8c.png#clientId=u0423a221-bdac-4&from=drop&id=u26d5916b&margin=%5Bobject%20Object%5D&name=mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png&originHeight=9188&originWidth=5542&originalType=binary∶=1&size=3653524&status=done&style=none&taskId=u81657168-fc3d-4ff7-b359-c3850f6ed72)\n","source":"_posts/语雀/xu5sbv.md","raw":"---\ntitle: Python3 in one pic\nurlname: xu5sbv\ndate: '2021-10-17 20:23:54 +0800'\ntags: []\ncategories: []\nabbrlink: 1896924112\n---\n\n![mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png](https://cdn.nlark.com/yuque/0/2021/png/518310/1634473935023-fdf8e02e-851a-488e-b194-ee9c3f387d8c.png#clientId=u0423a221-bdac-4&from=drop&id=u26d5916b&margin=%5Bobject%20Object%5D&name=mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png&originHeight=9188&originWidth=5542&originalType=binary∶=1&size=3653524&status=done&style=none&taskId=u81657168-fc3d-4ff7-b359-c3850f6ed72)\n","slug":"语雀/xu5sbv","published":1,"updated":"2022-03-03T11:26:07.598Z","_id":"cl0awjjpn001b081bbnfib6wg","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/518310/1634473935023-fdf8e02e-851a-488e-b194-ee9c3f387d8c.png#clientId=u0423a221-bdac-4&from=drop&id=u26d5916b&margin=%5Bobject%20Object%5D&name=mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png&originHeight=9188&originWidth=5542&originalType=binary%E2%88%B6=1&size=3653524&status=done&style=none&taskId=u81657168-fc3d-4ff7-b359-c3850f6ed72\" alt=\"mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png\"></p>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/518310/1634473935023-fdf8e02e-851a-488e-b194-ee9c3f387d8c.png#clientId=u0423a221-bdac-4&from=drop&id=u26d5916b&margin=%5Bobject%20Object%5D&name=mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png&originHeight=9188&originWidth=5542&originalType=binary%E2%88%B6=1&size=3653524&status=done&style=none&taskId=u81657168-fc3d-4ff7-b359-c3850f6ed72\" alt=\"mmexportdddc62b1e38fe7ac080efee8e543b4bb_1624061036096.png\"></p>\n"},{"title":"webPack 起步","urlname":"ye5emo","date":"2020-01-04T14:06:33.000Z","abbrlink":1510613147,"_content":"\n##  webPack 作为前端开发工具的用途\n\n> - 代码转换\n> - 文件优化\n> - 代码分割\n> - 文件合并\n> - 自动刷新\n> - 代码校验\n> - 自动发布\n\n## 核心概念\n\n> - 入口（entry）\n> - 出口（output）\n> - loader   loader 让 webpack 能够去处理那些非 JavaScript 文件\n> - 插件(plugins )\n\n## webPack 及其插件安装\n\n> - 新建一个文件夹\n> - 初始化 npm init -y\n> - 安装 webPack, npm install webpack webpack-li -D (不加 -D 默认安装在生产环境，-D 表示安装在开发环境下,)\n\n[ 运行 ]\n\n> - package.json 文件的 scripts 属性中配置执行命令\n>   - 开发环境打包: \"dev\": \"webpack --mode development\"\n>   - 生产环境打包:\"build\": \"webpack --mode production\"\n> - 运行 npm run 配置的命令\n\n[ 插件安装 ]\n\n> - html-webpack-plugin -D (   把打包后的文件自动引入到 html 文件中)\n> - clean-webpack-plugin -D (清空输出目录)\n> - webpack-dev-server -D（创建本地服务器，自动重新构建，自动打开浏览器并刷新）\n> - optimize-css-assets-webpack-plugin -D （压缩 css 代码 ）\n> - terser-webpack-plugin -D (css 压缩以后 默认的 js 压缩会失效 故 需要 覆盖默认压缩工具)\n\n## 模块的规范\n\n> - esModule 规范 (es6 模块)\n>   - 引入 import\n>   - 导出 export\n> - commonJS 规范 （node 模块）\n>   - 引入 require\n>   - 导出 module.export\n\n## css 加载器\n\n> - css 解析       加载器： css-loader style-loader  -D\n>   - 如果 css 文件中引入 less 文件\n\n```javascript\nuse: [\n  \"style-loader\",\n  {\n    loader: \"css-loader\",\n    options: {\n      importLoaders: 1, // 用后面('less-loader')的 1 个加载器来解析 ，如果是两个就是 2\n    },\n  },\n  \"less-loader\",\n];\n```\n\n> - less 解析     加载器： less less-loader -D\n> - sass 解析     加载器： node-sass sass-loader -D\n> - stylus 解析   加载器： stylus stylus-loader -D\n\n[ 处理 css 私有前缀 ]\n\n- postcss-loader(样式处理工具，可以借助自定义插件重新定义 css)   如：autoprefixer(私有前缀的插件) -D\n\n```javascript\n/***\n * 需要配置 postcss.config.js 文件\n *\n *\n *\n */\n// 设置处理样式的配置文件\n\nmodule.exports = {\n  plugins: [\n    // 引入插件\n    require(\"autoprefixer\"),\n  ],\n};\n```\n\n[ 分离 css 插件 ] mini-css-extract-plugin -D\n\n## webpack.config.js 配置文件\n\n```javascript\n// 配置文件\n//  node commonJS 规范\nconst path = require(\"path\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\n// 分离 css 插件\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n// 压缩 css 代码\nconst OptimizeCssAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\");\n// 压缩 js 代码\nconst TerserJSPlugin = require(\"terser-webpack-plugin\");\n\n// console.log(__dirname); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\n// console.log(path.resolve(__dirname,\"dist\")); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\\dist  一般使用 path.resolve(__dirname,dist)\n/**\n * path 中的其他方\n *\n */\n\n// 把打包后的文件自动引入到 html 文件中 如果文件过多优化\nlet htmlPlugin = [\"index\", \"other\"].map((chunckName) => {\n  //  console.log(chunckName);\n  return new HtmlWebpackPlugin({\n    template: `./${chunckName}.html`, // 注意此处不是引号\n    filename: `${chunckName}.html`,\n    chunks: [chunckName],\n  });\n});\n\nmodule.exports = {\n  /*  entry: \"./src/index.js\", // 单个入口文件 必须使用相对路径\n        output: {\n            // 文件指纹： hash chunkHash contentHash  防止有缓存\n            // filename:'bundle.[contentHash:8].js',\n            filename:'bundle.js', //输出文件名\n            path: path.resolve(__dirname,\"dist\") // 把路径地址解析为绝对地址\n        }, */\n  // 压缩 css js 代码\n  optimization: {\n    minimizer: [\n      // 压缩 css js 代码\n      new OptimizeCssAssetsPlugin(),\n      new TerserJSPlugin(),\n    ],\n  },\n\n  // 多入口文件 多出口文件\n  entry: {\n    index: \"./src/index.js\",\n    other: \"./src/other.js\",\n  },\n  output: {\n    filename: \"[name].js\", // name 指 index other\n    path: path.resolve(__dirname, \"dist\"),\n  },\n\n  // 加载器\n  module: {\n    rules: [\n      // 自下而上 解析 css 加载顺序 css-loader style-loader\n      /*    {\n                test: /\\.css$/,  //匹配的文件\n                use: 'css-loader'\n            },\n            {\n                test: /\\.css$/,  //匹配的文件\n                use: 'style-loader',\n                enforce:'post' // pre 优先加载  post 最后加载\n            } */\n\n      // 合并书写 css 加载\n      {\n        test: /\\.css$/, //匹配的文件\n        // [] / {} / “”  水平方向解析 从右往左\n        // use: ['style-loader', 'css-loader']\n\n        // 如果 css 文件中引入 less 文件\n        use: [\n          // 'style-loader',  使用分离插件后  style-loader 不需要\n          {\n            loader: MiniCssExtractPlugin.loader,\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              importLoaders: 2, // 用后面的 1 个加载器来解析 ，如果是两个就是 2\n            },\n          },\n          \"postcss-loader\",\n          \"less-loader\",\n        ],\n      },\n\n      // less 加载 仅限于引入到 js 文件中的 less 文件\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n    ],\n  },\n\n  // 创建服务器\n  devServer: {\n    //在内存中打包，所有的内容在根目录下\n\n    port: 8081,\n    open: true, // 自动打开浏览器\n    compress: true, //是否压缩代码，在内存中打包\n    contentBase: \"static\", //直接启动 static 文件夹下的静态资源文件\n    hot: true, //自动刷新\n  },\n\n  // 配置插件 自下而上执行\n  plugins: [\n    // 分离 css 插件\n    new MiniCssExtractPlugin({\n      filename: \"css/main.css\", // 设置分离出的 css 的目录及文件名\n    }),\n\n    new CleanWebpackPlugin(), //清空输出目录\n\n    // new CleanWebpackPlugin({\n    //     // cleanOnceBeforeBuildPatterns: ['**/*', '!static-files*'], 清空某一文件夹下的所有文件，但是不包含**\n    //     cleanOnceBeforeBuildPatterns: ['cc/*','!cc/a.js']\n    // }),\n\n    // 把打包后的文件自动引入到 html 文件中\n\n    /*   new HtmlWebpackPlugin({\n            template:'./index.html' , //依赖的模板文件 html 文件\n            hash:true,\n            minify:{\n                removeAttributeQuotes: true, //删除引号\n                collapseWhitespace: true, //删除空格\n            },\n            filename:'index.html', //打包后的 html 文件名\n            chunks: ['index'], //指定引入的入口 html 文件\n        }),\n        new HtmlWebpackPlugin({\n            template:'./other.html' , //依赖的模板文件 html 文件\n            hash:true,\n            filename:'other.html', //打包后的 html 文件名\n            chunks: ['other'], //指定引入的入口 html 文件\n        }), */\n\n    // 把打包后的文件自动引入到 html 文件中 如果文件过多优化\n\n    ...htmlPlugin, //把数组的每一项展开\n  ],\n};\n```\n","source":"_posts/语雀/ye5emo.md","raw":"---\ntitle: webPack 起步\nurlname: ye5emo\ndate: '2020-01-04 22:06:33 +0800'\ntags: []\ncategories: []\nabbrlink: 1510613147\n---\n\n##  webPack 作为前端开发工具的用途\n\n> - 代码转换\n> - 文件优化\n> - 代码分割\n> - 文件合并\n> - 自动刷新\n> - 代码校验\n> - 自动发布\n\n## 核心概念\n\n> - 入口（entry）\n> - 出口（output）\n> - loader   loader 让 webpack 能够去处理那些非 JavaScript 文件\n> - 插件(plugins )\n\n## webPack 及其插件安装\n\n> - 新建一个文件夹\n> - 初始化 npm init -y\n> - 安装 webPack, npm install webpack webpack-li -D (不加 -D 默认安装在生产环境，-D 表示安装在开发环境下,)\n\n[ 运行 ]\n\n> - package.json 文件的 scripts 属性中配置执行命令\n>   - 开发环境打包: \"dev\": \"webpack --mode development\"\n>   - 生产环境打包:\"build\": \"webpack --mode production\"\n> - 运行 npm run 配置的命令\n\n[ 插件安装 ]\n\n> - html-webpack-plugin -D (   把打包后的文件自动引入到 html 文件中)\n> - clean-webpack-plugin -D (清空输出目录)\n> - webpack-dev-server -D（创建本地服务器，自动重新构建，自动打开浏览器并刷新）\n> - optimize-css-assets-webpack-plugin -D （压缩 css 代码 ）\n> - terser-webpack-plugin -D (css 压缩以后 默认的 js 压缩会失效 故 需要 覆盖默认压缩工具)\n\n## 模块的规范\n\n> - esModule 规范 (es6 模块)\n>   - 引入 import\n>   - 导出 export\n> - commonJS 规范 （node 模块）\n>   - 引入 require\n>   - 导出 module.export\n\n## css 加载器\n\n> - css 解析       加载器： css-loader style-loader  -D\n>   - 如果 css 文件中引入 less 文件\n\n```javascript\nuse: [\n  \"style-loader\",\n  {\n    loader: \"css-loader\",\n    options: {\n      importLoaders: 1, // 用后面('less-loader')的 1 个加载器来解析 ，如果是两个就是 2\n    },\n  },\n  \"less-loader\",\n];\n```\n\n> - less 解析     加载器： less less-loader -D\n> - sass 解析     加载器： node-sass sass-loader -D\n> - stylus 解析   加载器： stylus stylus-loader -D\n\n[ 处理 css 私有前缀 ]\n\n- postcss-loader(样式处理工具，可以借助自定义插件重新定义 css)   如：autoprefixer(私有前缀的插件) -D\n\n```javascript\n/***\n * 需要配置 postcss.config.js 文件\n *\n *\n *\n */\n// 设置处理样式的配置文件\n\nmodule.exports = {\n  plugins: [\n    // 引入插件\n    require(\"autoprefixer\"),\n  ],\n};\n```\n\n[ 分离 css 插件 ] mini-css-extract-plugin -D\n\n## webpack.config.js 配置文件\n\n```javascript\n// 配置文件\n//  node commonJS 规范\nconst path = require(\"path\");\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\n// 分离 css 插件\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n// 压缩 css 代码\nconst OptimizeCssAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\");\n// 压缩 js 代码\nconst TerserJSPlugin = require(\"terser-webpack-plugin\");\n\n// console.log(__dirname); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\n// console.log(path.resolve(__dirname,\"dist\")); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\\dist  一般使用 path.resolve(__dirname,dist)\n/**\n * path 中的其他方\n *\n */\n\n// 把打包后的文件自动引入到 html 文件中 如果文件过多优化\nlet htmlPlugin = [\"index\", \"other\"].map((chunckName) => {\n  //  console.log(chunckName);\n  return new HtmlWebpackPlugin({\n    template: `./${chunckName}.html`, // 注意此处不是引号\n    filename: `${chunckName}.html`,\n    chunks: [chunckName],\n  });\n});\n\nmodule.exports = {\n  /*  entry: \"./src/index.js\", // 单个入口文件 必须使用相对路径\n        output: {\n            // 文件指纹： hash chunkHash contentHash  防止有缓存\n            // filename:'bundle.[contentHash:8].js',\n            filename:'bundle.js', //输出文件名\n            path: path.resolve(__dirname,\"dist\") // 把路径地址解析为绝对地址\n        }, */\n  // 压缩 css js 代码\n  optimization: {\n    minimizer: [\n      // 压缩 css js 代码\n      new OptimizeCssAssetsPlugin(),\n      new TerserJSPlugin(),\n    ],\n  },\n\n  // 多入口文件 多出口文件\n  entry: {\n    index: \"./src/index.js\",\n    other: \"./src/other.js\",\n  },\n  output: {\n    filename: \"[name].js\", // name 指 index other\n    path: path.resolve(__dirname, \"dist\"),\n  },\n\n  // 加载器\n  module: {\n    rules: [\n      // 自下而上 解析 css 加载顺序 css-loader style-loader\n      /*    {\n                test: /\\.css$/,  //匹配的文件\n                use: 'css-loader'\n            },\n            {\n                test: /\\.css$/,  //匹配的文件\n                use: 'style-loader',\n                enforce:'post' // pre 优先加载  post 最后加载\n            } */\n\n      // 合并书写 css 加载\n      {\n        test: /\\.css$/, //匹配的文件\n        // [] / {} / “”  水平方向解析 从右往左\n        // use: ['style-loader', 'css-loader']\n\n        // 如果 css 文件中引入 less 文件\n        use: [\n          // 'style-loader',  使用分离插件后  style-loader 不需要\n          {\n            loader: MiniCssExtractPlugin.loader,\n          },\n          {\n            loader: \"css-loader\",\n            options: {\n              importLoaders: 2, // 用后面的 1 个加载器来解析 ，如果是两个就是 2\n            },\n          },\n          \"postcss-loader\",\n          \"less-loader\",\n        ],\n      },\n\n      // less 加载 仅限于引入到 js 文件中的 less 文件\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n    ],\n  },\n\n  // 创建服务器\n  devServer: {\n    //在内存中打包，所有的内容在根目录下\n\n    port: 8081,\n    open: true, // 自动打开浏览器\n    compress: true, //是否压缩代码，在内存中打包\n    contentBase: \"static\", //直接启动 static 文件夹下的静态资源文件\n    hot: true, //自动刷新\n  },\n\n  // 配置插件 自下而上执行\n  plugins: [\n    // 分离 css 插件\n    new MiniCssExtractPlugin({\n      filename: \"css/main.css\", // 设置分离出的 css 的目录及文件名\n    }),\n\n    new CleanWebpackPlugin(), //清空输出目录\n\n    // new CleanWebpackPlugin({\n    //     // cleanOnceBeforeBuildPatterns: ['**/*', '!static-files*'], 清空某一文件夹下的所有文件，但是不包含**\n    //     cleanOnceBeforeBuildPatterns: ['cc/*','!cc/a.js']\n    // }),\n\n    // 把打包后的文件自动引入到 html 文件中\n\n    /*   new HtmlWebpackPlugin({\n            template:'./index.html' , //依赖的模板文件 html 文件\n            hash:true,\n            minify:{\n                removeAttributeQuotes: true, //删除引号\n                collapseWhitespace: true, //删除空格\n            },\n            filename:'index.html', //打包后的 html 文件名\n            chunks: ['index'], //指定引入的入口 html 文件\n        }),\n        new HtmlWebpackPlugin({\n            template:'./other.html' , //依赖的模板文件 html 文件\n            hash:true,\n            filename:'other.html', //打包后的 html 文件名\n            chunks: ['other'], //指定引入的入口 html 文件\n        }), */\n\n    // 把打包后的文件自动引入到 html 文件中 如果文件过多优化\n\n    ...htmlPlugin, //把数组的每一项展开\n  ],\n};\n```\n","slug":"语雀/ye5emo","published":1,"updated":"2022-03-03T11:26:07.599Z","_id":"cl0awjjpo001c081bhmycfkmb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"webPack-作为前端开发工具的用途\"><a href=\"#webPack-作为前端开发工具的用途\" class=\"headerlink\" title=\"webPack 作为前端开发工具的用途\"></a>webPack 作为前端开发工具的用途</h2><blockquote>\n<ul>\n<li>代码转换</li>\n<li>文件优化</li>\n<li>代码分割</li>\n<li>文件合并</li>\n<li>自动刷新</li>\n<li>代码校验</li>\n<li>自动发布</li>\n</ul>\n</blockquote>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><blockquote>\n<ul>\n<li>入口（entry）</li>\n<li>出口（output）</li>\n<li>loader   loader 让 webpack 能够去处理那些非 JavaScript 文件</li>\n<li>插件(plugins )</li>\n</ul>\n</blockquote>\n<h2 id=\"webPack-及其插件安装\"><a href=\"#webPack-及其插件安装\" class=\"headerlink\" title=\"webPack 及其插件安装\"></a>webPack 及其插件安装</h2><blockquote>\n<ul>\n<li>新建一个文件夹</li>\n<li>初始化 npm init -y</li>\n<li>安装 webPack, npm install webpack webpack-li -D (不加 -D 默认安装在生产环境，-D 表示安装在开发环境下,)</li>\n</ul>\n</blockquote>\n<p>[ 运行 ]</p>\n<blockquote>\n<ul>\n<li>package.json 文件的 scripts 属性中配置执行命令<ul>\n<li>开发环境打包: “dev”: “webpack –mode development”</li>\n<li>生产环境打包:”build”: “webpack –mode production”</li>\n</ul>\n</li>\n<li>运行 npm run 配置的命令</li>\n</ul>\n</blockquote>\n<p>[ 插件安装 ]</p>\n<blockquote>\n<ul>\n<li>html-webpack-plugin -D (   把打包后的文件自动引入到 html 文件中)</li>\n<li>clean-webpack-plugin -D (清空输出目录)</li>\n<li>webpack-dev-server -D（创建本地服务器，自动重新构建，自动打开浏览器并刷新）</li>\n<li>optimize-css-assets-webpack-plugin -D （压缩 css 代码 ）</li>\n<li>terser-webpack-plugin -D (css 压缩以后 默认的 js 压缩会失效 故 需要 覆盖默认压缩工具)</li>\n</ul>\n</blockquote>\n<h2 id=\"模块的规范\"><a href=\"#模块的规范\" class=\"headerlink\" title=\"模块的规范\"></a>模块的规范</h2><blockquote>\n<ul>\n<li>esModule 规范 (es6 模块)<ul>\n<li>引入 import</li>\n<li>导出 export</li>\n</ul>\n</li>\n<li>commonJS 规范 （node 模块）<ul>\n<li>引入 require</li>\n<li>导出 module.export</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"css-加载器\"><a href=\"#css-加载器\" class=\"headerlink\" title=\"css 加载器\"></a>css 加载器</h2><blockquote>\n<ul>\n<li>css 解析       加载器： css-loader style-loader  -D<ul>\n<li>如果 css 文件中引入 less 文件</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">use: [\n  &quot;style-loader&quot;,\n  &#123;\n    loader: &quot;css-loader&quot;,\n    options: &#123;\n      importLoaders: 1, // 用后面(&#39;less-loader&#39;)的 1 个加载器来解析 ，如果是两个就是 2\n    &#125;,\n  &#125;,\n  &quot;less-loader&quot;,\n];\n</code></pre>\n<blockquote>\n<ul>\n<li>less 解析     加载器： less less-loader -D</li>\n<li>sass 解析     加载器： node-sass sass-loader -D</li>\n<li>stylus 解析   加载器： stylus stylus-loader -D</li>\n</ul>\n</blockquote>\n<p>[ 处理 css 私有前缀 ]</p>\n<ul>\n<li>postcss-loader(样式处理工具，可以借助自定义插件重新定义 css)   如：autoprefixer(私有前缀的插件) -D</li>\n</ul>\n<pre><code class=\"javascript\">/***\n * 需要配置 postcss.config.js 文件\n *\n *\n *\n */\n// 设置处理样式的配置文件\n\nmodule.exports = &#123;\n  plugins: [\n    // 引入插件\n    require(&quot;autoprefixer&quot;),\n  ],\n&#125;;\n</code></pre>\n<p>[ 分离 css 插件 ] mini-css-extract-plugin -D</p>\n<h2 id=\"webpack-config-js-配置文件\"><a href=\"#webpack-config-js-配置文件\" class=\"headerlink\" title=\"webpack.config.js 配置文件\"></a>webpack.config.js 配置文件</h2><pre><code class=\"javascript\">// 配置文件\n//  node commonJS 规范\nconst path = require(&quot;path&quot;);\nconst &#123; CleanWebpackPlugin &#125; = require(&quot;clean-webpack-plugin&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\n\n// 分离 css 插件\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);\n// 压缩 css 代码\nconst OptimizeCssAssetsPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;);\n// 压缩 js 代码\nconst TerserJSPlugin = require(&quot;terser-webpack-plugin&quot;);\n\n// console.log(__dirname); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\n// console.log(path.resolve(__dirname,&quot;dist&quot;)); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\\dist  一般使用 path.resolve(__dirname,dist)\n/**\n * path 中的其他方\n *\n */\n\n// 把打包后的文件自动引入到 html 文件中 如果文件过多优化\nlet htmlPlugin = [&quot;index&quot;, &quot;other&quot;].map((chunckName) =&gt; &#123;\n  //  console.log(chunckName);\n  return new HtmlWebpackPlugin(&#123;\n    template: `./$&#123;chunckName&#125;.html`, // 注意此处不是引号\n    filename: `$&#123;chunckName&#125;.html`,\n    chunks: [chunckName],\n  &#125;);\n&#125;);\n\nmodule.exports = &#123;\n  /*  entry: &quot;./src/index.js&quot;, // 单个入口文件 必须使用相对路径\n        output: &#123;\n            // 文件指纹： hash chunkHash contentHash  防止有缓存\n            // filename:&#39;bundle.[contentHash:8].js&#39;,\n            filename:&#39;bundle.js&#39;, //输出文件名\n            path: path.resolve(__dirname,&quot;dist&quot;) // 把路径地址解析为绝对地址\n        &#125;, */\n  // 压缩 css js 代码\n  optimization: &#123;\n    minimizer: [\n      // 压缩 css js 代码\n      new OptimizeCssAssetsPlugin(),\n      new TerserJSPlugin(),\n    ],\n  &#125;,\n\n  // 多入口文件 多出口文件\n  entry: &#123;\n    index: &quot;./src/index.js&quot;,\n    other: &quot;./src/other.js&quot;,\n  &#125;,\n  output: &#123;\n    filename: &quot;[name].js&quot;, // name 指 index other\n    path: path.resolve(__dirname, &quot;dist&quot;),\n  &#125;,\n\n  // 加载器\n  module: &#123;\n    rules: [\n      // 自下而上 解析 css 加载顺序 css-loader style-loader\n      /*    &#123;\n                test: /\\.css$/,  //匹配的文件\n                use: &#39;css-loader&#39;\n            &#125;,\n            &#123;\n                test: /\\.css$/,  //匹配的文件\n                use: &#39;style-loader&#39;,\n                enforce:&#39;post&#39; // pre 优先加载  post 最后加载\n            &#125; */\n\n      // 合并书写 css 加载\n      &#123;\n        test: /\\.css$/, //匹配的文件\n        // [] / &#123;&#125; / “”  水平方向解析 从右往左\n        // use: [&#39;style-loader&#39;, &#39;css-loader&#39;]\n\n        // 如果 css 文件中引入 less 文件\n        use: [\n          // &#39;style-loader&#39;,  使用分离插件后  style-loader 不需要\n          &#123;\n            loader: MiniCssExtractPlugin.loader,\n          &#125;,\n          &#123;\n            loader: &quot;css-loader&quot;,\n            options: &#123;\n              importLoaders: 2, // 用后面的 1 个加载器来解析 ，如果是两个就是 2\n            &#125;,\n          &#125;,\n          &quot;postcss-loader&quot;,\n          &quot;less-loader&quot;,\n        ],\n      &#125;,\n\n      // less 加载 仅限于引入到 js 文件中的 less 文件\n      &#123;\n        test: /\\.less$/,\n        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],\n      &#125;,\n    ],\n  &#125;,\n\n  // 创建服务器\n  devServer: &#123;\n    //在内存中打包，所有的内容在根目录下\n\n    port: 8081,\n    open: true, // 自动打开浏览器\n    compress: true, //是否压缩代码，在内存中打包\n    contentBase: &quot;static&quot;, //直接启动 static 文件夹下的静态资源文件\n    hot: true, //自动刷新\n  &#125;,\n\n  // 配置插件 自下而上执行\n  plugins: [\n    // 分离 css 插件\n    new MiniCssExtractPlugin(&#123;\n      filename: &quot;css/main.css&quot;, // 设置分离出的 css 的目录及文件名\n    &#125;),\n\n    new CleanWebpackPlugin(), //清空输出目录\n\n    // new CleanWebpackPlugin(&#123;\n    //     // cleanOnceBeforeBuildPatterns: [&#39;**/*&#39;, &#39;!static-files*&#39;], 清空某一文件夹下的所有文件，但是不包含**\n    //     cleanOnceBeforeBuildPatterns: [&#39;cc/*&#39;,&#39;!cc/a.js&#39;]\n    // &#125;),\n\n    // 把打包后的文件自动引入到 html 文件中\n\n    /*   new HtmlWebpackPlugin(&#123;\n            template:&#39;./index.html&#39; , //依赖的模板文件 html 文件\n            hash:true,\n            minify:&#123;\n                removeAttributeQuotes: true, //删除引号\n                collapseWhitespace: true, //删除空格\n            &#125;,\n            filename:&#39;index.html&#39;, //打包后的 html 文件名\n            chunks: [&#39;index&#39;], //指定引入的入口 html 文件\n        &#125;),\n        new HtmlWebpackPlugin(&#123;\n            template:&#39;./other.html&#39; , //依赖的模板文件 html 文件\n            hash:true,\n            filename:&#39;other.html&#39;, //打包后的 html 文件名\n            chunks: [&#39;other&#39;], //指定引入的入口 html 文件\n        &#125;), */\n\n    // 把打包后的文件自动引入到 html 文件中 如果文件过多优化\n\n    ...htmlPlugin, //把数组的每一项展开\n  ],\n&#125;;\n</code></pre>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h2 id=\"webPack-作为前端开发工具的用途\"><a href=\"#webPack-作为前端开发工具的用途\" class=\"headerlink\" title=\"webPack 作为前端开发工具的用途\"></a>webPack 作为前端开发工具的用途</h2><blockquote>\n<ul>\n<li>代码转换</li>\n<li>文件优化</li>\n<li>代码分割</li>\n<li>文件合并</li>\n<li>自动刷新</li>\n<li>代码校验</li>\n<li>自动发布</li>\n</ul>\n</blockquote>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><blockquote>\n<ul>\n<li>入口（entry）</li>\n<li>出口（output）</li>\n<li>loader   loader 让 webpack 能够去处理那些非 JavaScript 文件</li>\n<li>插件(plugins )</li>\n</ul>\n</blockquote>\n<h2 id=\"webPack-及其插件安装\"><a href=\"#webPack-及其插件安装\" class=\"headerlink\" title=\"webPack 及其插件安装\"></a>webPack 及其插件安装</h2><blockquote>\n<ul>\n<li>新建一个文件夹</li>\n<li>初始化 npm init -y</li>\n<li>安装 webPack, npm install webpack webpack-li -D (不加 -D 默认安装在生产环境，-D 表示安装在开发环境下,)</li>\n</ul>\n</blockquote>\n<p>[ 运行 ]</p>\n<blockquote>\n<ul>\n<li>package.json 文件的 scripts 属性中配置执行命令<ul>\n<li>开发环境打包: “dev”: “webpack –mode development”</li>\n<li>生产环境打包:”build”: “webpack –mode production”</li>\n</ul>\n</li>\n<li>运行 npm run 配置的命令</li>\n</ul>\n</blockquote>\n<p>[ 插件安装 ]</p>\n<blockquote>\n<ul>\n<li>html-webpack-plugin -D (   把打包后的文件自动引入到 html 文件中)</li>\n<li>clean-webpack-plugin -D (清空输出目录)</li>\n<li>webpack-dev-server -D（创建本地服务器，自动重新构建，自动打开浏览器并刷新）</li>\n<li>optimize-css-assets-webpack-plugin -D （压缩 css 代码 ）</li>\n<li>terser-webpack-plugin -D (css 压缩以后 默认的 js 压缩会失效 故 需要 覆盖默认压缩工具)</li>\n</ul>\n</blockquote>\n<h2 id=\"模块的规范\"><a href=\"#模块的规范\" class=\"headerlink\" title=\"模块的规范\"></a>模块的规范</h2><blockquote>\n<ul>\n<li>esModule 规范 (es6 模块)<ul>\n<li>引入 import</li>\n<li>导出 export</li>\n</ul>\n</li>\n<li>commonJS 规范 （node 模块）<ul>\n<li>引入 require</li>\n<li>导出 module.export</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"css-加载器\"><a href=\"#css-加载器\" class=\"headerlink\" title=\"css 加载器\"></a>css 加载器</h2><blockquote>\n<ul>\n<li>css 解析       加载器： css-loader style-loader  -D<ul>\n<li>如果 css 文件中引入 less 文件</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre><code class=\"javascript\">use: [\n  &quot;style-loader&quot;,\n  &#123;\n    loader: &quot;css-loader&quot;,\n    options: &#123;\n      importLoaders: 1, // 用后面(&#39;less-loader&#39;)的 1 个加载器来解析 ，如果是两个就是 2\n    &#125;,\n  &#125;,\n  &quot;less-loader&quot;,\n];\n</code></pre>\n<blockquote>\n<ul>\n<li>less 解析     加载器： less less-loader -D</li>\n<li>sass 解析     加载器： node-sass sass-loader -D</li>\n<li>stylus 解析   加载器： stylus stylus-loader -D</li>\n</ul>\n</blockquote>\n<p>[ 处理 css 私有前缀 ]</p>\n<ul>\n<li>postcss-loader(样式处理工具，可以借助自定义插件重新定义 css)   如：autoprefixer(私有前缀的插件) -D</li>\n</ul>\n<pre><code class=\"javascript\">/***\n * 需要配置 postcss.config.js 文件\n *\n *\n *\n */\n// 设置处理样式的配置文件\n\nmodule.exports = &#123;\n  plugins: [\n    // 引入插件\n    require(&quot;autoprefixer&quot;),\n  ],\n&#125;;\n</code></pre>\n<p>[ 分离 css 插件 ] mini-css-extract-plugin -D</p>\n<h2 id=\"webpack-config-js-配置文件\"><a href=\"#webpack-config-js-配置文件\" class=\"headerlink\" title=\"webpack.config.js 配置文件\"></a>webpack.config.js 配置文件</h2><pre><code class=\"javascript\">// 配置文件\n//  node commonJS 规范\nconst path = require(&quot;path&quot;);\nconst &#123; CleanWebpackPlugin &#125; = require(&quot;clean-webpack-plugin&quot;);\nconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\n\n// 分离 css 插件\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);\n// 压缩 css 代码\nconst OptimizeCssAssetsPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;);\n// 压缩 js 代码\nconst TerserJSPlugin = require(&quot;terser-webpack-plugin&quot;);\n\n// console.log(__dirname); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\n// console.log(path.resolve(__dirname,&quot;dist&quot;)); // 项目在本地存储中的绝对路径 E:\\My Web\\珠峰2019\\FRAME\\webPack\\20191210\\dist  一般使用 path.resolve(__dirname,dist)\n/**\n * path 中的其他方\n *\n */\n\n// 把打包后的文件自动引入到 html 文件中 如果文件过多优化\nlet htmlPlugin = [&quot;index&quot;, &quot;other&quot;].map((chunckName) =&gt; &#123;\n  //  console.log(chunckName);\n  return new HtmlWebpackPlugin(&#123;\n    template: `./$&#123;chunckName&#125;.html`, // 注意此处不是引号\n    filename: `$&#123;chunckName&#125;.html`,\n    chunks: [chunckName],\n  &#125;);\n&#125;);\n\nmodule.exports = &#123;\n  /*  entry: &quot;./src/index.js&quot;, // 单个入口文件 必须使用相对路径\n        output: &#123;\n            // 文件指纹： hash chunkHash contentHash  防止有缓存\n            // filename:&#39;bundle.[contentHash:8].js&#39;,\n            filename:&#39;bundle.js&#39;, //输出文件名\n            path: path.resolve(__dirname,&quot;dist&quot;) // 把路径地址解析为绝对地址\n        &#125;, */\n  // 压缩 css js 代码\n  optimization: &#123;\n    minimizer: [\n      // 压缩 css js 代码\n      new OptimizeCssAssetsPlugin(),\n      new TerserJSPlugin(),\n    ],\n  &#125;,\n\n  // 多入口文件 多出口文件\n  entry: &#123;\n    index: &quot;./src/index.js&quot;,\n    other: &quot;./src/other.js&quot;,\n  &#125;,\n  output: &#123;\n    filename: &quot;[name].js&quot;, // name 指 index other\n    path: path.resolve(__dirname, &quot;dist&quot;),\n  &#125;,\n\n  // 加载器\n  module: &#123;\n    rules: [\n      // 自下而上 解析 css 加载顺序 css-loader style-loader\n      /*    &#123;\n                test: /\\.css$/,  //匹配的文件\n                use: &#39;css-loader&#39;\n            &#125;,\n            &#123;\n                test: /\\.css$/,  //匹配的文件\n                use: &#39;style-loader&#39;,\n                enforce:&#39;post&#39; // pre 优先加载  post 最后加载\n            &#125; */\n\n      // 合并书写 css 加载\n      &#123;\n        test: /\\.css$/, //匹配的文件\n        // [] / &#123;&#125; / “”  水平方向解析 从右往左\n        // use: [&#39;style-loader&#39;, &#39;css-loader&#39;]\n\n        // 如果 css 文件中引入 less 文件\n        use: [\n          // &#39;style-loader&#39;,  使用分离插件后  style-loader 不需要\n          &#123;\n            loader: MiniCssExtractPlugin.loader,\n          &#125;,\n          &#123;\n            loader: &quot;css-loader&quot;,\n            options: &#123;\n              importLoaders: 2, // 用后面的 1 个加载器来解析 ，如果是两个就是 2\n            &#125;,\n          &#125;,\n          &quot;postcss-loader&quot;,\n          &quot;less-loader&quot;,\n        ],\n      &#125;,\n\n      // less 加载 仅限于引入到 js 文件中的 less 文件\n      &#123;\n        test: /\\.less$/,\n        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],\n      &#125;,\n    ],\n  &#125;,\n\n  // 创建服务器\n  devServer: &#123;\n    //在内存中打包，所有的内容在根目录下\n\n    port: 8081,\n    open: true, // 自动打开浏览器\n    compress: true, //是否压缩代码，在内存中打包\n    contentBase: &quot;static&quot;, //直接启动 static 文件夹下的静态资源文件\n    hot: true, //自动刷新\n  &#125;,\n\n  // 配置插件 自下而上执行\n  plugins: [\n    // 分离 css 插件\n    new MiniCssExtractPlugin(&#123;\n      filename: &quot;css/main.css&quot;, // 设置分离出的 css 的目录及文件名\n    &#125;),\n\n    new CleanWebpackPlugin(), //清空输出目录\n\n    // new CleanWebpackPlugin(&#123;\n    //     // cleanOnceBeforeBuildPatterns: [&#39;**/*&#39;, &#39;!static-files*&#39;], 清空某一文件夹下的所有文件，但是不包含**\n    //     cleanOnceBeforeBuildPatterns: [&#39;cc/*&#39;,&#39;!cc/a.js&#39;]\n    // &#125;),\n\n    // 把打包后的文件自动引入到 html 文件中\n\n    /*   new HtmlWebpackPlugin(&#123;\n            template:&#39;./index.html&#39; , //依赖的模板文件 html 文件\n            hash:true,\n            minify:&#123;\n                removeAttributeQuotes: true, //删除引号\n                collapseWhitespace: true, //删除空格\n            &#125;,\n            filename:&#39;index.html&#39;, //打包后的 html 文件名\n            chunks: [&#39;index&#39;], //指定引入的入口 html 文件\n        &#125;),\n        new HtmlWebpackPlugin(&#123;\n            template:&#39;./other.html&#39; , //依赖的模板文件 html 文件\n            hash:true,\n            filename:&#39;other.html&#39;, //打包后的 html 文件名\n            chunks: [&#39;other&#39;], //指定引入的入口 html 文件\n        &#125;), */\n\n    // 把打包后的文件自动引入到 html 文件中 如果文件过多优化\n\n    ...htmlPlugin, //把数组的每一项展开\n  ],\n&#125;;\n</code></pre>\n"},{"title":"Linux 常用命令","urlname":"xsqekz","date":"2020-05-19T04:12:33.000Z","abbrlink":2172419458,"_content":"\n**[ 命令格式 ]**\n\n- 命令 [ 选项 ][ 参数 ]\n- 例： ls -la /home\n\n## 输入 / 输出重定向\n\n| 命令            | 说明                                               |\n| :-------------- | :------------------------------------------------- |\n| command > file  | 将输出重定向到 file。                              |\n| command < file  | 将输入重定向到 file。                              |\n| command >> file | 将输出以追加的方式重定向到 file。                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file。             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m          | 将输出文件 m 和 n 合并。                           |\n| n <& m          | 将输入文件 m 和 n 合并。                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n## 目录处理命令\n\n- ls\n  - 原意： list\n  - 功能： 显示目录文件\n  - 选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)\n  - 参数： 路径（非必填）\n  - 语法： ls -la /home\n- cd\n  - 原意： change directory\n  - 功能： 切换目录\n  - 参数： 路径\n  - 语法： cd /home (绝对路径) 或者 cd admin (相对路径)\n- pwd\n  - 原意： print working directory\n  - 功能： 显示当前目录\n  - 语法： pwd\n- mkdir\n  - 原意： make directories\n  - 功能： 创建空目录\n  - 选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)\n  - 参数： 目录名\n  - 语法： mkdir -p [目录名]\n- cp\n  - 原意： copy\n  - 功能： 复制文件或目录\n  - 选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)\n  - 参数： [原文件或目录][目标目录]\n  - 语法： cp -rp [原文件或目录][目标目录]\n- mv\n  - 原意： move\n  - 功能： 剪切文件或者改文件名\n  - 参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]\n  - 语法： mv [原文件或目录][目标目录]\n- rm\n  - 原意： remove\n  - 功能： 删除文件或目录\n  - 选项： -r： 删除目录，-f： 强制删除\n  - 参数： 文件或目录\n  - 语法： rm -rf [文件或目录] ==> 强制删除\n- rmdir\n  - 原意： remove empty directories\n  - 功能： 删除空目录\n  - 语法： rmdir [空目录]\n\n## 文件处理命令\n\n- touch\n  - 功能： 创建空文件\n  - 语法： touch [文件名]\n- cat\n  - 功能： 显示文件内容\n  - 选项： -n 显示行号\n  - 语法： cat [文件名]\n- tac\n  - 功能： 反向显示文件内容\n  - 选项： -n 显示行号\n  - 语法： tac [文件名]\n- more\n  - 功能： 分页显示文件内容\n  - 语法： more [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; （B => 上翻）\n- ln\n  - 原意： link\n  - 功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)\n  - 选项： -s： 创建软链接\n  - 语法： ln -s [原文件或目录][目标文件或目录] ==> 软链接; ln [原文件或目录][目标文件或目录] ==> 硬链接;\n- less\n  - 功能： 分页显示文件内容\n  - 语法： less [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; B => 向上翻页\n- head\n  - 功能： 显示文件前面几行\n  - 选项： -n： 指定行数\n  - 语法： head -n 10 [文件名]\n- tail\n  - 功能： 显示文件后面几行\n  - 选项： -n： 指定行数; -f： 动态显示文件末尾的内容\n  - 语法： tail -n 10 [文件名]\n\n## 文件搜索命令\n\n- find\n\n  - 功能： 文件搜索\n  - 语法： find [搜素范围][匹配条件] [搜素内容]\n  - 例： find /home -name log.md (搜素 log.md 文件)\n    > [ 匹配条件 ]\n    >\n    > - name： 名称搜素\n    > - size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)\n    > - +n(+204800) 大于 204800\n    > - -n\n    > - n 等于\n    > - type： 文件类型\n\n- grep\n  - 功能： 在文件中搜索字符串匹配的行并输出\n  - 选项： -i 不区分大小写; -v 排除指定字符串\n  - 语法： grep -iv [指定字符串][文件]\n- locate\n  - 功能： 在文件资料库中查找文件\n  - 语法： locate [文件名]\n- which\n  - 功能： 搜索命令所在目录及别名信息\n  - 语法： which [命令]\n- whereis\n  - 功能： 搜索命令所在目录以及帮助文档路径\n  - 语法： whereis [命令]\n\n## 帮助命令\n\n- man\n  - 功能： 获取帮助信息\n  - 语法： man [命令或帮助文件]\n- help\n  - 功能： 获取 shell 内置命令的帮助信息\n  - 语法： help [内置命令]\n\n## 权限管理命令\n\n- chmod\n  - 原意： change mode\n  - 功能： 改变文件或目录的权限\n  - 语法： chmod [ugoa+-=rwx][文件或目录]\n  - 例： chmod u-r [文件或目录] => 对文件的所属者去掉 r 权限\n  - 语法： chmod [mode = 777][文件或目录] => 给文件设置所有的用户拥有全部的权限\n  - 例： chmod 764 [文件或目录]\n  - 执行权限： 所有用户\n\n> **[ u，g，o，a 分别代表用户 ]**\n>\n> - u： User 所属者\n> - g： Group 用户组\n> - o： Other 其他用户\n> - a： all 所有人\n>\n> **[ r，w，x 分别代表权限 ]**\n>\n> - r： read 读权限\n>   - 用数字表示 4\n> - w： write 写权限\n>   - 用数字表示 2\n> - x： 执行权限\n>   - 用数字表示 1\n> - 每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)\n> - 例： rwxrw-r-- 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有>读的权限\n>   - 用数字表示： 764（4+2+1，4+2，4）\n\n- chown\n  - 原意： change file ownership\n  - 功能： 改变文件或目录的所属者\n  - 语法： chown [用户][文件/目录]\n  - 执行权限： root\n- umask\n  - 命令英文原意： the user file-creation mask\n  - 显示、设置文件的缺省权限(默认权限)\n  - 执行权限： 所有用户\n  - 语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限\n\n## 用户管理命令\n\n- useradd\n  - 功能： 添加新用户\n  - 执行权限： root\n- passwd\n  - 功能： 修改密码\n- who\n  - 功能： 查看登录用户信息\n- w\n  - 功能： 当前用户详细信息\n\n## 压缩解压命令\n\n- tar\n  - 功能： 打包文件或目录\n  - 说明： **结合 gzip 命令**\n  - 语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -zxf 文件名.tar.gz\n- zip\n  - 功能： 压缩文件或目录\n  - 选项： -r 压缩目录\n  - 语法： zip [新的文件名][目标文件或目录]\n  - 解压： unzip [压缩文件名.zip]\n- bzip2\n  - 功能： 打包文件()\n  - 选项： -k 保留原文件\n  - 说明： **结合 tar 命令使用**\n  - 语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -xjf 文件名.tar.bz2\n\n## 网络命令\n\n- ping\n  - 功能： 测试网络连通性\n  - 语法： ping [ip 地址]\n- last\n  - 功能： 列出目前和过去登入系统的用户信息\n  - 语法： last\n- traceroute\n  - 功能： 显示数据包到主机间的路径\n  - 语法： traceroute [ip 地址 或 域名]\n- netstat\n  - 功能： 显示网络相关信息\n  - 语法： netstat\n- steup\n  - 功能： 配置网络\n  - 语法： steup\n- write\n  - 功能： 给用户发信息\n  - 语法： write [用户名]\n- wall\n  - 功能： 发广播信息\n  - 语法： wall\n- mail\n  - 功能： 发送电子邮件\n  - 语法： mail [用户名]\n\n## 关机重启命令\n\n- shutdown [选项] now(时间)\n  - -c 取消\n  - -h 关机\n  - -r 重启\n- 其他关机\n  - halt\n  - poweroff\n  - init 0\n- 其他重启\n  - reboot\n  - init 6\n- 扩展\n  - 0 --> 关机\n  - 1 --> 单用户\n  - 2 --> 不完全多用户，不含 nfs 服务\n  - 3 --> 完全多用户\n  - 4 --> 未分配\n  - 5 --> 图形界面\n  - 6 --> 重启\n","source":"_posts/语雀/xsqekz.md","raw":"---\ntitle: Linux 常用命令\nurlname: xsqekz\ndate: '2020-05-19 12:12:33 +0800'\ntags: []\ncategories: []\nabbrlink: 2172419458\n---\n\n**[ 命令格式 ]**\n\n- 命令 [ 选项 ][ 参数 ]\n- 例： ls -la /home\n\n## 输入 / 输出重定向\n\n| 命令            | 说明                                               |\n| :-------------- | :------------------------------------------------- |\n| command > file  | 将输出重定向到 file。                              |\n| command < file  | 将输入重定向到 file。                              |\n| command >> file | 将输出以追加的方式重定向到 file。                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file。             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m          | 将输出文件 m 和 n 合并。                           |\n| n <& m          | 将输入文件 m 和 n 合并。                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n## 目录处理命令\n\n- ls\n  - 原意： list\n  - 功能： 显示目录文件\n  - 选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)\n  - 参数： 路径（非必填）\n  - 语法： ls -la /home\n- cd\n  - 原意： change directory\n  - 功能： 切换目录\n  - 参数： 路径\n  - 语法： cd /home (绝对路径) 或者 cd admin (相对路径)\n- pwd\n  - 原意： print working directory\n  - 功能： 显示当前目录\n  - 语法： pwd\n- mkdir\n  - 原意： make directories\n  - 功能： 创建空目录\n  - 选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)\n  - 参数： 目录名\n  - 语法： mkdir -p [目录名]\n- cp\n  - 原意： copy\n  - 功能： 复制文件或目录\n  - 选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)\n  - 参数： [原文件或目录][目标目录]\n  - 语法： cp -rp [原文件或目录][目标目录]\n- mv\n  - 原意： move\n  - 功能： 剪切文件或者改文件名\n  - 参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]\n  - 语法： mv [原文件或目录][目标目录]\n- rm\n  - 原意： remove\n  - 功能： 删除文件或目录\n  - 选项： -r： 删除目录，-f： 强制删除\n  - 参数： 文件或目录\n  - 语法： rm -rf [文件或目录] ==> 强制删除\n- rmdir\n  - 原意： remove empty directories\n  - 功能： 删除空目录\n  - 语法： rmdir [空目录]\n\n## 文件处理命令\n\n- touch\n  - 功能： 创建空文件\n  - 语法： touch [文件名]\n- cat\n  - 功能： 显示文件内容\n  - 选项： -n 显示行号\n  - 语法： cat [文件名]\n- tac\n  - 功能： 反向显示文件内容\n  - 选项： -n 显示行号\n  - 语法： tac [文件名]\n- more\n  - 功能： 分页显示文件内容\n  - 语法： more [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; （B => 上翻）\n- ln\n  - 原意： link\n  - 功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)\n  - 选项： -s： 创建软链接\n  - 语法： ln -s [原文件或目录][目标文件或目录] ==> 软链接; ln [原文件或目录][目标文件或目录] ==> 硬链接;\n- less\n  - 功能： 分页显示文件内容\n  - 语法： less [文件名]\n  - 操作： 空格 => 换页; Enter => 换行; Q => 退出; B => 向上翻页\n- head\n  - 功能： 显示文件前面几行\n  - 选项： -n： 指定行数\n  - 语法： head -n 10 [文件名]\n- tail\n  - 功能： 显示文件后面几行\n  - 选项： -n： 指定行数; -f： 动态显示文件末尾的内容\n  - 语法： tail -n 10 [文件名]\n\n## 文件搜索命令\n\n- find\n\n  - 功能： 文件搜索\n  - 语法： find [搜素范围][匹配条件] [搜素内容]\n  - 例： find /home -name log.md (搜素 log.md 文件)\n    > [ 匹配条件 ]\n    >\n    > - name： 名称搜素\n    > - size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)\n    > - +n(+204800) 大于 204800\n    > - -n\n    > - n 等于\n    > - type： 文件类型\n\n- grep\n  - 功能： 在文件中搜索字符串匹配的行并输出\n  - 选项： -i 不区分大小写; -v 排除指定字符串\n  - 语法： grep -iv [指定字符串][文件]\n- locate\n  - 功能： 在文件资料库中查找文件\n  - 语法： locate [文件名]\n- which\n  - 功能： 搜索命令所在目录及别名信息\n  - 语法： which [命令]\n- whereis\n  - 功能： 搜索命令所在目录以及帮助文档路径\n  - 语法： whereis [命令]\n\n## 帮助命令\n\n- man\n  - 功能： 获取帮助信息\n  - 语法： man [命令或帮助文件]\n- help\n  - 功能： 获取 shell 内置命令的帮助信息\n  - 语法： help [内置命令]\n\n## 权限管理命令\n\n- chmod\n  - 原意： change mode\n  - 功能： 改变文件或目录的权限\n  - 语法： chmod [ugoa+-=rwx][文件或目录]\n  - 例： chmod u-r [文件或目录] => 对文件的所属者去掉 r 权限\n  - 语法： chmod [mode = 777][文件或目录] => 给文件设置所有的用户拥有全部的权限\n  - 例： chmod 764 [文件或目录]\n  - 执行权限： 所有用户\n\n> **[ u，g，o，a 分别代表用户 ]**\n>\n> - u： User 所属者\n> - g： Group 用户组\n> - o： Other 其他用户\n> - a： all 所有人\n>\n> **[ r，w，x 分别代表权限 ]**\n>\n> - r： read 读权限\n>   - 用数字表示 4\n> - w： write 写权限\n>   - 用数字表示 2\n> - x： 执行权限\n>   - 用数字表示 1\n> - 每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)\n> - 例： rwxrw-r-- 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有>读的权限\n>   - 用数字表示： 764（4+2+1，4+2，4）\n\n- chown\n  - 原意： change file ownership\n  - 功能： 改变文件或目录的所属者\n  - 语法： chown [用户][文件/目录]\n  - 执行权限： root\n- umask\n  - 命令英文原意： the user file-creation mask\n  - 显示、设置文件的缺省权限(默认权限)\n  - 执行权限： 所有用户\n  - 语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限\n\n## 用户管理命令\n\n- useradd\n  - 功能： 添加新用户\n  - 执行权限： root\n- passwd\n  - 功能： 修改密码\n- who\n  - 功能： 查看登录用户信息\n- w\n  - 功能： 当前用户详细信息\n\n## 压缩解压命令\n\n- tar\n  - 功能： 打包文件或目录\n  - 说明： **结合 gzip 命令**\n  - 语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -zxf 文件名.tar.gz\n- zip\n  - 功能： 压缩文件或目录\n  - 选项： -r 压缩目录\n  - 语法： zip [新的文件名][目标文件或目录]\n  - 解压： unzip [压缩文件名.zip]\n- bzip2\n  - 功能： 打包文件()\n  - 选项： -k 保留原文件\n  - 说明： **结合 tar 命令使用**\n  - 语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==>直接打包压缩\n  - 解压： tar -xjf 文件名.tar.bz2\n\n## 网络命令\n\n- ping\n  - 功能： 测试网络连通性\n  - 语法： ping [ip 地址]\n- last\n  - 功能： 列出目前和过去登入系统的用户信息\n  - 语法： last\n- traceroute\n  - 功能： 显示数据包到主机间的路径\n  - 语法： traceroute [ip 地址 或 域名]\n- netstat\n  - 功能： 显示网络相关信息\n  - 语法： netstat\n- steup\n  - 功能： 配置网络\n  - 语法： steup\n- write\n  - 功能： 给用户发信息\n  - 语法： write [用户名]\n- wall\n  - 功能： 发广播信息\n  - 语法： wall\n- mail\n  - 功能： 发送电子邮件\n  - 语法： mail [用户名]\n\n## 关机重启命令\n\n- shutdown [选项] now(时间)\n  - -c 取消\n  - -h 关机\n  - -r 重启\n- 其他关机\n  - halt\n  - poweroff\n  - init 0\n- 其他重启\n  - reboot\n  - init 6\n- 扩展\n  - 0 --> 关机\n  - 1 --> 单用户\n  - 2 --> 不完全多用户，不含 nfs 服务\n  - 3 --> 完全多用户\n  - 4 --> 未分配\n  - 5 --> 图形界面\n  - 6 --> 重启\n","slug":"语雀/xsqekz","published":1,"updated":"2022-03-03T11:26:07.599Z","_id":"cl0awjjpp001d081bfgmj87qp","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>[ 命令格式 ]</strong></p>\n<ul>\n<li>命令 [ 选项 ][ 参数 ]</li>\n<li>例： ls -la /home</li>\n</ul>\n<h2 id=\"输入-输出重定向\"><a href=\"#输入-输出重定向\" class=\"headerlink\" title=\"输入 / 输出重定向\"></a>输入 / 输出重定向</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<h2 id=\"目录处理命令\"><a href=\"#目录处理命令\" class=\"headerlink\" title=\"目录处理命令\"></a>目录处理命令</h2><ul>\n<li>ls<ul>\n<li>原意： list</li>\n<li>功能： 显示目录文件</li>\n<li>选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)</li>\n<li>参数： 路径（非必填）</li>\n<li>语法： ls -la /home</li>\n</ul>\n</li>\n<li>cd<ul>\n<li>原意： change directory</li>\n<li>功能： 切换目录</li>\n<li>参数： 路径</li>\n<li>语法： cd /home (绝对路径) 或者 cd admin (相对路径)</li>\n</ul>\n</li>\n<li>pwd<ul>\n<li>原意： print working directory</li>\n<li>功能： 显示当前目录</li>\n<li>语法： pwd</li>\n</ul>\n</li>\n<li>mkdir<ul>\n<li>原意： make directories</li>\n<li>功能： 创建空目录</li>\n<li>选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)</li>\n<li>参数： 目录名</li>\n<li>语法： mkdir -p [目录名]</li>\n</ul>\n</li>\n<li>cp<ul>\n<li>原意： copy</li>\n<li>功能： 复制文件或目录</li>\n<li>选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)</li>\n<li>参数： [原文件或目录][目标目录]</li>\n<li>语法： cp -rp [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li>mv<ul>\n<li>原意： move</li>\n<li>功能： 剪切文件或者改文件名</li>\n<li>参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]</li>\n<li>语法： mv [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li>rm<ul>\n<li>原意： remove</li>\n<li>功能： 删除文件或目录</li>\n<li>选项： -r： 删除目录，-f： 强制删除</li>\n<li>参数： 文件或目录</li>\n<li>语法： rm -rf [文件或目录] ==&gt; 强制删除</li>\n</ul>\n</li>\n<li>rmdir<ul>\n<li>原意： remove empty directories</li>\n<li>功能： 删除空目录</li>\n<li>语法： rmdir [空目录]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件处理命令\"><a href=\"#文件处理命令\" class=\"headerlink\" title=\"文件处理命令\"></a>文件处理命令</h2><ul>\n<li>touch<ul>\n<li>功能： 创建空文件</li>\n<li>语法： touch [文件名]</li>\n</ul>\n</li>\n<li>cat<ul>\n<li>功能： 显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： cat [文件名]</li>\n</ul>\n</li>\n<li>tac<ul>\n<li>功能： 反向显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： tac [文件名]</li>\n</ul>\n</li>\n<li>more<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： more [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; （B =&gt; 上翻）</li>\n</ul>\n</li>\n<li>ln<ul>\n<li>原意： link</li>\n<li>功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)</li>\n<li>选项： -s： 创建软链接</li>\n<li>语法： ln -s [原文件或目录][目标文件或目录] ==&gt; 软链接; ln [原文件或目录][目标文件或目录] ==&gt; 硬链接;</li>\n</ul>\n</li>\n<li>less<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： less [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; B =&gt; 向上翻页</li>\n</ul>\n</li>\n<li>head<ul>\n<li>功能： 显示文件前面几行</li>\n<li>选项： -n： 指定行数</li>\n<li>语法： head -n 10 [文件名]</li>\n</ul>\n</li>\n<li>tail<ul>\n<li>功能： 显示文件后面几行</li>\n<li>选项： -n： 指定行数; -f： 动态显示文件末尾的内容</li>\n<li>语法： tail -n 10 [文件名]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件搜索命令\"><a href=\"#文件搜索命令\" class=\"headerlink\" title=\"文件搜索命令\"></a>文件搜索命令</h2><ul>\n<li><p>find</p>\n<ul>\n<li>功能： 文件搜索</li>\n<li>语法： find [搜素范围][匹配条件] [搜素内容]</li>\n<li>例： find /home -name log.md (搜素 log.md 文件)<blockquote>\n<p>[ 匹配条件 ]</p>\n<ul>\n<li>name： 名称搜素</li>\n<li>size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)</li>\n<li>+n(+204800) 大于 204800</li>\n<li>-n</li>\n<li>n 等于</li>\n<li>type： 文件类型</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>grep</p>\n<ul>\n<li>功能： 在文件中搜索字符串匹配的行并输出</li>\n<li>选项： -i 不区分大小写; -v 排除指定字符串</li>\n<li>语法： grep -iv [指定字符串][文件]</li>\n</ul>\n</li>\n<li><p>locate</p>\n<ul>\n<li>功能： 在文件资料库中查找文件</li>\n<li>语法： locate [文件名]</li>\n</ul>\n</li>\n<li><p>which</p>\n<ul>\n<li>功能： 搜索命令所在目录及别名信息</li>\n<li>语法： which [命令]</li>\n</ul>\n</li>\n<li><p>whereis</p>\n<ul>\n<li>功能： 搜索命令所在目录以及帮助文档路径</li>\n<li>语法： whereis [命令]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><ul>\n<li>man<ul>\n<li>功能： 获取帮助信息</li>\n<li>语法： man [命令或帮助文件]</li>\n</ul>\n</li>\n<li>help<ul>\n<li>功能： 获取 shell 内置命令的帮助信息</li>\n<li>语法： help [内置命令]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"权限管理命令\"><a href=\"#权限管理命令\" class=\"headerlink\" title=\"权限管理命令\"></a>权限管理命令</h2><ul>\n<li>chmod<ul>\n<li>原意： change mode</li>\n<li>功能： 改变文件或目录的权限</li>\n<li>语法： chmod [ugoa+-=rwx][文件或目录]</li>\n<li>例： chmod u-r [文件或目录] =&gt; 对文件的所属者去掉 r 权限</li>\n<li>语法： chmod [mode = 777][文件或目录] =&gt; 给文件设置所有的用户拥有全部的权限</li>\n<li>例： chmod 764 [文件或目录]</li>\n<li>执行权限： 所有用户</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>[ u，g，o，a 分别代表用户 ]</strong></p>\n<ul>\n<li>u： User 所属者</li>\n<li>g： Group 用户组</li>\n<li>o： Other 其他用户</li>\n<li>a： all 所有人</li>\n</ul>\n<p><strong>[ r，w，x 分别代表权限 ]</strong></p>\n<ul>\n<li>r： read 读权限<ul>\n<li>用数字表示 4</li>\n</ul>\n</li>\n<li>w： write 写权限<ul>\n<li>用数字表示 2</li>\n</ul>\n</li>\n<li>x： 执行权限<ul>\n<li>用数字表示 1</li>\n</ul>\n</li>\n<li>每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)</li>\n<li>例： rwxrw-r– 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有&gt;读的权限<ul>\n<li>用数字表示： 764（4+2+1，4+2，4）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>chown<ul>\n<li>原意： change file ownership</li>\n<li>功能： 改变文件或目录的所属者</li>\n<li>语法： chown [用户][文件/目录]</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>umask<ul>\n<li>命令英文原意： the user file-creation mask</li>\n<li>显示、设置文件的缺省权限(默认权限)</li>\n<li>执行权限： 所有用户</li>\n<li>语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户管理命令\"><a href=\"#用户管理命令\" class=\"headerlink\" title=\"用户管理命令\"></a>用户管理命令</h2><ul>\n<li>useradd<ul>\n<li>功能： 添加新用户</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>passwd<ul>\n<li>功能： 修改密码</li>\n</ul>\n</li>\n<li>who<ul>\n<li>功能： 查看登录用户信息</li>\n</ul>\n</li>\n<li>w<ul>\n<li>功能： 当前用户详细信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"压缩解压命令\"><a href=\"#压缩解压命令\" class=\"headerlink\" title=\"压缩解压命令\"></a>压缩解压命令</h2><ul>\n<li>tar<ul>\n<li>功能： 打包文件或目录</li>\n<li>说明： <strong>结合 gzip 命令</strong></li>\n<li>语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -zxf 文件名.tar.gz</li>\n</ul>\n</li>\n<li>zip<ul>\n<li>功能： 压缩文件或目录</li>\n<li>选项： -r 压缩目录</li>\n<li>语法： zip [新的文件名][目标文件或目录]</li>\n<li>解压： unzip [压缩文件名.zip]</li>\n</ul>\n</li>\n<li>bzip2<ul>\n<li>功能： 打包文件()</li>\n<li>选项： -k 保留原文件</li>\n<li>说明： <strong>结合 tar 命令使用</strong></li>\n<li>语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -xjf 文件名.tar.bz2</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网络命令\"><a href=\"#网络命令\" class=\"headerlink\" title=\"网络命令\"></a>网络命令</h2><ul>\n<li>ping<ul>\n<li>功能： 测试网络连通性</li>\n<li>语法： ping [ip 地址]</li>\n</ul>\n</li>\n<li>last<ul>\n<li>功能： 列出目前和过去登入系统的用户信息</li>\n<li>语法： last</li>\n</ul>\n</li>\n<li>traceroute<ul>\n<li>功能： 显示数据包到主机间的路径</li>\n<li>语法： traceroute [ip 地址 或 域名]</li>\n</ul>\n</li>\n<li>netstat<ul>\n<li>功能： 显示网络相关信息</li>\n<li>语法： netstat</li>\n</ul>\n</li>\n<li>steup<ul>\n<li>功能： 配置网络</li>\n<li>语法： steup</li>\n</ul>\n</li>\n<li>write<ul>\n<li>功能： 给用户发信息</li>\n<li>语法： write [用户名]</li>\n</ul>\n</li>\n<li>wall<ul>\n<li>功能： 发广播信息</li>\n<li>语法： wall</li>\n</ul>\n</li>\n<li>mail<ul>\n<li>功能： 发送电子邮件</li>\n<li>语法： mail [用户名]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关机重启命令\"><a href=\"#关机重启命令\" class=\"headerlink\" title=\"关机重启命令\"></a>关机重启命令</h2><ul>\n<li>shutdown [选项] now(时间)<ul>\n<li>-c 取消</li>\n<li>-h 关机</li>\n<li>-r 重启</li>\n</ul>\n</li>\n<li>其他关机<ul>\n<li>halt</li>\n<li>poweroff</li>\n<li>init 0</li>\n</ul>\n</li>\n<li>其他重启<ul>\n<li>reboot</li>\n<li>init 6</li>\n</ul>\n</li>\n<li>扩展<ul>\n<li>0 –&gt; 关机</li>\n<li>1 –&gt; 单用户</li>\n<li>2 –&gt; 不完全多用户，不含 nfs 服务</li>\n<li>3 –&gt; 完全多用户</li>\n<li>4 –&gt; 未分配</li>\n<li>5 –&gt; 图形界面</li>\n<li>6 –&gt; 重启</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<p><strong>[ 命令格式 ]</strong></p>\n<ul>\n<li>命令 [ 选项 ][ 参数 ]</li>\n<li>例： ls -la /home</li>\n</ul>\n<h2 id=\"输入-输出重定向\"><a href=\"#输入-输出重定向\" class=\"headerlink\" title=\"输入 / 输出重定向\"></a>输入 / 输出重定向</h2><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<h2 id=\"目录处理命令\"><a href=\"#目录处理命令\" class=\"headerlink\" title=\"目录处理命令\"></a>目录处理命令</h2><ul>\n<li>ls<ul>\n<li>原意： list</li>\n<li>功能： 显示目录文件</li>\n<li>选项： -a： 显示所有文件(all)，-l： 显示详细信息(long)</li>\n<li>参数： 路径（非必填）</li>\n<li>语法： ls -la /home</li>\n</ul>\n</li>\n<li>cd<ul>\n<li>原意： change directory</li>\n<li>功能： 切换目录</li>\n<li>参数： 路径</li>\n<li>语法： cd /home (绝对路径) 或者 cd admin (相对路径)</li>\n</ul>\n</li>\n<li>pwd<ul>\n<li>原意： print working directory</li>\n<li>功能： 显示当前目录</li>\n<li>语法： pwd</li>\n</ul>\n</li>\n<li>mkdir<ul>\n<li>原意： make directories</li>\n<li>功能： 创建空目录</li>\n<li>选项： -p： 递归创建(可以创建不存在的目录，如： /home/admin/document/work)</li>\n<li>参数： 目录名</li>\n<li>语法： mkdir -p [目录名]</li>\n</ul>\n</li>\n<li>cp<ul>\n<li>原意： copy</li>\n<li>功能： 复制文件或目录</li>\n<li>选项： -r： 复制目录，-p： 保留文件属性 copy(保留创建时间等)</li>\n<li>参数： [原文件或目录][目标目录]</li>\n<li>语法： cp -rp [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li>mv<ul>\n<li>原意： move</li>\n<li>功能： 剪切文件或者改文件名</li>\n<li>参数： [原文件或目录][目标目录] 或者 [原文件名][修改文件名]</li>\n<li>语法： mv [原文件或目录][目标目录]</li>\n</ul>\n</li>\n<li>rm<ul>\n<li>原意： remove</li>\n<li>功能： 删除文件或目录</li>\n<li>选项： -r： 删除目录，-f： 强制删除</li>\n<li>参数： 文件或目录</li>\n<li>语法： rm -rf [文件或目录] ==&gt; 强制删除</li>\n</ul>\n</li>\n<li>rmdir<ul>\n<li>原意： remove empty directories</li>\n<li>功能： 删除空目录</li>\n<li>语法： rmdir [空目录]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件处理命令\"><a href=\"#文件处理命令\" class=\"headerlink\" title=\"文件处理命令\"></a>文件处理命令</h2><ul>\n<li>touch<ul>\n<li>功能： 创建空文件</li>\n<li>语法： touch [文件名]</li>\n</ul>\n</li>\n<li>cat<ul>\n<li>功能： 显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： cat [文件名]</li>\n</ul>\n</li>\n<li>tac<ul>\n<li>功能： 反向显示文件内容</li>\n<li>选项： -n 显示行号</li>\n<li>语法： tac [文件名]</li>\n</ul>\n</li>\n<li>more<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： more [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; （B =&gt; 上翻）</li>\n</ul>\n</li>\n<li>ln<ul>\n<li>原意： link</li>\n<li>功能： 创建软链接(快捷方式)或硬链接(复制文件，文件内容动态变化)</li>\n<li>选项： -s： 创建软链接</li>\n<li>语法： ln -s [原文件或目录][目标文件或目录] ==&gt; 软链接; ln [原文件或目录][目标文件或目录] ==&gt; 硬链接;</li>\n</ul>\n</li>\n<li>less<ul>\n<li>功能： 分页显示文件内容</li>\n<li>语法： less [文件名]</li>\n<li>操作： 空格 =&gt; 换页; Enter =&gt; 换行; Q =&gt; 退出; B =&gt; 向上翻页</li>\n</ul>\n</li>\n<li>head<ul>\n<li>功能： 显示文件前面几行</li>\n<li>选项： -n： 指定行数</li>\n<li>语法： head -n 10 [文件名]</li>\n</ul>\n</li>\n<li>tail<ul>\n<li>功能： 显示文件后面几行</li>\n<li>选项： -n： 指定行数; -f： 动态显示文件末尾的内容</li>\n<li>语法： tail -n 10 [文件名]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件搜索命令\"><a href=\"#文件搜索命令\" class=\"headerlink\" title=\"文件搜索命令\"></a>文件搜索命令</h2><ul>\n<li><p>find</p>\n<ul>\n<li>功能： 文件搜索</li>\n<li>语法： find [搜素范围][匹配条件] [搜素内容]</li>\n<li>例： find /home -name log.md (搜素 log.md 文件)<blockquote>\n<p>[ 匹配条件 ]</p>\n<ul>\n<li>name： 名称搜素</li>\n<li>size： 文件大小搜素(按块搜素，1 块 = 0.5k，00M = 204800 块)</li>\n<li>+n(+204800) 大于 204800</li>\n<li>-n</li>\n<li>n 等于</li>\n<li>type： 文件类型</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>grep</p>\n<ul>\n<li>功能： 在文件中搜索字符串匹配的行并输出</li>\n<li>选项： -i 不区分大小写; -v 排除指定字符串</li>\n<li>语法： grep -iv [指定字符串][文件]</li>\n</ul>\n</li>\n<li><p>locate</p>\n<ul>\n<li>功能： 在文件资料库中查找文件</li>\n<li>语法： locate [文件名]</li>\n</ul>\n</li>\n<li><p>which</p>\n<ul>\n<li>功能： 搜索命令所在目录及别名信息</li>\n<li>语法： which [命令]</li>\n</ul>\n</li>\n<li><p>whereis</p>\n<ul>\n<li>功能： 搜索命令所在目录以及帮助文档路径</li>\n<li>语法： whereis [命令]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><ul>\n<li>man<ul>\n<li>功能： 获取帮助信息</li>\n<li>语法： man [命令或帮助文件]</li>\n</ul>\n</li>\n<li>help<ul>\n<li>功能： 获取 shell 内置命令的帮助信息</li>\n<li>语法： help [内置命令]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"权限管理命令\"><a href=\"#权限管理命令\" class=\"headerlink\" title=\"权限管理命令\"></a>权限管理命令</h2><ul>\n<li>chmod<ul>\n<li>原意： change mode</li>\n<li>功能： 改变文件或目录的权限</li>\n<li>语法： chmod [ugoa+-=rwx][文件或目录]</li>\n<li>例： chmod u-r [文件或目录] =&gt; 对文件的所属者去掉 r 权限</li>\n<li>语法： chmod [mode = 777][文件或目录] =&gt; 给文件设置所有的用户拥有全部的权限</li>\n<li>例： chmod 764 [文件或目录]</li>\n<li>执行权限： 所有用户</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>[ u，g，o，a 分别代表用户 ]</strong></p>\n<ul>\n<li>u： User 所属者</li>\n<li>g： Group 用户组</li>\n<li>o： Other 其他用户</li>\n<li>a： all 所有人</li>\n</ul>\n<p><strong>[ r，w，x 分别代表权限 ]</strong></p>\n<ul>\n<li>r： read 读权限<ul>\n<li>用数字表示 4</li>\n</ul>\n</li>\n<li>w： write 写权限<ul>\n<li>用数字表示 2</li>\n</ul>\n</li>\n<li>x： 执行权限<ul>\n<li>用数字表示 1</li>\n</ul>\n</li>\n<li>每一个文件或目录都会用 rwxrwxrwx 来显示 ugo 三者的权限(顺序不可变)</li>\n<li>例： rwxrw-r– 指的是 u 拥有所有的权限，g 拥有读写的权限，o 只拥有&gt;读的权限<ul>\n<li>用数字表示： 764（4+2+1，4+2，4）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>chown<ul>\n<li>原意： change file ownership</li>\n<li>功能： 改变文件或目录的所属者</li>\n<li>语法： chown [用户][文件/目录]</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>umask<ul>\n<li>命令英文原意： the user file-creation mask</li>\n<li>显示、设置文件的缺省权限(默认权限)</li>\n<li>执行权限： 所有用户</li>\n<li>语法： umask [-S] -S 以 rwx 形式显示新建文件的缺省权限</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户管理命令\"><a href=\"#用户管理命令\" class=\"headerlink\" title=\"用户管理命令\"></a>用户管理命令</h2><ul>\n<li>useradd<ul>\n<li>功能： 添加新用户</li>\n<li>执行权限： root</li>\n</ul>\n</li>\n<li>passwd<ul>\n<li>功能： 修改密码</li>\n</ul>\n</li>\n<li>who<ul>\n<li>功能： 查看登录用户信息</li>\n</ul>\n</li>\n<li>w<ul>\n<li>功能： 当前用户详细信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"压缩解压命令\"><a href=\"#压缩解压命令\" class=\"headerlink\" title=\"压缩解压命令\"></a>压缩解压命令</h2><ul>\n<li>tar<ul>\n<li>功能： 打包文件或目录</li>\n<li>说明： <strong>结合 gzip 命令</strong></li>\n<li>语法： tar -zcf 新的文件名.tar.gz [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -zxf 文件名.tar.gz</li>\n</ul>\n</li>\n<li>zip<ul>\n<li>功能： 压缩文件或目录</li>\n<li>选项： -r 压缩目录</li>\n<li>语法： zip [新的文件名][目标文件或目录]</li>\n<li>解压： unzip [压缩文件名.zip]</li>\n</ul>\n</li>\n<li>bzip2<ul>\n<li>功能： 打包文件()</li>\n<li>选项： -k 保留原文件</li>\n<li>说明： <strong>结合 tar 命令使用</strong></li>\n<li>语法： tar -cjf 新的文件名.tar.bz2 [目标文件或目录] ==&gt;直接打包压缩</li>\n<li>解压： tar -xjf 文件名.tar.bz2</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网络命令\"><a href=\"#网络命令\" class=\"headerlink\" title=\"网络命令\"></a>网络命令</h2><ul>\n<li>ping<ul>\n<li>功能： 测试网络连通性</li>\n<li>语法： ping [ip 地址]</li>\n</ul>\n</li>\n<li>last<ul>\n<li>功能： 列出目前和过去登入系统的用户信息</li>\n<li>语法： last</li>\n</ul>\n</li>\n<li>traceroute<ul>\n<li>功能： 显示数据包到主机间的路径</li>\n<li>语法： traceroute [ip 地址 或 域名]</li>\n</ul>\n</li>\n<li>netstat<ul>\n<li>功能： 显示网络相关信息</li>\n<li>语法： netstat</li>\n</ul>\n</li>\n<li>steup<ul>\n<li>功能： 配置网络</li>\n<li>语法： steup</li>\n</ul>\n</li>\n<li>write<ul>\n<li>功能： 给用户发信息</li>\n<li>语法： write [用户名]</li>\n</ul>\n</li>\n<li>wall<ul>\n<li>功能： 发广播信息</li>\n<li>语法： wall</li>\n</ul>\n</li>\n<li>mail<ul>\n<li>功能： 发送电子邮件</li>\n<li>语法： mail [用户名]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关机重启命令\"><a href=\"#关机重启命令\" class=\"headerlink\" title=\"关机重启命令\"></a>关机重启命令</h2><ul>\n<li>shutdown [选项] now(时间)<ul>\n<li>-c 取消</li>\n<li>-h 关机</li>\n<li>-r 重启</li>\n</ul>\n</li>\n<li>其他关机<ul>\n<li>halt</li>\n<li>poweroff</li>\n<li>init 0</li>\n</ul>\n</li>\n<li>其他重启<ul>\n<li>reboot</li>\n<li>init 6</li>\n</ul>\n</li>\n<li>扩展<ul>\n<li>0 –&gt; 关机</li>\n<li>1 –&gt; 单用户</li>\n<li>2 –&gt; 不完全多用户，不含 nfs 服务</li>\n<li>3 –&gt; 完全多用户</li>\n<li>4 –&gt; 未分配</li>\n<li>5 –&gt; 图形界面</li>\n<li>6 –&gt; 重启</li>\n</ul>\n</li>\n</ul>\n"},{"title":"测试用例设计","urlname":"ymoqfk","date":"2020-05-30T15:39:45.000Z","abbrlink":3157456672,"_content":"\n### 假如有一个预约口罩的功能，\n\n- 每天只能预约一次；\n- 每天晚上 8 点公布前一天的预约结果；\n- 每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好\n\n**预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，是否支持剪贴板操作，输入过程中是否支持 tab enter 键；提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证**\n\n### QQ 文件传输测试用例\n\n- 传输成功\n\n1. ⽂件直接拖到对话框，点击发送\n1. 点击传送⽂件按钮，选择⽂件，点击发送\n1. 传送汇总显示进度条\n1. 传送显示⽂件名字，以及⽂件⼤⼩\n1. 给⼀个⽤户传输多个⽂件\n1. 同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)\n1. 本地打开的时候，可以传送⽂件\n1. 接收成功的默认路径\n1. ⽂件接收后，是否正常\n1. 是否可以更改保存路径\n1. ⽂件传输时，不影响其他功能\n1. 接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）\n\n- 传输失败\n\n1. 点击取消，可以取消⽂件发送\n1. 接收⽅，拒绝接收\n1. 直接关闭对话框，有提示，有⽂件在传输\n1. ⽂件-⽂件夹，⽂件夹多层，空⽂件\n1. ⽂件⼤⼩的边界值\n\n- ⽂件名称\n\n1. 普通⽂件\n1. 含有特殊符号的⽂件\n1. ⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号\n\n- ⽂件格式\n\n1. exe ⽂件，txt，doc，pdf 等\n1. 图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件\n\n- 界⾯测试\n\n1. 界⾯美观、易⽤\n1. 按钮位置符合规范以及正确\n1. 提示语是否正确\n\n- 其他测试\n\n1. 弱⽹情况传输\n1. 上传中断⽹\n1. 上传⽂件，把源⽂件删除\n\n### 一个有广告的纸杯子，请设计测试用例？\n\n- 测试项目：杯子\n- 需求测试：查看杯子使用说明书\n- 界面测试：查看杯子外观\n- 功能度：用水杯装水看漏不漏；水能不能被喝到\n- 安全性：杯子有没有毒或细菌\n- 可靠性：杯子从不同高度落下的损坏程度\n- 可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用\n- 兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等\n- 易用性：杯子是否烫手、是否有防滑措施、是否方便饮用\n- 用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述\n- 疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等\n- 压力测试：用根针并在针上面不断加重量，看压强多大时会穿透\n- 跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损\n- 震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输\n- 硬度：是否达到设计标准。\n  - 装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。\n  - 装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。\n- 界面测试（UI 测试）。\n  - 看其形状、大小设计是否适合人方便拿起。\n  - 外观是否吸引人（广告嘛），赏心悦目。\n  - 带广告的图案沾水受是否掉色、模糊。\n- 易用性测试。\n  - 看其形状、大小设计是否适合人方便拿起。\n  - 残疾人士用此杯去喝水的容程度。\n  - 杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。\n- 稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。\n- 安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。\n- 本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。\n- 对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。\n\n### 一个身份证号码输入框，怎么设计用例？\n\n- 校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码\n- 校验 15 位身份证号和 18 位身份正好都是可用的\n- 校验末位是 X 的情况\n- 校验不足 15 位、16-17 位和大于 18 位的情况\n- 如果是必输项，校验不输入的时候会不会有正确的提示\n- 如果不是必输项，则要校验不输入的时候流程能否正常进行\n- 校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）\n- 校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）\n\n### 登录功能怎么设计测试用例？\n\n具体需求：\n有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。\n\n**[ 考察目的：]**\n\n1. 了解需求（测什么都是从了解需求开始）；\n1. 是否有设计 Test Case 的能力\n1. 是否熟悉各种测试方法；\n1. 是否有丰富的 Web 测试经验；\n1. 是否了解 Web 开发；\n\n**[ 了解需求：]**\n\n1、登录界面应该是弹出窗口式的，还是直接在网页里面；\n2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；\n3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；\n4、····\n\n**[ 用例设计：]**\n\n- 功能测试\n  - 输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）\n  - 输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）\n  - 登录成功后能否跳转到正确的页面（低）\n  - 账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）\n  - 账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）\n  - 记住账号的功能\n  - 登录失败后，不能记录密码的功能\n  - 账号和密码前后有空格的处理\n  - 密码是否加密显示（星号圆点等）\n  - 牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用\n  - 登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确\n  - 输入密码的时候，大写键盘开启的时候要有提示信息。\n  - 什么都不输入，点击提交按钮，看提示信息。（非空检查）\n- 界面测试\n  - 布局是否合理，2 个 Testbox 和一个按钮是否对齐\n  - Testbox 和按钮的长度，高度是否复合要求\n  - 界面的设计风格是否与 UI 的设计风格统一\n  - 界面中的文字简洁易懂，没有错别字。\n- 性能测试(Performance Test)\n  - 打开登录页面，需要几秒\n  - 输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒\n- 安全性测试(Security Test)\n  - 登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)\n  - 账号和密码是否通过加密的方式，发送给 Web 服务器\n  - 账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证\n  - 账号和密码的输入框，应该屏蔽 SQL 注入攻击\n  - 账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）\n  - 错误登录的次数限制（防止暴力破解）\n  - 考虑是否支持多用户在同一机器上登录；\n  - 考虑一用户在多台机器上登录\n- 可用性测试(Usability Test)\n  - 是否可以全用键盘操作，是否有快捷键\n  - 输入账号，密码后按回车，是否可以登录\n  - 输入框是否可以以 Tab 键切换\n- 兼容性测试（Compatibility Test）\n  - 主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）\n  - 不同的平台是否能正常工作，比如 Windows, Mac\n  - 移动设备上是否正常工作，比如 iPhone, Android\n  - 不同的分辨率\n","source":"_posts/语雀/ymoqfk.md","raw":"---\ntitle: 测试用例设计\nurlname: ymoqfk\ndate: '2020-05-30 23:39:45 +0800'\ntags: []\ncategories: []\nabbrlink: 3157456672\n---\n\n### 假如有一个预约口罩的功能，\n\n- 每天只能预约一次；\n- 每天晚上 8 点公布前一天的预约结果；\n- 每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好\n\n**预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，是否支持剪贴板操作，输入过程中是否支持 tab enter 键；提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证**\n\n### QQ 文件传输测试用例\n\n- 传输成功\n\n1. ⽂件直接拖到对话框，点击发送\n1. 点击传送⽂件按钮，选择⽂件，点击发送\n1. 传送汇总显示进度条\n1. 传送显示⽂件名字，以及⽂件⼤⼩\n1. 给⼀个⽤户传输多个⽂件\n1. 同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)\n1. 本地打开的时候，可以传送⽂件\n1. 接收成功的默认路径\n1. ⽂件接收后，是否正常\n1. 是否可以更改保存路径\n1. ⽂件传输时，不影响其他功能\n1. 接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）\n\n- 传输失败\n\n1. 点击取消，可以取消⽂件发送\n1. 接收⽅，拒绝接收\n1. 直接关闭对话框，有提示，有⽂件在传输\n1. ⽂件-⽂件夹，⽂件夹多层，空⽂件\n1. ⽂件⼤⼩的边界值\n\n- ⽂件名称\n\n1. 普通⽂件\n1. 含有特殊符号的⽂件\n1. ⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号\n\n- ⽂件格式\n\n1. exe ⽂件，txt，doc，pdf 等\n1. 图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件\n\n- 界⾯测试\n\n1. 界⾯美观、易⽤\n1. 按钮位置符合规范以及正确\n1. 提示语是否正确\n\n- 其他测试\n\n1. 弱⽹情况传输\n1. 上传中断⽹\n1. 上传⽂件，把源⽂件删除\n\n### 一个有广告的纸杯子，请设计测试用例？\n\n- 测试项目：杯子\n- 需求测试：查看杯子使用说明书\n- 界面测试：查看杯子外观\n- 功能度：用水杯装水看漏不漏；水能不能被喝到\n- 安全性：杯子有没有毒或细菌\n- 可靠性：杯子从不同高度落下的损坏程度\n- 可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用\n- 兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等\n- 易用性：杯子是否烫手、是否有防滑措施、是否方便饮用\n- 用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述\n- 疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等\n- 压力测试：用根针并在针上面不断加重量，看压强多大时会穿透\n- 跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损\n- 震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输\n- 硬度：是否达到设计标准。\n  - 装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。\n  - 装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。\n- 界面测试（UI 测试）。\n  - 看其形状、大小设计是否适合人方便拿起。\n  - 外观是否吸引人（广告嘛），赏心悦目。\n  - 带广告的图案沾水受是否掉色、模糊。\n- 易用性测试。\n  - 看其形状、大小设计是否适合人方便拿起。\n  - 残疾人士用此杯去喝水的容程度。\n  - 杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。\n- 稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。\n- 安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。\n- 本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。\n- 对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。\n\n### 一个身份证号码输入框，怎么设计用例？\n\n- 校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码\n- 校验 15 位身份证号和 18 位身份正好都是可用的\n- 校验末位是 X 的情况\n- 校验不足 15 位、16-17 位和大于 18 位的情况\n- 如果是必输项，校验不输入的时候会不会有正确的提示\n- 如果不是必输项，则要校验不输入的时候流程能否正常进行\n- 校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）\n- 校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）\n\n### 登录功能怎么设计测试用例？\n\n具体需求：\n有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。\n\n**[ 考察目的：]**\n\n1. 了解需求（测什么都是从了解需求开始）；\n1. 是否有设计 Test Case 的能力\n1. 是否熟悉各种测试方法；\n1. 是否有丰富的 Web 测试经验；\n1. 是否了解 Web 开发；\n\n**[ 了解需求：]**\n\n1、登录界面应该是弹出窗口式的，还是直接在网页里面；\n2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；\n3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；\n4、····\n\n**[ 用例设计：]**\n\n- 功能测试\n  - 输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）\n  - 输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）\n  - 登录成功后能否跳转到正确的页面（低）\n  - 账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）\n  - 账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）\n  - 记住账号的功能\n  - 登录失败后，不能记录密码的功能\n  - 账号和密码前后有空格的处理\n  - 密码是否加密显示（星号圆点等）\n  - 牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用\n  - 登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确\n  - 输入密码的时候，大写键盘开启的时候要有提示信息。\n  - 什么都不输入，点击提交按钮，看提示信息。（非空检查）\n- 界面测试\n  - 布局是否合理，2 个 Testbox 和一个按钮是否对齐\n  - Testbox 和按钮的长度，高度是否复合要求\n  - 界面的设计风格是否与 UI 的设计风格统一\n  - 界面中的文字简洁易懂，没有错别字。\n- 性能测试(Performance Test)\n  - 打开登录页面，需要几秒\n  - 输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒\n- 安全性测试(Security Test)\n  - 登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)\n  - 账号和密码是否通过加密的方式，发送给 Web 服务器\n  - 账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证\n  - 账号和密码的输入框，应该屏蔽 SQL 注入攻击\n  - 账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）\n  - 错误登录的次数限制（防止暴力破解）\n  - 考虑是否支持多用户在同一机器上登录；\n  - 考虑一用户在多台机器上登录\n- 可用性测试(Usability Test)\n  - 是否可以全用键盘操作，是否有快捷键\n  - 输入账号，密码后按回车，是否可以登录\n  - 输入框是否可以以 Tab 键切换\n- 兼容性测试（Compatibility Test）\n  - 主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）\n  - 不同的平台是否能正常工作，比如 Windows, Mac\n  - 移动设备上是否正常工作，比如 iPhone, Android\n  - 不同的分辨率\n","slug":"语雀/ymoqfk","published":1,"updated":"2022-03-03T11:26:07.600Z","_id":"cl0awjjpp001e081bcbmbfd7r","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"假如有一个预约口罩的功能，\"><a href=\"#假如有一个预约口罩的功能，\" class=\"headerlink\" title=\"假如有一个预约口罩的功能，\"></a>假如有一个预约口罩的功能，</h3><ul>\n<li>每天只能预约一次；</li>\n<li>每天晚上 8 点公布前一天的预约结果；</li>\n<li>每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好</li>\n</ul>\n<p><strong>预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，是否支持剪贴板操作，输入过程中是否支持 tab enter 键；提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证</strong></p>\n<h3 id=\"QQ-文件传输测试用例\"><a href=\"#QQ-文件传输测试用例\" class=\"headerlink\" title=\"QQ 文件传输测试用例\"></a>QQ 文件传输测试用例</h3><ul>\n<li>传输成功</li>\n</ul>\n<ol>\n<li>⽂件直接拖到对话框，点击发送</li>\n<li>点击传送⽂件按钮，选择⽂件，点击发送</li>\n<li>传送汇总显示进度条</li>\n<li>传送显示⽂件名字，以及⽂件⼤⼩</li>\n<li>给⼀个⽤户传输多个⽂件</li>\n<li>同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)</li>\n<li>本地打开的时候，可以传送⽂件</li>\n<li>接收成功的默认路径</li>\n<li>⽂件接收后，是否正常</li>\n<li>是否可以更改保存路径</li>\n<li>⽂件传输时，不影响其他功能</li>\n<li>接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）</li>\n</ol>\n<ul>\n<li>传输失败</li>\n</ul>\n<ol>\n<li>点击取消，可以取消⽂件发送</li>\n<li>接收⽅，拒绝接收</li>\n<li>直接关闭对话框，有提示，有⽂件在传输</li>\n<li>⽂件-⽂件夹，⽂件夹多层，空⽂件</li>\n<li>⽂件⼤⼩的边界值</li>\n</ol>\n<ul>\n<li>⽂件名称</li>\n</ul>\n<ol>\n<li>普通⽂件</li>\n<li>含有特殊符号的⽂件</li>\n<li>⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号</li>\n</ol>\n<ul>\n<li>⽂件格式</li>\n</ul>\n<ol>\n<li>exe ⽂件，txt，doc，pdf 等</li>\n<li>图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件</li>\n</ol>\n<ul>\n<li>界⾯测试</li>\n</ul>\n<ol>\n<li>界⾯美观、易⽤</li>\n<li>按钮位置符合规范以及正确</li>\n<li>提示语是否正确</li>\n</ol>\n<ul>\n<li>其他测试</li>\n</ul>\n<ol>\n<li>弱⽹情况传输</li>\n<li>上传中断⽹</li>\n<li>上传⽂件，把源⽂件删除</li>\n</ol>\n<h3 id=\"一个有广告的纸杯子，请设计测试用例？\"><a href=\"#一个有广告的纸杯子，请设计测试用例？\" class=\"headerlink\" title=\"一个有广告的纸杯子，请设计测试用例？\"></a>一个有广告的纸杯子，请设计测试用例？</h3><ul>\n<li>测试项目：杯子</li>\n<li>需求测试：查看杯子使用说明书</li>\n<li>界面测试：查看杯子外观</li>\n<li>功能度：用水杯装水看漏不漏；水能不能被喝到</li>\n<li>安全性：杯子有没有毒或细菌</li>\n<li>可靠性：杯子从不同高度落下的损坏程度</li>\n<li>可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用</li>\n<li>兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等</li>\n<li>易用性：杯子是否烫手、是否有防滑措施、是否方便饮用</li>\n<li>用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述</li>\n<li>疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等</li>\n<li>压力测试：用根针并在针上面不断加重量，看压强多大时会穿透</li>\n<li>跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损</li>\n<li>震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输</li>\n<li>硬度：是否达到设计标准。<ul>\n<li>装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。</li>\n<li>装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。</li>\n</ul>\n</li>\n<li>界面测试（UI 测试）。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>外观是否吸引人（广告嘛），赏心悦目。</li>\n<li>带广告的图案沾水受是否掉色、模糊。</li>\n</ul>\n</li>\n<li>易用性测试。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>残疾人士用此杯去喝水的容程度。</li>\n<li>杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。</li>\n</ul>\n</li>\n<li>稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。</li>\n<li>安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。</li>\n<li>本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。</li>\n<li>对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。</li>\n</ul>\n<h3 id=\"一个身份证号码输入框，怎么设计用例？\"><a href=\"#一个身份证号码输入框，怎么设计用例？\" class=\"headerlink\" title=\"一个身份证号码输入框，怎么设计用例？\"></a>一个身份证号码输入框，怎么设计用例？</h3><ul>\n<li>校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码</li>\n<li>校验 15 位身份证号和 18 位身份正好都是可用的</li>\n<li>校验末位是 X 的情况</li>\n<li>校验不足 15 位、16-17 位和大于 18 位的情况</li>\n<li>如果是必输项，校验不输入的时候会不会有正确的提示</li>\n<li>如果不是必输项，则要校验不输入的时候流程能否正常进行</li>\n<li>校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）</li>\n<li>校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）</li>\n</ul>\n<h3 id=\"登录功能怎么设计测试用例？\"><a href=\"#登录功能怎么设计测试用例？\" class=\"headerlink\" title=\"登录功能怎么设计测试用例？\"></a>登录功能怎么设计测试用例？</h3><p>具体需求：<br>有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。</p>\n<p><strong>[ 考察目的：]</strong></p>\n<ol>\n<li>了解需求（测什么都是从了解需求开始）；</li>\n<li>是否有设计 Test Case 的能力</li>\n<li>是否熟悉各种测试方法；</li>\n<li>是否有丰富的 Web 测试经验；</li>\n<li>是否了解 Web 开发；</li>\n</ol>\n<p><strong>[ 了解需求：]</strong></p>\n<p>1、登录界面应该是弹出窗口式的，还是直接在网页里面；<br>2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；<br>3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；<br>4、····</p>\n<p><strong>[ 用例设计：]</strong></p>\n<ul>\n<li>功能测试<ul>\n<li>输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）</li>\n<li>输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）</li>\n<li>登录成功后能否跳转到正确的页面（低）</li>\n<li>账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）</li>\n<li>账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）</li>\n<li>记住账号的功能</li>\n<li>登录失败后，不能记录密码的功能</li>\n<li>账号和密码前后有空格的处理</li>\n<li>密码是否加密显示（星号圆点等）</li>\n<li>牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用</li>\n<li>登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确</li>\n<li>输入密码的时候，大写键盘开启的时候要有提示信息。</li>\n<li>什么都不输入，点击提交按钮，看提示信息。（非空检查）</li>\n</ul>\n</li>\n<li>界面测试<ul>\n<li>布局是否合理，2 个 Testbox 和一个按钮是否对齐</li>\n<li>Testbox 和按钮的长度，高度是否复合要求</li>\n<li>界面的设计风格是否与 UI 的设计风格统一</li>\n<li>界面中的文字简洁易懂，没有错别字。</li>\n</ul>\n</li>\n<li>性能测试(Performance Test)<ul>\n<li>打开登录页面，需要几秒</li>\n<li>输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒</li>\n</ul>\n</li>\n<li>安全性测试(Security Test)<ul>\n<li>登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)</li>\n<li>账号和密码是否通过加密的方式，发送给 Web 服务器</li>\n<li>账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证</li>\n<li>账号和密码的输入框，应该屏蔽 SQL 注入攻击</li>\n<li>账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）</li>\n<li>错误登录的次数限制（防止暴力破解）</li>\n<li>考虑是否支持多用户在同一机器上登录；</li>\n<li>考虑一用户在多台机器上登录</li>\n</ul>\n</li>\n<li>可用性测试(Usability Test)<ul>\n<li>是否可以全用键盘操作，是否有快捷键</li>\n<li>输入账号，密码后按回车，是否可以登录</li>\n<li>输入框是否可以以 Tab 键切换</li>\n</ul>\n</li>\n<li>兼容性测试（Compatibility Test）<ul>\n<li>主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）</li>\n<li>不同的平台是否能正常工作，比如 Windows, Mac</li>\n<li>移动设备上是否正常工作，比如 iPhone, Android</li>\n<li>不同的分辨率</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":"<h3 id=\"假如有一个预约口罩的功能，\"><a href=\"#假如有一个预约口罩的功能，\" class=\"headerlink\" title=\"假如有一个预约口罩的功能，\"></a>假如有一个预约口罩的功能，</h3><ul>\n<li>每天只能预约一次；</li>\n<li>每天晚上 8 点公布前一天的预约结果；</li>\n<li>每次预约时需要提交一个表单，表格里包括身手机号，身份证号等信息。你针对这个来说一说有哪些测试点。越多越好</li>\n</ul>\n<p><strong>预约次数，是否准时公布结果，公布结果是否正确，表单是否必填，手机号长度、号段、特殊字符，身份证长度，末尾最后一项，是否支持剪贴板操作，输入过程中是否支持 tab enter 键；提交按钮是否正常响应，预约信息是否添加数据库，预约人数限制，预约地区限制，预约条件、身份认证</strong></p>\n<h3 id=\"QQ-文件传输测试用例\"><a href=\"#QQ-文件传输测试用例\" class=\"headerlink\" title=\"QQ 文件传输测试用例\"></a>QQ 文件传输测试用例</h3><ul>\n<li>传输成功</li>\n</ul>\n<ol>\n<li>⽂件直接拖到对话框，点击发送</li>\n<li>点击传送⽂件按钮，选择⽂件，点击发送</li>\n<li>传送汇总显示进度条</li>\n<li>传送显示⽂件名字，以及⽂件⼤⼩</li>\n<li>给⼀个⽤户传输多个⽂件</li>\n<li>同时给不同⽤户传输⽂件（相同⽂件和不同⽂件)</li>\n<li>本地打开的时候，可以传送⽂件</li>\n<li>接收成功的默认路径</li>\n<li>⽂件接收后，是否正常</li>\n<li>是否可以更改保存路径</li>\n<li>⽂件传输时，不影响其他功能</li>\n<li>接收⽅在线，不在线，离线⽂件，好友，⾮好友（临时会话）</li>\n</ol>\n<ul>\n<li>传输失败</li>\n</ul>\n<ol>\n<li>点击取消，可以取消⽂件发送</li>\n<li>接收⽅，拒绝接收</li>\n<li>直接关闭对话框，有提示，有⽂件在传输</li>\n<li>⽂件-⽂件夹，⽂件夹多层，空⽂件</li>\n<li>⽂件⼤⼩的边界值</li>\n</ol>\n<ul>\n<li>⽂件名称</li>\n</ul>\n<ol>\n<li>普通⽂件</li>\n<li>含有特殊符号的⽂件</li>\n<li>⽂件名空，空格，纯中⽂，中英混合，纯英⽂，含有标点符号</li>\n</ol>\n<ul>\n<li>⽂件格式</li>\n</ul>\n<ol>\n<li>exe ⽂件，txt，doc，pdf 等</li>\n<li>图⽚、视频、⾳频、压缩⽂件、⽂件夹、病毒⽂件</li>\n</ol>\n<ul>\n<li>界⾯测试</li>\n</ul>\n<ol>\n<li>界⾯美观、易⽤</li>\n<li>按钮位置符合规范以及正确</li>\n<li>提示语是否正确</li>\n</ol>\n<ul>\n<li>其他测试</li>\n</ul>\n<ol>\n<li>弱⽹情况传输</li>\n<li>上传中断⽹</li>\n<li>上传⽂件，把源⽂件删除</li>\n</ol>\n<h3 id=\"一个有广告的纸杯子，请设计测试用例？\"><a href=\"#一个有广告的纸杯子，请设计测试用例？\" class=\"headerlink\" title=\"一个有广告的纸杯子，请设计测试用例？\"></a>一个有广告的纸杯子，请设计测试用例？</h3><ul>\n<li>测试项目：杯子</li>\n<li>需求测试：查看杯子使用说明书</li>\n<li>界面测试：查看杯子外观</li>\n<li>功能度：用水杯装水看漏不漏；水能不能被喝到</li>\n<li>安全性：杯子有没有毒或细菌</li>\n<li>可靠性：杯子从不同高度落下的损坏程度</li>\n<li>可移植性：杯子再不同的地方、温度等环境下是否都可以正常使用</li>\n<li>兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等</li>\n<li>易用性：杯子是否烫手、是否有防滑措施、是否方便饮用</li>\n<li>用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述</li>\n<li>疲劳测试：将杯子盛上水（案例一）放 24 小时检查泄漏时间和情况；盛上汽油（案例二）放 24 小时检查泄漏时间和情况等</li>\n<li>压力测试：用根针并在针上面不断加重量，看压强多大时会穿透</li>\n<li>跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损</li>\n<li>震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\\公路\\航空运输</li>\n<li>硬度：是否达到设计标准。<ul>\n<li>装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。</li>\n<li>装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。。。</li>\n</ul>\n</li>\n<li>界面测试（UI 测试）。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>外观是否吸引人（广告嘛），赏心悦目。</li>\n<li>带广告的图案沾水受是否掉色、模糊。</li>\n</ul>\n</li>\n<li>易用性测试。<ul>\n<li>看其形状、大小设计是否适合人方便拿起。</li>\n<li>残疾人士用此杯去喝水的容程度。</li>\n<li>杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。</li>\n</ul>\n</li>\n<li>稳定性测试（24 X 7 测试）。装入液体后记录其多少以后漏水。</li>\n<li>安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。</li>\n<li>本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。</li>\n<li>对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。</li>\n</ul>\n<h3 id=\"一个身份证号码输入框，怎么设计用例？\"><a href=\"#一个身份证号码输入框，怎么设计用例？\" class=\"headerlink\" title=\"一个身份证号码输入框，怎么设计用例？\"></a>一个身份证号码输入框，怎么设计用例？</h3><ul>\n<li>校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码</li>\n<li>校验 15 位身份证号和 18 位身份正好都是可用的</li>\n<li>校验末位是 X 的情况</li>\n<li>校验不足 15 位、16-17 位和大于 18 位的情况</li>\n<li>如果是必输项，校验不输入的时候会不会有正确的提示</li>\n<li>如果不是必输项，则要校验不输入的时候流程能否正常进行</li>\n<li>校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）</li>\n<li>校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）</li>\n</ul>\n<h3 id=\"登录功能怎么设计测试用例？\"><a href=\"#登录功能怎么设计测试用例？\" class=\"headerlink\" title=\"登录功能怎么设计测试用例？\"></a>登录功能怎么设计测试用例？</h3><p>具体需求：<br>有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。</p>\n<p><strong>[ 考察目的：]</strong></p>\n<ol>\n<li>了解需求（测什么都是从了解需求开始）；</li>\n<li>是否有设计 Test Case 的能力</li>\n<li>是否熟悉各种测试方法；</li>\n<li>是否有丰富的 Web 测试经验；</li>\n<li>是否了解 Web 开发；</li>\n</ol>\n<p><strong>[ 了解需求：]</strong></p>\n<p>1、登录界面应该是弹出窗口式的，还是直接在网页里面；<br>2、账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；<br>3、界面美观是否有特殊要求？（即是否要进行 UI 测试）；<br>4、····</p>\n<p><strong>[ 用例设计：]</strong></p>\n<ul>\n<li>功能测试<ul>\n<li>输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）</li>\n<li>输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。（错误校验）</li>\n<li>登录成功后能否跳转到正确的页面（低）</li>\n<li>账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）</li>\n<li>账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）</li>\n<li>记住账号的功能</li>\n<li>登录失败后，不能记录密码的功能</li>\n<li>账号和密码前后有空格的处理</li>\n<li>密码是否加密显示（星号圆点等）</li>\n<li>牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用</li>\n<li>登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确</li>\n<li>输入密码的时候，大写键盘开启的时候要有提示信息。</li>\n<li>什么都不输入，点击提交按钮，看提示信息。（非空检查）</li>\n</ul>\n</li>\n<li>界面测试<ul>\n<li>布局是否合理，2 个 Testbox 和一个按钮是否对齐</li>\n<li>Testbox 和按钮的长度，高度是否复合要求</li>\n<li>界面的设计风格是否与 UI 的设计风格统一</li>\n<li>界面中的文字简洁易懂，没有错别字。</li>\n</ul>\n</li>\n<li>性能测试(Performance Test)<ul>\n<li>打开登录页面，需要几秒</li>\n<li>输入正确的账号和密码后，登录成功跳转到新页面，不超过 5 秒</li>\n</ul>\n</li>\n<li>安全性测试(Security Test)<ul>\n<li>登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)</li>\n<li>账号和密码是否通过加密的方式，发送给 Web 服务器</li>\n<li>账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证</li>\n<li>账号和密码的输入框，应该屏蔽 SQL 注入攻击</li>\n<li>账号和密码的的输入框，应该禁止输入脚本（防止 XSS 攻击）</li>\n<li>错误登录的次数限制（防止暴力破解）</li>\n<li>考虑是否支持多用户在同一机器上登录；</li>\n<li>考虑一用户在多台机器上登录</li>\n</ul>\n</li>\n<li>可用性测试(Usability Test)<ul>\n<li>是否可以全用键盘操作，是否有快捷键</li>\n<li>输入账号，密码后按回车，是否可以登录</li>\n<li>输入框是否可以以 Tab 键切换</li>\n</ul>\n</li>\n<li>兼容性测试（Compatibility Test）<ul>\n<li>主流的浏览器下能否显示正常已经功能正常（IE6~11, FireFox, Chrome, Safari 等 ）</li>\n<li>不同的平台是否能正常工作，比如 Windows, Mac</li>\n<li>移动设备上是否正常工作，比如 iPhone, Android</li>\n<li>不同的分辨率</li>\n</ul>\n</li>\n</ul>\n"},{"title":"正则-入门","urlname":"zphhiu","date":"2022-03-01T08:35:42.000Z","abbrlink":405347457,"_content":"\n","source":"_posts/语雀/zphhiu.md","raw":"---\ntitle: 正则-入门\nurlname: zphhiu\ndate: '2022-03-01 16:35:42 +0800'\ntags: []\ncategories: []\nabbrlink: 405347457\n---\n\n","slug":"语雀/zphhiu","published":1,"updated":"2022-03-03T11:26:07.601Z","_id":"cl0awjjpq001f081b1iwd9cpm","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"fluid_static_prefix":{"internal_js":"/js","internal_css":"/css","internal_img":"/img","anchor":"https://cdn.staticfile.org/anchor-js/4.2.0/","font_awesome":"https://cdn.staticfile.org/font-awesome/5.10.0/","github_markdown":"https://cdn.staticfile.org/github-markdown-css/3.0.1/","jquery":"https://cdn.staticfile.org/jquery/3.4.1/","bootstrap":"https://cdn.staticfile.org/twitter-bootstrap/4.3.1/","mdbootstrap":"https://cdn.staticfile.org/mdbootstrap/4.8.7/","popper":"/lib/popper","prettify":"/lib/prettify","prettify_theme":"/lib/prettify","tocbot":"https://cdn.staticfile.org/tocbot/4.8.1/","typed":"https://cdn.staticfile.org/typed.js/2.0.9/","fancybox":"https://cdn.staticfile.org/fancybox/3.5.7/","smooth_scroll":"https://cdn.staticfile.org/smoothscroll/1.4.10/","mathjax":"https://cdn.staticfile.org/mathjax/2.7.6/","katex":"https://cdn.staticfile.org/KaTeX/0.11.1/","backstretch":"https://cdn.staticfile.org/danielgindi-jquery-backstretch/2.1.15/"},"fluid_config":{"avatar":"/static/images/avatar.jpg","favicon":"/favicon_1.ico","apple_touch_icon":"/favicon_1.ico","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"line_number":false,"theme":"tranquil-heart"},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"},"monitortext":{"enable":true,"text":"你不爱我了QAQ"},"snow":{"enable":true,"color":"rgba(255, 255, 255, 0.7)"}},"color":{"body_bg_color":"#c8ebdf","navbar_bg_color":"#bbe6d6","navbar_text_color":"#3c4858","text_color":"#3c4858","link_color":"#3c4858","link_hover_color":"#27ae60","board_color":"#e4f5ef","toc_title_p_color":"#3c4858","tocbot_link_color":"#3c4858","tocbot_link_active_color":"#27ae60","tocbot_link_shadow":"0.1em 0.1em 0.2em #ffffff","tocbot_active_link_shadow":"0.1em 0.1em 0.2em #ffbcbc","sidebar_text_color":"#3c4858","sidebar_background_color":"rgba(228,245,239, 0.82)","sidebar_button_color":"#99a9bf","sidebar_button_shift_color":"#ffffff","sidebar_button_shift_shadow":"0.1rem 0.1rem 0.5rem #3e3e3e","sidebar_about_link_color":"#3c4858","sidebar_about_link_hover_color":"#27ae60","sidebar_avatar_border":"5px solid #ffffff","sidebar_subtitle_color":"#999999","sidebar_friend_title":"#ffffff","sidebar_friend_title_background":"#27ae60","sidebar_friend_link":"#3c4858","sidebar_friend_link_hover":"#27ae60","sidebar_friend_li_border":"1px dashed #bdbdbd","sidebar_friend_li_hover":"#ebf8f3","sidebar_friend_ico":"#bfbfbf","footer_color":"#ffffff","footer_shadow":"0.1rem 0.1rem 0.5rem white","footer_a_color":"#ffffff","footer_a_hover_color":"#27ae60","footer_theme_a_color":"#27ae60","footer_theme_a_shadow":"0.1rem 0.1rem 0.2rem #fe4365","footer_icon_color":"#fc9d9a","footer_icon_shadow":"0.1rem 0.1rem 0.5rem #ffffff","scrollbar_color":"#e4f5ef","scrollbar_thumb_color":"#42b983"},"web_analytics":{"enable":true,"baidu":null,"tencent":null,"woyaola":null,"cnzz":1258664352,"google":"UA-150991779-1"},"fancybox":{"enable":true},"smooth_scroll":{"enable":false},"daovoice":{"enable":false,"appid":""},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"iconfont":"//at.alicdn.com/t/font_3168026_86zslxhi3dt.css","navbar":{"blog_title":null,"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","标签":"/tags/","友链":"/links/","关于":"/about/"}},"search":{"enable":true,"path":"/local-search.xml","generatePath":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"full_banner":true,"full_bg_img":true,"banner_scroll":false,"random_bg":{"enable":false,"time":20,"fade":2,"type":"online","ctype":"auto","num":3,"url":{"1":"http://img.xjh.me/desktop/bg/acg/64082849_p0.jpg","2":"http://img.xjh.me/desktop/bg/acg/63946708_p0.jpg","3":"http://img.xjh.me/desktop/bg/acg/59756207_p0.jpg","4":"http://img.xjh.me/desktop/bg/acg/63374320_p0.jpg","5":"http://img.xjh.me/desktop/bg/nature/59190594_p0.jpg","6":"http://img.xjh.me/desktop/bg/acg/63093148_p0.jpg","7":"http://img.xjh.me/desktop/bg/acg/62494753_p0.jpg","8":"http://img.xjh.me/desktop/bg/acg/61749296_p0.jpg"}},"footer":{"show_copyright":true,"date":{"enable":true,"create_date":"12/12/2021 07:21:00","text":"本站已稳定运行"},"site_pv":{"enable":false,"text":"被瞅了%d次","offset":null},"site_uv":{"enable":false,"text":"被%d人看爆","offset":null},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"},"hitokoto":true},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/static/images/wallhaven-8opx8k.jpg",".alicdn.com/kf/U8720aea1269b407990ade7c258ae0d8b8.jpg | sakura1:https://ae01.alicdn.com/kf/U05a569955d8e4cfbae97f48a38290440e.jpg | sakura2":"https://ae01.alicdn.com/kf/Uf0c80a27e7b94925b41f42d958f74ccbn.jpg","banner_img_height":100,"slogan":{"enable":true,"text":null},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"wordcount":true,"category":true,"tag":true},"post_img":{"enable":false,"default":"/img/default.png","random":true,"ctype":null}},"post":{"banner_img":null,"banner_img_height":70,"date_format":"YYYY-MM-DD","pageview":false,"toc":{"enable":true},"copyright":{"enable":true,"content":"本站文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" rel=\"nofollow noopener\">CC BY-NC-SA 3.0 CN</a> 协议进行许可"},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"waline","autojump":true},"math":{"enable":true,"specific":false,"engine":"mathjax"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","pageSize":10},"waline":{"serverurl":"https://blog-waline-m0eiqctad-alwayscn.vercel.app/","notify":true,"verify":true,"placeholder":"说点什么吧quq","avatar":"mp","avatarcdn":"https://gravatar.loli.net/avatar/","pageSize":10},"changyan":{"appid":"","conf":"","notify":false,"libopen":true,"cyEmoji":true,"cyWallsplugin":true,"cyReping":true,"cyReward":true,"cyQing":true,"cyHotusers":true,"cyHotnews":true,"cyHotnewswall":true,"cyPk":"","cyPoll":true,"cyBarrage":true,"cyTvbarrage":true},"livere":{"uid":""},"archive":{"banner_img":null,"banner_img_height":80},"category":{"banner_img":null,"banner_img_height":80},"tag":{"banner_img":null,"banner_img_height":80,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"enable":true,"md_path":"../../source/about/about.md","banner_img":null,"banner_img_height":80,"comments":true,"name":"张小剩","introduce":"One two one ...","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"page404":{"banner_img":null,"banner_img_height":80,"subtitle":"Page not found"},"links":{"enable":true,"banner_img":null,"banner_img_height":80,"comments":true,"items":{"站点聚合平台":["https://sites.link/","因为热爱， 所以相聚"],"LonelyGod":["https://hin.cool/"],"Blue的博客":["http://coderblue.cn/","一花一世界，一叶一浮生"],"杨文卓的博客":["https://www.yangwenzhuo.top/","这家伙很懒，能饮一杯无？"],"lavender":["https://www.lavenderdh.cn/","一个努力学习的菜鸟程序员"],"诗酒乘年华":["https://shawnzeng.com/","一个爱鼓捣前端的产品汪"],"白米饭Ooo":["https://www.baimifan.com.cn/"],"小丁的个人博客":["https://tding.top/","世间所有的相遇，都是久别重逢"],"MoeDev的悄悄哈":["https://www.moedev.net/","冲国DD"],"折影轻梦":["https://nexmoe.com/","Entorevolution"],"孤影墨香":["https://www.gymxbl.com/","尽管我们手中空无一物，却也能给某人带去笑容"],"辣椒の酱":["https://removeif.github.io/","后端开发，技术分享"],"爱即是诗":["https://www.aigisss.com/","AI&GIS"],"泽泽社":["https://zezeshe.com/","泽泽社长的个人博客"],"小枫叶":["https://www.smallmaple.com/","欢迎来到小世界"],"洛尘曦":["https://www.sgyzyun.club/","一个手无缚机（手机）之力的书生小站~"],"ギリ猫":["https://ineko.cc/","DO WHAT YOU WANT."],"知雨":["https://coor.top/","桃之夭夭，灼灼其华"],"dmcimi":["https://blog.dmcimi.top/","一个奇妙记录着生活的人"],"m0re":["https://zxcv0221.github.io/","一个学web的懒狗！"],"Cyris":["https://cyris.moe/","花如解笑还多事，石不能言最可人"]}},"sidebar":{"enable":true,"name":null,"introduce":"One two one ... <script type='text/javascript'>console.log('博主认证: https://bbs.liyuans.com')</script>","icons":{"fab fa-github":"https://github.com/alwayscn","fab fa-twitter":"https://www.yuque.com/extime/blog","fab fa-blog":"https://www.cnblogs.com/wehome","fas fa-envelope":"mailto:zhangxy.cn@gmail.com"}},"friends":{"LeanCloud":"https://console.leancloud.app/","Vercel":"https://vercel.com/","一言":"https://hitokoto.cn/","打字游戏":"https://zty.pe/","在线涂鸦":"https://flipanim.com/","Gogoame (午後雨)":"http://gogoame.sumbioun.com/","减压滑碟":"https://hin.cool/c/dd.html","元素周期":"https://www.jq22.com/yanshi4710"}},"melody":{"menu":{"主页":"/","归档":"/archives/","分类":"/categories/","学习笔记":"/tags/笔记/","诗文随笔":"/tags/随笔/","关于":"/about/"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","code_word_wrap":true,"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"/img/head.jpg","top_img":"/img/bg.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":false},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2015,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"links_title":"友情链接","links":{"xiaopc":"https://xiaopc.org/","近泽jrotty":"https://qqdie.com/","吟梦的梦笔记":"https://kirainmoe.com/","DIYgod":"https://diygod.me/","蠢汤圆":"https://tyzual.com/","茶姐姐":"https://tea9.xyz","千灵夙赋":"https://qianling.pw/","折影轻梦":"https://nexmoe.com/","诗酒乘年华":"https://shawnzeng.com/","猎风":"https://www.chnliefeng.ink/","蠢Lan":"https://www.xx8.uk/","咸鱼滩音乐团队":"https://www.xytsing.com/","王煜博客":"https://blog.wixy.cn/","s7smile":"http://www.s7smile.com/","Brian’s Blog":"https://blog.brianhe.me/","月宅酱":"https://ikmoe.com/","空樱酱":"https://kotori.love/","萌月(打不开)":"http://www.moeyue.com/","立华(打不开)":"https://freedom.moe/","猫行天下(打不开)":"http://www.aidcat.com/"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ckz8fkvav0001zc1bdd836v20","category_id":"ckz8fkvb10005zc1b2hsndoqi","_id":"ckz8fkvb7000fzc1b6o63dfxk"},{"post_id":"ckz8fkvay0002zc1bhoh48stm","category_id":"ckz8fkvb40009zc1bdowg6q1m","_id":"ckz8fkvba000kzc1b7qxr6r76"},{"post_id":"ckz8fkvb10004zc1b4dj014kc","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvbd000szc1b58et0q6l"},{"post_id":"ckz8fkvb20006zc1bhjxi42rb","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvbg000yzc1b5utx7qld"},{"post_id":"ckz8fkvb30007zc1bcptm29lv","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvbk0013zc1b941q1aq2"},{"post_id":"ckz8fkvb5000azc1b4cipbpq6","category_id":"ckz8fkvbe000vzc1b9pug6d5e","_id":"ckz8fkvbn001azc1b9abuefyr"},{"post_id":"ckz8fkvb6000bzc1b3ocn395i","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvbr001gzc1b15tlay2x"},{"post_id":"ckz8fkvbg000zzc1b74gafsym","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc2002czc1bg26ggghk"},{"post_id":"ckz8fkvbg000zzc1b74gafsym","category_id":"ckz8fkvc10025zc1b4mwy3dqh","_id":"ckz8fkvc2002ezc1b35p1d4w3"},{"post_id":"ckz8fkvbh0010zc1be9xe4y1h","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc3002hzc1bfr37fddu"},{"post_id":"ckz8fkvbh0010zc1be9xe4y1h","category_id":"ckz8fkvc10025zc1b4mwy3dqh","_id":"ckz8fkvc3002kzc1b32nqd6tx"},{"post_id":"ckz8fkvbl0014zc1beyjq3ri4","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc3002mzc1b5d3lbxzl"},{"post_id":"ckz8fkvbl0014zc1beyjq3ri4","category_id":"ckz8fkvc2002bzc1b0s4n5qfz","_id":"ckz8fkvc4002ozc1b067f33n4"},{"post_id":"ckz8fkvbm0016zc1b2wyg8xlo","category_id":"ckz8fkvb7000dzc1b62a3280m","_id":"ckz8fkvc4002szc1b6ywq3vsf"},{"post_id":"ckz8fkvbm0016zc1b2wyg8xlo","category_id":"ckz8fkvc2002gzc1b9aw48uvh","_id":"ckz8fkvc5002uzc1bc0lm2mna"},{"post_id":"ckz8fkvb7000ezc1ba9tm9i4m","category_id":"ckz8fkvbm0017zc1beh5ofibm","_id":"ckz8fkvc60030zc1b7lmfg4rh"},{"post_id":"ckz8fkvb7000ezc1ba9tm9i4m","category_id":"ckz8fkvc4002qzc1baapz1c5g","_id":"ckz8fkvc60033zc1b55y3866s"},{"post_id":"ckz8fkvb7000gzc1b1jb0hr0r","category_id":"ckz8fkvbp001ezc1baw9xh7ci","_id":"ckz8fkvc8003azc1bh4ibfh45"},{"post_id":"ckz8fkvb7000gzc1b1jb0hr0r","category_id":"ckz8fkvc60034zc1bh2bq16u1","_id":"ckz8fkvc8003czc1b71oybkh2"},{"post_id":"ckz8fkvb8000jzc1bbissh739","category_id":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvca003nzc1b3va9aqs9"},{"post_id":"ckz8fkvb8000jzc1bbissh739","category_id":"ckz8fkvc8003ezc1b6gp5egle","_id":"ckz8fkvca003pzc1b5op44viu"},{"post_id":"ckz8fkvbb000mzc1b4mu33cwx","category_id":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvcc0040zc1b94fi35qc"},{"post_id":"ckz8fkvbb000mzc1b4mu33cwx","category_id":"ckz8fkvc8003ezc1b6gp5egle","_id":"ckz8fkvcc0041zc1b16hmb4ue"},{"post_id":"ckz8fkvbc000qzc1bb49b9bnc","category_id":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvce004azc1b2rpk05io"},{"post_id":"ckz8fkvbc000qzc1bb49b9bnc","category_id":"ckz8fkvc8003ezc1b6gp5egle","_id":"ckz8fkvce004bzc1b0myr0x7s"},{"post_id":"ckz8fkvbe000tzc1b7b835qrk","category_id":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvcg004lzc1b2ljq8zkx"},{"post_id":"ckz8fkvbe000tzc1b7b835qrk","category_id":"ckz8fkvce004czc1b5qvz5e6a","_id":"ckz8fkvch004mzc1b3vfodfiz"},{"post_id":"ckz8fkvbf000wzc1b7xj32x5o","category_id":"ckz8fkvbu001kzc1b6szb3iyl","_id":"ckz8fkvch004pzc1bhuwq5i05"},{"post_id":"ckz8fkvbf000wzc1b7xj32x5o","category_id":"ckz8fkvcf004fzc1b02lv6gmz","_id":"ckz8fkvch004rzc1b6unn4o88"},{"post_id":"ckz8fkvbn001bzc1bgujf08m8","category_id":"ckz8fkvc3002lzc1bafpva6qf","_id":"ckz8fkvci004wzc1bhh23c67j"},{"post_id":"ckz8fkvbn001bzc1bgujf08m8","category_id":"ckz8fkvcg004jzc1be04y2odu","_id":"ckz8fkvcj004xzc1bcdhuda38"},{"post_id":"ckz8fkvbo001dzc1beifd4r3d","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvcs005uzc1b9db8da5o"},{"post_id":"ckz8fkvbo001dzc1beifd4r3d","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvct005xzc1b0b746g5c"},{"post_id":"ckz8fkvbo001dzc1beifd4r3d","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvct0060zc1b0t8s6qkm"},{"post_id":"ckz8fkvbr001hzc1b2kvgb7l5","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvcu0062zc1bemnc2lkj"},{"post_id":"ckz8fkvbr001hzc1b2kvgb7l5","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvcu0064zc1b789l90n0"},{"post_id":"ckz8fkvbr001hzc1b2kvgb7l5","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvcv0066zc1b6epv151n"},{"post_id":"ckz8fkvbt001jzc1be7m39qkv","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvcv0069zc1b8xaw3glo"},{"post_id":"ckz8fkvbt001jzc1be7m39qkv","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvcx006czc1b6g0hdcqj"},{"post_id":"ckz8fkvbt001jzc1be7m39qkv","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvcy006fzc1bg74801tt"},{"post_id":"ckz8fkvbu001mzc1bae377djq","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvcy006hzc1b8rkv058b"},{"post_id":"ckz8fkvbu001mzc1bae377djq","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvcz006kzc1bf9lpbn5c"},{"post_id":"ckz8fkvbu001mzc1bae377djq","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvcz006mzc1b66raakr2"},{"post_id":"ckz8fkvbv001ozc1b6zuj4fc2","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvd0006qzc1bfgde15b3"},{"post_id":"ckz8fkvbv001ozc1b6zuj4fc2","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvd1006rzc1b2oqnb239"},{"post_id":"ckz8fkvbv001ozc1b6zuj4fc2","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvd1006tzc1b65xm5apy"},{"post_id":"ckz8fkvbw001rzc1bfi460a38","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvd1006vzc1b15vgchft"},{"post_id":"ckz8fkvbw001rzc1bfi460a38","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvd1006wzc1bhzgbas6z"},{"post_id":"ckz8fkvbw001rzc1bfi460a38","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvd2006xzc1b9fjh9p9q"},{"post_id":"ckz8fkvbx001tzc1b1cqi3p58","category_id":"ckz8fkvc5002vzc1b81xj7yu7","_id":"ckz8fkvd2006yzc1b5ppmhzzb"},{"post_id":"ckz8fkvbx001tzc1b1cqi3p58","category_id":"ckz8fkvch004ozc1b2jn3a5a8","_id":"ckz8fkvd2006zzc1b7jy7buep"},{"post_id":"ckz8fkvbx001tzc1b1cqi3p58","category_id":"ckz8fkvcp005nzc1b8nkf3qaa","_id":"ckz8fkvd20070zc1b0g304u6t"},{"post_id":"ckz8fkvby001wzc1bdjbhah7z","category_id":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd20071zc1b6o0sfczo"},{"post_id":"ckz8fkvby001wzc1bdjbhah7z","category_id":"ckz8fkvcm005ezc1bex3jbg0g","_id":"ckz8fkvd20072zc1b7w8a54xa"},{"post_id":"ckz8fkvby001wzc1bdjbhah7z","category_id":"ckz8fkvcy006izc1bejbmbd5h","_id":"ckz8fkvd20073zc1bb2dgh9q4"},{"post_id":"ckz8fkvbz001xzc1b5h6ahn7o","category_id":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd20074zc1be6ksercm"},{"post_id":"ckz8fkvbz001xzc1b5h6ahn7o","category_id":"ckz8fkvcm005ezc1bex3jbg0g","_id":"ckz8fkvd20075zc1b1qv5gwav"},{"post_id":"ckz8fkvbz001xzc1b5h6ahn7o","category_id":"ckz8fkvcy006izc1bejbmbd5h","_id":"ckz8fkvd20076zc1b6f2nb4gk"},{"post_id":"ckz8fkvbz001zzc1bhnb4ekx4","category_id":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd20077zc1bakan0hzg"},{"post_id":"ckz8fkvbz001zzc1bhnb4ekx4","category_id":"ckz8fkvcm005ezc1bex3jbg0g","_id":"ckz8fkvd20078zc1bf6dv63hb"},{"post_id":"ckz8fkvbz001zzc1bhnb4ekx4","category_id":"ckz8fkvd1006szc1b22431s3v","_id":"ckz8fkvd20079zc1b25j11rc0"},{"post_id":"ckz8fkvd4007azc1bgsic7t5y","category_id":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd9007szc1b02xrcyv1"},{"post_id":"ckz8fkvd4007azc1bgsic7t5y","category_id":"ckz8fkvd5007ezc1b1tj31fgm","_id":"ckz8fkvd9007uzc1bdslh9r9r"},{"post_id":"ckz8fkvd4007azc1bgsic7t5y","category_id":"ckz8fkvd8007lzc1b9l6o7dp7","_id":"ckz8fkvd9007vzc1bhbyn459u"},{"post_id":"ckz8fkvd4007bzc1b4esb8iml","category_id":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd9007wzc1b1q5iaelt"},{"post_id":"ckz8fkvd4007bzc1b4esb8iml","category_id":"ckz8fkvd5007ezc1b1tj31fgm","_id":"ckz8fkvd9007xzc1b7z92ceio"},{"post_id":"ckz8fkvd4007bzc1b4esb8iml","category_id":"ckz8fkvd8007lzc1b9l6o7dp7","_id":"ckz8fkvd9007yzc1b8lgv2wk7"},{"post_id":"ckz8fkvd5007dzc1bbu9ya2rg","category_id":"ckz8fkvcb003yzc1b1fhn9igl","_id":"ckz8fkvd9007zzc1beiko3x9u"},{"post_id":"ckz8fkvd5007dzc1bbu9ya2rg","category_id":"ckz8fkvd5007ezc1b1tj31fgm","_id":"ckz8fkvd90080zc1b5j7s2ifx"},{"post_id":"ckz8fkvd5007dzc1bbu9ya2rg","category_id":"ckz8fkvd8007lzc1b9l6o7dp7","_id":"ckz8fkvd90081zc1b3a2phw36"}],"PostTag":[{"post_id":"ckz8fkvav0001zc1bdd836v20","tag_id":"ckz8fkvb00003zc1b5xwb5q4r","_id":"ckz8fkvba000lzc1bcs6i9qn5"},{"post_id":"ckz8fkvav0001zc1bdd836v20","tag_id":"ckz8fkvb40008zc1b8aqa7i0s","_id":"ckz8fkvbc000nzc1b438ieyjl"},{"post_id":"ckz8fkvav0001zc1bdd836v20","tag_id":"ckz8fkvb6000czc1b54iu9hle","_id":"ckz8fkvbd000rzc1bgfpugge3"},{"post_id":"ckz8fkvay0002zc1bhoh48stm","tag_id":"ckz8fkvb8000hzc1b2buzf161","_id":"ckz8fkvbe000uzc1bf4i87l8z"},{"post_id":"ckz8fkvb10004zc1b4dj014kc","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvbl0015zc1bcsa8fk0p"},{"post_id":"ckz8fkvb10004zc1b4dj014kc","tag_id":"ckz8fkvbf000xzc1bb81m3255","_id":"ckz8fkvbm0018zc1b3bimcuoc"},{"post_id":"ckz8fkvb20006zc1bhjxi42rb","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvbo001czc1baywg7kgi"},{"post_id":"ckz8fkvb30007zc1bcptm29lv","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvbt001izc1bbhwd3non"},{"post_id":"ckz8fkvb5000azc1b4cipbpq6","tag_id":"ckz8fkvbq001fzc1baawm7nnx","_id":"ckz8fkvbv001nzc1b0k8tgydw"},{"post_id":"ckz8fkvb6000bzc1b3ocn395i","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvbx001szc1b3z37f4xy"},{"post_id":"ckz8fkvb7000ezc1ba9tm9i4m","tag_id":"ckz8fkvbw001pzc1beiyn2t35","_id":"ckz8fkvc00021zc1b448zhihp"},{"post_id":"ckz8fkvb7000ezc1ba9tm9i4m","tag_id":"ckz8fkvby001vzc1b88x16s4a","_id":"ckz8fkvc10023zc1bdnmn7frt"},{"post_id":"ckz8fkvb7000gzc1b1jb0hr0r","tag_id":"ckz8fkvc00020zc1b9umw77wi","_id":"ckz8fkvc10027zc1b3h7f5rbq"},{"post_id":"ckz8fkvb7000gzc1b1jb0hr0r","tag_id":"ckz8fkvc10024zc1baazf6hhw","_id":"ckz8fkvc20029zc1bf9bn75km"},{"post_id":"ckz8fkvb8000jzc1bbissh739","tag_id":"ckz8fkvc10026zc1b124i3lz5","_id":"ckz8fkvc2002fzc1bed1a0e50"},{"post_id":"ckz8fkvb8000jzc1bbissh739","tag_id":"ckz8fkvc2002azc1bd4fr40ce","_id":"ckz8fkvc3002izc1be0t24m25"},{"post_id":"ckz8fkvbb000mzc1b4mu33cwx","tag_id":"ckz8fkvc10026zc1b124i3lz5","_id":"ckz8fkvc4002pzc1bbdht8m3x"},{"post_id":"ckz8fkvbb000mzc1b4mu33cwx","tag_id":"ckz8fkvc3002jzc1b8x637b3d","_id":"ckz8fkvc4002rzc1b5hh49x05"},{"post_id":"ckz8fkvbc000qzc1bb49b9bnc","tag_id":"ckz8fkvc10026zc1b124i3lz5","_id":"ckz8fkvc5002xzc1b566l3jpj"},{"post_id":"ckz8fkvbc000qzc1bb49b9bnc","tag_id":"ckz8fkvc5002tzc1b8xu1f26p","_id":"ckz8fkvc6002zzc1barh138xh"},{"post_id":"ckz8fkvbe000tzc1b7b835qrk","tag_id":"ckz8fkvc5002wzc1bh28n9ggg","_id":"ckz8fkvc60032zc1b4uu699ib"},{"post_id":"ckz8fkvbf000wzc1b7xj32x5o","tag_id":"ckz8fkvc60031zc1be9k2bmbb","_id":"ckz8fkvc70036zc1b7pplaa9u"},{"post_id":"ckz8fkvbg000zzc1b74gafsym","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvc8003dzc1bcpml1wk2"},{"post_id":"ckz8fkvbg000zzc1b74gafsym","tag_id":"ckz8fkvc70035zc1bfwd3c195","_id":"ckz8fkvc8003fzc1b3f16evij"},{"post_id":"ckz8fkvbg000zzc1b74gafsym","tag_id":"ckz8fkvc70038zc1b02wi1a6m","_id":"ckz8fkvc9003hzc1bcprn1knn"},{"post_id":"ckz8fkvbh0010zc1be9xe4y1h","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvc9003jzc1bh4qf7w4e"},{"post_id":"ckz8fkvbh0010zc1be9xe4y1h","tag_id":"ckz8fkvc70035zc1bfwd3c195","_id":"ckz8fkvc9003lzc1b8agxd1h0"},{"post_id":"ckz8fkvbl0014zc1beyjq3ri4","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvca003rzc1bhjd8aft1"},{"post_id":"ckz8fkvbl0014zc1beyjq3ri4","tag_id":"ckz8fkvc8003gzc1b4347b6e9","_id":"ckz8fkvca003szc1b4mv503p0"},{"post_id":"ckz8fkvbl0014zc1beyjq3ri4","tag_id":"ckz8fkvc9003kzc1bfoy22x7j","_id":"ckz8fkvcb003vzc1bhhsg65h0"},{"post_id":"ckz8fkvbm0016zc1b2wyg8xlo","tag_id":"ckz8fkvbc000pzc1b1kei96f1","_id":"ckz8fkvcb003wzc1be24dc2ma"},{"post_id":"ckz8fkvbm0016zc1b2wyg8xlo","tag_id":"ckz8fkvca003ozc1b9794dcso","_id":"ckz8fkvcc003zzc1bf80x6uln"},{"post_id":"ckz8fkvbn001bzc1bgujf08m8","tag_id":"ckz8fkvca003tzc1b865j9t01","_id":"ckz8fkvcd0044zc1bgfgb0vl9"},{"post_id":"ckz8fkvbn001bzc1bgujf08m8","tag_id":"ckz8fkvcb003xzc1ba56vhn6l","_id":"ckz8fkvcd0045zc1b7l9m9tfp"},{"post_id":"ckz8fkvbo001dzc1beifd4r3d","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvcf004ezc1bcqsk6f6s"},{"post_id":"ckz8fkvbo001dzc1beifd4r3d","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvcf004gzc1b4hia8vmg"},{"post_id":"ckz8fkvbo001dzc1beifd4r3d","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvcg004izc1bbbgl23p3"},{"post_id":"ckz8fkvbr001hzc1b2kvgb7l5","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvch004qzc1b7cjy0qcu"},{"post_id":"ckz8fkvbr001hzc1b2kvgb7l5","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvch004szc1b0x8rdpkq"},{"post_id":"ckz8fkvbr001hzc1b2kvgb7l5","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvci004vzc1badq2gpep"},{"post_id":"ckz8fkvbt001jzc1be7m39qkv","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvck0052zc1b08dk028c"},{"post_id":"ckz8fkvbt001jzc1be7m39qkv","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvck0053zc1b8gmt1sxv"},{"post_id":"ckz8fkvbt001jzc1be7m39qkv","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvcl0056zc1bast5c93r"},{"post_id":"ckz8fkvbu001mzc1bae377djq","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvcm005bzc1b4djb83vx"},{"post_id":"ckz8fkvbu001mzc1bae377djq","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvcm005czc1bdzrf6vja"},{"post_id":"ckz8fkvbu001mzc1bae377djq","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvcn005fzc1bauiy5sd4"},{"post_id":"ckz8fkvbv001ozc1b6zuj4fc2","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvco005kzc1b1p167itu"},{"post_id":"ckz8fkvbv001ozc1b6zuj4fc2","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvco005lzc1b9jtzhaig"},{"post_id":"ckz8fkvbv001ozc1b6zuj4fc2","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvcp005ozc1b79p465l2"},{"post_id":"ckz8fkvbw001rzc1bfi460a38","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvcr005szc1b6snm1uix"},{"post_id":"ckz8fkvbw001rzc1bfi460a38","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvcs005vzc1b4rw95t5i"},{"post_id":"ckz8fkvbw001rzc1bfi460a38","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvct005yzc1b447r5qui"},{"post_id":"ckz8fkvbx001tzc1b1cqi3p58","tag_id":"ckz8fkvcc0042zc1bbu1s106n","_id":"ckz8fkvcv0067zc1b85zo3ja2"},{"post_id":"ckz8fkvbx001tzc1b1cqi3p58","tag_id":"ckz8fkvcd0047zc1bcamk6vh7","_id":"ckz8fkvcv006azc1b5bwc4mgt"},{"post_id":"ckz8fkvbx001tzc1b1cqi3p58","tag_id":"ckz8fkvce0049zc1bc0pbc8xj","_id":"ckz8fkvcx006dzc1bb9o09yq6"},{"post_id":"ckz8fkvby001wzc1bdjbhah7z","tag_id":"ckz8fkvcu0065zc1bcckq9y13","_id":"ckz8fkvcz006jzc1bbcxh7hap"},{"post_id":"ckz8fkvby001wzc1bdjbhah7z","tag_id":"ckz8fkvcv006bzc1bek19hah9","_id":"ckz8fkvcz006lzc1b1rdd733d"},{"post_id":"ckz8fkvbz001xzc1b5h6ahn7o","tag_id":"ckz8fkvcy006gzc1bc6gtdo7y","_id":"ckz8fkvd0006pzc1b974296gz"},{"post_id":"ckz8fkvbz001zzc1bhnb4ekx4","tag_id":"ckz8fkvcz006nzc1bcxku29k7","_id":"ckz8fkvd1006uzc1b37izgmio"},{"post_id":"ckz8fkvd4007azc1bgsic7t5y","tag_id":"ckz8fkvd5007czc1bek9g9nth","_id":"ckz8fkvd7007hzc1b0fx7aggg"},{"post_id":"ckz8fkvd4007bzc1b4esb8iml","tag_id":"ckz8fkvd5007czc1bek9g9nth","_id":"ckz8fkvd8007ozc1baez126mu"},{"post_id":"ckz8fkvd4007bzc1b4esb8iml","tag_id":"ckz8fkvd7007izc1b88092mwc","_id":"ckz8fkvd9007pzc1b3oefelp8"},{"post_id":"ckz8fkvd4007bzc1b4esb8iml","tag_id":"ckz8fkvd8007kzc1b8yt36lj5","_id":"ckz8fkvd9007rzc1bauadd430"},{"post_id":"ckz8fkvd5007dzc1bbu9ya2rg","tag_id":"ckz8fkvd5007czc1bek9g9nth","_id":"ckz8fkvd9007tzc1b8yojc957"}],"Tag":[{"name":"github","_id":"ckz8fkvb00003zc1b5xwb5q4r"},{"name":"hexo","_id":"ckz8fkvb40008zc1b8aqa7i0s"},{"name":"github 博客","_id":"ckz8fkvb6000czc1b54iu9hle"},{"name":"随笔","_id":"ckz8fkvb8000hzc1b2buzf161"},{"name":"软件测试","_id":"ckz8fkvbc000pzc1b1kei96f1"},{"name":"测试用例","_id":"ckz8fkvbf000xzc1bb81m3255"},{"name":"头脑风暴","_id":"ckz8fkvbq001fzc1baawm7nnx"},{"name":"工具","_id":"ckz8fkvbw001pzc1beiyn2t35"},{"name":"Charles","_id":"ckz8fkvby001vzc1b88x16s4a"},{"name":"docker","_id":"ckz8fkvc00020zc1b9umw77wi"},{"name":"容器","_id":"ckz8fkvc10024zc1baazf6hhw"},{"name":"linux","_id":"ckz8fkvc10026zc1b124i3lz5"},{"name":"问题总结","_id":"ckz8fkvc2002azc1bd4fr40ce"},{"name":"linux 命令","_id":"ckz8fkvc3002jzc1b8x637b3d"},{"name":"环境搭建","_id":"ckz8fkvc5002tzc1b8xu1f26p"},{"name":"windows 问题总结","_id":"ckz8fkvc5002wzc1bh28n9ggg"},{"name":"MacOS 问题总结","_id":"ckz8fkvc60031zc1be9k2bmbb"},{"name":"性能测试","_id":"ckz8fkvc70035zc1bfwd3c195"},{"name":"locust","_id":"ckz8fkvc70038zc1b02wi1a6m"},{"name":"移动端测试","_id":"ckz8fkvc8003gzc1b4347b6e9"},{"name":"adb","_id":"ckz8fkvc9003kzc1bfoy22x7j"},{"name":"自动化测试，Robot Framework","_id":"ckz8fkvca003ozc1b9794dcso"},{"name":"软考","_id":"ckz8fkvca003tzc1b865j9t01"},{"name":"信息系统项目管理","_id":"ckz8fkvcb003xzc1ba56vhn6l"},{"name":"css","_id":"ckz8fkvcc0042zc1bbu1s106n"},{"name":"css 布局","_id":"ckz8fkvcd0047zc1bcamk6vh7"},{"name":"web","_id":"ckz8fkvce0049zc1bc0pbc8xj"},{"name":"python 零基础","_id":"ckz8fkvcu0065zc1bcckq9y13"},{"name":"极客时间","_id":"ckz8fkvcv006bzc1bek19hah9"},{"name":"python","_id":"ckz8fkvcy006gzc1bc6gtdo7y"},{"name":"shell","_id":"ckz8fkvcz006nzc1bcxku29k7"},{"name":"mysql","_id":"ckz8fkvd5007czc1bek9g9nth"},{"name":"leetcode","_id":"ckz8fkvd7007izc1b88092mwc"},{"name":"牛客","_id":"ckz8fkvd8007kzc1b8yt36lj5"}]}}